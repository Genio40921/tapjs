/* IMPORTANT
 * This snapshot file is auto-generated, but designed for humans.
 * It should be checked into source control and tracked carefully.
 * Re-generate by setting TAP_SNAPSHOT=1 and running tests.
 * Make sure to inspect the output below.  Do not ignore changes!
 */
'use strict'
exports[`test/parser-stringify.js TAP bail-escaped.tap bail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "bailout",
    "hash # slash \\\\ noesc hash # noesc slash \\\\ done",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": "hash # slash \\\\ noesc hash # noesc slash \\\\ done",
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": false,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": null,
        "skipAll": false,
        "skipReason": "",
        "start": null,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP bail-escaped.tap bail > stringified 1`] = `
TAP version 13
ok 1
Bail out! hash \\# slash \\\\ noesc hash \\# noesc slash \\\\ done

`

exports[`test/parser-stringify.js TAP bail-escaped.tap bail > stringified flat 1`] = `
TAP version 13
ok 1
Bail out! hash \\# slash \\\\ noesc hash \\# noesc slash \\\\ done

`

exports[`test/parser-stringify.js TAP bail-escaped.tap default settings > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "bailout",
    "hash # slash \\\\ noesc hash # noesc slash \\\\ done",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": "hash # slash \\\\ noesc hash # noesc slash \\\\ done",
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": false,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": null,
        "skipAll": false,
        "skipReason": "",
        "start": null,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP bail-escaped.tap default settings > stringified 1`] = `
TAP version 13
ok 1
Bail out! hash \\# slash \\\\ noesc hash \\# noesc slash \\\\ done

`

exports[`test/parser-stringify.js TAP bail-escaped.tap default settings > stringified flat 1`] = `
TAP version 13
ok 1
Bail out! hash \\# slash \\\\ noesc hash \\# noesc slash \\\\ done

`

exports[`test/parser-stringify.js TAP bail-escaped.tap strict > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "bailout",
    "hash # slash \\\\ noesc hash # noesc slash \\\\ done",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": "hash # slash \\\\ noesc hash # noesc slash \\\\ done",
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": false,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": null,
        "skipAll": false,
        "skipReason": "",
        "start": null,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP bail-escaped.tap strict > stringified 1`] = `
TAP version 13
ok 1
Bail out! hash \\# slash \\\\ noesc hash \\# noesc slash \\\\ done

`

exports[`test/parser-stringify.js TAP bail-escaped.tap strict > stringified flat 1`] = `
TAP version 13
ok 1
Bail out! hash \\# slash \\\\ noesc hash \\# noesc slash \\\\ done

`

exports[`test/parser-stringify.js TAP bail-escaped.tap strictBail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "bailout",
    "hash # slash \\\\ noesc hash # noesc slash \\\\ done",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": "hash # slash \\\\ noesc hash # noesc slash \\\\ done",
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": false,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": null,
        "skipAll": false,
        "skipReason": "",
        "start": null,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP bail-escaped.tap strictBail > stringified 1`] = `
TAP version 13
ok 1
Bail out! hash \\# slash \\\\ noesc hash \\# noesc slash \\\\ done

`

exports[`test/parser-stringify.js TAP bail-escaped.tap strictBail > stringified flat 1`] = `
TAP version 13
ok 1
Bail out! hash \\# slash \\\\ noesc hash \\# noesc slash \\\\ done

`

exports[`test/parser-stringify.js TAP bailout-no-raison.tap bail > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "ok": true,
    },
  ],
  Array [
    "bailout",
    "",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": true,
      "count": 3,
      "fail": 0,
      "failures": Array [],
      "ok": false,
      "pass": 3,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP bailout-no-raison.tap bail > stringified 1`] = `
1..5
ok 1
ok 2
ok 3
Bail out!

`

exports[`test/parser-stringify.js TAP bailout-no-raison.tap bail > stringified flat 1`] = `
1..5
ok 1
ok 2
ok 3
Bail out!

`

exports[`test/parser-stringify.js TAP bailout-no-raison.tap default settings > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "ok": true,
    },
  ],
  Array [
    "bailout",
    "",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": true,
      "count": 3,
      "fail": 0,
      "failures": Array [],
      "ok": false,
      "pass": 3,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP bailout-no-raison.tap default settings > stringified 1`] = `
1..5
ok 1
ok 2
ok 3
Bail out!

`

exports[`test/parser-stringify.js TAP bailout-no-raison.tap default settings > stringified flat 1`] = `
1..5
ok 1
ok 2
ok 3
Bail out!

`

exports[`test/parser-stringify.js TAP bailout-no-raison.tap strict > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "ok": true,
    },
  ],
  Array [
    "bailout",
    "",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": true,
      "count": 3,
      "fail": 0,
      "failures": Array [],
      "ok": false,
      "pass": 3,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP bailout-no-raison.tap strict > stringified 1`] = `
1..5
ok 1
ok 2
ok 3
Bail out!

`

exports[`test/parser-stringify.js TAP bailout-no-raison.tap strict > stringified flat 1`] = `
1..5
ok 1
ok 2
ok 3
Bail out!

`

exports[`test/parser-stringify.js TAP bailout-no-raison.tap strictBail > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "ok": true,
    },
  ],
  Array [
    "bailout",
    "",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": true,
      "count": 3,
      "fail": 0,
      "failures": Array [],
      "ok": false,
      "pass": 3,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP bailout-no-raison.tap strictBail > stringified 1`] = `
1..5
ok 1
ok 2
ok 3
Bail out!

`

exports[`test/parser-stringify.js TAP bailout-no-raison.tap strictBail > stringified flat 1`] = `
1..5
ok 1
ok 2
ok 3
Bail out!

`

exports[`test/parser-stringify.js TAP bailout.tap bail > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "ok": true,
    },
  ],
  Array [
    "bailout",
    "GERONIMMMOOOOOO!!!",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": "GERONIMMMOOOOOO!!!",
      "count": 3,
      "fail": 0,
      "failures": Array [],
      "ok": false,
      "pass": 3,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP bailout.tap bail > stringified 1`] = `
1..5
ok 1
ok 2
ok 3
Bail out! GERONIMMMOOOOOO!!!

`

exports[`test/parser-stringify.js TAP bailout.tap bail > stringified flat 1`] = `
1..5
ok 1
ok 2
ok 3
Bail out! GERONIMMMOOOOOO!!!

`

exports[`test/parser-stringify.js TAP bailout.tap default settings > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "ok": true,
    },
  ],
  Array [
    "bailout",
    "GERONIMMMOOOOOO!!!",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": "GERONIMMMOOOOOO!!!",
      "count": 3,
      "fail": 0,
      "failures": Array [],
      "ok": false,
      "pass": 3,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP bailout.tap default settings > stringified 1`] = `
1..5
ok 1
ok 2
ok 3
Bail out! GERONIMMMOOOOOO!!!

`

exports[`test/parser-stringify.js TAP bailout.tap default settings > stringified flat 1`] = `
1..5
ok 1
ok 2
ok 3
Bail out! GERONIMMMOOOOOO!!!

`

exports[`test/parser-stringify.js TAP bailout.tap strict > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "ok": true,
    },
  ],
  Array [
    "bailout",
    "GERONIMMMOOOOOO!!!",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": "GERONIMMMOOOOOO!!!",
      "count": 3,
      "fail": 0,
      "failures": Array [],
      "ok": false,
      "pass": 3,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP bailout.tap strict > stringified 1`] = `
1..5
ok 1
ok 2
ok 3
Bail out! GERONIMMMOOOOOO!!!

`

exports[`test/parser-stringify.js TAP bailout.tap strict > stringified flat 1`] = `
1..5
ok 1
ok 2
ok 3
Bail out! GERONIMMMOOOOOO!!!

`

exports[`test/parser-stringify.js TAP bailout.tap strictBail > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "ok": true,
    },
  ],
  Array [
    "bailout",
    "GERONIMMMOOOOOO!!!",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": "GERONIMMMOOOOOO!!!",
      "count": 3,
      "fail": 0,
      "failures": Array [],
      "ok": false,
      "pass": 3,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP bailout.tap strictBail > stringified 1`] = `
1..5
ok 1
ok 2
ok 3
Bail out! GERONIMMMOOOOOO!!!

`

exports[`test/parser-stringify.js TAP bailout.tap strictBail > stringified flat 1`] = `
1..5
ok 1
ok 2
ok 3
Bail out! GERONIMMMOOOOOO!!!

`

exports[`test/parser-stringify.js TAP basic.tap bail > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 6,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": false,
    },
  ],
  Array [
    "bailout",
    "",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": true,
      "count": 1,
      "fail": 1,
      "failures": Array [
        Result {
          "fullname": "",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": 6,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP basic.tap bail > stringified 1`] = `
1..6
not ok
Bail out!

`

exports[`test/parser-stringify.js TAP basic.tap bail > stringified flat 1`] = `
1..6
not ok
Bail out!

`

exports[`test/parser-stringify.js TAP basic.tap default settings > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 6,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": false,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": false,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test count(5) != plan(6)\\n",
  ],
  Array [
    "comment",
    "# failed 2 of 5 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 5,
      "fail": 2,
      "failures": Array [
        Result {
          "fullname": "",
          "ok": false,
        },
        Result {
          "fullname": "",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 3,
      "plan": FinalPlan {
        "comment": "",
        "end": 6,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP basic.tap default settings > stringified 1`] = `
1..6
not ok
ok
not ok
ok
ok
# test count(5) != plan(6)
# failed 2 of 5 tests

`

exports[`test/parser-stringify.js TAP basic.tap default settings > stringified flat 1`] = `
1..6
not ok
ok
not ok
ok
ok
# test count(5) != plan(6)
# failed 2 of 5 tests

`

exports[`test/parser-stringify.js TAP basic.tap strict > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 6,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": false,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": false,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test count(5) != plan(6)\\n",
  ],
  Array [
    "comment",
    "# failed 2 of 5 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 5,
      "fail": 2,
      "failures": Array [
        Result {
          "fullname": "",
          "ok": false,
        },
        Result {
          "fullname": "",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 3,
      "plan": FinalPlan {
        "comment": "",
        "end": 6,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP basic.tap strict > stringified 1`] = `
1..6
not ok
ok
not ok
ok
ok
# test count(5) != plan(6)
# failed 2 of 5 tests

`

exports[`test/parser-stringify.js TAP basic.tap strict > stringified flat 1`] = `
1..6
not ok
ok
not ok
ok
ok
# test count(5) != plan(6)
# failed 2 of 5 tests

`

exports[`test/parser-stringify.js TAP basic.tap strictBail > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 6,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": false,
    },
  ],
  Array [
    "bailout",
    "",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": true,
      "count": 1,
      "fail": 1,
      "failures": Array [
        Result {
          "fullname": "",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": 6,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP basic.tap strictBail > stringified 1`] = `
1..6
not ok
Bail out!

`

exports[`test/parser-stringify.js TAP basic.tap strictBail > stringified flat 1`] = `
1..6
not ok
Bail out!

`

exports[`test/parser-stringify.js TAP big-last.tap bail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 6,
      "ok": true,
      "plan": Object {
        "end": 5,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "comment",
    "# failed 1 of 5 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 5,
      "fail": 1,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 6,
          "ok": true,
          "plan": Object {
            "end": 5,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
      ],
      "ok": false,
      "pass": 5,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP big-last.tap bail > stringified 1`] = `
TAP version 13
1..5
ok 1
ok 2
ok 3
ok 4
ok 6
# failed 1 of 5 tests

`

exports[`test/parser-stringify.js TAP big-last.tap bail > stringified flat 1`] = `
TAP version 13
1..5
ok 1
ok 2
ok 3
ok 4
ok 6
# failed 1 of 5 tests

`

exports[`test/parser-stringify.js TAP big-last.tap default settings > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 6,
      "ok": true,
      "plan": Object {
        "end": 5,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "comment",
    "# failed 1 of 5 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 5,
      "fail": 1,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 6,
          "ok": true,
          "plan": Object {
            "end": 5,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
      ],
      "ok": false,
      "pass": 5,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP big-last.tap default settings > stringified 1`] = `
TAP version 13
1..5
ok 1
ok 2
ok 3
ok 4
ok 6
# failed 1 of 5 tests

`

exports[`test/parser-stringify.js TAP big-last.tap default settings > stringified flat 1`] = `
TAP version 13
1..5
ok 1
ok 2
ok 3
ok 4
ok 6
# failed 1 of 5 tests

`

exports[`test/parser-stringify.js TAP big-last.tap strict > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 6,
      "ok": true,
      "plan": Object {
        "end": 5,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "comment",
    "# failed 1 of 5 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 5,
      "fail": 1,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 6,
          "ok": true,
          "plan": Object {
            "end": 5,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
      ],
      "ok": false,
      "pass": 5,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP big-last.tap strict > stringified 1`] = `
TAP version 13
1..5
ok 1
ok 2
ok 3
ok 4
ok 6
# failed 1 of 5 tests

`

exports[`test/parser-stringify.js TAP big-last.tap strict > stringified flat 1`] = `
TAP version 13
1..5
ok 1
ok 2
ok 3
ok 4
ok 6
# failed 1 of 5 tests

`

exports[`test/parser-stringify.js TAP big-last.tap strictBail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 6,
      "ok": true,
      "plan": Object {
        "end": 5,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "comment",
    "# failed 1 of 5 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 5,
      "fail": 1,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 6,
          "ok": true,
          "plan": Object {
            "end": 5,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
      ],
      "ok": false,
      "pass": 5,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP big-last.tap strictBail > stringified 1`] = `
TAP version 13
1..5
ok 1
ok 2
ok 3
ok 4
ok 6
# failed 1 of 5 tests

`

exports[`test/parser-stringify.js TAP big-last.tap strictBail > stringified flat 1`] = `
TAP version 13
1..5
ok 1
ok 2
ok 3
ok 4
ok 6
# failed 1 of 5 tests

`

exports[`test/parser-stringify.js TAP bignum.tap bail > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 2,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 136211425,
      "ok": true,
      "plan": Object {
        "end": 2,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 136211426,
      "ok": true,
      "plan": Object {
        "end": 2,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "comment",
    "# test count(4) != plan(2)\\n",
  ],
  Array [
    "comment",
    "# failed 2 of 4 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 4,
      "fail": 2,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 136211425,
          "ok": true,
          "plan": Object {
            "end": 2,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
        Result {
          "fullname": "",
          "id": 136211426,
          "ok": true,
          "plan": Object {
            "end": 2,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
      ],
      "ok": false,
      "pass": 4,
      "plan": FinalPlan {
        "comment": "",
        "end": 2,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP bignum.tap bail > stringified 1`] = `
1..2
ok 1
ok 2
ok 136211425
ok 136211426
# test count(4) != plan(2)
# failed 2 of 4 tests

`

exports[`test/parser-stringify.js TAP bignum.tap bail > stringified flat 1`] = `
1..2
ok 1
ok 2
ok 136211425
ok 136211426
# test count(4) != plan(2)
# failed 2 of 4 tests

`

exports[`test/parser-stringify.js TAP bignum.tap default settings > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 2,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 136211425,
      "ok": true,
      "plan": Object {
        "end": 2,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 136211426,
      "ok": true,
      "plan": Object {
        "end": 2,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "comment",
    "# test count(4) != plan(2)\\n",
  ],
  Array [
    "comment",
    "# failed 2 of 4 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 4,
      "fail": 2,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 136211425,
          "ok": true,
          "plan": Object {
            "end": 2,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
        Result {
          "fullname": "",
          "id": 136211426,
          "ok": true,
          "plan": Object {
            "end": 2,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
      ],
      "ok": false,
      "pass": 4,
      "plan": FinalPlan {
        "comment": "",
        "end": 2,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP bignum.tap default settings > stringified 1`] = `
1..2
ok 1
ok 2
ok 136211425
ok 136211426
# test count(4) != plan(2)
# failed 2 of 4 tests

`

exports[`test/parser-stringify.js TAP bignum.tap default settings > stringified flat 1`] = `
1..2
ok 1
ok 2
ok 136211425
ok 136211426
# test count(4) != plan(2)
# failed 2 of 4 tests

`

exports[`test/parser-stringify.js TAP bignum.tap strict > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 2,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 136211425,
      "ok": true,
      "plan": Object {
        "end": 2,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 136211426,
      "ok": true,
      "plan": Object {
        "end": 2,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "comment",
    "# test count(4) != plan(2)\\n",
  ],
  Array [
    "comment",
    "# failed 2 of 4 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 4,
      "fail": 2,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 136211425,
          "ok": true,
          "plan": Object {
            "end": 2,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
        Result {
          "fullname": "",
          "id": 136211426,
          "ok": true,
          "plan": Object {
            "end": 2,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
      ],
      "ok": false,
      "pass": 4,
      "plan": FinalPlan {
        "comment": "",
        "end": 2,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP bignum.tap strict > stringified 1`] = `
1..2
ok 1
ok 2
ok 136211425
ok 136211426
# test count(4) != plan(2)
# failed 2 of 4 tests

`

exports[`test/parser-stringify.js TAP bignum.tap strict > stringified flat 1`] = `
1..2
ok 1
ok 2
ok 136211425
ok 136211426
# test count(4) != plan(2)
# failed 2 of 4 tests

`

exports[`test/parser-stringify.js TAP bignum.tap strictBail > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 2,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 136211425,
      "ok": true,
      "plan": Object {
        "end": 2,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 136211426,
      "ok": true,
      "plan": Object {
        "end": 2,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "comment",
    "# test count(4) != plan(2)\\n",
  ],
  Array [
    "comment",
    "# failed 2 of 4 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 4,
      "fail": 2,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 136211425,
          "ok": true,
          "plan": Object {
            "end": 2,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
        Result {
          "fullname": "",
          "id": 136211426,
          "ok": true,
          "plan": Object {
            "end": 2,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
      ],
      "ok": false,
      "pass": 4,
      "plan": FinalPlan {
        "comment": "",
        "end": 2,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP bignum.tap strictBail > stringified 1`] = `
1..2
ok 1
ok 2
ok 136211425
ok 136211426
# test count(4) != plan(2)
# failed 2 of 4 tests

`

exports[`test/parser-stringify.js TAP bignum.tap strictBail > stringified flat 1`] = `
1..2
ok 1
ok 2
ok 136211425
ok 136211426
# test count(4) != plan(2)
# failed 2 of 4 tests

`

exports[`test/parser-stringify.js TAP bignum_many.tap bail > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 2,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 99997,
      "ok": true,
      "plan": Object {
        "end": 2,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 99998,
      "ok": true,
      "plan": Object {
        "end": 2,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 99999,
      "ok": true,
      "plan": Object {
        "end": 2,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 100000,
      "ok": true,
      "plan": Object {
        "end": 2,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 100001,
      "ok": true,
      "plan": Object {
        "end": 2,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 100002,
      "ok": true,
      "plan": Object {
        "end": 2,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 100003,
      "ok": true,
      "plan": Object {
        "end": 2,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 100004,
      "ok": true,
      "plan": Object {
        "end": 2,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 100005,
      "ok": true,
      "plan": Object {
        "end": 2,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "comment",
    "# test count(11) != plan(2)\\n",
  ],
  Array [
    "comment",
    "# failed 9 of 11 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 11,
      "fail": 9,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 99997,
          "ok": true,
          "plan": Object {
            "end": 2,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
        Result {
          "fullname": "",
          "id": 99998,
          "ok": true,
          "plan": Object {
            "end": 2,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
        Result {
          "fullname": "",
          "id": 99999,
          "ok": true,
          "plan": Object {
            "end": 2,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
        Result {
          "fullname": "",
          "id": 100000,
          "ok": true,
          "plan": Object {
            "end": 2,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
        Result {
          "fullname": "",
          "id": 100001,
          "ok": true,
          "plan": Object {
            "end": 2,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
        Result {
          "fullname": "",
          "id": 100002,
          "ok": true,
          "plan": Object {
            "end": 2,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
        Result {
          "fullname": "",
          "id": 100003,
          "ok": true,
          "plan": Object {
            "end": 2,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
        Result {
          "fullname": "",
          "id": 100004,
          "ok": true,
          "plan": Object {
            "end": 2,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
        Result {
          "fullname": "",
          "id": 100005,
          "ok": true,
          "plan": Object {
            "end": 2,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
      ],
      "ok": false,
      "pass": 11,
      "plan": FinalPlan {
        "comment": "",
        "end": 2,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP bignum_many.tap bail > stringified 1`] = `
1..2
ok 1
ok 2
ok 99997
ok 99998
ok 99999
ok 100000
ok 100001
ok 100002
ok 100003
ok 100004
ok 100005
# test count(11) != plan(2)
# failed 9 of 11 tests

`

exports[`test/parser-stringify.js TAP bignum_many.tap bail > stringified flat 1`] = `
1..2
ok 1
ok 2
ok 99997
ok 99998
ok 99999
ok 100000
ok 100001
ok 100002
ok 100003
ok 100004
ok 100005
# test count(11) != plan(2)
# failed 9 of 11 tests

`

exports[`test/parser-stringify.js TAP bignum_many.tap default settings > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 2,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 99997,
      "ok": true,
      "plan": Object {
        "end": 2,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 99998,
      "ok": true,
      "plan": Object {
        "end": 2,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 99999,
      "ok": true,
      "plan": Object {
        "end": 2,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 100000,
      "ok": true,
      "plan": Object {
        "end": 2,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 100001,
      "ok": true,
      "plan": Object {
        "end": 2,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 100002,
      "ok": true,
      "plan": Object {
        "end": 2,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 100003,
      "ok": true,
      "plan": Object {
        "end": 2,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 100004,
      "ok": true,
      "plan": Object {
        "end": 2,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 100005,
      "ok": true,
      "plan": Object {
        "end": 2,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "comment",
    "# test count(11) != plan(2)\\n",
  ],
  Array [
    "comment",
    "# failed 9 of 11 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 11,
      "fail": 9,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 99997,
          "ok": true,
          "plan": Object {
            "end": 2,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
        Result {
          "fullname": "",
          "id": 99998,
          "ok": true,
          "plan": Object {
            "end": 2,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
        Result {
          "fullname": "",
          "id": 99999,
          "ok": true,
          "plan": Object {
            "end": 2,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
        Result {
          "fullname": "",
          "id": 100000,
          "ok": true,
          "plan": Object {
            "end": 2,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
        Result {
          "fullname": "",
          "id": 100001,
          "ok": true,
          "plan": Object {
            "end": 2,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
        Result {
          "fullname": "",
          "id": 100002,
          "ok": true,
          "plan": Object {
            "end": 2,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
        Result {
          "fullname": "",
          "id": 100003,
          "ok": true,
          "plan": Object {
            "end": 2,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
        Result {
          "fullname": "",
          "id": 100004,
          "ok": true,
          "plan": Object {
            "end": 2,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
        Result {
          "fullname": "",
          "id": 100005,
          "ok": true,
          "plan": Object {
            "end": 2,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
      ],
      "ok": false,
      "pass": 11,
      "plan": FinalPlan {
        "comment": "",
        "end": 2,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP bignum_many.tap default settings > stringified 1`] = `
1..2
ok 1
ok 2
ok 99997
ok 99998
ok 99999
ok 100000
ok 100001
ok 100002
ok 100003
ok 100004
ok 100005
# test count(11) != plan(2)
# failed 9 of 11 tests

`

exports[`test/parser-stringify.js TAP bignum_many.tap default settings > stringified flat 1`] = `
1..2
ok 1
ok 2
ok 99997
ok 99998
ok 99999
ok 100000
ok 100001
ok 100002
ok 100003
ok 100004
ok 100005
# test count(11) != plan(2)
# failed 9 of 11 tests

`

exports[`test/parser-stringify.js TAP bignum_many.tap strict > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 2,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 99997,
      "ok": true,
      "plan": Object {
        "end": 2,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 99998,
      "ok": true,
      "plan": Object {
        "end": 2,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 99999,
      "ok": true,
      "plan": Object {
        "end": 2,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 100000,
      "ok": true,
      "plan": Object {
        "end": 2,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 100001,
      "ok": true,
      "plan": Object {
        "end": 2,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 100002,
      "ok": true,
      "plan": Object {
        "end": 2,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 100003,
      "ok": true,
      "plan": Object {
        "end": 2,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 100004,
      "ok": true,
      "plan": Object {
        "end": 2,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 100005,
      "ok": true,
      "plan": Object {
        "end": 2,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "comment",
    "# test count(11) != plan(2)\\n",
  ],
  Array [
    "comment",
    "# failed 9 of 11 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 11,
      "fail": 9,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 99997,
          "ok": true,
          "plan": Object {
            "end": 2,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
        Result {
          "fullname": "",
          "id": 99998,
          "ok": true,
          "plan": Object {
            "end": 2,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
        Result {
          "fullname": "",
          "id": 99999,
          "ok": true,
          "plan": Object {
            "end": 2,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
        Result {
          "fullname": "",
          "id": 100000,
          "ok": true,
          "plan": Object {
            "end": 2,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
        Result {
          "fullname": "",
          "id": 100001,
          "ok": true,
          "plan": Object {
            "end": 2,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
        Result {
          "fullname": "",
          "id": 100002,
          "ok": true,
          "plan": Object {
            "end": 2,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
        Result {
          "fullname": "",
          "id": 100003,
          "ok": true,
          "plan": Object {
            "end": 2,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
        Result {
          "fullname": "",
          "id": 100004,
          "ok": true,
          "plan": Object {
            "end": 2,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
        Result {
          "fullname": "",
          "id": 100005,
          "ok": true,
          "plan": Object {
            "end": 2,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
      ],
      "ok": false,
      "pass": 11,
      "plan": FinalPlan {
        "comment": "",
        "end": 2,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP bignum_many.tap strict > stringified 1`] = `
1..2
ok 1
ok 2
ok 99997
ok 99998
ok 99999
ok 100000
ok 100001
ok 100002
ok 100003
ok 100004
ok 100005
# test count(11) != plan(2)
# failed 9 of 11 tests

`

exports[`test/parser-stringify.js TAP bignum_many.tap strict > stringified flat 1`] = `
1..2
ok 1
ok 2
ok 99997
ok 99998
ok 99999
ok 100000
ok 100001
ok 100002
ok 100003
ok 100004
ok 100005
# test count(11) != plan(2)
# failed 9 of 11 tests

`

exports[`test/parser-stringify.js TAP bignum_many.tap strictBail > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 2,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 99997,
      "ok": true,
      "plan": Object {
        "end": 2,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 99998,
      "ok": true,
      "plan": Object {
        "end": 2,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 99999,
      "ok": true,
      "plan": Object {
        "end": 2,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 100000,
      "ok": true,
      "plan": Object {
        "end": 2,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 100001,
      "ok": true,
      "plan": Object {
        "end": 2,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 100002,
      "ok": true,
      "plan": Object {
        "end": 2,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 100003,
      "ok": true,
      "plan": Object {
        "end": 2,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 100004,
      "ok": true,
      "plan": Object {
        "end": 2,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 100005,
      "ok": true,
      "plan": Object {
        "end": 2,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "comment",
    "# test count(11) != plan(2)\\n",
  ],
  Array [
    "comment",
    "# failed 9 of 11 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 11,
      "fail": 9,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 99997,
          "ok": true,
          "plan": Object {
            "end": 2,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
        Result {
          "fullname": "",
          "id": 99998,
          "ok": true,
          "plan": Object {
            "end": 2,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
        Result {
          "fullname": "",
          "id": 99999,
          "ok": true,
          "plan": Object {
            "end": 2,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
        Result {
          "fullname": "",
          "id": 100000,
          "ok": true,
          "plan": Object {
            "end": 2,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
        Result {
          "fullname": "",
          "id": 100001,
          "ok": true,
          "plan": Object {
            "end": 2,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
        Result {
          "fullname": "",
          "id": 100002,
          "ok": true,
          "plan": Object {
            "end": 2,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
        Result {
          "fullname": "",
          "id": 100003,
          "ok": true,
          "plan": Object {
            "end": 2,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
        Result {
          "fullname": "",
          "id": 100004,
          "ok": true,
          "plan": Object {
            "end": 2,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
        Result {
          "fullname": "",
          "id": 100005,
          "ok": true,
          "plan": Object {
            "end": 2,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
      ],
      "ok": false,
      "pass": 11,
      "plan": FinalPlan {
        "comment": "",
        "end": 2,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP bignum_many.tap strictBail > stringified 1`] = `
1..2
ok 1
ok 2
ok 99997
ok 99998
ok 99999
ok 100000
ok 100001
ok 100002
ok 100003
ok 100004
ok 100005
# test count(11) != plan(2)
# failed 9 of 11 tests

`

exports[`test/parser-stringify.js TAP bignum_many.tap strictBail > stringified flat 1`] = `
1..2
ok 1
ok 2
ok 99997
ok 99998
ok 99999
ok 100000
ok 100001
ok 100002
ok 100003
ok 100004
ok 100005
# test count(11) != plan(2)
# failed 9 of 11 tests

`

exports[`test/parser-stringify.js TAP broken-yamlish-looks-like-child.tap bail > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 3,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "callback happened",
      "ok": true,
    },
  ],
  Array [
    "extra",
    "  ok:\\n",
  ],
  Array [
    "extra",
    "    - I wished for a bailout!\\n",
  ],
  Array [
    "extra",
    "    - lots of other shapes here can look like valid tap\\n",
  ],
  Array [
    "extra",
    " ...\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "child test",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "should come last",
      "ok": true,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 3,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 3,
      "plan": FinalPlan {
        "comment": "",
        "end": 3,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP broken-yamlish-looks-like-child.tap bail > stringified 1`] = `
1..3
ok 1 - callback happened
  ok:
    - I wished for a bailout!
    - lots of other shapes here can look like valid tap
 ...
ok 2 - child test
ok 3 - should come last

`

exports[`test/parser-stringify.js TAP broken-yamlish-looks-like-child.tap bail > stringified flat 1`] = `
1..3
ok 1 - callback happened
  ok:
    - I wished for a bailout!
    - lots of other shapes here can look like valid tap
 ...
ok 2 - child test
ok 3 - should come last

`

exports[`test/parser-stringify.js TAP broken-yamlish-looks-like-child.tap default settings > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 3,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "callback happened",
      "ok": true,
    },
  ],
  Array [
    "extra",
    "  ok:\\n",
  ],
  Array [
    "extra",
    "    - I wished for a bailout!\\n",
  ],
  Array [
    "extra",
    "    - lots of other shapes here can look like valid tap\\n",
  ],
  Array [
    "extra",
    " ...\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "child test",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "should come last",
      "ok": true,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 3,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 3,
      "plan": FinalPlan {
        "comment": "",
        "end": 3,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP broken-yamlish-looks-like-child.tap default settings > stringified 1`] = `
1..3
ok 1 - callback happened
  ok:
    - I wished for a bailout!
    - lots of other shapes here can look like valid tap
 ...
ok 2 - child test
ok 3 - should come last

`

exports[`test/parser-stringify.js TAP broken-yamlish-looks-like-child.tap default settings > stringified flat 1`] = `
1..3
ok 1 - callback happened
  ok:
    - I wished for a bailout!
    - lots of other shapes here can look like valid tap
 ...
ok 2 - child test
ok 3 - should come last

`

exports[`test/parser-stringify.js TAP broken-yamlish-looks-like-child.tap strict > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 3,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "callback happened",
      "ok": true,
    },
  ],
  Array [
    "extra",
    "  ok:\\n",
  ],
  Array [
    "extra",
    "    - I wished for a bailout!\\n",
  ],
  Array [
    "extra",
    "    - lots of other shapes here can look like valid tap\\n",
  ],
  Array [
    "extra",
    " ...\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "child test",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "should come last",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# failed 4 of 3 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 3,
      "fail": 4,
      "failures": Array [
        Object {
          "data": "  ok:\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "    - I wished for a bailout!\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "    - lots of other shapes here can look like valid tap\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": " ...\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
      ],
      "ok": false,
      "pass": 3,
      "plan": FinalPlan {
        "comment": "",
        "end": 3,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP broken-yamlish-looks-like-child.tap strict > stringified 1`] = `
1..3
ok 1 - callback happened
  ok:
    - I wished for a bailout!
    - lots of other shapes here can look like valid tap
 ...
ok 2 - child test
ok 3 - should come last
# failed 4 of 3 tests

`

exports[`test/parser-stringify.js TAP broken-yamlish-looks-like-child.tap strict > stringified flat 1`] = `
1..3
ok 1 - callback happened
  ok:
    - I wished for a bailout!
    - lots of other shapes here can look like valid tap
 ...
ok 2 - child test
ok 3 - should come last
# failed 4 of 3 tests

`

exports[`test/parser-stringify.js TAP broken-yamlish-looks-like-child.tap strictBail > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 3,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "callback happened",
      "ok": true,
    },
  ],
  Array [
    "extra",
    "  ok:\\n",
  ],
  Array [
    "extra",
    "    - I wished for a bailout!\\n",
  ],
  Array [
    "extra",
    "    - lots of other shapes here can look like valid tap\\n",
  ],
  Array [
    "extra",
    " ...\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "child test",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "should come last",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# failed 4 of 3 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 3,
      "fail": 4,
      "failures": Array [
        Object {
          "data": "  ok:\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "    - I wished for a bailout!\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "    - lots of other shapes here can look like valid tap\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": " ...\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
      ],
      "ok": false,
      "pass": 3,
      "plan": FinalPlan {
        "comment": "",
        "end": 3,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP broken-yamlish-looks-like-child.tap strictBail > stringified 1`] = `
1..3
ok 1 - callback happened
  ok:
    - I wished for a bailout!
    - lots of other shapes here can look like valid tap
 ...
ok 2 - child test
ok 3 - should come last
# failed 4 of 3 tests

`

exports[`test/parser-stringify.js TAP broken-yamlish-looks-like-child.tap strictBail > stringified flat 1`] = `
1..3
ok 1 - callback happened
  ok:
    - I wished for a bailout!
    - lots of other shapes here can look like valid tap
 ...
ok 2 - child test
ok 3 - should come last
# failed 4 of 3 tests

`

exports[`test/parser-stringify.js TAP broken-yamlish-with-nonbroken-yamlish.tap bail > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 3,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "diag": Object {
        "ok": "this time I mean it",
      },
      "fullname": "",
      "id": 1,
      "name": "callback happened",
      "ok": true,
    },
  ],
  Array [
    "extra",
    "  ok:\\n",
  ],
  Array [
    "comment",
    "    # comment here too, why not?\\n",
  ],
  Array [
    "extra",
    "    - I wished for a bailout!\\n",
  ],
  Array [
    "extra",
    "    - lots of other shapes here can look like valid tap\\n",
  ],
  Array [
    "extra",
    " ...\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "child test",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "should come last",
      "ok": true,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 3,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 3,
      "plan": FinalPlan {
        "comment": "",
        "end": 3,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP broken-yamlish-with-nonbroken-yamlish.tap bail > stringified 1`] = `
1..3
ok 1 - callback happened
  ---
  ok: this time I mean it
  ...
  ok:
    # comment here too, why not?
    - I wished for a bailout!
    - lots of other shapes here can look like valid tap
 ...
ok 2 - child test
ok 3 - should come last

`

exports[`test/parser-stringify.js TAP broken-yamlish-with-nonbroken-yamlish.tap bail > stringified flat 1`] = `
1..3
ok 1 - callback happened
  ---
  ok: this time I mean it
  ...
  ok:
    # comment here too, why not?
    - I wished for a bailout!
    - lots of other shapes here can look like valid tap
 ...
ok 2 - child test
ok 3 - should come last

`

exports[`test/parser-stringify.js TAP broken-yamlish-with-nonbroken-yamlish.tap default settings > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 3,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "diag": Object {
        "ok": "this time I mean it",
      },
      "fullname": "",
      "id": 1,
      "name": "callback happened",
      "ok": true,
    },
  ],
  Array [
    "extra",
    "  ok:\\n",
  ],
  Array [
    "comment",
    "    # comment here too, why not?\\n",
  ],
  Array [
    "extra",
    "    - I wished for a bailout!\\n",
  ],
  Array [
    "extra",
    "    - lots of other shapes here can look like valid tap\\n",
  ],
  Array [
    "extra",
    " ...\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "child test",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "should come last",
      "ok": true,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 3,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 3,
      "plan": FinalPlan {
        "comment": "",
        "end": 3,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP broken-yamlish-with-nonbroken-yamlish.tap default settings > stringified 1`] = `
1..3
ok 1 - callback happened
  ---
  ok: this time I mean it
  ...
  ok:
    # comment here too, why not?
    - I wished for a bailout!
    - lots of other shapes here can look like valid tap
 ...
ok 2 - child test
ok 3 - should come last

`

exports[`test/parser-stringify.js TAP broken-yamlish-with-nonbroken-yamlish.tap default settings > stringified flat 1`] = `
1..3
ok 1 - callback happened
  ---
  ok: this time I mean it
  ...
  ok:
    # comment here too, why not?
    - I wished for a bailout!
    - lots of other shapes here can look like valid tap
 ...
ok 2 - child test
ok 3 - should come last

`

exports[`test/parser-stringify.js TAP broken-yamlish-with-nonbroken-yamlish.tap strict > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 3,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "diag": Object {
        "ok": "this time I mean it",
      },
      "fullname": "",
      "id": 1,
      "name": "callback happened",
      "ok": true,
    },
  ],
  Array [
    "extra",
    "  ok:\\n",
  ],
  Array [
    "comment",
    "    # comment here too, why not?\\n",
  ],
  Array [
    "extra",
    "    - I wished for a bailout!\\n",
  ],
  Array [
    "extra",
    "    - lots of other shapes here can look like valid tap\\n",
  ],
  Array [
    "extra",
    " ...\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "child test",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "should come last",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# failed 4 of 3 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 3,
      "fail": 4,
      "failures": Array [
        Object {
          "data": "  ok:\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "    - I wished for a bailout!\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "    - lots of other shapes here can look like valid tap\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": " ...\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
      ],
      "ok": false,
      "pass": 3,
      "plan": FinalPlan {
        "comment": "",
        "end": 3,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP broken-yamlish-with-nonbroken-yamlish.tap strict > stringified 1`] = `
1..3
ok 1 - callback happened
  ---
  ok: this time I mean it
  ...
  ok:
    # comment here too, why not?
    - I wished for a bailout!
    - lots of other shapes here can look like valid tap
 ...
ok 2 - child test
ok 3 - should come last
# failed 4 of 3 tests

`

exports[`test/parser-stringify.js TAP broken-yamlish-with-nonbroken-yamlish.tap strict > stringified flat 1`] = `
1..3
ok 1 - callback happened
  ---
  ok: this time I mean it
  ...
  ok:
    # comment here too, why not?
    - I wished for a bailout!
    - lots of other shapes here can look like valid tap
 ...
ok 2 - child test
ok 3 - should come last
# failed 4 of 3 tests

`

exports[`test/parser-stringify.js TAP broken-yamlish-with-nonbroken-yamlish.tap strictBail > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 3,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "diag": Object {
        "ok": "this time I mean it",
      },
      "fullname": "",
      "id": 1,
      "name": "callback happened",
      "ok": true,
    },
  ],
  Array [
    "extra",
    "  ok:\\n",
  ],
  Array [
    "comment",
    "    # comment here too, why not?\\n",
  ],
  Array [
    "extra",
    "    - I wished for a bailout!\\n",
  ],
  Array [
    "extra",
    "    - lots of other shapes here can look like valid tap\\n",
  ],
  Array [
    "extra",
    " ...\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "child test",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "should come last",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# failed 4 of 3 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 3,
      "fail": 4,
      "failures": Array [
        Object {
          "data": "  ok:\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "    - I wished for a bailout!\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "    - lots of other shapes here can look like valid tap\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": " ...\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
      ],
      "ok": false,
      "pass": 3,
      "plan": FinalPlan {
        "comment": "",
        "end": 3,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP broken-yamlish-with-nonbroken-yamlish.tap strictBail > stringified 1`] = `
1..3
ok 1 - callback happened
  ---
  ok: this time I mean it
  ...
  ok:
    # comment here too, why not?
    - I wished for a bailout!
    - lots of other shapes here can look like valid tap
 ...
ok 2 - child test
ok 3 - should come last
# failed 4 of 3 tests

`

exports[`test/parser-stringify.js TAP broken-yamlish-with-nonbroken-yamlish.tap strictBail > stringified flat 1`] = `
1..3
ok 1 - callback happened
  ---
  ok: this time I mean it
  ...
  ok:
    # comment here too, why not?
    - I wished for a bailout!
    - lots of other shapes here can look like valid tap
 ...
ok 2 - child test
ok 3 - should come last
# failed 4 of 3 tests

`

exports[`test/parser-stringify.js TAP buffered-nested-failure-top-ok-diag.tap bail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: my kids are fine\\n",
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "my kids are fine",
          "name": "no they aren't",
          "ok": false,
        },
      ],
      Array [
        "bailout",
        "no they aren't",
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": "no they aren't",
          "count": 1,
          "fail": 1,
          "failures": Array [
            Result {
              "fullname": "my kids are fine",
              "name": "no they aren't",
              "ok": false,
            },
          ],
          "ok": false,
          "pass": 0,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "bailout",
    "no they aren't",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": "no they aren't",
      "count": 0,
      "fail": 0,
      "failures": Array [],
      "ok": false,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP buffered-nested-failure-top-ok-diag.tap bail > stringified 1`] = `
TAP version 13
1..1
# Subtest: my kids are fine
    1..1
    not ok - no they aren't
    Bail out! no they aren't
Bail out! no they aren't

`

exports[`test/parser-stringify.js TAP buffered-nested-failure-top-ok-diag.tap bail > stringified flat 1`] = `
TAP version 13
1..1
# Subtest: my kids are fine
    1..1
    not ok - no they aren't
    Bail out! no they aren't
Bail out! no they aren't

`

exports[`test/parser-stringify.js TAP buffered-nested-failure-top-ok-diag.tap default settings > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: my kids are fine\\n",
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "my kids are fine",
          "name": "no they aren't",
          "ok": false,
        },
      ],
      Array [
        "comment",
        "# failed 1 test\\n",
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 1,
          "failures": Array [
            Result {
              "fullname": "my kids are fine",
              "name": "no they aren't",
              "ok": false,
            },
          ],
          "ok": false,
          "pass": 0,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "buffered": true,
      "diag": Object {
        "some": "diag",
      },
      "fullname": "",
      "id": 1,
      "name": "my kids are fine",
      "ok": true,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": false,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP buffered-nested-failure-top-ok-diag.tap default settings > stringified 1`] = `
TAP version 13
1..1
# Subtest: my kids are fine
    1..1
    not ok - no they aren't
    # failed 1 test
ok 1 - my kids are fine
  ---
  some: diag
  ...

`

exports[`test/parser-stringify.js TAP buffered-nested-failure-top-ok-diag.tap default settings > stringified flat 1`] = `
TAP version 13
1..1
# Subtest: my kids are fine
    1..1
    not ok - no they aren't
    # failed 1 test
ok 1 - my kids are fine
  ---
  some: diag
  ...

`

exports[`test/parser-stringify.js TAP buffered-nested-failure-top-ok-diag.tap strict > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: my kids are fine\\n",
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "my kids are fine",
          "name": "no they aren't",
          "ok": false,
        },
      ],
      Array [
        "comment",
        "# failed 1 test\\n",
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 1,
          "failures": Array [
            Result {
              "fullname": "my kids are fine",
              "name": "no they aren't",
              "ok": false,
            },
          ],
          "ok": false,
          "pass": 0,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "buffered": true,
      "diag": Object {
        "some": "diag",
      },
      "fullname": "",
      "id": 1,
      "name": "my kids are fine",
      "ok": true,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": false,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP buffered-nested-failure-top-ok-diag.tap strict > stringified 1`] = `
TAP version 13
1..1
# Subtest: my kids are fine
    1..1
    not ok - no they aren't
    # failed 1 test
ok 1 - my kids are fine
  ---
  some: diag
  ...

`

exports[`test/parser-stringify.js TAP buffered-nested-failure-top-ok-diag.tap strict > stringified flat 1`] = `
TAP version 13
1..1
# Subtest: my kids are fine
    1..1
    not ok - no they aren't
    # failed 1 test
ok 1 - my kids are fine
  ---
  some: diag
  ...

`

exports[`test/parser-stringify.js TAP buffered-nested-failure-top-ok-diag.tap strictBail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: my kids are fine\\n",
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "my kids are fine",
          "name": "no they aren't",
          "ok": false,
        },
      ],
      Array [
        "bailout",
        "no they aren't",
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": "no they aren't",
          "count": 1,
          "fail": 1,
          "failures": Array [
            Result {
              "fullname": "my kids are fine",
              "name": "no they aren't",
              "ok": false,
            },
          ],
          "ok": false,
          "pass": 0,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "bailout",
    "no they aren't",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": "no they aren't",
      "count": 0,
      "fail": 0,
      "failures": Array [],
      "ok": false,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP buffered-nested-failure-top-ok-diag.tap strictBail > stringified 1`] = `
TAP version 13
1..1
# Subtest: my kids are fine
    1..1
    not ok - no they aren't
    Bail out! no they aren't
Bail out! no they aren't

`

exports[`test/parser-stringify.js TAP buffered-nested-failure-top-ok-diag.tap strictBail > stringified flat 1`] = `
TAP version 13
1..1
# Subtest: my kids are fine
    1..1
    not ok - no they aren't
    Bail out! no they aren't
Bail out! no they aren't

`

exports[`test/parser-stringify.js TAP buffered-nested-failure-top-ok-no-msg.tap bail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: my kids are fine\\n",
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "my kids are fine",
          "ok": false,
        },
      ],
      Array [
        "bailout",
        "",
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": true,
          "count": 1,
          "fail": 1,
          "failures": Array [
            Result {
              "fullname": "my kids are fine",
              "ok": false,
            },
          ],
          "ok": false,
          "pass": 0,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "bailout",
    "",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": true,
      "count": 0,
      "fail": 0,
      "failures": Array [],
      "ok": false,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP buffered-nested-failure-top-ok-no-msg.tap bail > stringified 1`] = `
TAP version 13
1..1
# Subtest: my kids are fine
    1..1
    not ok
    Bail out!
Bail out!

`

exports[`test/parser-stringify.js TAP buffered-nested-failure-top-ok-no-msg.tap bail > stringified flat 1`] = `
TAP version 13
1..1
# Subtest: my kids are fine
    1..1
    not ok
    Bail out!
Bail out!

`

exports[`test/parser-stringify.js TAP buffered-nested-failure-top-ok-no-msg.tap default settings > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: my kids are fine\\n",
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "my kids are fine",
          "ok": false,
        },
      ],
      Array [
        "comment",
        "# failed 1 test\\n",
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 1,
          "failures": Array [
            Result {
              "fullname": "my kids are fine",
              "ok": false,
            },
          ],
          "ok": false,
          "pass": 0,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "buffered": true,
      "fullname": "",
      "id": 1,
      "name": "my kids are fine",
      "ok": true,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": false,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP buffered-nested-failure-top-ok-no-msg.tap default settings > stringified 1`] = `
TAP version 13
1..1
# Subtest: my kids are fine
    1..1
    not ok
    # failed 1 test
ok 1 - my kids are fine

`

exports[`test/parser-stringify.js TAP buffered-nested-failure-top-ok-no-msg.tap default settings > stringified flat 1`] = `
TAP version 13
1..1
# Subtest: my kids are fine
    1..1
    not ok
    # failed 1 test
ok 1 - my kids are fine

`

exports[`test/parser-stringify.js TAP buffered-nested-failure-top-ok-no-msg.tap strict > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: my kids are fine\\n",
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "my kids are fine",
          "ok": false,
        },
      ],
      Array [
        "comment",
        "# failed 1 test\\n",
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 1,
          "failures": Array [
            Result {
              "fullname": "my kids are fine",
              "ok": false,
            },
          ],
          "ok": false,
          "pass": 0,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "buffered": true,
      "fullname": "",
      "id": 1,
      "name": "my kids are fine",
      "ok": true,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": false,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP buffered-nested-failure-top-ok-no-msg.tap strict > stringified 1`] = `
TAP version 13
1..1
# Subtest: my kids are fine
    1..1
    not ok
    # failed 1 test
ok 1 - my kids are fine

`

exports[`test/parser-stringify.js TAP buffered-nested-failure-top-ok-no-msg.tap strict > stringified flat 1`] = `
TAP version 13
1..1
# Subtest: my kids are fine
    1..1
    not ok
    # failed 1 test
ok 1 - my kids are fine

`

exports[`test/parser-stringify.js TAP buffered-nested-failure-top-ok-no-msg.tap strictBail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: my kids are fine\\n",
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "my kids are fine",
          "ok": false,
        },
      ],
      Array [
        "bailout",
        "",
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": true,
          "count": 1,
          "fail": 1,
          "failures": Array [
            Result {
              "fullname": "my kids are fine",
              "ok": false,
            },
          ],
          "ok": false,
          "pass": 0,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "bailout",
    "",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": true,
      "count": 0,
      "fail": 0,
      "failures": Array [],
      "ok": false,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP buffered-nested-failure-top-ok-no-msg.tap strictBail > stringified 1`] = `
TAP version 13
1..1
# Subtest: my kids are fine
    1..1
    not ok
    Bail out!
Bail out!

`

exports[`test/parser-stringify.js TAP buffered-nested-failure-top-ok-no-msg.tap strictBail > stringified flat 1`] = `
TAP version 13
1..1
# Subtest: my kids are fine
    1..1
    not ok
    Bail out!
Bail out!

`

exports[`test/parser-stringify.js TAP buffered-nested-failure-top-ok.tap bail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: my kids are fine\\n",
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "my kids are fine",
          "name": "no they aren't",
          "ok": false,
        },
      ],
      Array [
        "bailout",
        "no they aren't",
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": "no they aren't",
          "count": 1,
          "fail": 1,
          "failures": Array [
            Result {
              "fullname": "my kids are fine",
              "name": "no they aren't",
              "ok": false,
            },
          ],
          "ok": false,
          "pass": 0,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "bailout",
    "no they aren't",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": "no they aren't",
      "count": 0,
      "fail": 0,
      "failures": Array [],
      "ok": false,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP buffered-nested-failure-top-ok.tap bail > stringified 1`] = `
TAP version 13
1..1
# Subtest: my kids are fine
    1..1
    not ok - no they aren't
    Bail out! no they aren't
Bail out! no they aren't

`

exports[`test/parser-stringify.js TAP buffered-nested-failure-top-ok.tap bail > stringified flat 1`] = `
TAP version 13
1..1
# Subtest: my kids are fine
    1..1
    not ok - no they aren't
    Bail out! no they aren't
Bail out! no they aren't

`

exports[`test/parser-stringify.js TAP buffered-nested-failure-top-ok.tap default settings > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: my kids are fine\\n",
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "my kids are fine",
          "name": "no they aren't",
          "ok": false,
        },
      ],
      Array [
        "comment",
        "# failed 1 test\\n",
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 1,
          "failures": Array [
            Result {
              "fullname": "my kids are fine",
              "name": "no they aren't",
              "ok": false,
            },
          ],
          "ok": false,
          "pass": 0,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "buffered": true,
      "fullname": "",
      "id": 1,
      "name": "my kids are fine",
      "ok": true,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": false,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP buffered-nested-failure-top-ok.tap default settings > stringified 1`] = `
TAP version 13
1..1
# Subtest: my kids are fine
    1..1
    not ok - no they aren't
    # failed 1 test
ok 1 - my kids are fine

`

exports[`test/parser-stringify.js TAP buffered-nested-failure-top-ok.tap default settings > stringified flat 1`] = `
TAP version 13
1..1
# Subtest: my kids are fine
    1..1
    not ok - no they aren't
    # failed 1 test
ok 1 - my kids are fine

`

exports[`test/parser-stringify.js TAP buffered-nested-failure-top-ok.tap strict > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: my kids are fine\\n",
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "my kids are fine",
          "name": "no they aren't",
          "ok": false,
        },
      ],
      Array [
        "comment",
        "# failed 1 test\\n",
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 1,
          "failures": Array [
            Result {
              "fullname": "my kids are fine",
              "name": "no they aren't",
              "ok": false,
            },
          ],
          "ok": false,
          "pass": 0,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "buffered": true,
      "fullname": "",
      "id": 1,
      "name": "my kids are fine",
      "ok": true,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": false,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP buffered-nested-failure-top-ok.tap strict > stringified 1`] = `
TAP version 13
1..1
# Subtest: my kids are fine
    1..1
    not ok - no they aren't
    # failed 1 test
ok 1 - my kids are fine

`

exports[`test/parser-stringify.js TAP buffered-nested-failure-top-ok.tap strict > stringified flat 1`] = `
TAP version 13
1..1
# Subtest: my kids are fine
    1..1
    not ok - no they aren't
    # failed 1 test
ok 1 - my kids are fine

`

exports[`test/parser-stringify.js TAP buffered-nested-failure-top-ok.tap strictBail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: my kids are fine\\n",
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "my kids are fine",
          "name": "no they aren't",
          "ok": false,
        },
      ],
      Array [
        "bailout",
        "no they aren't",
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": "no they aren't",
          "count": 1,
          "fail": 1,
          "failures": Array [
            Result {
              "fullname": "my kids are fine",
              "name": "no they aren't",
              "ok": false,
            },
          ],
          "ok": false,
          "pass": 0,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "bailout",
    "no they aren't",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": "no they aren't",
      "count": 0,
      "fail": 0,
      "failures": Array [],
      "ok": false,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP buffered-nested-failure-top-ok.tap strictBail > stringified 1`] = `
TAP version 13
1..1
# Subtest: my kids are fine
    1..1
    not ok - no they aren't
    Bail out! no they aren't
Bail out! no they aren't

`

exports[`test/parser-stringify.js TAP buffered-nested-failure-top-ok.tap strictBail > stringified flat 1`] = `
TAP version 13
1..1
# Subtest: my kids are fine
    1..1
    not ok - no they aren't
    Bail out! no they aren't
Bail out! no they aren't

`

exports[`test/parser-stringify.js TAP buffered-nested-ok-top-failure-diag.tap bail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: please sir, my son, he is sick\\n",
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "please sir, my son, he is sick",
          "name": "i got better",
          "ok": true,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "buffered": true,
      "diag": Object {
        "some": "diag",
      },
      "fullname": "",
      "id": 1,
      "name": "please sir, my son, he is sick",
      "ok": false,
    },
  ],
  Array [
    "bailout",
    "please sir, my son, he is sick",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": "please sir, my son, he is sick",
      "count": 1,
      "fail": 1,
      "failures": Array [
        Result {
          "buffered": true,
          "diag": Object {
            "some": "diag",
          },
          "fullname": "",
          "id": 1,
          "name": "please sir, my son, he is sick",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP buffered-nested-ok-top-failure-diag.tap bail > stringified 1`] = `
TAP version 13
1..1
# Subtest: please sir, my son, he is sick
    1..1
    ok - i got better
not ok 1 - please sir, my son, he is sick
  ---
  some: diag
  ...
Bail out! please sir, my son, he is sick

`

exports[`test/parser-stringify.js TAP buffered-nested-ok-top-failure-diag.tap bail > stringified flat 1`] = `
TAP version 13
1..1
# Subtest: please sir, my son, he is sick
    1..1
    ok - i got better
not ok 1 - please sir, my son, he is sick
  ---
  some: diag
  ...
Bail out! please sir, my son, he is sick

`

exports[`test/parser-stringify.js TAP buffered-nested-ok-top-failure-diag.tap default settings > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: please sir, my son, he is sick\\n",
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "please sir, my son, he is sick",
          "name": "i got better",
          "ok": true,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "buffered": true,
      "diag": Object {
        "some": "diag",
      },
      "fullname": "",
      "id": 1,
      "name": "please sir, my son, he is sick",
      "ok": false,
    },
  ],
  Array [
    "comment",
    "# failed 1 test\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 1,
      "failures": Array [
        Result {
          "buffered": true,
          "diag": Object {
            "some": "diag",
          },
          "fullname": "",
          "id": 1,
          "name": "please sir, my son, he is sick",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP buffered-nested-ok-top-failure-diag.tap default settings > stringified 1`] = `
TAP version 13
1..1
# Subtest: please sir, my son, he is sick
    1..1
    ok - i got better
not ok 1 - please sir, my son, he is sick
  ---
  some: diag
  ...
# failed 1 test

`

exports[`test/parser-stringify.js TAP buffered-nested-ok-top-failure-diag.tap default settings > stringified flat 1`] = `
TAP version 13
1..1
# Subtest: please sir, my son, he is sick
    1..1
    ok - i got better
not ok 1 - please sir, my son, he is sick
  ---
  some: diag
  ...
# failed 1 test

`

exports[`test/parser-stringify.js TAP buffered-nested-ok-top-failure-diag.tap strict > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: please sir, my son, he is sick\\n",
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "please sir, my son, he is sick",
          "name": "i got better",
          "ok": true,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "buffered": true,
      "diag": Object {
        "some": "diag",
      },
      "fullname": "",
      "id": 1,
      "name": "please sir, my son, he is sick",
      "ok": false,
    },
  ],
  Array [
    "comment",
    "# failed 1 test\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 1,
      "failures": Array [
        Result {
          "buffered": true,
          "diag": Object {
            "some": "diag",
          },
          "fullname": "",
          "id": 1,
          "name": "please sir, my son, he is sick",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP buffered-nested-ok-top-failure-diag.tap strict > stringified 1`] = `
TAP version 13
1..1
# Subtest: please sir, my son, he is sick
    1..1
    ok - i got better
not ok 1 - please sir, my son, he is sick
  ---
  some: diag
  ...
# failed 1 test

`

exports[`test/parser-stringify.js TAP buffered-nested-ok-top-failure-diag.tap strict > stringified flat 1`] = `
TAP version 13
1..1
# Subtest: please sir, my son, he is sick
    1..1
    ok - i got better
not ok 1 - please sir, my son, he is sick
  ---
  some: diag
  ...
# failed 1 test

`

exports[`test/parser-stringify.js TAP buffered-nested-ok-top-failure-diag.tap strictBail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: please sir, my son, he is sick\\n",
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "please sir, my son, he is sick",
          "name": "i got better",
          "ok": true,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "buffered": true,
      "diag": Object {
        "some": "diag",
      },
      "fullname": "",
      "id": 1,
      "name": "please sir, my son, he is sick",
      "ok": false,
    },
  ],
  Array [
    "bailout",
    "please sir, my son, he is sick",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": "please sir, my son, he is sick",
      "count": 1,
      "fail": 1,
      "failures": Array [
        Result {
          "buffered": true,
          "diag": Object {
            "some": "diag",
          },
          "fullname": "",
          "id": 1,
          "name": "please sir, my son, he is sick",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP buffered-nested-ok-top-failure-diag.tap strictBail > stringified 1`] = `
TAP version 13
1..1
# Subtest: please sir, my son, he is sick
    1..1
    ok - i got better
not ok 1 - please sir, my son, he is sick
  ---
  some: diag
  ...
Bail out! please sir, my son, he is sick

`

exports[`test/parser-stringify.js TAP buffered-nested-ok-top-failure-diag.tap strictBail > stringified flat 1`] = `
TAP version 13
1..1
# Subtest: please sir, my son, he is sick
    1..1
    ok - i got better
not ok 1 - please sir, my son, he is sick
  ---
  some: diag
  ...
Bail out! please sir, my son, he is sick

`

exports[`test/parser-stringify.js TAP buffered-nested-ok-top-failure.tap bail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: please sir, my son, he is sick\\n",
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "please sir, my son, he is sick",
          "name": "i got better",
          "ok": true,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "buffered": true,
      "fullname": "",
      "id": 1,
      "name": "please sir, my son, he is sick",
      "ok": false,
    },
  ],
  Array [
    "bailout",
    "please sir, my son, he is sick",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": "please sir, my son, he is sick",
      "count": 1,
      "fail": 1,
      "failures": Array [
        Result {
          "buffered": true,
          "fullname": "",
          "id": 1,
          "name": "please sir, my son, he is sick",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP buffered-nested-ok-top-failure.tap bail > stringified 1`] = `
TAP version 13
1..1
# Subtest: please sir, my son, he is sick
    1..1
    ok - i got better
not ok 1 - please sir, my son, he is sick
Bail out! please sir, my son, he is sick

`

exports[`test/parser-stringify.js TAP buffered-nested-ok-top-failure.tap bail > stringified flat 1`] = `
TAP version 13
1..1
# Subtest: please sir, my son, he is sick
    1..1
    ok - i got better
not ok 1 - please sir, my son, he is sick
Bail out! please sir, my son, he is sick

`

exports[`test/parser-stringify.js TAP buffered-nested-ok-top-failure.tap default settings > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: please sir, my son, he is sick\\n",
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "please sir, my son, he is sick",
          "name": "i got better",
          "ok": true,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "buffered": true,
      "fullname": "",
      "id": 1,
      "name": "please sir, my son, he is sick",
      "ok": false,
    },
  ],
  Array [
    "comment",
    "# failed 1 test\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 1,
      "failures": Array [
        Result {
          "buffered": true,
          "fullname": "",
          "id": 1,
          "name": "please sir, my son, he is sick",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP buffered-nested-ok-top-failure.tap default settings > stringified 1`] = `
TAP version 13
1..1
# Subtest: please sir, my son, he is sick
    1..1
    ok - i got better
not ok 1 - please sir, my son, he is sick
# failed 1 test

`

exports[`test/parser-stringify.js TAP buffered-nested-ok-top-failure.tap default settings > stringified flat 1`] = `
TAP version 13
1..1
# Subtest: please sir, my son, he is sick
    1..1
    ok - i got better
not ok 1 - please sir, my son, he is sick
# failed 1 test

`

exports[`test/parser-stringify.js TAP buffered-nested-ok-top-failure.tap strict > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: please sir, my son, he is sick\\n",
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "please sir, my son, he is sick",
          "name": "i got better",
          "ok": true,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "buffered": true,
      "fullname": "",
      "id": 1,
      "name": "please sir, my son, he is sick",
      "ok": false,
    },
  ],
  Array [
    "comment",
    "# failed 1 test\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 1,
      "failures": Array [
        Result {
          "buffered": true,
          "fullname": "",
          "id": 1,
          "name": "please sir, my son, he is sick",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP buffered-nested-ok-top-failure.tap strict > stringified 1`] = `
TAP version 13
1..1
# Subtest: please sir, my son, he is sick
    1..1
    ok - i got better
not ok 1 - please sir, my son, he is sick
# failed 1 test

`

exports[`test/parser-stringify.js TAP buffered-nested-ok-top-failure.tap strict > stringified flat 1`] = `
TAP version 13
1..1
# Subtest: please sir, my son, he is sick
    1..1
    ok - i got better
not ok 1 - please sir, my son, he is sick
# failed 1 test

`

exports[`test/parser-stringify.js TAP buffered-nested-ok-top-failure.tap strictBail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: please sir, my son, he is sick\\n",
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "please sir, my son, he is sick",
          "name": "i got better",
          "ok": true,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "buffered": true,
      "fullname": "",
      "id": 1,
      "name": "please sir, my son, he is sick",
      "ok": false,
    },
  ],
  Array [
    "bailout",
    "please sir, my son, he is sick",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": "please sir, my son, he is sick",
      "count": 1,
      "fail": 1,
      "failures": Array [
        Result {
          "buffered": true,
          "fullname": "",
          "id": 1,
          "name": "please sir, my son, he is sick",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP buffered-nested-ok-top-failure.tap strictBail > stringified 1`] = `
TAP version 13
1..1
# Subtest: please sir, my son, he is sick
    1..1
    ok - i got better
not ok 1 - please sir, my son, he is sick
Bail out! please sir, my son, he is sick

`

exports[`test/parser-stringify.js TAP buffered-nested-ok-top-failure.tap strictBail > stringified flat 1`] = `
TAP version 13
1..1
# Subtest: please sir, my son, he is sick
    1..1
    ok - i got better
not ok 1 - please sir, my son, he is sick
Bail out! please sir, my son, he is sick

`

exports[`test/parser-stringify.js TAP buffered-with-diag-not-ok.tap bail > parsed 1`] = `
Array [
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: child\\n",
      ],
      Array [
        "assert",
        Result {
          "fullname": "child",
          "id": 1,
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "buffered": true,
      "diag": Object {
        "some": "diagnostics",
      },
      "fullname": "",
      "id": 1,
      "name": "child",
      "ok": false,
    },
  ],
  Array [
    "bailout",
    "child",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": "child",
      "count": 1,
      "fail": 1,
      "failures": Array [
        Result {
          "buffered": true,
          "diag": Object {
            "some": "diagnostics",
          },
          "fullname": "",
          "id": 1,
          "name": "child",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": null,
        "skipAll": false,
        "skipReason": "",
        "start": null,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP buffered-with-diag-not-ok.tap bail > stringified 1`] = `
# Subtest: child
    ok 1
    1..1
not ok 1 - child
  ---
  some: diagnostics
  ...
Bail out! child

`

exports[`test/parser-stringify.js TAP buffered-with-diag-not-ok.tap bail > stringified flat 1`] = `
# Subtest: child
    ok 1
    1..1
not ok 1 - child
  ---
  some: diagnostics
  ...
Bail out! child

`

exports[`test/parser-stringify.js TAP buffered-with-diag-not-ok.tap default settings > parsed 1`] = `
Array [
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: child\\n",
      ],
      Array [
        "assert",
        Result {
          "fullname": "child",
          "id": 1,
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "buffered": true,
      "diag": Object {
        "some": "diagnostics",
      },
      "fullname": "",
      "id": 1,
      "name": "child",
      "ok": false,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# failed 1 test\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 1,
      "failures": Array [
        Result {
          "buffered": true,
          "diag": Object {
            "some": "diagnostics",
          },
          "fullname": "",
          "id": 1,
          "name": "child",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP buffered-with-diag-not-ok.tap default settings > stringified 1`] = `
# Subtest: child
    ok 1
    1..1
not ok 1 - child
  ---
  some: diagnostics
  ...
1..1
# failed 1 test

`

exports[`test/parser-stringify.js TAP buffered-with-diag-not-ok.tap default settings > stringified flat 1`] = `
# Subtest: child
    ok 1
    1..1
not ok 1 - child
  ---
  some: diagnostics
  ...
1..1
# failed 1 test

`

exports[`test/parser-stringify.js TAP buffered-with-diag-not-ok.tap strict > parsed 1`] = `
Array [
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: child\\n",
      ],
      Array [
        "assert",
        Result {
          "fullname": "child",
          "id": 1,
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "buffered": true,
      "diag": Object {
        "some": "diagnostics",
      },
      "fullname": "",
      "id": 1,
      "name": "child",
      "ok": false,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# failed 1 test\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 1,
      "failures": Array [
        Result {
          "buffered": true,
          "diag": Object {
            "some": "diagnostics",
          },
          "fullname": "",
          "id": 1,
          "name": "child",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP buffered-with-diag-not-ok.tap strict > stringified 1`] = `
# Subtest: child
    ok 1
    1..1
not ok 1 - child
  ---
  some: diagnostics
  ...
1..1
# failed 1 test

`

exports[`test/parser-stringify.js TAP buffered-with-diag-not-ok.tap strict > stringified flat 1`] = `
# Subtest: child
    ok 1
    1..1
not ok 1 - child
  ---
  some: diagnostics
  ...
1..1
# failed 1 test

`

exports[`test/parser-stringify.js TAP buffered-with-diag-not-ok.tap strictBail > parsed 1`] = `
Array [
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: child\\n",
      ],
      Array [
        "assert",
        Result {
          "fullname": "child",
          "id": 1,
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "buffered": true,
      "diag": Object {
        "some": "diagnostics",
      },
      "fullname": "",
      "id": 1,
      "name": "child",
      "ok": false,
    },
  ],
  Array [
    "bailout",
    "child",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": "child",
      "count": 1,
      "fail": 1,
      "failures": Array [
        Result {
          "buffered": true,
          "diag": Object {
            "some": "diagnostics",
          },
          "fullname": "",
          "id": 1,
          "name": "child",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": null,
        "skipAll": false,
        "skipReason": "",
        "start": null,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP buffered-with-diag-not-ok.tap strictBail > stringified 1`] = `
# Subtest: child
    ok 1
    1..1
not ok 1 - child
  ---
  some: diagnostics
  ...
Bail out! child

`

exports[`test/parser-stringify.js TAP buffered-with-diag-not-ok.tap strictBail > stringified flat 1`] = `
# Subtest: child
    ok 1
    1..1
not ok 1 - child
  ---
  some: diagnostics
  ...
Bail out! child

`

exports[`test/parser-stringify.js TAP buffered-with-diag-ok.tap bail > parsed 1`] = `
Array [
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: child\\n",
      ],
      Array [
        "assert",
        Result {
          "fullname": "child",
          "id": 1,
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "buffered": true,
      "diag": Object {
        "some": "diagnostics",
      },
      "fullname": "",
      "id": 1,
      "name": "child",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP buffered-with-diag-ok.tap bail > stringified 1`] = `
# Subtest: child
    ok 1
    1..1
ok 1 - child
  ---
  some: diagnostics
  ...
1..1

`

exports[`test/parser-stringify.js TAP buffered-with-diag-ok.tap bail > stringified flat 1`] = `
# Subtest: child
    ok 1
    1..1
ok 1 - child
  ---
  some: diagnostics
  ...
1..1

`

exports[`test/parser-stringify.js TAP buffered-with-diag-ok.tap default settings > parsed 1`] = `
Array [
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: child\\n",
      ],
      Array [
        "assert",
        Result {
          "fullname": "child",
          "id": 1,
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "buffered": true,
      "diag": Object {
        "some": "diagnostics",
      },
      "fullname": "",
      "id": 1,
      "name": "child",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP buffered-with-diag-ok.tap default settings > stringified 1`] = `
# Subtest: child
    ok 1
    1..1
ok 1 - child
  ---
  some: diagnostics
  ...
1..1

`

exports[`test/parser-stringify.js TAP buffered-with-diag-ok.tap default settings > stringified flat 1`] = `
# Subtest: child
    ok 1
    1..1
ok 1 - child
  ---
  some: diagnostics
  ...
1..1

`

exports[`test/parser-stringify.js TAP buffered-with-diag-ok.tap strict > parsed 1`] = `
Array [
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: child\\n",
      ],
      Array [
        "assert",
        Result {
          "fullname": "child",
          "id": 1,
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "buffered": true,
      "diag": Object {
        "some": "diagnostics",
      },
      "fullname": "",
      "id": 1,
      "name": "child",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP buffered-with-diag-ok.tap strict > stringified 1`] = `
# Subtest: child
    ok 1
    1..1
ok 1 - child
  ---
  some: diagnostics
  ...
1..1

`

exports[`test/parser-stringify.js TAP buffered-with-diag-ok.tap strict > stringified flat 1`] = `
# Subtest: child
    ok 1
    1..1
ok 1 - child
  ---
  some: diagnostics
  ...
1..1

`

exports[`test/parser-stringify.js TAP buffered-with-diag-ok.tap strictBail > parsed 1`] = `
Array [
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: child\\n",
      ],
      Array [
        "assert",
        Result {
          "fullname": "child",
          "id": 1,
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "buffered": true,
      "diag": Object {
        "some": "diagnostics",
      },
      "fullname": "",
      "id": 1,
      "name": "child",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP buffered-with-diag-ok.tap strictBail > stringified 1`] = `
# Subtest: child
    ok 1
    1..1
ok 1 - child
  ---
  some: diagnostics
  ...
1..1

`

exports[`test/parser-stringify.js TAP buffered-with-diag-ok.tap strictBail > stringified flat 1`] = `
# Subtest: child
    ok 1
    1..1
ok 1 - child
  ---
  some: diagnostics
  ...
1..1

`

exports[`test/parser-stringify.js TAP child-after-failure.tap bail > parsed 1`] = `
Array [
  Array [
    "assert",
    Result {
      "fullname": "",
      "name": "1",
      "ok": false,
    },
  ],
  Array [
    "bailout",
    "1",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": "1",
      "count": 1,
      "fail": 1,
      "failures": Array [
        Result {
          "fullname": "",
          "name": "1",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": null,
        "skipAll": false,
        "skipReason": "",
        "start": null,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP child-after-failure.tap bail > stringified 1`] = `
not ok - 1
Bail out! 1

`

exports[`test/parser-stringify.js TAP child-after-failure.tap bail > stringified flat 1`] = `
not ok - 1
Bail out! 1

`

exports[`test/parser-stringify.js TAP child-after-failure.tap default settings > parsed 1`] = `
Array [
  Array [
    "assert",
    Result {
      "fullname": "",
      "name": "1",
      "ok": false,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: child\\n",
      ],
      Array [
        "assert",
        Result {
          "fullname": "child",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "child",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 2,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# failed 1 of 2 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 2,
      "fail": 1,
      "failures": Array [
        Result {
          "fullname": "",
          "name": "1",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 2,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP child-after-failure.tap default settings > stringified 1`] = `
not ok - 1
# Subtest: child
    ok
    1..1
ok 2 - child
1..2
# failed 1 of 2 tests

`

exports[`test/parser-stringify.js TAP child-after-failure.tap default settings > stringified flat 1`] = `
not ok - 1
# Subtest: child
    ok
    1..1
ok 2 - child
1..2
# failed 1 of 2 tests

`

exports[`test/parser-stringify.js TAP child-after-failure.tap strict > parsed 1`] = `
Array [
  Array [
    "assert",
    Result {
      "fullname": "",
      "name": "1",
      "ok": false,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: child\\n",
      ],
      Array [
        "assert",
        Result {
          "fullname": "child",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "child",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 2,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# failed 1 of 2 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 2,
      "fail": 1,
      "failures": Array [
        Result {
          "fullname": "",
          "name": "1",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 2,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP child-after-failure.tap strict > stringified 1`] = `
not ok - 1
# Subtest: child
    ok
    1..1
ok 2 - child
1..2
# failed 1 of 2 tests

`

exports[`test/parser-stringify.js TAP child-after-failure.tap strict > stringified flat 1`] = `
not ok - 1
# Subtest: child
    ok
    1..1
ok 2 - child
1..2
# failed 1 of 2 tests

`

exports[`test/parser-stringify.js TAP child-after-failure.tap strictBail > parsed 1`] = `
Array [
  Array [
    "assert",
    Result {
      "fullname": "",
      "name": "1",
      "ok": false,
    },
  ],
  Array [
    "bailout",
    "1",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": "1",
      "count": 1,
      "fail": 1,
      "failures": Array [
        Result {
          "fullname": "",
          "name": "1",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": null,
        "skipAll": false,
        "skipReason": "",
        "start": null,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP child-after-failure.tap strictBail > stringified 1`] = `
not ok - 1
Bail out! 1

`

exports[`test/parser-stringify.js TAP child-after-failure.tap strictBail > stringified flat 1`] = `
not ok - 1
Bail out! 1

`

exports[`test/parser-stringify.js TAP child-extra.tap bail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: test/debug-test.js\\n",
      ],
      Array [
        "comment",
        "# debug test\\n",
      ],
      Array [
        "assert",
        Result {
          "fullname": "test/debug-test.js",
          "id": 1,
          "name": "Should output debugger message",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "comment",
        "# tests 1\\n",
      ],
      Array [
        "comment",
        "# pass  1\\n",
      ],
      Array [
        "comment",
        "# ok\\n",
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": 537.383,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "extra",
    "debug test\\n",
  ],
  Array [
    "extra",
    "t.plan=1\\n",
  ],
  Array [
    "extra",
    "'Debugger listening on port 5858\\\\n'\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "test/debug-test.js",
      "ok": true,
      "time": 537.383,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# time=543.783ms\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": 543.783,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP child-extra.tap bail > stringified 1`] = `
TAP version 13
# Subtest: test/debug-test.js
    # debug test
    ok 1 - Should output debugger message
    1..1
    # tests 1
    # pass  1
    # ok
debug test
t.plan=1
'Debugger listening on port 5858\\n'
ok 1 - test/debug-test.js # time=537.383ms
1..1
# time=543.783ms

`

exports[`test/parser-stringify.js TAP child-extra.tap bail > stringified flat 1`] = `
TAP version 13
# Subtest: test/debug-test.js
    # debug test
    ok 1 - Should output debugger message
    1..1
    # tests 1
    # pass  1
    # ok
debug test
t.plan=1
'Debugger listening on port 5858\\n'
ok 1 - test/debug-test.js # time=537.383ms
1..1
# time=543.783ms

`

exports[`test/parser-stringify.js TAP child-extra.tap default settings > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: test/debug-test.js\\n",
      ],
      Array [
        "comment",
        "# debug test\\n",
      ],
      Array [
        "assert",
        Result {
          "fullname": "test/debug-test.js",
          "id": 1,
          "name": "Should output debugger message",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "comment",
        "# tests 1\\n",
      ],
      Array [
        "comment",
        "# pass  1\\n",
      ],
      Array [
        "comment",
        "# ok\\n",
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": 537.383,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "extra",
    "debug test\\n",
  ],
  Array [
    "extra",
    "t.plan=1\\n",
  ],
  Array [
    "extra",
    "'Debugger listening on port 5858\\\\n'\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "test/debug-test.js",
      "ok": true,
      "time": 537.383,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# time=543.783ms\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": 543.783,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP child-extra.tap default settings > stringified 1`] = `
TAP version 13
# Subtest: test/debug-test.js
    # debug test
    ok 1 - Should output debugger message
    1..1
    # tests 1
    # pass  1
    # ok
debug test
t.plan=1
'Debugger listening on port 5858\\n'
ok 1 - test/debug-test.js # time=537.383ms
1..1
# time=543.783ms

`

exports[`test/parser-stringify.js TAP child-extra.tap default settings > stringified flat 1`] = `
TAP version 13
# Subtest: test/debug-test.js
    # debug test
    ok 1 - Should output debugger message
    1..1
    # tests 1
    # pass  1
    # ok
debug test
t.plan=1
'Debugger listening on port 5858\\n'
ok 1 - test/debug-test.js # time=537.383ms
1..1
# time=543.783ms

`

exports[`test/parser-stringify.js TAP child-extra.tap strict > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: test/debug-test.js\\n",
      ],
      Array [
        "comment",
        "# debug test\\n",
      ],
      Array [
        "assert",
        Result {
          "fullname": "test/debug-test.js",
          "id": 1,
          "name": "Should output debugger message",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "comment",
        "# tests 1\\n",
      ],
      Array [
        "comment",
        "# pass  1\\n",
      ],
      Array [
        "comment",
        "# ok\\n",
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": 537.383,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "extra",
    "debug test\\n",
  ],
  Array [
    "extra",
    "t.plan=1\\n",
  ],
  Array [
    "extra",
    "'Debugger listening on port 5858\\\\n'\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "test/debug-test.js",
      "ok": true,
      "time": 537.383,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# time=543.783ms\\n",
  ],
  Array [
    "comment",
    "# failed 3 test\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 3,
      "failures": Array [
        Object {
          "data": "debug test\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "t.plan=1\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "'Debugger listening on port 5858\\\\n'\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
      ],
      "ok": false,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": 543.783,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP child-extra.tap strict > stringified 1`] = `
TAP version 13
# Subtest: test/debug-test.js
    # debug test
    ok 1 - Should output debugger message
    1..1
    # tests 1
    # pass  1
    # ok
debug test
t.plan=1
'Debugger listening on port 5858\\n'
ok 1 - test/debug-test.js # time=537.383ms
1..1
# time=543.783ms
# failed 3 test

`

exports[`test/parser-stringify.js TAP child-extra.tap strict > stringified flat 1`] = `
TAP version 13
# Subtest: test/debug-test.js
    # debug test
    ok 1 - Should output debugger message
    1..1
    # tests 1
    # pass  1
    # ok
debug test
t.plan=1
'Debugger listening on port 5858\\n'
ok 1 - test/debug-test.js # time=537.383ms
1..1
# time=543.783ms
# failed 3 test

`

exports[`test/parser-stringify.js TAP child-extra.tap strictBail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: test/debug-test.js\\n",
      ],
      Array [
        "comment",
        "# debug test\\n",
      ],
      Array [
        "assert",
        Result {
          "fullname": "test/debug-test.js",
          "id": 1,
          "name": "Should output debugger message",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "comment",
        "# tests 1\\n",
      ],
      Array [
        "comment",
        "# pass  1\\n",
      ],
      Array [
        "comment",
        "# ok\\n",
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": 537.383,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "extra",
    "debug test\\n",
  ],
  Array [
    "extra",
    "t.plan=1\\n",
  ],
  Array [
    "extra",
    "'Debugger listening on port 5858\\\\n'\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "test/debug-test.js",
      "ok": true,
      "time": 537.383,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# time=543.783ms\\n",
  ],
  Array [
    "comment",
    "# failed 3 test\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 3,
      "failures": Array [
        Object {
          "data": "debug test\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "t.plan=1\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "'Debugger listening on port 5858\\\\n'\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
      ],
      "ok": false,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": 543.783,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP child-extra.tap strictBail > stringified 1`] = `
TAP version 13
# Subtest: test/debug-test.js
    # debug test
    ok 1 - Should output debugger message
    1..1
    # tests 1
    # pass  1
    # ok
debug test
t.plan=1
'Debugger listening on port 5858\\n'
ok 1 - test/debug-test.js # time=537.383ms
1..1
# time=543.783ms
# failed 3 test

`

exports[`test/parser-stringify.js TAP child-extra.tap strictBail > stringified flat 1`] = `
TAP version 13
# Subtest: test/debug-test.js
    # debug test
    ok 1 - Should output debugger message
    1..1
    # tests 1
    # pass  1
    # ok
debug test
t.plan=1
'Debugger listening on port 5858\\n'
ok 1 - test/debug-test.js # time=537.383ms
1..1
# time=543.783ms
# failed 3 test

`

exports[`test/parser-stringify.js TAP combined.tap bail > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 10,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "basset hounds got long ears",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "all hell broke loose",
      "ok": false,
    },
  ],
  Array [
    "bailout",
    "all hell broke loose",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": "all hell broke loose",
      "count": 3,
      "fail": 1,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 3,
          "name": "all hell broke loose",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 2,
      "plan": FinalPlan {
        "comment": "",
        "end": 10,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP combined.tap bail > stringified 1`] = `
1..10
ok 1
ok 2 - basset hounds got long ears
not ok 3 - all hell broke loose
Bail out! all hell broke loose

`

exports[`test/parser-stringify.js TAP combined.tap bail > stringified flat 1`] = `
1..10
ok 1
ok 2 - basset hounds got long ears
not ok 3 - all hell broke loose
Bail out! all hell broke loose

`

exports[`test/parser-stringify.js TAP combined.tap default settings > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 10,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "basset hounds got long ears",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "all hell broke loose",
      "ok": false,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "name": "",
      "ok": false,
      "todo": "if I heard a voice from heaven ...",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "name": "say \\"live without loving\\",",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 6,
      "name": "I'd beg off.",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 7,
      "name": "",
      "ok": true,
      "skip": "contract negotiations",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 8,
      "name": "Girls are such exquisite hell",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 9,
      "name": "Elegy 9B",
      "ok": true,
      "todo": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 10,
      "ok": false,
    },
  ],
  Array [
    "comment",
    "# failed 3 of 10 tests\\n",
  ],
  Array [
    "comment",
    "# todo: 2\\n",
  ],
  Array [
    "comment",
    "# skip: 1\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 10,
      "fail": 3,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 3,
          "name": "all hell broke loose",
          "ok": false,
        },
        Result {
          "fullname": "",
          "id": 10,
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 7,
      "plan": FinalPlan {
        "comment": "",
        "end": 10,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 1,
      "time": null,
      "todo": 2,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP combined.tap default settings > stringified 1`] = `
1..10
ok 1
ok 2 - basset hounds got long ears
not ok 3 - all hell broke loose
not ok 4 # TODO if I heard a voice from heaven ...
ok - say "live without loving",
ok 6 - I'd beg off.
ok 7 # SKIP contract negotiations
ok 8 - Girls are such exquisite hell
ok 9 - Elegy 9B # TODO
not ok 10
# failed 3 of 10 tests
# todo: 2
# skip: 1

`

exports[`test/parser-stringify.js TAP combined.tap default settings > stringified flat 1`] = `
1..10
ok 1
ok 2 - basset hounds got long ears
not ok 3 - all hell broke loose
not ok 4 # TODO if I heard a voice from heaven ...
ok - say "live without loving",
ok 6 - I'd beg off.
ok 7 # SKIP contract negotiations
ok 8 - Girls are such exquisite hell
ok 9 - Elegy 9B # TODO
not ok 10
# failed 3 of 10 tests
# todo: 2
# skip: 1

`

exports[`test/parser-stringify.js TAP combined.tap strict > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 10,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "basset hounds got long ears",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "all hell broke loose",
      "ok": false,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "name": "",
      "ok": false,
      "todo": "if I heard a voice from heaven ...",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "name": "say \\"live without loving\\",",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 6,
      "name": "I'd beg off.",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 7,
      "name": "",
      "ok": true,
      "skip": "contract negotiations",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 8,
      "name": "Girls are such exquisite hell",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 9,
      "name": "Elegy 9B",
      "ok": true,
      "todo": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 10,
      "ok": false,
    },
  ],
  Array [
    "comment",
    "# failed 3 of 10 tests\\n",
  ],
  Array [
    "comment",
    "# todo: 2\\n",
  ],
  Array [
    "comment",
    "# skip: 1\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 10,
      "fail": 3,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 3,
          "name": "all hell broke loose",
          "ok": false,
        },
        Result {
          "fullname": "",
          "id": 10,
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 7,
      "plan": FinalPlan {
        "comment": "",
        "end": 10,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 1,
      "time": null,
      "todo": 2,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP combined.tap strict > stringified 1`] = `
1..10
ok 1
ok 2 - basset hounds got long ears
not ok 3 - all hell broke loose
not ok 4 # TODO if I heard a voice from heaven ...
ok - say "live without loving",
ok 6 - I'd beg off.
ok 7 # SKIP contract negotiations
ok 8 - Girls are such exquisite hell
ok 9 - Elegy 9B # TODO
not ok 10
# failed 3 of 10 tests
# todo: 2
# skip: 1

`

exports[`test/parser-stringify.js TAP combined.tap strict > stringified flat 1`] = `
1..10
ok 1
ok 2 - basset hounds got long ears
not ok 3 - all hell broke loose
not ok 4 # TODO if I heard a voice from heaven ...
ok - say "live without loving",
ok 6 - I'd beg off.
ok 7 # SKIP contract negotiations
ok 8 - Girls are such exquisite hell
ok 9 - Elegy 9B # TODO
not ok 10
# failed 3 of 10 tests
# todo: 2
# skip: 1

`

exports[`test/parser-stringify.js TAP combined.tap strictBail > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 10,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "basset hounds got long ears",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "all hell broke loose",
      "ok": false,
    },
  ],
  Array [
    "bailout",
    "all hell broke loose",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": "all hell broke loose",
      "count": 3,
      "fail": 1,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 3,
          "name": "all hell broke loose",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 2,
      "plan": FinalPlan {
        "comment": "",
        "end": 10,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP combined.tap strictBail > stringified 1`] = `
1..10
ok 1
ok 2 - basset hounds got long ears
not ok 3 - all hell broke loose
Bail out! all hell broke loose

`

exports[`test/parser-stringify.js TAP combined.tap strictBail > stringified flat 1`] = `
1..10
ok 1
ok 2 - basset hounds got long ears
not ok 3 - all hell broke loose
Bail out! all hell broke loose

`

exports[`test/parser-stringify.js TAP combined_compat.tap bail > parsed 1`] = `
Array [
  Array [
    "extra",
    "1..10 todo 4 10\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "basset hounds got long ears",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "all hell broke lose",
      "ok": false,
    },
  ],
  Array [
    "bailout",
    "all hell broke lose",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": "all hell broke lose",
      "count": 3,
      "fail": 1,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 3,
          "name": "all hell broke lose",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 2,
      "plan": FinalPlan {
        "comment": "",
        "end": null,
        "skipAll": false,
        "skipReason": "",
        "start": null,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP combined_compat.tap bail > stringified 1`] = `
1..10 todo 4 10
ok 1
ok 2 - basset hounds got long ears
not ok 3 - all hell broke lose
Bail out! all hell broke lose

`

exports[`test/parser-stringify.js TAP combined_compat.tap bail > stringified flat 1`] = `
1..10 todo 4 10
ok 1
ok 2 - basset hounds got long ears
not ok 3 - all hell broke lose
Bail out! all hell broke lose

`

exports[`test/parser-stringify.js TAP combined_compat.tap default settings > parsed 1`] = `
Array [
  Array [
    "extra",
    "1..10 todo 4 10\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "basset hounds got long ears",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "all hell broke lose",
      "ok": false,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 6,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 7,
      "name": "",
      "ok": true,
      "skip": "contract negociations",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 8,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 9,
      "ok": false,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 10,
      "ok": false,
    },
  ],
  Array [
    "comment",
    "# test count(10) != plan(null)\\n",
  ],
  Array [
    "comment",
    "# failed 4 of 10 tests\\n",
  ],
  Array [
    "comment",
    "# skip: 1\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 10,
      "fail": 4,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 3,
          "name": "all hell broke lose",
          "ok": false,
        },
        Result {
          "fullname": "",
          "id": 9,
          "ok": false,
        },
        Result {
          "fullname": "",
          "id": 10,
          "ok": false,
        },
        Object {
          "tapError": "no plan",
        },
      ],
      "ok": false,
      "pass": 7,
      "plan": FinalPlan {
        "comment": "",
        "end": null,
        "skipAll": false,
        "skipReason": "",
        "start": null,
      },
      "skip": 1,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP combined_compat.tap default settings > stringified 1`] = `
1..10 todo 4 10
ok 1
ok 2 - basset hounds got long ears
not ok 3 - all hell broke lose
ok 4
ok
ok 6
ok 7 # SKIP contract negociations
ok 8
not ok 9
not ok 10
# test count(10) != plan(null)
# failed 4 of 10 tests
# skip: 1

`

exports[`test/parser-stringify.js TAP combined_compat.tap default settings > stringified flat 1`] = `
1..10 todo 4 10
ok 1
ok 2 - basset hounds got long ears
not ok 3 - all hell broke lose
ok 4
ok
ok 6
ok 7 # SKIP contract negociations
ok 8
not ok 9
not ok 10
# test count(10) != plan(null)
# failed 4 of 10 tests
# skip: 1

`

exports[`test/parser-stringify.js TAP combined_compat.tap strict > parsed 1`] = `
Array [
  Array [
    "extra",
    "1..10 todo 4 10\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "basset hounds got long ears",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "all hell broke lose",
      "ok": false,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 6,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 7,
      "name": "",
      "ok": true,
      "skip": "contract negociations",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 8,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 9,
      "ok": false,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 10,
      "ok": false,
    },
  ],
  Array [
    "comment",
    "# test count(10) != plan(null)\\n",
  ],
  Array [
    "comment",
    "# failed 5 of 10 tests\\n",
  ],
  Array [
    "comment",
    "# skip: 1\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 10,
      "fail": 5,
      "failures": Array [
        Object {
          "data": "1..10 todo 4 10\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Result {
          "fullname": "",
          "id": 3,
          "name": "all hell broke lose",
          "ok": false,
        },
        Result {
          "fullname": "",
          "id": 9,
          "ok": false,
        },
        Result {
          "fullname": "",
          "id": 10,
          "ok": false,
        },
        Object {
          "tapError": "no plan",
        },
      ],
      "ok": false,
      "pass": 7,
      "plan": FinalPlan {
        "comment": "",
        "end": null,
        "skipAll": false,
        "skipReason": "",
        "start": null,
      },
      "skip": 1,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP combined_compat.tap strict > stringified 1`] = `
1..10 todo 4 10
ok 1
ok 2 - basset hounds got long ears
not ok 3 - all hell broke lose
ok 4
ok
ok 6
ok 7 # SKIP contract negociations
ok 8
not ok 9
not ok 10
# test count(10) != plan(null)
# failed 5 of 10 tests
# skip: 1

`

exports[`test/parser-stringify.js TAP combined_compat.tap strict > stringified flat 1`] = `
1..10 todo 4 10
ok 1
ok 2 - basset hounds got long ears
not ok 3 - all hell broke lose
ok 4
ok
ok 6
ok 7 # SKIP contract negociations
ok 8
not ok 9
not ok 10
# test count(10) != plan(null)
# failed 5 of 10 tests
# skip: 1

`

exports[`test/parser-stringify.js TAP combined_compat.tap strictBail > parsed 1`] = `
Array [
  Array [
    "extra",
    "1..10 todo 4 10\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "basset hounds got long ears",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "all hell broke lose",
      "ok": false,
    },
  ],
  Array [
    "bailout",
    "all hell broke lose",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": "all hell broke lose",
      "count": 3,
      "fail": 2,
      "failures": Array [
        Object {
          "data": "1..10 todo 4 10\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Result {
          "fullname": "",
          "id": 3,
          "name": "all hell broke lose",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 2,
      "plan": FinalPlan {
        "comment": "",
        "end": null,
        "skipAll": false,
        "skipReason": "",
        "start": null,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP combined_compat.tap strictBail > stringified 1`] = `
1..10 todo 4 10
ok 1
ok 2 - basset hounds got long ears
not ok 3 - all hell broke lose
Bail out! all hell broke lose

`

exports[`test/parser-stringify.js TAP combined_compat.tap strictBail > stringified flat 1`] = `
1..10 todo 4 10
ok 1
ok 2 - basset hounds got long ears
not ok 3 - all hell broke lose
Bail out! all hell broke lose

`

exports[`test/parser-stringify.js TAP comment-mid-diag-postplan.tap bail > parsed 1`] = `
Array [
  Array [
    "comment",
    "# before version\\n",
  ],
  Array [
    "version",
    13,
  ],
  Array [
    "comment",
    "# after version, before result\\n",
  ],
  Array [
    "assert",
    Result {
      "diag": Object {
        "after": "comment",
      },
      "fullname": "",
      "id": 1,
      "name": "please keep my diags",
      "ok": false,
    },
  ],
  Array [
    "comment",
    "  # before diag\\n",
  ],
  Array [
    "comment",
    "# mid diag\\n",
  ],
  Array [
    "comment",
    "  # after diag\\n",
  ],
  Array [
    "bailout",
    "please keep my diags",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": "please keep my diags",
      "count": 1,
      "fail": 1,
      "failures": Array [
        Result {
          "diag": Object {
            "after": "comment",
          },
          "fullname": "",
          "id": 1,
          "name": "please keep my diags",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": null,
        "skipAll": false,
        "skipReason": "",
        "start": null,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP comment-mid-diag-postplan.tap bail > stringified 1`] = `
# before version
TAP version 13
# after version, before result
not ok 1 - please keep my diags
  ---
  after: comment
  ...
  # before diag
# mid diag
  # after diag
Bail out! please keep my diags

`

exports[`test/parser-stringify.js TAP comment-mid-diag-postplan.tap bail > stringified flat 1`] = `
# before version
TAP version 13
# after version, before result
not ok 1 - please keep my diags
  ---
  after: comment
  ...
  # before diag
# mid diag
  # after diag
Bail out! please keep my diags

`

exports[`test/parser-stringify.js TAP comment-mid-diag-postplan.tap default settings > parsed 1`] = `
Array [
  Array [
    "comment",
    "# before version\\n",
  ],
  Array [
    "version",
    13,
  ],
  Array [
    "comment",
    "# after version, before result\\n",
  ],
  Array [
    "assert",
    Result {
      "diag": Object {
        "after": "comment",
      },
      "fullname": "",
      "id": 1,
      "name": "please keep my diags",
      "ok": false,
    },
  ],
  Array [
    "comment",
    "  # before diag\\n",
  ],
  Array [
    "comment",
    "# mid diag\\n",
  ],
  Array [
    "comment",
    "  # after diag\\n",
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: child\\n",
      ],
      Array [
        "plan",
        Object {
          "end": 2,
          "start": 1,
        },
      ],
      Array [
        "comment",
        "# before 1\\n",
      ],
      Array [
        "assert",
        Result {
          "fullname": "child",
          "id": 1,
          "ok": true,
        },
      ],
      Array [
        "comment",
        "# before 2\\n",
      ],
      Array [
        "assert",
        Result {
          "fullname": "child",
          "id": 2,
          "ok": true,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 2,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 2,
          "plan": FinalPlan {
            "comment": "",
            "end": 2,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "comment",
    "# before 2\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "child",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# after 2, brefore plan\\n",
  ],
  Array [
    "plan",
    Object {
      "end": 2,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# after plan\\n",
  ],
  Array [
    "comment",
    "# failed 1 of 2 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 2,
      "fail": 1,
      "failures": Array [
        Result {
          "diag": Object {
            "after": "comment",
          },
          "fullname": "",
          "id": 1,
          "name": "please keep my diags",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 2,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP comment-mid-diag-postplan.tap default settings > stringified 1`] = `
# before version
TAP version 13
# after version, before result
not ok 1 - please keep my diags
  ---
  after: comment
  ...
  # before diag
# mid diag
  # after diag
# Subtest: child
    1..2
    # before 1
    ok 1
    # before 2
    ok 2
# before 2
ok 2 - child
# after 2, brefore plan
1..2
# after plan
# failed 1 of 2 tests

`

exports[`test/parser-stringify.js TAP comment-mid-diag-postplan.tap default settings > stringified flat 1`] = `
# before version
TAP version 13
# after version, before result
not ok 1 - please keep my diags
  ---
  after: comment
  ...
  # before diag
# mid diag
  # after diag
# Subtest: child
    1..2
    # before 1
    ok 1
    # before 2
    ok 2
# before 2
ok 2 - child
# after 2, brefore plan
1..2
# after plan
# failed 1 of 2 tests

`

exports[`test/parser-stringify.js TAP comment-mid-diag-postplan.tap strict > parsed 1`] = `
Array [
  Array [
    "comment",
    "# before version\\n",
  ],
  Array [
    "version",
    13,
  ],
  Array [
    "comment",
    "# after version, before result\\n",
  ],
  Array [
    "assert",
    Result {
      "diag": Object {
        "after": "comment",
      },
      "fullname": "",
      "id": 1,
      "name": "please keep my diags",
      "ok": false,
    },
  ],
  Array [
    "comment",
    "  # before diag\\n",
  ],
  Array [
    "comment",
    "# mid diag\\n",
  ],
  Array [
    "comment",
    "  # after diag\\n",
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: child\\n",
      ],
      Array [
        "plan",
        Object {
          "end": 2,
          "start": 1,
        },
      ],
      Array [
        "comment",
        "# before 1\\n",
      ],
      Array [
        "assert",
        Result {
          "fullname": "child",
          "id": 1,
          "ok": true,
        },
      ],
      Array [
        "comment",
        "# before 2\\n",
      ],
      Array [
        "assert",
        Result {
          "fullname": "child",
          "id": 2,
          "ok": true,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 2,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 2,
          "plan": FinalPlan {
            "comment": "",
            "end": 2,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "comment",
    "# before 2\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "child",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# after 2, brefore plan\\n",
  ],
  Array [
    "plan",
    Object {
      "end": 2,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# after plan\\n",
  ],
  Array [
    "comment",
    "# failed 1 of 2 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 2,
      "fail": 1,
      "failures": Array [
        Result {
          "diag": Object {
            "after": "comment",
          },
          "fullname": "",
          "id": 1,
          "name": "please keep my diags",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 2,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP comment-mid-diag-postplan.tap strict > stringified 1`] = `
# before version
TAP version 13
# after version, before result
not ok 1 - please keep my diags
  ---
  after: comment
  ...
  # before diag
# mid diag
  # after diag
# Subtest: child
    1..2
    # before 1
    ok 1
    # before 2
    ok 2
# before 2
ok 2 - child
# after 2, brefore plan
1..2
# after plan
# failed 1 of 2 tests

`

exports[`test/parser-stringify.js TAP comment-mid-diag-postplan.tap strict > stringified flat 1`] = `
# before version
TAP version 13
# after version, before result
not ok 1 - please keep my diags
  ---
  after: comment
  ...
  # before diag
# mid diag
  # after diag
# Subtest: child
    1..2
    # before 1
    ok 1
    # before 2
    ok 2
# before 2
ok 2 - child
# after 2, brefore plan
1..2
# after plan
# failed 1 of 2 tests

`

exports[`test/parser-stringify.js TAP comment-mid-diag-postplan.tap strictBail > parsed 1`] = `
Array [
  Array [
    "comment",
    "# before version\\n",
  ],
  Array [
    "version",
    13,
  ],
  Array [
    "comment",
    "# after version, before result\\n",
  ],
  Array [
    "assert",
    Result {
      "diag": Object {
        "after": "comment",
      },
      "fullname": "",
      "id": 1,
      "name": "please keep my diags",
      "ok": false,
    },
  ],
  Array [
    "comment",
    "  # before diag\\n",
  ],
  Array [
    "comment",
    "# mid diag\\n",
  ],
  Array [
    "comment",
    "  # after diag\\n",
  ],
  Array [
    "bailout",
    "please keep my diags",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": "please keep my diags",
      "count": 1,
      "fail": 1,
      "failures": Array [
        Result {
          "diag": Object {
            "after": "comment",
          },
          "fullname": "",
          "id": 1,
          "name": "please keep my diags",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": null,
        "skipAll": false,
        "skipReason": "",
        "start": null,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP comment-mid-diag-postplan.tap strictBail > stringified 1`] = `
# before version
TAP version 13
# after version, before result
not ok 1 - please keep my diags
  ---
  after: comment
  ...
  # before diag
# mid diag
  # after diag
Bail out! please keep my diags

`

exports[`test/parser-stringify.js TAP comment-mid-diag-postplan.tap strictBail > stringified flat 1`] = `
# before version
TAP version 13
# after version, before result
not ok 1 - please keep my diags
  ---
  after: comment
  ...
  # before diag
# mid diag
  # after diag
Bail out! please keep my diags

`

exports[`test/parser-stringify.js TAP comment-mid-diag.tap bail > parsed 1`] = `
Array [
  Array [
    "comment",
    "# before version\\n",
  ],
  Array [
    "version",
    13,
  ],
  Array [
    "comment",
    "# after version, before plan\\n",
  ],
  Array [
    "plan",
    Object {
      "end": 2,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# before result\\n",
  ],
  Array [
    "assert",
    Result {
      "diag": Object {
        "after": "comment",
      },
      "fullname": "",
      "id": 1,
      "name": "please keep my diags",
      "ok": false,
    },
  ],
  Array [
    "comment",
    "  # before diag\\n",
  ],
  Array [
    "comment",
    "# mid diag\\n",
  ],
  Array [
    "comment",
    "  # after diag\\n",
  ],
  Array [
    "comment",
    "# before 2\\n",
  ],
  Array [
    "bailout",
    "please keep my diags",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": "please keep my diags",
      "count": 1,
      "fail": 1,
      "failures": Array [
        Result {
          "diag": Object {
            "after": "comment",
          },
          "fullname": "",
          "id": 1,
          "name": "please keep my diags",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": 2,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP comment-mid-diag.tap bail > stringified 1`] = `
# before version
TAP version 13
# after version, before plan
1..2
# before result
not ok 1 - please keep my diags
  ---
  after: comment
  ...
  # before diag
# mid diag
  # after diag
# before 2
Bail out! please keep my diags

`

exports[`test/parser-stringify.js TAP comment-mid-diag.tap bail > stringified flat 1`] = `
# before version
TAP version 13
# after version, before plan
1..2
# before result
not ok 1 - please keep my diags
  ---
  after: comment
  ...
  # before diag
# mid diag
  # after diag
# before 2
Bail out! please keep my diags

`

exports[`test/parser-stringify.js TAP comment-mid-diag.tap default settings > parsed 1`] = `
Array [
  Array [
    "comment",
    "# before version\\n",
  ],
  Array [
    "version",
    13,
  ],
  Array [
    "comment",
    "# after version, before plan\\n",
  ],
  Array [
    "plan",
    Object {
      "end": 2,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# before result\\n",
  ],
  Array [
    "assert",
    Result {
      "diag": Object {
        "after": "comment",
      },
      "fullname": "",
      "id": 1,
      "name": "please keep my diags",
      "ok": false,
    },
  ],
  Array [
    "comment",
    "  # before diag\\n",
  ],
  Array [
    "comment",
    "# mid diag\\n",
  ],
  Array [
    "comment",
    "  # after diag\\n",
  ],
  Array [
    "comment",
    "# before 2\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# after 2\\n",
  ],
  Array [
    "comment",
    "# failed 1 of 2 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 2,
      "fail": 1,
      "failures": Array [
        Result {
          "diag": Object {
            "after": "comment",
          },
          "fullname": "",
          "id": 1,
          "name": "please keep my diags",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 2,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP comment-mid-diag.tap default settings > stringified 1`] = `
# before version
TAP version 13
# after version, before plan
1..2
# before result
not ok 1 - please keep my diags
  ---
  after: comment
  ...
  # before diag
# mid diag
  # after diag
# before 2
ok 2
# after 2
# failed 1 of 2 tests

`

exports[`test/parser-stringify.js TAP comment-mid-diag.tap default settings > stringified flat 1`] = `
# before version
TAP version 13
# after version, before plan
1..2
# before result
not ok 1 - please keep my diags
  ---
  after: comment
  ...
  # before diag
# mid diag
  # after diag
# before 2
ok 2
# after 2
# failed 1 of 2 tests

`

exports[`test/parser-stringify.js TAP comment-mid-diag.tap strict > parsed 1`] = `
Array [
  Array [
    "comment",
    "# before version\\n",
  ],
  Array [
    "version",
    13,
  ],
  Array [
    "comment",
    "# after version, before plan\\n",
  ],
  Array [
    "plan",
    Object {
      "end": 2,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# before result\\n",
  ],
  Array [
    "assert",
    Result {
      "diag": Object {
        "after": "comment",
      },
      "fullname": "",
      "id": 1,
      "name": "please keep my diags",
      "ok": false,
    },
  ],
  Array [
    "comment",
    "  # before diag\\n",
  ],
  Array [
    "comment",
    "# mid diag\\n",
  ],
  Array [
    "comment",
    "  # after diag\\n",
  ],
  Array [
    "comment",
    "# before 2\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# after 2\\n",
  ],
  Array [
    "comment",
    "# failed 1 of 2 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 2,
      "fail": 1,
      "failures": Array [
        Result {
          "diag": Object {
            "after": "comment",
          },
          "fullname": "",
          "id": 1,
          "name": "please keep my diags",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 2,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP comment-mid-diag.tap strict > stringified 1`] = `
# before version
TAP version 13
# after version, before plan
1..2
# before result
not ok 1 - please keep my diags
  ---
  after: comment
  ...
  # before diag
# mid diag
  # after diag
# before 2
ok 2
# after 2
# failed 1 of 2 tests

`

exports[`test/parser-stringify.js TAP comment-mid-diag.tap strict > stringified flat 1`] = `
# before version
TAP version 13
# after version, before plan
1..2
# before result
not ok 1 - please keep my diags
  ---
  after: comment
  ...
  # before diag
# mid diag
  # after diag
# before 2
ok 2
# after 2
# failed 1 of 2 tests

`

exports[`test/parser-stringify.js TAP comment-mid-diag.tap strictBail > parsed 1`] = `
Array [
  Array [
    "comment",
    "# before version\\n",
  ],
  Array [
    "version",
    13,
  ],
  Array [
    "comment",
    "# after version, before plan\\n",
  ],
  Array [
    "plan",
    Object {
      "end": 2,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# before result\\n",
  ],
  Array [
    "assert",
    Result {
      "diag": Object {
        "after": "comment",
      },
      "fullname": "",
      "id": 1,
      "name": "please keep my diags",
      "ok": false,
    },
  ],
  Array [
    "comment",
    "  # before diag\\n",
  ],
  Array [
    "comment",
    "# mid diag\\n",
  ],
  Array [
    "comment",
    "  # after diag\\n",
  ],
  Array [
    "comment",
    "# before 2\\n",
  ],
  Array [
    "bailout",
    "please keep my diags",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": "please keep my diags",
      "count": 1,
      "fail": 1,
      "failures": Array [
        Result {
          "diag": Object {
            "after": "comment",
          },
          "fullname": "",
          "id": 1,
          "name": "please keep my diags",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": 2,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP comment-mid-diag.tap strictBail > stringified 1`] = `
# before version
TAP version 13
# after version, before plan
1..2
# before result
not ok 1 - please keep my diags
  ---
  after: comment
  ...
  # before diag
# mid diag
  # after diag
# before 2
Bail out! please keep my diags

`

exports[`test/parser-stringify.js TAP comment-mid-diag.tap strictBail > stringified flat 1`] = `
# before version
TAP version 13
# after version, before plan
1..2
# before result
not ok 1 - please keep my diags
  ---
  after: comment
  ...
  # before diag
# mid diag
  # after diag
# before 2
Bail out! please keep my diags

`

exports[`test/parser-stringify.js TAP common-with-explanation.tap bail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "end": 6,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "#\\n",
  ],
  Array [
    "comment",
    "# Create a new Board and Tile, then place\\n",
  ],
  Array [
    "comment",
    "# the Tile onto the board.\\n",
  ],
  Array [
    "comment",
    "#\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "The object isa Board",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "Board size is zero",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "The object isa Tile",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "name": "Get possible places to put the Tile",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "name": "Placing the tile produces no error",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 6,
      "name": "Board size is 1",
      "ok": true,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 6,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 6,
      "plan": FinalPlan {
        "comment": "",
        "end": 6,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP common-with-explanation.tap bail > stringified 1`] = `
TAP version 13
1..6
#
# Create a new Board and Tile, then place
# the Tile onto the board.
#
ok 1 - The object isa Board
ok 2 - Board size is zero
ok 3 - The object isa Tile
ok 4 - Get possible places to put the Tile
ok 5 - Placing the tile produces no error
ok 6 - Board size is 1

`

exports[`test/parser-stringify.js TAP common-with-explanation.tap bail > stringified flat 1`] = `
TAP version 13
1..6
#
# Create a new Board and Tile, then place
# the Tile onto the board.
#
ok 1 - The object isa Board
ok 2 - Board size is zero
ok 3 - The object isa Tile
ok 4 - Get possible places to put the Tile
ok 5 - Placing the tile produces no error
ok 6 - Board size is 1

`

exports[`test/parser-stringify.js TAP common-with-explanation.tap default settings > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "end": 6,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "#\\n",
  ],
  Array [
    "comment",
    "# Create a new Board and Tile, then place\\n",
  ],
  Array [
    "comment",
    "# the Tile onto the board.\\n",
  ],
  Array [
    "comment",
    "#\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "The object isa Board",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "Board size is zero",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "The object isa Tile",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "name": "Get possible places to put the Tile",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "name": "Placing the tile produces no error",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 6,
      "name": "Board size is 1",
      "ok": true,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 6,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 6,
      "plan": FinalPlan {
        "comment": "",
        "end": 6,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP common-with-explanation.tap default settings > stringified 1`] = `
TAP version 13
1..6
#
# Create a new Board and Tile, then place
# the Tile onto the board.
#
ok 1 - The object isa Board
ok 2 - Board size is zero
ok 3 - The object isa Tile
ok 4 - Get possible places to put the Tile
ok 5 - Placing the tile produces no error
ok 6 - Board size is 1

`

exports[`test/parser-stringify.js TAP common-with-explanation.tap default settings > stringified flat 1`] = `
TAP version 13
1..6
#
# Create a new Board and Tile, then place
# the Tile onto the board.
#
ok 1 - The object isa Board
ok 2 - Board size is zero
ok 3 - The object isa Tile
ok 4 - Get possible places to put the Tile
ok 5 - Placing the tile produces no error
ok 6 - Board size is 1

`

exports[`test/parser-stringify.js TAP common-with-explanation.tap strict > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "end": 6,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "#\\n",
  ],
  Array [
    "comment",
    "# Create a new Board and Tile, then place\\n",
  ],
  Array [
    "comment",
    "# the Tile onto the board.\\n",
  ],
  Array [
    "comment",
    "#\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "The object isa Board",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "Board size is zero",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "The object isa Tile",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "name": "Get possible places to put the Tile",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "name": "Placing the tile produces no error",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 6,
      "name": "Board size is 1",
      "ok": true,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 6,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 6,
      "plan": FinalPlan {
        "comment": "",
        "end": 6,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP common-with-explanation.tap strict > stringified 1`] = `
TAP version 13
1..6
#
# Create a new Board and Tile, then place
# the Tile onto the board.
#
ok 1 - The object isa Board
ok 2 - Board size is zero
ok 3 - The object isa Tile
ok 4 - Get possible places to put the Tile
ok 5 - Placing the tile produces no error
ok 6 - Board size is 1

`

exports[`test/parser-stringify.js TAP common-with-explanation.tap strict > stringified flat 1`] = `
TAP version 13
1..6
#
# Create a new Board and Tile, then place
# the Tile onto the board.
#
ok 1 - The object isa Board
ok 2 - Board size is zero
ok 3 - The object isa Tile
ok 4 - Get possible places to put the Tile
ok 5 - Placing the tile produces no error
ok 6 - Board size is 1

`

exports[`test/parser-stringify.js TAP common-with-explanation.tap strictBail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "end": 6,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "#\\n",
  ],
  Array [
    "comment",
    "# Create a new Board and Tile, then place\\n",
  ],
  Array [
    "comment",
    "# the Tile onto the board.\\n",
  ],
  Array [
    "comment",
    "#\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "The object isa Board",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "Board size is zero",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "The object isa Tile",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "name": "Get possible places to put the Tile",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "name": "Placing the tile produces no error",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 6,
      "name": "Board size is 1",
      "ok": true,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 6,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 6,
      "plan": FinalPlan {
        "comment": "",
        "end": 6,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP common-with-explanation.tap strictBail > stringified 1`] = `
TAP version 13
1..6
#
# Create a new Board and Tile, then place
# the Tile onto the board.
#
ok 1 - The object isa Board
ok 2 - Board size is zero
ok 3 - The object isa Tile
ok 4 - Get possible places to put the Tile
ok 5 - Placing the tile produces no error
ok 6 - Board size is 1

`

exports[`test/parser-stringify.js TAP common-with-explanation.tap strictBail > stringified flat 1`] = `
TAP version 13
1..6
#
# Create a new Board and Tile, then place
# the Tile onto the board.
#
ok 1 - The object isa Board
ok 2 - Board size is zero
ok 3 - The object isa Tile
ok 4 - Get possible places to put the Tile
ok 5 - Placing the tile produces no error
ok 6 - Board size is 1

`

exports[`test/parser-stringify.js TAP confusing-json.tap bail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: Test newlines in tap and console.log\\n",
      ],
      Array [
        "assert",
        Result {
          "fullname": "Test newlines in tap and console.log",
          "id": 1,
          "name": "Before console.log",
          "ok": true,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "Test newlines in tap and console.log",
          "id": 2,
          "name": "After console.log",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 2,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 2,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 2,
          "plan": FinalPlan {
            "comment": "",
            "end": 2,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": 4.137,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "extra",
    "createdMultipleStepsWithWeightAndCapacity={\\n",
  ],
  Array [
    "extra",
    "  \\"name\\": \\"Multiple Steps with Weight and Capacity\\",\\n",
  ],
  Array [
    "extra",
    "  \\"usedByModels\\": [\\n",
  ],
  Array [
    "extra",
    "    {\\n",
  ],
  Array [
    "extra",
    "      \\"x\\": 1\\n",
  ],
  Array [
    "extra",
    "    }\\n",
  ],
  Array [
    "extra",
    "  ],\\n",
  ],
  Array [
    "extra",
    "  \\"stepsOrdered\\": {\\n",
  ],
  Array [
    "extra",
    "    \\"y\\": 2,\\n",
  ],
  Array [
    "extra",
    "    \\"steps\\": [\\n",
  ],
  Array [
    "extra",
    "      {\\n",
  ],
  Array [
    "extra",
    "        \\"z\\": 3\\n",
  ],
  Array [
    "extra",
    "      }\\n",
  ],
  Array [
    "extra",
    "    ]\\n",
  ],
  Array [
    "extra",
    "  },\\n",
  ],
  Array [
    "extra",
    "  \\"a\\": \\"bc\\"\\n",
  ],
  Array [
    "extra",
    "}\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "Test newlines in tap and console.log",
      "ok": true,
      "time": 4.137,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# time=13.316ms\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": 13.316,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP confusing-json.tap bail > stringified 1`] = `
TAP version 13
# Subtest: Test newlines in tap and console.log
    ok 1 - Before console.log
    ok 2 - After console.log
    1..2
createdMultipleStepsWithWeightAndCapacity={
  "name": "Multiple Steps with Weight and Capacity",
  "usedByModels": [
    {
      "x": 1
    }
  ],
  "stepsOrdered": {
    "y": 2,
    "steps": [
      {
        "z": 3
      }
    ]
  },
  "a": "bc"
}
ok 1 - Test newlines in tap and console.log # time=4.137ms
1..1
# time=13.316ms

`

exports[`test/parser-stringify.js TAP confusing-json.tap bail > stringified flat 1`] = `
TAP version 13
# Subtest: Test newlines in tap and console.log
    ok 1 - Before console.log
    ok 2 - After console.log
    1..2
createdMultipleStepsWithWeightAndCapacity={
  "name": "Multiple Steps with Weight and Capacity",
  "usedByModels": [
    {
      "x": 1
    }
  ],
  "stepsOrdered": {
    "y": 2,
    "steps": [
      {
        "z": 3
      }
    ]
  },
  "a": "bc"
}
ok 1 - Test newlines in tap and console.log # time=4.137ms
1..1
# time=13.316ms

`

exports[`test/parser-stringify.js TAP confusing-json.tap default settings > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: Test newlines in tap and console.log\\n",
      ],
      Array [
        "assert",
        Result {
          "fullname": "Test newlines in tap and console.log",
          "id": 1,
          "name": "Before console.log",
          "ok": true,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "Test newlines in tap and console.log",
          "id": 2,
          "name": "After console.log",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 2,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 2,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 2,
          "plan": FinalPlan {
            "comment": "",
            "end": 2,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": 4.137,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "extra",
    "createdMultipleStepsWithWeightAndCapacity={\\n",
  ],
  Array [
    "extra",
    "  \\"name\\": \\"Multiple Steps with Weight and Capacity\\",\\n",
  ],
  Array [
    "extra",
    "  \\"usedByModels\\": [\\n",
  ],
  Array [
    "extra",
    "    {\\n",
  ],
  Array [
    "extra",
    "      \\"x\\": 1\\n",
  ],
  Array [
    "extra",
    "    }\\n",
  ],
  Array [
    "extra",
    "  ],\\n",
  ],
  Array [
    "extra",
    "  \\"stepsOrdered\\": {\\n",
  ],
  Array [
    "extra",
    "    \\"y\\": 2,\\n",
  ],
  Array [
    "extra",
    "    \\"steps\\": [\\n",
  ],
  Array [
    "extra",
    "      {\\n",
  ],
  Array [
    "extra",
    "        \\"z\\": 3\\n",
  ],
  Array [
    "extra",
    "      }\\n",
  ],
  Array [
    "extra",
    "    ]\\n",
  ],
  Array [
    "extra",
    "  },\\n",
  ],
  Array [
    "extra",
    "  \\"a\\": \\"bc\\"\\n",
  ],
  Array [
    "extra",
    "}\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "Test newlines in tap and console.log",
      "ok": true,
      "time": 4.137,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# time=13.316ms\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": 13.316,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP confusing-json.tap default settings > stringified 1`] = `
TAP version 13
# Subtest: Test newlines in tap and console.log
    ok 1 - Before console.log
    ok 2 - After console.log
    1..2
createdMultipleStepsWithWeightAndCapacity={
  "name": "Multiple Steps with Weight and Capacity",
  "usedByModels": [
    {
      "x": 1
    }
  ],
  "stepsOrdered": {
    "y": 2,
    "steps": [
      {
        "z": 3
      }
    ]
  },
  "a": "bc"
}
ok 1 - Test newlines in tap and console.log # time=4.137ms
1..1
# time=13.316ms

`

exports[`test/parser-stringify.js TAP confusing-json.tap default settings > stringified flat 1`] = `
TAP version 13
# Subtest: Test newlines in tap and console.log
    ok 1 - Before console.log
    ok 2 - After console.log
    1..2
createdMultipleStepsWithWeightAndCapacity={
  "name": "Multiple Steps with Weight and Capacity",
  "usedByModels": [
    {
      "x": 1
    }
  ],
  "stepsOrdered": {
    "y": 2,
    "steps": [
      {
        "z": 3
      }
    ]
  },
  "a": "bc"
}
ok 1 - Test newlines in tap and console.log # time=4.137ms
1..1
# time=13.316ms

`

exports[`test/parser-stringify.js TAP confusing-json.tap strict > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: Test newlines in tap and console.log\\n",
      ],
      Array [
        "assert",
        Result {
          "fullname": "Test newlines in tap and console.log",
          "id": 1,
          "name": "Before console.log",
          "ok": true,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "Test newlines in tap and console.log",
          "id": 2,
          "name": "After console.log",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 2,
          "start": 1,
        },
      ],
      Array [
        "comment",
        "# failed 9 of 2 tests\\n",
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 2,
          "fail": 9,
          "failures": Array [
            Object {
              "data": "{\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "  \\"x\\": 1\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "}\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "\\"y\\": 2,\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "\\"steps\\": [\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "  {\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "    \\"z\\": 3\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "  }\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "]\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
          ],
          "ok": false,
          "pass": 2,
          "plan": FinalPlan {
            "comment": "",
            "end": 2,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": 4.137,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "extra",
    "createdMultipleStepsWithWeightAndCapacity={\\n",
  ],
  Array [
    "extra",
    "  \\"name\\": \\"Multiple Steps with Weight and Capacity\\",\\n",
  ],
  Array [
    "extra",
    "  \\"usedByModels\\": [\\n",
  ],
  Array [
    "extra",
    "    {\\n",
  ],
  Array [
    "extra",
    "      \\"x\\": 1\\n",
  ],
  Array [
    "extra",
    "    }\\n",
  ],
  Array [
    "extra",
    "  ],\\n",
  ],
  Array [
    "extra",
    "  \\"stepsOrdered\\": {\\n",
  ],
  Array [
    "extra",
    "    \\"y\\": 2,\\n",
  ],
  Array [
    "extra",
    "    \\"steps\\": [\\n",
  ],
  Array [
    "extra",
    "      {\\n",
  ],
  Array [
    "extra",
    "        \\"z\\": 3\\n",
  ],
  Array [
    "extra",
    "      }\\n",
  ],
  Array [
    "extra",
    "    ]\\n",
  ],
  Array [
    "extra",
    "  },\\n",
  ],
  Array [
    "extra",
    "  \\"a\\": \\"bc\\"\\n",
  ],
  Array [
    "extra",
    "}\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "Test newlines in tap and console.log",
      "ok": true,
      "time": 4.137,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# time=13.316ms\\n",
  ],
  Array [
    "comment",
    "# failed 17 test\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 17,
      "failures": Array [
        Object {
          "data": "createdMultipleStepsWithWeightAndCapacity={\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "  \\"name\\": \\"Multiple Steps with Weight and Capacity\\",\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "  \\"usedByModels\\": [\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "{\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "  \\"x\\": 1\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "}\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "  ],\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "  \\"stepsOrdered\\": {\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "\\"y\\": 2,\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "\\"steps\\": [\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "  {\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "    \\"z\\": 3\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "  }\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "]\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "  },\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "  \\"a\\": \\"bc\\"\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "}\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
      ],
      "ok": false,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": 13.316,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP confusing-json.tap strict > stringified 1`] = `
TAP version 13
# Subtest: Test newlines in tap and console.log
    ok 1 - Before console.log
    ok 2 - After console.log
    1..2
    # failed 9 of 2 tests
createdMultipleStepsWithWeightAndCapacity={
  "name": "Multiple Steps with Weight and Capacity",
  "usedByModels": [
    {
      "x": 1
    }
  ],
  "stepsOrdered": {
    "y": 2,
    "steps": [
      {
        "z": 3
      }
    ]
  },
  "a": "bc"
}
ok 1 - Test newlines in tap and console.log # time=4.137ms
1..1
# time=13.316ms
# failed 17 test

`

exports[`test/parser-stringify.js TAP confusing-json.tap strict > stringified flat 1`] = `
TAP version 13
# Subtest: Test newlines in tap and console.log
    ok 1 - Before console.log
    ok 2 - After console.log
    1..2
    # failed 9 of 2 tests
createdMultipleStepsWithWeightAndCapacity={
  "name": "Multiple Steps with Weight and Capacity",
  "usedByModels": [
    {
      "x": 1
    }
  ],
  "stepsOrdered": {
    "y": 2,
    "steps": [
      {
        "z": 3
      }
    ]
  },
  "a": "bc"
}
ok 1 - Test newlines in tap and console.log # time=4.137ms
1..1
# time=13.316ms
# failed 17 test

`

exports[`test/parser-stringify.js TAP confusing-json.tap strictBail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: Test newlines in tap and console.log\\n",
      ],
      Array [
        "assert",
        Result {
          "fullname": "Test newlines in tap and console.log",
          "id": 1,
          "name": "Before console.log",
          "ok": true,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "Test newlines in tap and console.log",
          "id": 2,
          "name": "After console.log",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 2,
          "start": 1,
        },
      ],
      Array [
        "comment",
        "# failed 9 of 2 tests\\n",
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 2,
          "fail": 9,
          "failures": Array [
            Object {
              "data": "{\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "  \\"x\\": 1\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "}\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "\\"y\\": 2,\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "\\"steps\\": [\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "  {\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "    \\"z\\": 3\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "  }\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "]\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
          ],
          "ok": false,
          "pass": 2,
          "plan": FinalPlan {
            "comment": "",
            "end": 2,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": 4.137,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "extra",
    "createdMultipleStepsWithWeightAndCapacity={\\n",
  ],
  Array [
    "extra",
    "  \\"name\\": \\"Multiple Steps with Weight and Capacity\\",\\n",
  ],
  Array [
    "extra",
    "  \\"usedByModels\\": [\\n",
  ],
  Array [
    "extra",
    "    {\\n",
  ],
  Array [
    "extra",
    "      \\"x\\": 1\\n",
  ],
  Array [
    "extra",
    "    }\\n",
  ],
  Array [
    "extra",
    "  ],\\n",
  ],
  Array [
    "extra",
    "  \\"stepsOrdered\\": {\\n",
  ],
  Array [
    "extra",
    "    \\"y\\": 2,\\n",
  ],
  Array [
    "extra",
    "    \\"steps\\": [\\n",
  ],
  Array [
    "extra",
    "      {\\n",
  ],
  Array [
    "extra",
    "        \\"z\\": 3\\n",
  ],
  Array [
    "extra",
    "      }\\n",
  ],
  Array [
    "extra",
    "    ]\\n",
  ],
  Array [
    "extra",
    "  },\\n",
  ],
  Array [
    "extra",
    "  \\"a\\": \\"bc\\"\\n",
  ],
  Array [
    "extra",
    "}\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "Test newlines in tap and console.log",
      "ok": true,
      "time": 4.137,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# time=13.316ms\\n",
  ],
  Array [
    "comment",
    "# failed 17 test\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 17,
      "failures": Array [
        Object {
          "data": "createdMultipleStepsWithWeightAndCapacity={\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "  \\"name\\": \\"Multiple Steps with Weight and Capacity\\",\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "  \\"usedByModels\\": [\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "{\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "  \\"x\\": 1\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "}\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "  ],\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "  \\"stepsOrdered\\": {\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "\\"y\\": 2,\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "\\"steps\\": [\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "  {\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "    \\"z\\": 3\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "  }\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "]\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "  },\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "  \\"a\\": \\"bc\\"\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "}\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
      ],
      "ok": false,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": 13.316,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP confusing-json.tap strictBail > stringified 1`] = `
TAP version 13
# Subtest: Test newlines in tap and console.log
    ok 1 - Before console.log
    ok 2 - After console.log
    1..2
    # failed 9 of 2 tests
createdMultipleStepsWithWeightAndCapacity={
  "name": "Multiple Steps with Weight and Capacity",
  "usedByModels": [
    {
      "x": 1
    }
  ],
  "stepsOrdered": {
    "y": 2,
    "steps": [
      {
        "z": 3
      }
    ]
  },
  "a": "bc"
}
ok 1 - Test newlines in tap and console.log # time=4.137ms
1..1
# time=13.316ms
# failed 17 test

`

exports[`test/parser-stringify.js TAP confusing-json.tap strictBail > stringified flat 1`] = `
TAP version 13
# Subtest: Test newlines in tap and console.log
    ok 1 - Before console.log
    ok 2 - After console.log
    1..2
    # failed 9 of 2 tests
createdMultipleStepsWithWeightAndCapacity={
  "name": "Multiple Steps with Weight and Capacity",
  "usedByModels": [
    {
      "x": 1
    }
  ],
  "stepsOrdered": {
    "y": 2,
    "steps": [
      {
        "z": 3
      }
    ]
  },
  "a": "bc"
}
ok 1 - Test newlines in tap and console.log # time=4.137ms
1..1
# time=13.316ms
# failed 17 test

`

exports[`test/parser-stringify.js TAP creative-liberties.tap bail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "name": "created Board",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "diag": Object {
        "dump": Object {
          "board": Array [
            "      16G         05C        ",
            "      G N C       C C G      ",
            "        G           C  +     ",
            "10C   01G         03C        ",
            "R N G G A G       C C C      ",
            "  R     G           C  +     ",
            "      01G   17C   00C        ",
            "      G A G G N R R N R      ",
            "        G     R     G        ",
          ],
        },
        "message": "Board layout",
        "severity": "comment",
      },
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "name": "board has 7 tiles + starter tile",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 9,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 9,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 9,
      "plan": FinalPlan {
        "comment": "",
        "end": 9,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP creative-liberties.tap bail > stringified 1`] = `
TAP version 13
ok - created Board
ok
ok
ok
ok
ok
ok
ok
  ---
  message: Board layout
  severity: comment
  dump:
    board:
      - "      16G         05C        "
      - "      G N C       C C G      "
      - "        G           C  +     "
      - "10C   01G         03C        "
      - "R N G G A G       C C C      "
      - "  R     G           C  +     "
      - "      01G   17C   00C        "
      - "      G A G G N R R N R      "
      - "        G     R     G        "
  ...
ok - board has 7 tiles + starter tile
1..9

`

exports[`test/parser-stringify.js TAP creative-liberties.tap bail > stringified flat 1`] = `
TAP version 13
ok - created Board
ok
ok
ok
ok
ok
ok
ok
  ---
  message: Board layout
  severity: comment
  dump:
    board:
      - "      16G         05C        "
      - "      G N C       C C G      "
      - "        G           C  +     "
      - "10C   01G         03C        "
      - "R N G G A G       C C C      "
      - "  R     G           C  +     "
      - "      01G   17C   00C        "
      - "      G A G G N R R N R      "
      - "        G     R     G        "
  ...
ok - board has 7 tiles + starter tile
1..9

`

exports[`test/parser-stringify.js TAP creative-liberties.tap default settings > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "name": "created Board",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "diag": Object {
        "dump": Object {
          "board": Array [
            "      16G         05C        ",
            "      G N C       C C G      ",
            "        G           C  +     ",
            "10C   01G         03C        ",
            "R N G G A G       C C C      ",
            "  R     G           C  +     ",
            "      01G   17C   00C        ",
            "      G A G G N R R N R      ",
            "        G     R     G        ",
          ],
        },
        "message": "Board layout",
        "severity": "comment",
      },
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "name": "board has 7 tiles + starter tile",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 9,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 9,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 9,
      "plan": FinalPlan {
        "comment": "",
        "end": 9,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP creative-liberties.tap default settings > stringified 1`] = `
TAP version 13
ok - created Board
ok
ok
ok
ok
ok
ok
ok
  ---
  message: Board layout
  severity: comment
  dump:
    board:
      - "      16G         05C        "
      - "      G N C       C C G      "
      - "        G           C  +     "
      - "10C   01G         03C        "
      - "R N G G A G       C C C      "
      - "  R     G           C  +     "
      - "      01G   17C   00C        "
      - "      G A G G N R R N R      "
      - "        G     R     G        "
  ...
ok - board has 7 tiles + starter tile
1..9

`

exports[`test/parser-stringify.js TAP creative-liberties.tap default settings > stringified flat 1`] = `
TAP version 13
ok - created Board
ok
ok
ok
ok
ok
ok
ok
  ---
  message: Board layout
  severity: comment
  dump:
    board:
      - "      16G         05C        "
      - "      G N C       C C G      "
      - "        G           C  +     "
      - "10C   01G         03C        "
      - "R N G G A G       C C C      "
      - "  R     G           C  +     "
      - "      01G   17C   00C        "
      - "      G A G G N R R N R      "
      - "        G     R     G        "
  ...
ok - board has 7 tiles + starter tile
1..9

`

exports[`test/parser-stringify.js TAP creative-liberties.tap strict > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "name": "created Board",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "diag": Object {
        "dump": Object {
          "board": Array [
            "      16G         05C        ",
            "      G N C       C C G      ",
            "        G           C  +     ",
            "10C   01G         03C        ",
            "R N G G A G       C C C      ",
            "  R     G           C  +     ",
            "      01G   17C   00C        ",
            "      G A G G N R R N R      ",
            "        G     R     G        ",
          ],
        },
        "message": "Board layout",
        "severity": "comment",
      },
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "name": "board has 7 tiles + starter tile",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 9,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 9,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 9,
      "plan": FinalPlan {
        "comment": "",
        "end": 9,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP creative-liberties.tap strict > stringified 1`] = `
TAP version 13
ok - created Board
ok
ok
ok
ok
ok
ok
ok
  ---
  message: Board layout
  severity: comment
  dump:
    board:
      - "      16G         05C        "
      - "      G N C       C C G      "
      - "        G           C  +     "
      - "10C   01G         03C        "
      - "R N G G A G       C C C      "
      - "  R     G           C  +     "
      - "      01G   17C   00C        "
      - "      G A G G N R R N R      "
      - "        G     R     G        "
  ...
ok - board has 7 tiles + starter tile
1..9

`

exports[`test/parser-stringify.js TAP creative-liberties.tap strict > stringified flat 1`] = `
TAP version 13
ok - created Board
ok
ok
ok
ok
ok
ok
ok
  ---
  message: Board layout
  severity: comment
  dump:
    board:
      - "      16G         05C        "
      - "      G N C       C C G      "
      - "        G           C  +     "
      - "10C   01G         03C        "
      - "R N G G A G       C C C      "
      - "  R     G           C  +     "
      - "      01G   17C   00C        "
      - "      G A G G N R R N R      "
      - "        G     R     G        "
  ...
ok - board has 7 tiles + starter tile
1..9

`

exports[`test/parser-stringify.js TAP creative-liberties.tap strictBail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "name": "created Board",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "diag": Object {
        "dump": Object {
          "board": Array [
            "      16G         05C        ",
            "      G N C       C C G      ",
            "        G           C  +     ",
            "10C   01G         03C        ",
            "R N G G A G       C C C      ",
            "  R     G           C  +     ",
            "      01G   17C   00C        ",
            "      G A G G N R R N R      ",
            "        G     R     G        ",
          ],
        },
        "message": "Board layout",
        "severity": "comment",
      },
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "name": "board has 7 tiles + starter tile",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 9,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 9,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 9,
      "plan": FinalPlan {
        "comment": "",
        "end": 9,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP creative-liberties.tap strictBail > stringified 1`] = `
TAP version 13
ok - created Board
ok
ok
ok
ok
ok
ok
ok
  ---
  message: Board layout
  severity: comment
  dump:
    board:
      - "      16G         05C        "
      - "      G N C       C C G      "
      - "        G           C  +     "
      - "10C   01G         03C        "
      - "R N G G A G       C C C      "
      - "  R     G           C  +     "
      - "      01G   17C   00C        "
      - "      G A G G N R R N R      "
      - "        G     R     G        "
  ...
ok - board has 7 tiles + starter tile
1..9

`

exports[`test/parser-stringify.js TAP creative-liberties.tap strictBail > stringified flat 1`] = `
TAP version 13
ok - created Board
ok
ok
ok
ok
ok
ok
ok
  ---
  message: Board layout
  severity: comment
  dump:
    board:
      - "      16G         05C        "
      - "      G N C       C C G      "
      - "        G           C  +     "
      - "10C   01G         03C        "
      - "R N G G A G       C C C      "
      - "  R     G           C  +     "
      - "      01G   17C   00C        "
      - "      G A G G N R R N R      "
      - "        G     R     G        "
  ...
ok - board has 7 tiles + starter tile
1..9

`

exports[`test/parser-stringify.js TAP delayed.tap bail > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "00000",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "ok": false,
    },
  ],
  Array [
    "bailout",
    "",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": true,
      "count": 3,
      "fail": 1,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 3,
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 2,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP delayed.tap bail > stringified 1`] = `
1..5
ok 1 - 00000
ok 2
not ok 3
Bail out!

`

exports[`test/parser-stringify.js TAP delayed.tap bail > stringified flat 1`] = `
1..5
ok 1 - 00000
ok 2
not ok 3
Bail out!

`

exports[`test/parser-stringify.js TAP delayed.tap default settings > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "00000",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "ok": false,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "name": "00000",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# failed 1 of 5 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 5,
      "fail": 1,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 3,
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 4,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP delayed.tap default settings > stringified 1`] = `
1..5
ok 1 - 00000
ok 2
not ok 3
ok 4
ok 5 - 00000
# failed 1 of 5 tests

`

exports[`test/parser-stringify.js TAP delayed.tap default settings > stringified flat 1`] = `
1..5
ok 1 - 00000
ok 2
not ok 3
ok 4
ok 5 - 00000
# failed 1 of 5 tests

`

exports[`test/parser-stringify.js TAP delayed.tap strict > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "00000",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "ok": false,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "name": "00000",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# failed 1 of 5 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 5,
      "fail": 1,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 3,
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 4,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP delayed.tap strict > stringified 1`] = `
1..5
ok 1 - 00000
ok 2
not ok 3
ok 4
ok 5 - 00000
# failed 1 of 5 tests

`

exports[`test/parser-stringify.js TAP delayed.tap strict > stringified flat 1`] = `
1..5
ok 1 - 00000
ok 2
not ok 3
ok 4
ok 5 - 00000
# failed 1 of 5 tests

`

exports[`test/parser-stringify.js TAP delayed.tap strictBail > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "00000",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "ok": false,
    },
  ],
  Array [
    "bailout",
    "",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": true,
      "count": 3,
      "fail": 1,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 3,
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 2,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP delayed.tap strictBail > stringified 1`] = `
1..5
ok 1 - 00000
ok 2
not ok 3
Bail out!

`

exports[`test/parser-stringify.js TAP delayed.tap strictBail > stringified flat 1`] = `
1..5
ok 1 - 00000
ok 2
not ok 3
Bail out!

`

exports[`test/parser-stringify.js TAP descriptive.tap bail > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "Interlock activated",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "Megathrusters are go",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "Head formed",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "name": "Blazing sword formed",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "name": "Robeast destroyed",
      "ok": true,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 5,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 5,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP descriptive.tap bail > stringified 1`] = `
1..5
ok 1 - Interlock activated
ok 2 - Megathrusters are go
ok 3 - Head formed
ok 4 - Blazing sword formed
ok 5 - Robeast destroyed

`

exports[`test/parser-stringify.js TAP descriptive.tap bail > stringified flat 1`] = `
1..5
ok 1 - Interlock activated
ok 2 - Megathrusters are go
ok 3 - Head formed
ok 4 - Blazing sword formed
ok 5 - Robeast destroyed

`

exports[`test/parser-stringify.js TAP descriptive.tap default settings > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "Interlock activated",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "Megathrusters are go",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "Head formed",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "name": "Blazing sword formed",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "name": "Robeast destroyed",
      "ok": true,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 5,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 5,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP descriptive.tap default settings > stringified 1`] = `
1..5
ok 1 - Interlock activated
ok 2 - Megathrusters are go
ok 3 - Head formed
ok 4 - Blazing sword formed
ok 5 - Robeast destroyed

`

exports[`test/parser-stringify.js TAP descriptive.tap default settings > stringified flat 1`] = `
1..5
ok 1 - Interlock activated
ok 2 - Megathrusters are go
ok 3 - Head formed
ok 4 - Blazing sword formed
ok 5 - Robeast destroyed

`

exports[`test/parser-stringify.js TAP descriptive.tap strict > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "Interlock activated",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "Megathrusters are go",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "Head formed",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "name": "Blazing sword formed",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "name": "Robeast destroyed",
      "ok": true,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 5,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 5,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP descriptive.tap strict > stringified 1`] = `
1..5
ok 1 - Interlock activated
ok 2 - Megathrusters are go
ok 3 - Head formed
ok 4 - Blazing sword formed
ok 5 - Robeast destroyed

`

exports[`test/parser-stringify.js TAP descriptive.tap strict > stringified flat 1`] = `
1..5
ok 1 - Interlock activated
ok 2 - Megathrusters are go
ok 3 - Head formed
ok 4 - Blazing sword formed
ok 5 - Robeast destroyed

`

exports[`test/parser-stringify.js TAP descriptive.tap strictBail > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "Interlock activated",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "Megathrusters are go",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "Head formed",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "name": "Blazing sword formed",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "name": "Robeast destroyed",
      "ok": true,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 5,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 5,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP descriptive.tap strictBail > stringified 1`] = `
1..5
ok 1 - Interlock activated
ok 2 - Megathrusters are go
ok 3 - Head formed
ok 4 - Blazing sword formed
ok 5 - Robeast destroyed

`

exports[`test/parser-stringify.js TAP descriptive.tap strictBail > stringified flat 1`] = `
1..5
ok 1 - Interlock activated
ok 2 - Megathrusters are go
ok 3 - Head formed
ok 4 - Blazing sword formed
ok 5 - Robeast destroyed

`

exports[`test/parser-stringify.js TAP descriptive_trailing.tap bail > parsed 1`] = `
Array [
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "Interlock activated",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "Megathrusters are go",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "Head formed",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "name": "Blazing sword formed",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "name": "Robeast destroyed",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 5,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 5,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP descriptive_trailing.tap bail > stringified 1`] = `
ok 1 - Interlock activated
ok 2 - Megathrusters are go
ok 3 - Head formed
ok 4 - Blazing sword formed
ok 5 - Robeast destroyed
1..5

`

exports[`test/parser-stringify.js TAP descriptive_trailing.tap bail > stringified flat 1`] = `
ok 1 - Interlock activated
ok 2 - Megathrusters are go
ok 3 - Head formed
ok 4 - Blazing sword formed
ok 5 - Robeast destroyed
1..5

`

exports[`test/parser-stringify.js TAP descriptive_trailing.tap default settings > parsed 1`] = `
Array [
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "Interlock activated",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "Megathrusters are go",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "Head formed",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "name": "Blazing sword formed",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "name": "Robeast destroyed",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 5,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 5,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP descriptive_trailing.tap default settings > stringified 1`] = `
ok 1 - Interlock activated
ok 2 - Megathrusters are go
ok 3 - Head formed
ok 4 - Blazing sword formed
ok 5 - Robeast destroyed
1..5

`

exports[`test/parser-stringify.js TAP descriptive_trailing.tap default settings > stringified flat 1`] = `
ok 1 - Interlock activated
ok 2 - Megathrusters are go
ok 3 - Head formed
ok 4 - Blazing sword formed
ok 5 - Robeast destroyed
1..5

`

exports[`test/parser-stringify.js TAP descriptive_trailing.tap strict > parsed 1`] = `
Array [
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "Interlock activated",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "Megathrusters are go",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "Head formed",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "name": "Blazing sword formed",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "name": "Robeast destroyed",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 5,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 5,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP descriptive_trailing.tap strict > stringified 1`] = `
ok 1 - Interlock activated
ok 2 - Megathrusters are go
ok 3 - Head formed
ok 4 - Blazing sword formed
ok 5 - Robeast destroyed
1..5

`

exports[`test/parser-stringify.js TAP descriptive_trailing.tap strict > stringified flat 1`] = `
ok 1 - Interlock activated
ok 2 - Megathrusters are go
ok 3 - Head formed
ok 4 - Blazing sword formed
ok 5 - Robeast destroyed
1..5

`

exports[`test/parser-stringify.js TAP descriptive_trailing.tap strictBail > parsed 1`] = `
Array [
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "Interlock activated",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "Megathrusters are go",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "Head formed",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "name": "Blazing sword formed",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "name": "Robeast destroyed",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 5,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 5,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP descriptive_trailing.tap strictBail > stringified 1`] = `
ok 1 - Interlock activated
ok 2 - Megathrusters are go
ok 3 - Head formed
ok 4 - Blazing sword formed
ok 5 - Robeast destroyed
1..5

`

exports[`test/parser-stringify.js TAP descriptive_trailing.tap strictBail > stringified flat 1`] = `
ok 1 - Interlock activated
ok 2 - Megathrusters are go
ok 3 - Head formed
ok 4 - Blazing sword formed
ok 5 - Robeast destroyed
1..5

`

exports[`test/parser-stringify.js TAP diag-looks-like-comment.tap bail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: -t 0.2\\n",
      ],
      Array [
        "assert",
        Result {
          "diag": Object {
            "found": String(
              
              # Subtest: nope
              
                  not ok 1 - nope
                    ---
                    still: the string
                    ...
              
                  1..1 # nope
              not ok 1 - nope # time=123
                ---
                this: is fine
                ...
              
              1..1
              
            ),
            "pattern": "/SIGTERM/",
          },
          "fullname": "-t 0.2",
          "id": 1,
          "name": "should match pattern provided",
          "ok": false,
        },
      ],
      Array [
        "bailout",
        "should match pattern provided",
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": "should match pattern provided",
          "count": 1,
          "fail": 1,
          "failures": Array [
            Result {
              "diag": Object {
                "found": String(
                  
                  # Subtest: nope
                  
                      not ok 1 - nope
                        ---
                        still: the string
                        ...
                  
                      1..1 # nope
                  not ok 1 - nope # time=123
                    ---
                    this: is fine
                    ...
                  
                  1..1
                  
                ),
                "pattern": "/SIGTERM/",
              },
              "fullname": "-t 0.2",
              "id": 1,
              "name": "should match pattern provided",
              "ok": false,
            },
          ],
          "ok": false,
          "pass": 0,
          "plan": FinalPlan {
            "comment": "",
            "end": null,
            "skipAll": false,
            "skipReason": "",
            "start": null,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "bailout",
    "should match pattern provided",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": "should match pattern provided",
      "count": 0,
      "fail": 0,
      "failures": Array [],
      "ok": false,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": null,
        "skipAll": false,
        "skipReason": "",
        "start": null,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP diag-looks-like-comment.tap bail > stringified 1`] = `
TAP version 13
# Subtest: -t 0.2
    not ok 1 - should match pattern provided
      ---
      found: |
        
        # Subtest: nope
      
            not ok 1 - nope
              ---
              still: the string
              ...
      
            1..1 # nope
        not ok 1 - nope # time=123
          ---
          this: is fine
          ...
      
        1..1
      pattern: /SIGTERM/
      ...
    Bail out! should match pattern provided
Bail out! should match pattern provided

`

exports[`test/parser-stringify.js TAP diag-looks-like-comment.tap bail > stringified flat 1`] = `
TAP version 13
# Subtest: -t 0.2
    not ok 1 - should match pattern provided
      ---
      found: |
        
        # Subtest: nope
      
            not ok 1 - nope
              ---
              still: the string
              ...
      
            1..1 # nope
        not ok 1 - nope # time=123
          ---
          this: is fine
          ...
      
        1..1
      pattern: /SIGTERM/
      ...
    Bail out! should match pattern provided
Bail out! should match pattern provided

`

exports[`test/parser-stringify.js TAP diag-looks-like-comment.tap default settings > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: -t 0.2\\n",
      ],
      Array [
        "assert",
        Result {
          "diag": Object {
            "found": String(
              
              # Subtest: nope
              
                  not ok 1 - nope
                    ---
                    still: the string
                    ...
              
                  1..1 # nope
              not ok 1 - nope # time=123
                ---
                this: is fine
                ...
              
              1..1
              
            ),
            "pattern": "/SIGTERM/",
          },
          "fullname": "-t 0.2",
          "id": 1,
          "name": "should match pattern provided",
          "ok": false,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "comment",
        "# failed 1 test\\n",
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 1,
          "failures": Array [
            Result {
              "diag": Object {
                "found": String(
                  
                  # Subtest: nope
                  
                      not ok 1 - nope
                        ---
                        still: the string
                        ...
                  
                      1..1 # nope
                  not ok 1 - nope # time=123
                    ---
                    this: is fine
                    ...
                  
                  1..1
                  
                ),
                "pattern": "/SIGTERM/",
              },
              "fullname": "-t 0.2",
              "id": 1,
              "name": "should match pattern provided",
              "ok": false,
            },
          ],
          "ok": false,
          "pass": 0,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "-t 0.2",
      "ok": false,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# failed 1 test\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 1,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 1,
          "name": "-t 0.2",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP diag-looks-like-comment.tap default settings > stringified 1`] = `
TAP version 13
# Subtest: -t 0.2
    not ok 1 - should match pattern provided
      ---
      found: |
        
        # Subtest: nope
      
            not ok 1 - nope
              ---
              still: the string
              ...
      
            1..1 # nope
        not ok 1 - nope # time=123
          ---
          this: is fine
          ...
      
        1..1
      pattern: /SIGTERM/
      ...
    1..1
    # failed 1 test
not ok 1 - -t 0.2
1..1
# failed 1 test

`

exports[`test/parser-stringify.js TAP diag-looks-like-comment.tap default settings > stringified flat 1`] = `
TAP version 13
# Subtest: -t 0.2
    not ok 1 - should match pattern provided
      ---
      found: |
        
        # Subtest: nope
      
            not ok 1 - nope
              ---
              still: the string
              ...
      
            1..1 # nope
        not ok 1 - nope # time=123
          ---
          this: is fine
          ...
      
        1..1
      pattern: /SIGTERM/
      ...
    1..1
    # failed 1 test
not ok 1 - -t 0.2
1..1
# failed 1 test

`

exports[`test/parser-stringify.js TAP diag-looks-like-comment.tap strict > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: -t 0.2\\n",
      ],
      Array [
        "assert",
        Result {
          "diag": Object {
            "found": String(
              
              # Subtest: nope
              
                  not ok 1 - nope
                    ---
                    still: the string
                    ...
              
                  1..1 # nope
              not ok 1 - nope # time=123
                ---
                this: is fine
                ...
              
              1..1
              
            ),
            "pattern": "/SIGTERM/",
          },
          "fullname": "-t 0.2",
          "id": 1,
          "name": "should match pattern provided",
          "ok": false,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "comment",
        "# failed 1 test\\n",
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 1,
          "failures": Array [
            Result {
              "diag": Object {
                "found": String(
                  
                  # Subtest: nope
                  
                      not ok 1 - nope
                        ---
                        still: the string
                        ...
                  
                      1..1 # nope
                  not ok 1 - nope # time=123
                    ---
                    this: is fine
                    ...
                  
                  1..1
                  
                ),
                "pattern": "/SIGTERM/",
              },
              "fullname": "-t 0.2",
              "id": 1,
              "name": "should match pattern provided",
              "ok": false,
            },
          ],
          "ok": false,
          "pass": 0,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "-t 0.2",
      "ok": false,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# failed 1 test\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 1,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 1,
          "name": "-t 0.2",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP diag-looks-like-comment.tap strict > stringified 1`] = `
TAP version 13
# Subtest: -t 0.2
    not ok 1 - should match pattern provided
      ---
      found: |
        
        # Subtest: nope
      
            not ok 1 - nope
              ---
              still: the string
              ...
      
            1..1 # nope
        not ok 1 - nope # time=123
          ---
          this: is fine
          ...
      
        1..1
      pattern: /SIGTERM/
      ...
    1..1
    # failed 1 test
not ok 1 - -t 0.2
1..1
# failed 1 test

`

exports[`test/parser-stringify.js TAP diag-looks-like-comment.tap strict > stringified flat 1`] = `
TAP version 13
# Subtest: -t 0.2
    not ok 1 - should match pattern provided
      ---
      found: |
        
        # Subtest: nope
      
            not ok 1 - nope
              ---
              still: the string
              ...
      
            1..1 # nope
        not ok 1 - nope # time=123
          ---
          this: is fine
          ...
      
        1..1
      pattern: /SIGTERM/
      ...
    1..1
    # failed 1 test
not ok 1 - -t 0.2
1..1
# failed 1 test

`

exports[`test/parser-stringify.js TAP diag-looks-like-comment.tap strictBail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: -t 0.2\\n",
      ],
      Array [
        "assert",
        Result {
          "diag": Object {
            "found": String(
              
              # Subtest: nope
              
                  not ok 1 - nope
                    ---
                    still: the string
                    ...
              
                  1..1 # nope
              not ok 1 - nope # time=123
                ---
                this: is fine
                ...
              
              1..1
              
            ),
            "pattern": "/SIGTERM/",
          },
          "fullname": "-t 0.2",
          "id": 1,
          "name": "should match pattern provided",
          "ok": false,
        },
      ],
      Array [
        "bailout",
        "should match pattern provided",
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": "should match pattern provided",
          "count": 1,
          "fail": 1,
          "failures": Array [
            Result {
              "diag": Object {
                "found": String(
                  
                  # Subtest: nope
                  
                      not ok 1 - nope
                        ---
                        still: the string
                        ...
                  
                      1..1 # nope
                  not ok 1 - nope # time=123
                    ---
                    this: is fine
                    ...
                  
                  1..1
                  
                ),
                "pattern": "/SIGTERM/",
              },
              "fullname": "-t 0.2",
              "id": 1,
              "name": "should match pattern provided",
              "ok": false,
            },
          ],
          "ok": false,
          "pass": 0,
          "plan": FinalPlan {
            "comment": "",
            "end": null,
            "skipAll": false,
            "skipReason": "",
            "start": null,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "bailout",
    "should match pattern provided",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": "should match pattern provided",
      "count": 0,
      "fail": 0,
      "failures": Array [],
      "ok": false,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": null,
        "skipAll": false,
        "skipReason": "",
        "start": null,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP diag-looks-like-comment.tap strictBail > stringified 1`] = `
TAP version 13
# Subtest: -t 0.2
    not ok 1 - should match pattern provided
      ---
      found: |
        
        # Subtest: nope
      
            not ok 1 - nope
              ---
              still: the string
              ...
      
            1..1 # nope
        not ok 1 - nope # time=123
          ---
          this: is fine
          ...
      
        1..1
      pattern: /SIGTERM/
      ...
    Bail out! should match pattern provided
Bail out! should match pattern provided

`

exports[`test/parser-stringify.js TAP diag-looks-like-comment.tap strictBail > stringified flat 1`] = `
TAP version 13
# Subtest: -t 0.2
    not ok 1 - should match pattern provided
      ---
      found: |
        
        # Subtest: nope
      
            not ok 1 - nope
              ---
              still: the string
              ...
      
            1..1 # nope
        not ok 1 - nope # time=123
          ---
          this: is fine
          ...
      
        1..1
      pattern: /SIGTERM/
      ...
    Bail out! should match pattern provided
Bail out! should match pattern provided

`

exports[`test/parser-stringify.js TAP die.tap bail > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "comment": "no tests found",
      "end": 0,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 0,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "no tests found",
        "end": 0,
        "skipAll": true,
        "skipReason": "no tests found",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP die.tap bail > stringified 1`] = `
1..0 # no tests found

`

exports[`test/parser-stringify.js TAP die.tap bail > stringified flat 1`] = `
1..0 # no tests found

`

exports[`test/parser-stringify.js TAP die.tap default settings > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "comment": "no tests found",
      "end": 0,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 0,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "no tests found",
        "end": 0,
        "skipAll": true,
        "skipReason": "no tests found",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP die.tap default settings > stringified 1`] = `
1..0 # no tests found

`

exports[`test/parser-stringify.js TAP die.tap default settings > stringified flat 1`] = `
1..0 # no tests found

`

exports[`test/parser-stringify.js TAP die.tap strict > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "comment": "no tests found",
      "end": 0,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 0,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "no tests found",
        "end": 0,
        "skipAll": true,
        "skipReason": "no tests found",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP die.tap strict > stringified 1`] = `
1..0 # no tests found

`

exports[`test/parser-stringify.js TAP die.tap strict > stringified flat 1`] = `
1..0 # no tests found

`

exports[`test/parser-stringify.js TAP die.tap strictBail > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "comment": "no tests found",
      "end": 0,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 0,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "no tests found",
        "end": 0,
        "skipAll": true,
        "skipReason": "no tests found",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP die.tap strictBail > stringified 1`] = `
1..0 # no tests found

`

exports[`test/parser-stringify.js TAP die.tap strictBail > stringified flat 1`] = `
1..0 # no tests found

`

exports[`test/parser-stringify.js TAP die_head_end.tap bail > parsed 1`] = `
Array [
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test count(4) != plan(null)\\n",
  ],
  Array [
    "comment",
    "# failed 1 of 4 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 4,
      "fail": 1,
      "failures": Array [
        Object {
          "tapError": "no plan",
        },
      ],
      "ok": false,
      "pass": 4,
      "plan": FinalPlan {
        "comment": "",
        "end": null,
        "skipAll": false,
        "skipReason": "",
        "start": null,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP die_head_end.tap bail > stringified 1`] = `
ok 1
ok 2
ok 3
ok 4
# test count(4) != plan(null)
# failed 1 of 4 tests

`

exports[`test/parser-stringify.js TAP die_head_end.tap bail > stringified flat 1`] = `
ok 1
ok 2
ok 3
ok 4
# test count(4) != plan(null)
# failed 1 of 4 tests

`

exports[`test/parser-stringify.js TAP die_head_end.tap default settings > parsed 1`] = `
Array [
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test count(4) != plan(null)\\n",
  ],
  Array [
    "comment",
    "# failed 1 of 4 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 4,
      "fail": 1,
      "failures": Array [
        Object {
          "tapError": "no plan",
        },
      ],
      "ok": false,
      "pass": 4,
      "plan": FinalPlan {
        "comment": "",
        "end": null,
        "skipAll": false,
        "skipReason": "",
        "start": null,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP die_head_end.tap default settings > stringified 1`] = `
ok 1
ok 2
ok 3
ok 4
# test count(4) != plan(null)
# failed 1 of 4 tests

`

exports[`test/parser-stringify.js TAP die_head_end.tap default settings > stringified flat 1`] = `
ok 1
ok 2
ok 3
ok 4
# test count(4) != plan(null)
# failed 1 of 4 tests

`

exports[`test/parser-stringify.js TAP die_head_end.tap strict > parsed 1`] = `
Array [
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test count(4) != plan(null)\\n",
  ],
  Array [
    "comment",
    "# failed 1 of 4 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 4,
      "fail": 1,
      "failures": Array [
        Object {
          "tapError": "no plan",
        },
      ],
      "ok": false,
      "pass": 4,
      "plan": FinalPlan {
        "comment": "",
        "end": null,
        "skipAll": false,
        "skipReason": "",
        "start": null,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP die_head_end.tap strict > stringified 1`] = `
ok 1
ok 2
ok 3
ok 4
# test count(4) != plan(null)
# failed 1 of 4 tests

`

exports[`test/parser-stringify.js TAP die_head_end.tap strict > stringified flat 1`] = `
ok 1
ok 2
ok 3
ok 4
# test count(4) != plan(null)
# failed 1 of 4 tests

`

exports[`test/parser-stringify.js TAP die_head_end.tap strictBail > parsed 1`] = `
Array [
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test count(4) != plan(null)\\n",
  ],
  Array [
    "comment",
    "# failed 1 of 4 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 4,
      "fail": 1,
      "failures": Array [
        Object {
          "tapError": "no plan",
        },
      ],
      "ok": false,
      "pass": 4,
      "plan": FinalPlan {
        "comment": "",
        "end": null,
        "skipAll": false,
        "skipReason": "",
        "start": null,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP die_head_end.tap strictBail > stringified 1`] = `
ok 1
ok 2
ok 3
ok 4
# test count(4) != plan(null)
# failed 1 of 4 tests

`

exports[`test/parser-stringify.js TAP die_head_end.tap strictBail > stringified flat 1`] = `
ok 1
ok 2
ok 3
ok 4
# test count(4) != plan(null)
# failed 1 of 4 tests

`

exports[`test/parser-stringify.js TAP die_last_minute.tap bail > parsed 1`] = `
Array [
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 4,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 4,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 4,
      "plan": FinalPlan {
        "comment": "",
        "end": 4,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP die_last_minute.tap bail > stringified 1`] = `
ok 1
ok 2
ok 3
ok 4
1..4

`

exports[`test/parser-stringify.js TAP die_last_minute.tap bail > stringified flat 1`] = `
ok 1
ok 2
ok 3
ok 4
1..4

`

exports[`test/parser-stringify.js TAP die_last_minute.tap default settings > parsed 1`] = `
Array [
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 4,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 4,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 4,
      "plan": FinalPlan {
        "comment": "",
        "end": 4,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP die_last_minute.tap default settings > stringified 1`] = `
ok 1
ok 2
ok 3
ok 4
1..4

`

exports[`test/parser-stringify.js TAP die_last_minute.tap default settings > stringified flat 1`] = `
ok 1
ok 2
ok 3
ok 4
1..4

`

exports[`test/parser-stringify.js TAP die_last_minute.tap strict > parsed 1`] = `
Array [
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 4,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 4,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 4,
      "plan": FinalPlan {
        "comment": "",
        "end": 4,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP die_last_minute.tap strict > stringified 1`] = `
ok 1
ok 2
ok 3
ok 4
1..4

`

exports[`test/parser-stringify.js TAP die_last_minute.tap strict > stringified flat 1`] = `
ok 1
ok 2
ok 3
ok 4
1..4

`

exports[`test/parser-stringify.js TAP die_last_minute.tap strictBail > parsed 1`] = `
Array [
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 4,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 4,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 4,
      "plan": FinalPlan {
        "comment": "",
        "end": 4,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP die_last_minute.tap strictBail > stringified 1`] = `
ok 1
ok 2
ok 3
ok 4
1..4

`

exports[`test/parser-stringify.js TAP die_last_minute.tap strictBail > stringified flat 1`] = `
ok 1
ok 2
ok 3
ok 4
1..4

`

exports[`test/parser-stringify.js TAP die_unfinished.tap bail > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 4,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test count(3) != plan(4)\\n",
  ],
  Array [
    "comment",
    "# failed 1 of 3 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 3,
      "fail": 1,
      "failures": Array [
        Object {
          "tapError": "incorrect number of tests",
        },
      ],
      "ok": false,
      "pass": 3,
      "plan": FinalPlan {
        "comment": "",
        "end": 4,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP die_unfinished.tap bail > stringified 1`] = `
1..4
ok 1
ok 2
ok 3
# test count(3) != plan(4)
# failed 1 of 3 tests

`

exports[`test/parser-stringify.js TAP die_unfinished.tap bail > stringified flat 1`] = `
1..4
ok 1
ok 2
ok 3
# test count(3) != plan(4)
# failed 1 of 3 tests

`

exports[`test/parser-stringify.js TAP die_unfinished.tap default settings > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 4,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test count(3) != plan(4)\\n",
  ],
  Array [
    "comment",
    "# failed 1 of 3 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 3,
      "fail": 1,
      "failures": Array [
        Object {
          "tapError": "incorrect number of tests",
        },
      ],
      "ok": false,
      "pass": 3,
      "plan": FinalPlan {
        "comment": "",
        "end": 4,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP die_unfinished.tap default settings > stringified 1`] = `
1..4
ok 1
ok 2
ok 3
# test count(3) != plan(4)
# failed 1 of 3 tests

`

exports[`test/parser-stringify.js TAP die_unfinished.tap default settings > stringified flat 1`] = `
1..4
ok 1
ok 2
ok 3
# test count(3) != plan(4)
# failed 1 of 3 tests

`

exports[`test/parser-stringify.js TAP die_unfinished.tap strict > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 4,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test count(3) != plan(4)\\n",
  ],
  Array [
    "comment",
    "# failed 1 of 3 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 3,
      "fail": 1,
      "failures": Array [
        Object {
          "tapError": "incorrect number of tests",
        },
      ],
      "ok": false,
      "pass": 3,
      "plan": FinalPlan {
        "comment": "",
        "end": 4,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP die_unfinished.tap strict > stringified 1`] = `
1..4
ok 1
ok 2
ok 3
# test count(3) != plan(4)
# failed 1 of 3 tests

`

exports[`test/parser-stringify.js TAP die_unfinished.tap strict > stringified flat 1`] = `
1..4
ok 1
ok 2
ok 3
# test count(3) != plan(4)
# failed 1 of 3 tests

`

exports[`test/parser-stringify.js TAP die_unfinished.tap strictBail > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 4,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test count(3) != plan(4)\\n",
  ],
  Array [
    "comment",
    "# failed 1 of 3 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 3,
      "fail": 1,
      "failures": Array [
        Object {
          "tapError": "incorrect number of tests",
        },
      ],
      "ok": false,
      "pass": 3,
      "plan": FinalPlan {
        "comment": "",
        "end": 4,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP die_unfinished.tap strictBail > stringified 1`] = `
1..4
ok 1
ok 2
ok 3
# test count(3) != plan(4)
# failed 1 of 3 tests

`

exports[`test/parser-stringify.js TAP die_unfinished.tap strictBail > stringified flat 1`] = `
1..4
ok 1
ok 2
ok 3
# test count(3) != plan(4)
# failed 1 of 3 tests

`

exports[`test/parser-stringify.js TAP duplicates.tap bail > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 10,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "ok": true,
      "previous": Result {
        "fullname": "",
        "id": 4,
        "ok": true,
      },
      "tapError": "test point id 4 appears multiple times",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 6,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 7,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 8,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 9,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 10,
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test count(11) != plan(10)\\n",
  ],
  Array [
    "comment",
    "# failed 1 of 11 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 11,
      "fail": 1,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 4,
          "ok": true,
          "previous": Result {
            "fullname": "",
            "id": 4,
            "ok": true,
          },
          "tapError": "test point id 4 appears multiple times",
        },
      ],
      "ok": false,
      "pass": 11,
      "plan": FinalPlan {
        "comment": "",
        "end": 10,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP duplicates.tap bail > stringified 1`] = `
1..10
ok 1
ok 2
ok 3
ok 4
ok 4
ok 5
ok 6
ok 7
ok 8
ok 9
ok 10
# test count(11) != plan(10)
# failed 1 of 11 tests

`

exports[`test/parser-stringify.js TAP duplicates.tap bail > stringified flat 1`] = `
1..10
ok 1
ok 2
ok 3
ok 4
ok 4
ok 5
ok 6
ok 7
ok 8
ok 9
ok 10
# test count(11) != plan(10)
# failed 1 of 11 tests

`

exports[`test/parser-stringify.js TAP duplicates.tap default settings > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 10,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "ok": true,
      "previous": Result {
        "fullname": "",
        "id": 4,
        "ok": true,
      },
      "tapError": "test point id 4 appears multiple times",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 6,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 7,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 8,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 9,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 10,
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test count(11) != plan(10)\\n",
  ],
  Array [
    "comment",
    "# failed 1 of 11 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 11,
      "fail": 1,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 4,
          "ok": true,
          "previous": Result {
            "fullname": "",
            "id": 4,
            "ok": true,
          },
          "tapError": "test point id 4 appears multiple times",
        },
      ],
      "ok": false,
      "pass": 11,
      "plan": FinalPlan {
        "comment": "",
        "end": 10,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP duplicates.tap default settings > stringified 1`] = `
1..10
ok 1
ok 2
ok 3
ok 4
ok 4
ok 5
ok 6
ok 7
ok 8
ok 9
ok 10
# test count(11) != plan(10)
# failed 1 of 11 tests

`

exports[`test/parser-stringify.js TAP duplicates.tap default settings > stringified flat 1`] = `
1..10
ok 1
ok 2
ok 3
ok 4
ok 4
ok 5
ok 6
ok 7
ok 8
ok 9
ok 10
# test count(11) != plan(10)
# failed 1 of 11 tests

`

exports[`test/parser-stringify.js TAP duplicates.tap strict > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 10,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "ok": true,
      "previous": Result {
        "fullname": "",
        "id": 4,
        "ok": true,
      },
      "tapError": "test point id 4 appears multiple times",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 6,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 7,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 8,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 9,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 10,
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test count(11) != plan(10)\\n",
  ],
  Array [
    "comment",
    "# failed 1 of 11 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 11,
      "fail": 1,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 4,
          "ok": true,
          "previous": Result {
            "fullname": "",
            "id": 4,
            "ok": true,
          },
          "tapError": "test point id 4 appears multiple times",
        },
      ],
      "ok": false,
      "pass": 11,
      "plan": FinalPlan {
        "comment": "",
        "end": 10,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP duplicates.tap strict > stringified 1`] = `
1..10
ok 1
ok 2
ok 3
ok 4
ok 4
ok 5
ok 6
ok 7
ok 8
ok 9
ok 10
# test count(11) != plan(10)
# failed 1 of 11 tests

`

exports[`test/parser-stringify.js TAP duplicates.tap strict > stringified flat 1`] = `
1..10
ok 1
ok 2
ok 3
ok 4
ok 4
ok 5
ok 6
ok 7
ok 8
ok 9
ok 10
# test count(11) != plan(10)
# failed 1 of 11 tests

`

exports[`test/parser-stringify.js TAP duplicates.tap strictBail > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 10,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "ok": true,
      "previous": Result {
        "fullname": "",
        "id": 4,
        "ok": true,
      },
      "tapError": "test point id 4 appears multiple times",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 6,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 7,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 8,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 9,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 10,
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test count(11) != plan(10)\\n",
  ],
  Array [
    "comment",
    "# failed 1 of 11 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 11,
      "fail": 1,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 4,
          "ok": true,
          "previous": Result {
            "fullname": "",
            "id": 4,
            "ok": true,
          },
          "tapError": "test point id 4 appears multiple times",
        },
      ],
      "ok": false,
      "pass": 11,
      "plan": FinalPlan {
        "comment": "",
        "end": 10,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP duplicates.tap strictBail > stringified 1`] = `
1..10
ok 1
ok 2
ok 3
ok 4
ok 4
ok 5
ok 6
ok 7
ok 8
ok 9
ok 10
# test count(11) != plan(10)
# failed 1 of 11 tests

`

exports[`test/parser-stringify.js TAP duplicates.tap strictBail > stringified flat 1`] = `
1..10
ok 1
ok 2
ok 3
ok 4
ok 4
ok 5
ok 6
ok 7
ok 8
ok 9
ok 10
# test count(11) != plan(10)
# failed 1 of 11 tests

`

exports[`test/parser-stringify.js TAP echo.tap bail > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 0,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 0,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": 0,
        "skipAll": true,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP echo.tap bail > stringified 1`] = `
1..0

`

exports[`test/parser-stringify.js TAP echo.tap bail > stringified flat 1`] = `
1..0

`

exports[`test/parser-stringify.js TAP echo.tap default settings > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 0,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 0,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": 0,
        "skipAll": true,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP echo.tap default settings > stringified 1`] = `
1..0

`

exports[`test/parser-stringify.js TAP echo.tap default settings > stringified flat 1`] = `
1..0

`

exports[`test/parser-stringify.js TAP echo.tap strict > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 0,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 0,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": 0,
        "skipAll": true,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP echo.tap strict > stringified 1`] = `
1..0

`

exports[`test/parser-stringify.js TAP echo.tap strict > stringified flat 1`] = `
1..0

`

exports[`test/parser-stringify.js TAP echo.tap strictBail > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 0,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 0,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": 0,
        "skipAll": true,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP echo.tap strictBail > stringified 1`] = `
1..0

`

exports[`test/parser-stringify.js TAP echo.tap strictBail > stringified flat 1`] = `
1..0

`

exports[`test/parser-stringify.js TAP empty-buffered-child.tap bail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: child\\n",
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 0,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 0,
          "plan": FinalPlan {
            "comment": "",
            "end": 0,
            "skipAll": true,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "buffered": true,
      "fullname": "",
      "name": "child",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP empty-buffered-child.tap bail > stringified 1`] = `
TAP version 13
# Subtest: child
    
ok - child
1..1

`

exports[`test/parser-stringify.js TAP empty-buffered-child.tap bail > stringified flat 1`] = `
TAP version 13
# Subtest: child
    
ok - child
1..1

`

exports[`test/parser-stringify.js TAP empty-buffered-child.tap default settings > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: child\\n",
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 0,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 0,
          "plan": FinalPlan {
            "comment": "",
            "end": 0,
            "skipAll": true,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "buffered": true,
      "fullname": "",
      "name": "child",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP empty-buffered-child.tap default settings > stringified 1`] = `
TAP version 13
# Subtest: child
    
ok - child
1..1

`

exports[`test/parser-stringify.js TAP empty-buffered-child.tap default settings > stringified flat 1`] = `
TAP version 13
# Subtest: child
    
ok - child
1..1

`

exports[`test/parser-stringify.js TAP empty-buffered-child.tap strict > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: child\\n",
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 0,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 0,
          "plan": FinalPlan {
            "comment": "",
            "end": 0,
            "skipAll": true,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "buffered": true,
      "fullname": "",
      "name": "child",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP empty-buffered-child.tap strict > stringified 1`] = `
TAP version 13
# Subtest: child
    
ok - child
1..1

`

exports[`test/parser-stringify.js TAP empty-buffered-child.tap strict > stringified flat 1`] = `
TAP version 13
# Subtest: child
    
ok - child
1..1

`

exports[`test/parser-stringify.js TAP empty-buffered-child.tap strictBail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: child\\n",
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 0,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 0,
          "plan": FinalPlan {
            "comment": "",
            "end": 0,
            "skipAll": true,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "buffered": true,
      "fullname": "",
      "name": "child",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP empty-buffered-child.tap strictBail > stringified 1`] = `
TAP version 13
# Subtest: child
    
ok - child
1..1

`

exports[`test/parser-stringify.js TAP empty-buffered-child.tap strictBail > stringified flat 1`] = `
TAP version 13
# Subtest: child
    
ok - child
1..1

`

exports[`test/parser-stringify.js TAP empty-failures.tap bail > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 2,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 2,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 2,
      "plan": FinalPlan {
        "comment": "",
        "end": 2,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP empty-failures.tap bail > stringified 1`] = `
1..2
ok
ok

`

exports[`test/parser-stringify.js TAP empty-failures.tap bail > stringified flat 1`] = `
1..2
ok
ok

`

exports[`test/parser-stringify.js TAP empty-failures.tap default settings > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 2,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 2,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 2,
      "plan": FinalPlan {
        "comment": "",
        "end": 2,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP empty-failures.tap default settings > stringified 1`] = `
1..2
ok
ok

`

exports[`test/parser-stringify.js TAP empty-failures.tap default settings > stringified flat 1`] = `
1..2
ok
ok

`

exports[`test/parser-stringify.js TAP empty-failures.tap strict > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 2,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 2,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 2,
      "plan": FinalPlan {
        "comment": "",
        "end": 2,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP empty-failures.tap strict > stringified 1`] = `
1..2
ok
ok

`

exports[`test/parser-stringify.js TAP empty-failures.tap strict > stringified flat 1`] = `
1..2
ok
ok

`

exports[`test/parser-stringify.js TAP empty-failures.tap strictBail > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 2,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 2,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 2,
      "plan": FinalPlan {
        "comment": "",
        "end": 2,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP empty-failures.tap strictBail > stringified 1`] = `
1..2
ok
ok

`

exports[`test/parser-stringify.js TAP empty-failures.tap strictBail > stringified flat 1`] = `
1..2
ok
ok

`

exports[`test/parser-stringify.js TAP empty.tap bail > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "comment": "no tests found",
      "end": 0,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 0,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "no tests found",
        "end": 0,
        "skipAll": true,
        "skipReason": "no tests found",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP empty.tap bail > stringified 1`] = `
1..0 # no tests found

`

exports[`test/parser-stringify.js TAP empty.tap bail > stringified flat 1`] = `
1..0 # no tests found

`

exports[`test/parser-stringify.js TAP empty.tap default settings > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "comment": "no tests found",
      "end": 0,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 0,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "no tests found",
        "end": 0,
        "skipAll": true,
        "skipReason": "no tests found",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP empty.tap default settings > stringified 1`] = `
1..0 # no tests found

`

exports[`test/parser-stringify.js TAP empty.tap default settings > stringified flat 1`] = `
1..0 # no tests found

`

exports[`test/parser-stringify.js TAP empty.tap strict > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "comment": "no tests found",
      "end": 0,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 0,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "no tests found",
        "end": 0,
        "skipAll": true,
        "skipReason": "no tests found",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP empty.tap strict > stringified 1`] = `
1..0 # no tests found

`

exports[`test/parser-stringify.js TAP empty.tap strict > stringified flat 1`] = `
1..0 # no tests found

`

exports[`test/parser-stringify.js TAP empty.tap strictBail > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "comment": "no tests found",
      "end": 0,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 0,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "no tests found",
        "end": 0,
        "skipAll": true,
        "skipReason": "no tests found",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP empty.tap strictBail > stringified 1`] = `
1..0 # no tests found

`

exports[`test/parser-stringify.js TAP empty.tap strictBail > stringified flat 1`] = `
1..0 # no tests found

`

exports[`test/parser-stringify.js TAP escape_eol.tap bail > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 2,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "Should parse as literal backslash --> \\\\",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "Not a continuation line",
      "ok": true,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 2,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 2,
      "plan": FinalPlan {
        "comment": "",
        "end": 2,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP escape_eol.tap bail > stringified 1`] = `
1..2
ok 1 - Should parse as literal backslash --> \\\\
ok 2 - Not a continuation line

`

exports[`test/parser-stringify.js TAP escape_eol.tap bail > stringified flat 1`] = `
1..2
ok 1 - Should parse as literal backslash --> \\\\
ok 2 - Not a continuation line

`

exports[`test/parser-stringify.js TAP escape_eol.tap default settings > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 2,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "Should parse as literal backslash --> \\\\",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "Not a continuation line",
      "ok": true,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 2,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 2,
      "plan": FinalPlan {
        "comment": "",
        "end": 2,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP escape_eol.tap default settings > stringified 1`] = `
1..2
ok 1 - Should parse as literal backslash --> \\\\
ok 2 - Not a continuation line

`

exports[`test/parser-stringify.js TAP escape_eol.tap default settings > stringified flat 1`] = `
1..2
ok 1 - Should parse as literal backslash --> \\\\
ok 2 - Not a continuation line

`

exports[`test/parser-stringify.js TAP escape_eol.tap strict > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 2,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "Should parse as literal backslash --> \\\\",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "Not a continuation line",
      "ok": true,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 2,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 2,
      "plan": FinalPlan {
        "comment": "",
        "end": 2,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP escape_eol.tap strict > stringified 1`] = `
1..2
ok 1 - Should parse as literal backslash --> \\\\
ok 2 - Not a continuation line

`

exports[`test/parser-stringify.js TAP escape_eol.tap strict > stringified flat 1`] = `
1..2
ok 1 - Should parse as literal backslash --> \\\\
ok 2 - Not a continuation line

`

exports[`test/parser-stringify.js TAP escape_eol.tap strictBail > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 2,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "Should parse as literal backslash --> \\\\",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "Not a continuation line",
      "ok": true,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 2,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 2,
      "plan": FinalPlan {
        "comment": "",
        "end": 2,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP escape_eol.tap strictBail > stringified 1`] = `
1..2
ok 1 - Should parse as literal backslash --> \\\\
ok 2 - Not a continuation line

`

exports[`test/parser-stringify.js TAP escape_eol.tap strictBail > stringified flat 1`] = `
1..2
ok 1 - Should parse as literal backslash --> \\\\
ok 2 - Not a continuation line

`

exports[`test/parser-stringify.js TAP escape_hash.tap bail > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 3,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "Not a # TODO",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "Not a # SKIP",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "Escaped \\\\#",
      "ok": true,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 3,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 3,
      "plan": FinalPlan {
        "comment": "",
        "end": 3,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP escape_hash.tap bail > stringified 1`] = `
1..3
ok 1 - Not a \\# TODO
ok 2 - Not a \\# SKIP
ok 3 - Escaped \\\\\\#

`

exports[`test/parser-stringify.js TAP escape_hash.tap bail > stringified flat 1`] = `
1..3
ok 1 - Not a \\# TODO
ok 2 - Not a \\# SKIP
ok 3 - Escaped \\\\\\#

`

exports[`test/parser-stringify.js TAP escape_hash.tap default settings > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 3,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "Not a # TODO",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "Not a # SKIP",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "Escaped \\\\#",
      "ok": true,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 3,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 3,
      "plan": FinalPlan {
        "comment": "",
        "end": 3,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP escape_hash.tap default settings > stringified 1`] = `
1..3
ok 1 - Not a \\# TODO
ok 2 - Not a \\# SKIP
ok 3 - Escaped \\\\\\#

`

exports[`test/parser-stringify.js TAP escape_hash.tap default settings > stringified flat 1`] = `
1..3
ok 1 - Not a \\# TODO
ok 2 - Not a \\# SKIP
ok 3 - Escaped \\\\\\#

`

exports[`test/parser-stringify.js TAP escape_hash.tap strict > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 3,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "Not a # TODO",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "Not a # SKIP",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "Escaped \\\\#",
      "ok": true,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 3,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 3,
      "plan": FinalPlan {
        "comment": "",
        "end": 3,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP escape_hash.tap strict > stringified 1`] = `
1..3
ok 1 - Not a \\# TODO
ok 2 - Not a \\# SKIP
ok 3 - Escaped \\\\\\#

`

exports[`test/parser-stringify.js TAP escape_hash.tap strict > stringified flat 1`] = `
1..3
ok 1 - Not a \\# TODO
ok 2 - Not a \\# SKIP
ok 3 - Escaped \\\\\\#

`

exports[`test/parser-stringify.js TAP escape_hash.tap strictBail > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 3,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "Not a # TODO",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "Not a # SKIP",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "Escaped \\\\#",
      "ok": true,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 3,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 3,
      "plan": FinalPlan {
        "comment": "",
        "end": 3,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP escape_hash.tap strictBail > stringified 1`] = `
1..3
ok 1 - Not a \\# TODO
ok 2 - Not a \\# SKIP
ok 3 - Escaped \\\\\\#

`

exports[`test/parser-stringify.js TAP escape_hash.tap strictBail > stringified flat 1`] = `
1..3
ok 1 - Not a \\# TODO
ok 2 - Not a \\# SKIP
ok 3 - Escaped \\\\\\#

`

exports[`test/parser-stringify.js TAP extra-in-child.tap bail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: test/01c-user-updates.js\\n",
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: update profile\\n",
          ],
          Array [
            "assert",
            Result {
              "fullname": "test/01c-user-updates.js update profile",
              "id": 1,
              "name": "should be equivalent",
              "ok": true,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "test/01c-user-updates.js update profile",
              "id": 2,
              "name": "should be equivalent",
              "ok": true,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 2,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 2,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 2,
              "plan": FinalPlan {
                "comment": "",
                "end": 2,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": 43.094,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "test/01c-user-updates.js",
          "id": 1,
          "name": "update profile",
          "ok": true,
          "time": 43.094,
        },
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: update email\\n",
          ],
          Array [
            "assert",
            Result {
              "fullname": "test/01c-user-updates.js update email",
              "id": 1,
              "name": "should be equivalent",
              "ok": true,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 1,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 1,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 1,
              "plan": FinalPlan {
                "comment": "",
                "end": 1,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": 24.16,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "test/01c-user-updates.js",
          "id": 2,
          "name": "update email",
          "ok": true,
          "time": 24.16,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 2,
          "start": 1,
        },
      ],
      Array [
        "comment",
        "# time=174.236ms\\n",
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 2,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 2,
          "plan": FinalPlan {
            "comment": "",
            "end": 2,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": 339.14,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "extra",
    "    null { _id: 'org.couchdb.user:user',\\n",
  ],
  Array [
    "extra",
    "      _rev: '21-3d786fbf7428194ca288abe40c50cd0c',\\n",
  ],
  Array [
    "extra",
    "      password_scheme: 'pbkdf2',\\n",
  ],
  Array [
    "extra",
    "      iterations: 10,\\n",
  ],
  Array [
    "extra",
    "      name: 'user',\\n",
  ],
  Array [
    "extra",
    "      email: 'new@email.com',\\n",
  ],
  Array [
    "extra",
    "      type: 'user',\\n",
  ],
  Array [
    "extra",
    "      roles: [],\\n",
  ],
  Array [
    "extra",
    "      date: '2015-05-07T18:04:07.589Z',\\n",
  ],
  Array [
    "extra",
    "      derived_key: 'efcfbc73438a9d122290e5d0c82d1ca7d0a9ba1f',\\n",
  ],
  Array [
    "extra",
    "      salt: '74e7dea17bfe520bb84dd9642f072549',\\n",
  ],
  Array [
    "extra",
    "      github: 'user',\\n",
  ],
  Array [
    "extra",
    "      homepage: 'http://www.user.com' }\\n",
  ],
  Array [
    "extra",
    "    { _id: 'org.couchdb.user:user',\\n",
  ],
  Array [
    "extra",
    "      _rev: '22-97703c62ab1f01ea691d40aa8a756cbf',\\n",
  ],
  Array [
    "extra",
    "      password_scheme: 'pbkdf2',\\n",
  ],
  Array [
    "extra",
    "      iterations: 10,\\n",
  ],
  Array [
    "extra",
    "      name: 'user',\\n",
  ],
  Array [
    "extra",
    "      email: 'new@email.com',\\n",
  ],
  Array [
    "extra",
    "      type: 'user',\\n",
  ],
  Array [
    "extra",
    "      roles: [],\\n",
  ],
  Array [
    "extra",
    "      date: '2015-05-07T18:04:07.589Z',\\n",
  ],
  Array [
    "extra",
    "      derived_key: 'efcfbc73438a9d122290e5d0c82d1ca7d0a9ba1f',\\n",
  ],
  Array [
    "extra",
    "      salt: '74e7dea17bfe520bb84dd9642f072549',\\n",
  ],
  Array [
    "extra",
    "      github: 'user',\\n",
  ],
  Array [
    "extra",
    "      homepage: 'http://www.user.com' }\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "test/01c-user-updates.js",
      "ok": true,
      "time": 339.14,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# time=343.487ms\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": 343.487,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP extra-in-child.tap bail > stringified 1`] = `
TAP version 13
# Subtest: test/01c-user-updates.js
    # Subtest: update profile
        ok 1 - should be equivalent
        ok 2 - should be equivalent
        1..2
    ok 1 - update profile # time=43.094ms
    # Subtest: update email
        ok 1 - should be equivalent
        1..1
    ok 2 - update email # time=24.16ms
    1..2
    # time=174.236ms
    null { _id: 'org.couchdb.user:user',
      _rev: '21-3d786fbf7428194ca288abe40c50cd0c',
      password_scheme: 'pbkdf2',
      iterations: 10,
      name: 'user',
      email: 'new@email.com',
      type: 'user',
      roles: [],
      date: '2015-05-07T18:04:07.589Z',
      derived_key: 'efcfbc73438a9d122290e5d0c82d1ca7d0a9ba1f',
      salt: '74e7dea17bfe520bb84dd9642f072549',
      github: 'user',
      homepage: 'http://www.user.com' }
    { _id: 'org.couchdb.user:user',
      _rev: '22-97703c62ab1f01ea691d40aa8a756cbf',
      password_scheme: 'pbkdf2',
      iterations: 10,
      name: 'user',
      email: 'new@email.com',
      type: 'user',
      roles: [],
      date: '2015-05-07T18:04:07.589Z',
      derived_key: 'efcfbc73438a9d122290e5d0c82d1ca7d0a9ba1f',
      salt: '74e7dea17bfe520bb84dd9642f072549',
      github: 'user',
      homepage: 'http://www.user.com' }
ok 1 - test/01c-user-updates.js # time=339.14ms
1..1
# time=343.487ms

`

exports[`test/parser-stringify.js TAP extra-in-child.tap bail > stringified flat 1`] = `
TAP version 13
# Subtest: test/01c-user-updates.js
    # Subtest: update profile
        ok 1 - should be equivalent
        ok 2 - should be equivalent
        1..2
    ok 1 - update profile # time=43.094ms
    # Subtest: update email
        ok 1 - should be equivalent
        1..1
    ok 2 - update email # time=24.16ms
    1..2
    # time=174.236ms
    null { _id: 'org.couchdb.user:user',
      _rev: '21-3d786fbf7428194ca288abe40c50cd0c',
      password_scheme: 'pbkdf2',
      iterations: 10,
      name: 'user',
      email: 'new@email.com',
      type: 'user',
      roles: [],
      date: '2015-05-07T18:04:07.589Z',
      derived_key: 'efcfbc73438a9d122290e5d0c82d1ca7d0a9ba1f',
      salt: '74e7dea17bfe520bb84dd9642f072549',
      github: 'user',
      homepage: 'http://www.user.com' }
    { _id: 'org.couchdb.user:user',
      _rev: '22-97703c62ab1f01ea691d40aa8a756cbf',
      password_scheme: 'pbkdf2',
      iterations: 10,
      name: 'user',
      email: 'new@email.com',
      type: 'user',
      roles: [],
      date: '2015-05-07T18:04:07.589Z',
      derived_key: 'efcfbc73438a9d122290e5d0c82d1ca7d0a9ba1f',
      salt: '74e7dea17bfe520bb84dd9642f072549',
      github: 'user',
      homepage: 'http://www.user.com' }
ok 1 - test/01c-user-updates.js # time=339.14ms
1..1
# time=343.487ms

`

exports[`test/parser-stringify.js TAP extra-in-child.tap default settings > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: test/01c-user-updates.js\\n",
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: update profile\\n",
          ],
          Array [
            "assert",
            Result {
              "fullname": "test/01c-user-updates.js update profile",
              "id": 1,
              "name": "should be equivalent",
              "ok": true,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "test/01c-user-updates.js update profile",
              "id": 2,
              "name": "should be equivalent",
              "ok": true,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 2,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 2,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 2,
              "plan": FinalPlan {
                "comment": "",
                "end": 2,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": 43.094,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "test/01c-user-updates.js",
          "id": 1,
          "name": "update profile",
          "ok": true,
          "time": 43.094,
        },
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: update email\\n",
          ],
          Array [
            "assert",
            Result {
              "fullname": "test/01c-user-updates.js update email",
              "id": 1,
              "name": "should be equivalent",
              "ok": true,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 1,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 1,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 1,
              "plan": FinalPlan {
                "comment": "",
                "end": 1,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": 24.16,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "test/01c-user-updates.js",
          "id": 2,
          "name": "update email",
          "ok": true,
          "time": 24.16,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 2,
          "start": 1,
        },
      ],
      Array [
        "comment",
        "# time=174.236ms\\n",
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 2,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 2,
          "plan": FinalPlan {
            "comment": "",
            "end": 2,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": 339.14,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "extra",
    "    null { _id: 'org.couchdb.user:user',\\n",
  ],
  Array [
    "extra",
    "      _rev: '21-3d786fbf7428194ca288abe40c50cd0c',\\n",
  ],
  Array [
    "extra",
    "      password_scheme: 'pbkdf2',\\n",
  ],
  Array [
    "extra",
    "      iterations: 10,\\n",
  ],
  Array [
    "extra",
    "      name: 'user',\\n",
  ],
  Array [
    "extra",
    "      email: 'new@email.com',\\n",
  ],
  Array [
    "extra",
    "      type: 'user',\\n",
  ],
  Array [
    "extra",
    "      roles: [],\\n",
  ],
  Array [
    "extra",
    "      date: '2015-05-07T18:04:07.589Z',\\n",
  ],
  Array [
    "extra",
    "      derived_key: 'efcfbc73438a9d122290e5d0c82d1ca7d0a9ba1f',\\n",
  ],
  Array [
    "extra",
    "      salt: '74e7dea17bfe520bb84dd9642f072549',\\n",
  ],
  Array [
    "extra",
    "      github: 'user',\\n",
  ],
  Array [
    "extra",
    "      homepage: 'http://www.user.com' }\\n",
  ],
  Array [
    "extra",
    "    { _id: 'org.couchdb.user:user',\\n",
  ],
  Array [
    "extra",
    "      _rev: '22-97703c62ab1f01ea691d40aa8a756cbf',\\n",
  ],
  Array [
    "extra",
    "      password_scheme: 'pbkdf2',\\n",
  ],
  Array [
    "extra",
    "      iterations: 10,\\n",
  ],
  Array [
    "extra",
    "      name: 'user',\\n",
  ],
  Array [
    "extra",
    "      email: 'new@email.com',\\n",
  ],
  Array [
    "extra",
    "      type: 'user',\\n",
  ],
  Array [
    "extra",
    "      roles: [],\\n",
  ],
  Array [
    "extra",
    "      date: '2015-05-07T18:04:07.589Z',\\n",
  ],
  Array [
    "extra",
    "      derived_key: 'efcfbc73438a9d122290e5d0c82d1ca7d0a9ba1f',\\n",
  ],
  Array [
    "extra",
    "      salt: '74e7dea17bfe520bb84dd9642f072549',\\n",
  ],
  Array [
    "extra",
    "      github: 'user',\\n",
  ],
  Array [
    "extra",
    "      homepage: 'http://www.user.com' }\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "test/01c-user-updates.js",
      "ok": true,
      "time": 339.14,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# time=343.487ms\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": 343.487,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP extra-in-child.tap default settings > stringified 1`] = `
TAP version 13
# Subtest: test/01c-user-updates.js
    # Subtest: update profile
        ok 1 - should be equivalent
        ok 2 - should be equivalent
        1..2
    ok 1 - update profile # time=43.094ms
    # Subtest: update email
        ok 1 - should be equivalent
        1..1
    ok 2 - update email # time=24.16ms
    1..2
    # time=174.236ms
    null { _id: 'org.couchdb.user:user',
      _rev: '21-3d786fbf7428194ca288abe40c50cd0c',
      password_scheme: 'pbkdf2',
      iterations: 10,
      name: 'user',
      email: 'new@email.com',
      type: 'user',
      roles: [],
      date: '2015-05-07T18:04:07.589Z',
      derived_key: 'efcfbc73438a9d122290e5d0c82d1ca7d0a9ba1f',
      salt: '74e7dea17bfe520bb84dd9642f072549',
      github: 'user',
      homepage: 'http://www.user.com' }
    { _id: 'org.couchdb.user:user',
      _rev: '22-97703c62ab1f01ea691d40aa8a756cbf',
      password_scheme: 'pbkdf2',
      iterations: 10,
      name: 'user',
      email: 'new@email.com',
      type: 'user',
      roles: [],
      date: '2015-05-07T18:04:07.589Z',
      derived_key: 'efcfbc73438a9d122290e5d0c82d1ca7d0a9ba1f',
      salt: '74e7dea17bfe520bb84dd9642f072549',
      github: 'user',
      homepage: 'http://www.user.com' }
ok 1 - test/01c-user-updates.js # time=339.14ms
1..1
# time=343.487ms

`

exports[`test/parser-stringify.js TAP extra-in-child.tap default settings > stringified flat 1`] = `
TAP version 13
# Subtest: test/01c-user-updates.js
    # Subtest: update profile
        ok 1 - should be equivalent
        ok 2 - should be equivalent
        1..2
    ok 1 - update profile # time=43.094ms
    # Subtest: update email
        ok 1 - should be equivalent
        1..1
    ok 2 - update email # time=24.16ms
    1..2
    # time=174.236ms
    null { _id: 'org.couchdb.user:user',
      _rev: '21-3d786fbf7428194ca288abe40c50cd0c',
      password_scheme: 'pbkdf2',
      iterations: 10,
      name: 'user',
      email: 'new@email.com',
      type: 'user',
      roles: [],
      date: '2015-05-07T18:04:07.589Z',
      derived_key: 'efcfbc73438a9d122290e5d0c82d1ca7d0a9ba1f',
      salt: '74e7dea17bfe520bb84dd9642f072549',
      github: 'user',
      homepage: 'http://www.user.com' }
    { _id: 'org.couchdb.user:user',
      _rev: '22-97703c62ab1f01ea691d40aa8a756cbf',
      password_scheme: 'pbkdf2',
      iterations: 10,
      name: 'user',
      email: 'new@email.com',
      type: 'user',
      roles: [],
      date: '2015-05-07T18:04:07.589Z',
      derived_key: 'efcfbc73438a9d122290e5d0c82d1ca7d0a9ba1f',
      salt: '74e7dea17bfe520bb84dd9642f072549',
      github: 'user',
      homepage: 'http://www.user.com' }
ok 1 - test/01c-user-updates.js # time=339.14ms
1..1
# time=343.487ms

`

exports[`test/parser-stringify.js TAP extra-in-child.tap strict > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: test/01c-user-updates.js\\n",
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: update profile\\n",
          ],
          Array [
            "assert",
            Result {
              "fullname": "test/01c-user-updates.js update profile",
              "id": 1,
              "name": "should be equivalent",
              "ok": true,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "test/01c-user-updates.js update profile",
              "id": 2,
              "name": "should be equivalent",
              "ok": true,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 2,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 2,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 2,
              "plan": FinalPlan {
                "comment": "",
                "end": 2,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": 43.094,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "test/01c-user-updates.js",
          "id": 1,
          "name": "update profile",
          "ok": true,
          "time": 43.094,
        },
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: update email\\n",
          ],
          Array [
            "assert",
            Result {
              "fullname": "test/01c-user-updates.js update email",
              "id": 1,
              "name": "should be equivalent",
              "ok": true,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 1,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 1,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 1,
              "plan": FinalPlan {
                "comment": "",
                "end": 1,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": 24.16,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "test/01c-user-updates.js",
          "id": 2,
          "name": "update email",
          "ok": true,
          "time": 24.16,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 2,
          "start": 1,
        },
      ],
      Array [
        "comment",
        "# time=174.236ms\\n",
      ],
      Array [
        "comment",
        "# failed 26 of 2 tests\\n",
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 2,
          "fail": 26,
          "failures": Array [
            Object {
              "data": "null { _id: 'org.couchdb.user:user',\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "  _rev: '21-3d786fbf7428194ca288abe40c50cd0c',\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "  password_scheme: 'pbkdf2',\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "  iterations: 10,\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "  name: 'user',\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "  email: 'new@email.com',\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "  type: 'user',\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "  roles: [],\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "  date: '2015-05-07T18:04:07.589Z',\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "  derived_key: 'efcfbc73438a9d122290e5d0c82d1ca7d0a9ba1f',\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "  salt: '74e7dea17bfe520bb84dd9642f072549',\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "  github: 'user',\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "  homepage: 'http://www.user.com' }\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "{ _id: 'org.couchdb.user:user',\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "  _rev: '22-97703c62ab1f01ea691d40aa8a756cbf',\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "  password_scheme: 'pbkdf2',\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "  iterations: 10,\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "  name: 'user',\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "  email: 'new@email.com',\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "  type: 'user',\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "  roles: [],\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "  date: '2015-05-07T18:04:07.589Z',\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "  derived_key: 'efcfbc73438a9d122290e5d0c82d1ca7d0a9ba1f',\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "  salt: '74e7dea17bfe520bb84dd9642f072549',\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "  github: 'user',\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "  homepage: 'http://www.user.com' }\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
          ],
          "ok": false,
          "pass": 2,
          "plan": FinalPlan {
            "comment": "",
            "end": 2,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": 339.14,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "extra",
    "    null { _id: 'org.couchdb.user:user',\\n",
  ],
  Array [
    "extra",
    "      _rev: '21-3d786fbf7428194ca288abe40c50cd0c',\\n",
  ],
  Array [
    "extra",
    "      password_scheme: 'pbkdf2',\\n",
  ],
  Array [
    "extra",
    "      iterations: 10,\\n",
  ],
  Array [
    "extra",
    "      name: 'user',\\n",
  ],
  Array [
    "extra",
    "      email: 'new@email.com',\\n",
  ],
  Array [
    "extra",
    "      type: 'user',\\n",
  ],
  Array [
    "extra",
    "      roles: [],\\n",
  ],
  Array [
    "extra",
    "      date: '2015-05-07T18:04:07.589Z',\\n",
  ],
  Array [
    "extra",
    "      derived_key: 'efcfbc73438a9d122290e5d0c82d1ca7d0a9ba1f',\\n",
  ],
  Array [
    "extra",
    "      salt: '74e7dea17bfe520bb84dd9642f072549',\\n",
  ],
  Array [
    "extra",
    "      github: 'user',\\n",
  ],
  Array [
    "extra",
    "      homepage: 'http://www.user.com' }\\n",
  ],
  Array [
    "extra",
    "    { _id: 'org.couchdb.user:user',\\n",
  ],
  Array [
    "extra",
    "      _rev: '22-97703c62ab1f01ea691d40aa8a756cbf',\\n",
  ],
  Array [
    "extra",
    "      password_scheme: 'pbkdf2',\\n",
  ],
  Array [
    "extra",
    "      iterations: 10,\\n",
  ],
  Array [
    "extra",
    "      name: 'user',\\n",
  ],
  Array [
    "extra",
    "      email: 'new@email.com',\\n",
  ],
  Array [
    "extra",
    "      type: 'user',\\n",
  ],
  Array [
    "extra",
    "      roles: [],\\n",
  ],
  Array [
    "extra",
    "      date: '2015-05-07T18:04:07.589Z',\\n",
  ],
  Array [
    "extra",
    "      derived_key: 'efcfbc73438a9d122290e5d0c82d1ca7d0a9ba1f',\\n",
  ],
  Array [
    "extra",
    "      salt: '74e7dea17bfe520bb84dd9642f072549',\\n",
  ],
  Array [
    "extra",
    "      github: 'user',\\n",
  ],
  Array [
    "extra",
    "      homepage: 'http://www.user.com' }\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "test/01c-user-updates.js",
      "ok": true,
      "time": 339.14,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# time=343.487ms\\n",
  ],
  Array [
    "comment",
    "# failed 26 test\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 26,
      "failures": Array [
        Object {
          "data": "null { _id: 'org.couchdb.user:user',\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "  _rev: '21-3d786fbf7428194ca288abe40c50cd0c',\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "  password_scheme: 'pbkdf2',\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "  iterations: 10,\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "  name: 'user',\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "  email: 'new@email.com',\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "  type: 'user',\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "  roles: [],\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "  date: '2015-05-07T18:04:07.589Z',\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "  derived_key: 'efcfbc73438a9d122290e5d0c82d1ca7d0a9ba1f',\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "  salt: '74e7dea17bfe520bb84dd9642f072549',\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "  github: 'user',\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "  homepage: 'http://www.user.com' }\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "{ _id: 'org.couchdb.user:user',\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "  _rev: '22-97703c62ab1f01ea691d40aa8a756cbf',\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "  password_scheme: 'pbkdf2',\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "  iterations: 10,\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "  name: 'user',\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "  email: 'new@email.com',\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "  type: 'user',\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "  roles: [],\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "  date: '2015-05-07T18:04:07.589Z',\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "  derived_key: 'efcfbc73438a9d122290e5d0c82d1ca7d0a9ba1f',\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "  salt: '74e7dea17bfe520bb84dd9642f072549',\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "  github: 'user',\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "  homepage: 'http://www.user.com' }\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
      ],
      "ok": false,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": 343.487,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP extra-in-child.tap strict > stringified 1`] = `
TAP version 13
# Subtest: test/01c-user-updates.js
    # Subtest: update profile
        ok 1 - should be equivalent
        ok 2 - should be equivalent
        1..2
    ok 1 - update profile # time=43.094ms
    # Subtest: update email
        ok 1 - should be equivalent
        1..1
    ok 2 - update email # time=24.16ms
    1..2
    # time=174.236ms
    # failed 26 of 2 tests
    null { _id: 'org.couchdb.user:user',
      _rev: '21-3d786fbf7428194ca288abe40c50cd0c',
      password_scheme: 'pbkdf2',
      iterations: 10,
      name: 'user',
      email: 'new@email.com',
      type: 'user',
      roles: [],
      date: '2015-05-07T18:04:07.589Z',
      derived_key: 'efcfbc73438a9d122290e5d0c82d1ca7d0a9ba1f',
      salt: '74e7dea17bfe520bb84dd9642f072549',
      github: 'user',
      homepage: 'http://www.user.com' }
    { _id: 'org.couchdb.user:user',
      _rev: '22-97703c62ab1f01ea691d40aa8a756cbf',
      password_scheme: 'pbkdf2',
      iterations: 10,
      name: 'user',
      email: 'new@email.com',
      type: 'user',
      roles: [],
      date: '2015-05-07T18:04:07.589Z',
      derived_key: 'efcfbc73438a9d122290e5d0c82d1ca7d0a9ba1f',
      salt: '74e7dea17bfe520bb84dd9642f072549',
      github: 'user',
      homepage: 'http://www.user.com' }
ok 1 - test/01c-user-updates.js # time=339.14ms
1..1
# time=343.487ms
# failed 26 test

`

exports[`test/parser-stringify.js TAP extra-in-child.tap strict > stringified flat 1`] = `
TAP version 13
# Subtest: test/01c-user-updates.js
    # Subtest: update profile
        ok 1 - should be equivalent
        ok 2 - should be equivalent
        1..2
    ok 1 - update profile # time=43.094ms
    # Subtest: update email
        ok 1 - should be equivalent
        1..1
    ok 2 - update email # time=24.16ms
    1..2
    # time=174.236ms
    # failed 26 of 2 tests
    null { _id: 'org.couchdb.user:user',
      _rev: '21-3d786fbf7428194ca288abe40c50cd0c',
      password_scheme: 'pbkdf2',
      iterations: 10,
      name: 'user',
      email: 'new@email.com',
      type: 'user',
      roles: [],
      date: '2015-05-07T18:04:07.589Z',
      derived_key: 'efcfbc73438a9d122290e5d0c82d1ca7d0a9ba1f',
      salt: '74e7dea17bfe520bb84dd9642f072549',
      github: 'user',
      homepage: 'http://www.user.com' }
    { _id: 'org.couchdb.user:user',
      _rev: '22-97703c62ab1f01ea691d40aa8a756cbf',
      password_scheme: 'pbkdf2',
      iterations: 10,
      name: 'user',
      email: 'new@email.com',
      type: 'user',
      roles: [],
      date: '2015-05-07T18:04:07.589Z',
      derived_key: 'efcfbc73438a9d122290e5d0c82d1ca7d0a9ba1f',
      salt: '74e7dea17bfe520bb84dd9642f072549',
      github: 'user',
      homepage: 'http://www.user.com' }
ok 1 - test/01c-user-updates.js # time=339.14ms
1..1
# time=343.487ms
# failed 26 test

`

exports[`test/parser-stringify.js TAP extra-in-child.tap strictBail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: test/01c-user-updates.js\\n",
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: update profile\\n",
          ],
          Array [
            "assert",
            Result {
              "fullname": "test/01c-user-updates.js update profile",
              "id": 1,
              "name": "should be equivalent",
              "ok": true,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "test/01c-user-updates.js update profile",
              "id": 2,
              "name": "should be equivalent",
              "ok": true,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 2,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 2,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 2,
              "plan": FinalPlan {
                "comment": "",
                "end": 2,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": 43.094,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "test/01c-user-updates.js",
          "id": 1,
          "name": "update profile",
          "ok": true,
          "time": 43.094,
        },
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: update email\\n",
          ],
          Array [
            "assert",
            Result {
              "fullname": "test/01c-user-updates.js update email",
              "id": 1,
              "name": "should be equivalent",
              "ok": true,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 1,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 1,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 1,
              "plan": FinalPlan {
                "comment": "",
                "end": 1,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": 24.16,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "test/01c-user-updates.js",
          "id": 2,
          "name": "update email",
          "ok": true,
          "time": 24.16,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 2,
          "start": 1,
        },
      ],
      Array [
        "comment",
        "# time=174.236ms\\n",
      ],
      Array [
        "comment",
        "# failed 26 of 2 tests\\n",
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 2,
          "fail": 26,
          "failures": Array [
            Object {
              "data": "null { _id: 'org.couchdb.user:user',\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "  _rev: '21-3d786fbf7428194ca288abe40c50cd0c',\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "  password_scheme: 'pbkdf2',\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "  iterations: 10,\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "  name: 'user',\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "  email: 'new@email.com',\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "  type: 'user',\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "  roles: [],\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "  date: '2015-05-07T18:04:07.589Z',\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "  derived_key: 'efcfbc73438a9d122290e5d0c82d1ca7d0a9ba1f',\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "  salt: '74e7dea17bfe520bb84dd9642f072549',\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "  github: 'user',\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "  homepage: 'http://www.user.com' }\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "{ _id: 'org.couchdb.user:user',\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "  _rev: '22-97703c62ab1f01ea691d40aa8a756cbf',\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "  password_scheme: 'pbkdf2',\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "  iterations: 10,\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "  name: 'user',\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "  email: 'new@email.com',\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "  type: 'user',\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "  roles: [],\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "  date: '2015-05-07T18:04:07.589Z',\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "  derived_key: 'efcfbc73438a9d122290e5d0c82d1ca7d0a9ba1f',\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "  salt: '74e7dea17bfe520bb84dd9642f072549',\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "  github: 'user',\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "  homepage: 'http://www.user.com' }\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
          ],
          "ok": false,
          "pass": 2,
          "plan": FinalPlan {
            "comment": "",
            "end": 2,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": 339.14,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "extra",
    "    null { _id: 'org.couchdb.user:user',\\n",
  ],
  Array [
    "extra",
    "      _rev: '21-3d786fbf7428194ca288abe40c50cd0c',\\n",
  ],
  Array [
    "extra",
    "      password_scheme: 'pbkdf2',\\n",
  ],
  Array [
    "extra",
    "      iterations: 10,\\n",
  ],
  Array [
    "extra",
    "      name: 'user',\\n",
  ],
  Array [
    "extra",
    "      email: 'new@email.com',\\n",
  ],
  Array [
    "extra",
    "      type: 'user',\\n",
  ],
  Array [
    "extra",
    "      roles: [],\\n",
  ],
  Array [
    "extra",
    "      date: '2015-05-07T18:04:07.589Z',\\n",
  ],
  Array [
    "extra",
    "      derived_key: 'efcfbc73438a9d122290e5d0c82d1ca7d0a9ba1f',\\n",
  ],
  Array [
    "extra",
    "      salt: '74e7dea17bfe520bb84dd9642f072549',\\n",
  ],
  Array [
    "extra",
    "      github: 'user',\\n",
  ],
  Array [
    "extra",
    "      homepage: 'http://www.user.com' }\\n",
  ],
  Array [
    "extra",
    "    { _id: 'org.couchdb.user:user',\\n",
  ],
  Array [
    "extra",
    "      _rev: '22-97703c62ab1f01ea691d40aa8a756cbf',\\n",
  ],
  Array [
    "extra",
    "      password_scheme: 'pbkdf2',\\n",
  ],
  Array [
    "extra",
    "      iterations: 10,\\n",
  ],
  Array [
    "extra",
    "      name: 'user',\\n",
  ],
  Array [
    "extra",
    "      email: 'new@email.com',\\n",
  ],
  Array [
    "extra",
    "      type: 'user',\\n",
  ],
  Array [
    "extra",
    "      roles: [],\\n",
  ],
  Array [
    "extra",
    "      date: '2015-05-07T18:04:07.589Z',\\n",
  ],
  Array [
    "extra",
    "      derived_key: 'efcfbc73438a9d122290e5d0c82d1ca7d0a9ba1f',\\n",
  ],
  Array [
    "extra",
    "      salt: '74e7dea17bfe520bb84dd9642f072549',\\n",
  ],
  Array [
    "extra",
    "      github: 'user',\\n",
  ],
  Array [
    "extra",
    "      homepage: 'http://www.user.com' }\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "test/01c-user-updates.js",
      "ok": true,
      "time": 339.14,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# time=343.487ms\\n",
  ],
  Array [
    "comment",
    "# failed 26 test\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 26,
      "failures": Array [
        Object {
          "data": "null { _id: 'org.couchdb.user:user',\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "  _rev: '21-3d786fbf7428194ca288abe40c50cd0c',\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "  password_scheme: 'pbkdf2',\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "  iterations: 10,\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "  name: 'user',\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "  email: 'new@email.com',\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "  type: 'user',\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "  roles: [],\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "  date: '2015-05-07T18:04:07.589Z',\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "  derived_key: 'efcfbc73438a9d122290e5d0c82d1ca7d0a9ba1f',\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "  salt: '74e7dea17bfe520bb84dd9642f072549',\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "  github: 'user',\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "  homepage: 'http://www.user.com' }\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "{ _id: 'org.couchdb.user:user',\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "  _rev: '22-97703c62ab1f01ea691d40aa8a756cbf',\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "  password_scheme: 'pbkdf2',\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "  iterations: 10,\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "  name: 'user',\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "  email: 'new@email.com',\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "  type: 'user',\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "  roles: [],\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "  date: '2015-05-07T18:04:07.589Z',\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "  derived_key: 'efcfbc73438a9d122290e5d0c82d1ca7d0a9ba1f',\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "  salt: '74e7dea17bfe520bb84dd9642f072549',\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "  github: 'user',\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "  homepage: 'http://www.user.com' }\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
      ],
      "ok": false,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": 343.487,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP extra-in-child.tap strictBail > stringified 1`] = `
TAP version 13
# Subtest: test/01c-user-updates.js
    # Subtest: update profile
        ok 1 - should be equivalent
        ok 2 - should be equivalent
        1..2
    ok 1 - update profile # time=43.094ms
    # Subtest: update email
        ok 1 - should be equivalent
        1..1
    ok 2 - update email # time=24.16ms
    1..2
    # time=174.236ms
    # failed 26 of 2 tests
    null { _id: 'org.couchdb.user:user',
      _rev: '21-3d786fbf7428194ca288abe40c50cd0c',
      password_scheme: 'pbkdf2',
      iterations: 10,
      name: 'user',
      email: 'new@email.com',
      type: 'user',
      roles: [],
      date: '2015-05-07T18:04:07.589Z',
      derived_key: 'efcfbc73438a9d122290e5d0c82d1ca7d0a9ba1f',
      salt: '74e7dea17bfe520bb84dd9642f072549',
      github: 'user',
      homepage: 'http://www.user.com' }
    { _id: 'org.couchdb.user:user',
      _rev: '22-97703c62ab1f01ea691d40aa8a756cbf',
      password_scheme: 'pbkdf2',
      iterations: 10,
      name: 'user',
      email: 'new@email.com',
      type: 'user',
      roles: [],
      date: '2015-05-07T18:04:07.589Z',
      derived_key: 'efcfbc73438a9d122290e5d0c82d1ca7d0a9ba1f',
      salt: '74e7dea17bfe520bb84dd9642f072549',
      github: 'user',
      homepage: 'http://www.user.com' }
ok 1 - test/01c-user-updates.js # time=339.14ms
1..1
# time=343.487ms
# failed 26 test

`

exports[`test/parser-stringify.js TAP extra-in-child.tap strictBail > stringified flat 1`] = `
TAP version 13
# Subtest: test/01c-user-updates.js
    # Subtest: update profile
        ok 1 - should be equivalent
        ok 2 - should be equivalent
        1..2
    ok 1 - update profile # time=43.094ms
    # Subtest: update email
        ok 1 - should be equivalent
        1..1
    ok 2 - update email # time=24.16ms
    1..2
    # time=174.236ms
    # failed 26 of 2 tests
    null { _id: 'org.couchdb.user:user',
      _rev: '21-3d786fbf7428194ca288abe40c50cd0c',
      password_scheme: 'pbkdf2',
      iterations: 10,
      name: 'user',
      email: 'new@email.com',
      type: 'user',
      roles: [],
      date: '2015-05-07T18:04:07.589Z',
      derived_key: 'efcfbc73438a9d122290e5d0c82d1ca7d0a9ba1f',
      salt: '74e7dea17bfe520bb84dd9642f072549',
      github: 'user',
      homepage: 'http://www.user.com' }
    { _id: 'org.couchdb.user:user',
      _rev: '22-97703c62ab1f01ea691d40aa8a756cbf',
      password_scheme: 'pbkdf2',
      iterations: 10,
      name: 'user',
      email: 'new@email.com',
      type: 'user',
      roles: [],
      date: '2015-05-07T18:04:07.589Z',
      derived_key: 'efcfbc73438a9d122290e5d0c82d1ca7d0a9ba1f',
      salt: '74e7dea17bfe520bb84dd9642f072549',
      github: 'user',
      homepage: 'http://www.user.com' }
ok 1 - test/01c-user-updates.js # time=339.14ms
1..1
# time=343.487ms
# failed 26 test

`

exports[`test/parser-stringify.js TAP fail-right-before-indented-child-diag.tap bail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": false,
    },
  ],
  Array [
    "extra",
    "  ...\\n",
  ],
  Array [
    "extra",
    "  some: diags\\n",
  ],
  Array [
    "bailout",
    "",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": true,
      "count": 1,
      "fail": 1,
      "failures": Array [
        Result {
          "fullname": "",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": null,
        "skipAll": false,
        "skipReason": "",
        "start": null,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP fail-right-before-indented-child-diag.tap bail > stringified 1`] = `
TAP version 13
not ok
  ...
  some: diags
Bail out!

`

exports[`test/parser-stringify.js TAP fail-right-before-indented-child-diag.tap bail > stringified flat 1`] = `
TAP version 13
not ok
  ...
  some: diags
Bail out!

`

exports[`test/parser-stringify.js TAP fail-right-before-indented-child-diag.tap default settings > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": false,
    },
  ],
  Array [
    "extra",
    "  ...\\n",
  ],
  Array [
    "extra",
    "  some: diags\\n",
  ],
  Array [
    "extra",
    "  ---\\n",
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: maybe a child\\n",
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "maybe a child",
          "ok": true,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "name": "maybe a child",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test count(2) != plan(null)\\n",
  ],
  Array [
    "comment",
    "# failed 2 of 2 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 2,
      "fail": 2,
      "failures": Array [
        Result {
          "fullname": "",
          "ok": false,
        },
        Object {
          "tapError": "no plan",
        },
      ],
      "ok": false,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": null,
        "skipAll": false,
        "skipReason": "",
        "start": null,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP fail-right-before-indented-child-diag.tap default settings > stringified 1`] = `
TAP version 13
not ok
  ...
  some: diags
  ---
# Subtest: maybe a child
    1..1
    ok
ok - maybe a child
# test count(2) != plan(null)
# failed 2 of 2 tests

`

exports[`test/parser-stringify.js TAP fail-right-before-indented-child-diag.tap default settings > stringified flat 1`] = `
TAP version 13
not ok
  ...
  some: diags
  ---
# Subtest: maybe a child
    1..1
    ok
ok - maybe a child
# test count(2) != plan(null)
# failed 2 of 2 tests

`

exports[`test/parser-stringify.js TAP fail-right-before-indented-child-diag.tap strict > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": false,
    },
  ],
  Array [
    "extra",
    "  ...\\n",
  ],
  Array [
    "extra",
    "  some: diags\\n",
  ],
  Array [
    "extra",
    "  ---\\n",
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: maybe a child\\n",
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "maybe a child",
          "ok": true,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "name": "maybe a child",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test count(2) != plan(null)\\n",
  ],
  Array [
    "comment",
    "# failed 5 of 2 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 2,
      "fail": 5,
      "failures": Array [
        Object {
          "data": "  ...\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "  some: diags\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Result {
          "fullname": "",
          "ok": false,
        },
        Object {
          "data": "  ---\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "tapError": "no plan",
        },
      ],
      "ok": false,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": null,
        "skipAll": false,
        "skipReason": "",
        "start": null,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP fail-right-before-indented-child-diag.tap strict > stringified 1`] = `
TAP version 13
not ok
  ...
  some: diags
  ---
# Subtest: maybe a child
    1..1
    ok
ok - maybe a child
# test count(2) != plan(null)
# failed 5 of 2 tests

`

exports[`test/parser-stringify.js TAP fail-right-before-indented-child-diag.tap strict > stringified flat 1`] = `
TAP version 13
not ok
  ...
  some: diags
  ---
# Subtest: maybe a child
    1..1
    ok
ok - maybe a child
# test count(2) != plan(null)
# failed 5 of 2 tests

`

exports[`test/parser-stringify.js TAP fail-right-before-indented-child-diag.tap strictBail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": false,
    },
  ],
  Array [
    "extra",
    "  ...\\n",
  ],
  Array [
    "extra",
    "  some: diags\\n",
  ],
  Array [
    "bailout",
    "",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": true,
      "count": 1,
      "fail": 3,
      "failures": Array [
        Object {
          "data": "  ...\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "  some: diags\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Result {
          "fullname": "",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": null,
        "skipAll": false,
        "skipReason": "",
        "start": null,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP fail-right-before-indented-child-diag.tap strictBail > stringified 1`] = `
TAP version 13
not ok
  ...
  some: diags
Bail out!

`

exports[`test/parser-stringify.js TAP fail-right-before-indented-child-diag.tap strictBail > stringified flat 1`] = `
TAP version 13
not ok
  ...
  some: diags
Bail out!

`

exports[`test/parser-stringify.js TAP fail-right-before-indented-child.tap bail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": false,
    },
  ],
  Array [
    "bailout",
    "",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": true,
      "count": 1,
      "fail": 1,
      "failures": Array [
        Result {
          "fullname": "",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": null,
        "skipAll": false,
        "skipReason": "",
        "start": null,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP fail-right-before-indented-child.tap bail > stringified 1`] = `
TAP version 13
not ok
Bail out!

`

exports[`test/parser-stringify.js TAP fail-right-before-indented-child.tap bail > stringified flat 1`] = `
TAP version 13
not ok
Bail out!

`

exports[`test/parser-stringify.js TAP fail-right-before-indented-child.tap default settings > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": false,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: maybe a child\\n",
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "maybe a child",
          "ok": true,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "name": "maybe a child",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test count(2) != plan(null)\\n",
  ],
  Array [
    "comment",
    "# failed 2 of 2 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 2,
      "fail": 2,
      "failures": Array [
        Result {
          "fullname": "",
          "ok": false,
        },
        Object {
          "tapError": "no plan",
        },
      ],
      "ok": false,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": null,
        "skipAll": false,
        "skipReason": "",
        "start": null,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP fail-right-before-indented-child.tap default settings > stringified 1`] = `
TAP version 13
not ok
# Subtest: maybe a child
    1..1
    ok
ok - maybe a child
# test count(2) != plan(null)
# failed 2 of 2 tests

`

exports[`test/parser-stringify.js TAP fail-right-before-indented-child.tap default settings > stringified flat 1`] = `
TAP version 13
not ok
# Subtest: maybe a child
    1..1
    ok
ok - maybe a child
# test count(2) != plan(null)
# failed 2 of 2 tests

`

exports[`test/parser-stringify.js TAP fail-right-before-indented-child.tap strict > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": false,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: maybe a child\\n",
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "maybe a child",
          "ok": true,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "name": "maybe a child",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test count(2) != plan(null)\\n",
  ],
  Array [
    "comment",
    "# failed 2 of 2 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 2,
      "fail": 2,
      "failures": Array [
        Result {
          "fullname": "",
          "ok": false,
        },
        Object {
          "tapError": "no plan",
        },
      ],
      "ok": false,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": null,
        "skipAll": false,
        "skipReason": "",
        "start": null,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP fail-right-before-indented-child.tap strict > stringified 1`] = `
TAP version 13
not ok
# Subtest: maybe a child
    1..1
    ok
ok - maybe a child
# test count(2) != plan(null)
# failed 2 of 2 tests

`

exports[`test/parser-stringify.js TAP fail-right-before-indented-child.tap strict > stringified flat 1`] = `
TAP version 13
not ok
# Subtest: maybe a child
    1..1
    ok
ok - maybe a child
# test count(2) != plan(null)
# failed 2 of 2 tests

`

exports[`test/parser-stringify.js TAP fail-right-before-indented-child.tap strictBail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": false,
    },
  ],
  Array [
    "bailout",
    "",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": true,
      "count": 1,
      "fail": 1,
      "failures": Array [
        Result {
          "fullname": "",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": null,
        "skipAll": false,
        "skipReason": "",
        "start": null,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP fail-right-before-indented-child.tap strictBail > stringified 1`] = `
TAP version 13
not ok
Bail out!

`

exports[`test/parser-stringify.js TAP fail-right-before-indented-child.tap strictBail > stringified flat 1`] = `
TAP version 13
not ok
Bail out!

`

exports[`test/parser-stringify.js TAP garbage-yamlish.tap bail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "de-indenting the yamlish wrongly.",
      "ok": false,
    },
  ],
  Array [
    "bailout",
    "de-indenting the yamlish wrongly.",
  ],
  Array [
    "extra",
    " this is not valid yamlish\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": "de-indenting the yamlish wrongly.",
      "count": 1,
      "fail": 1,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 1,
          "name": "de-indenting the yamlish wrongly.",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": null,
        "skipAll": false,
        "skipReason": "",
        "start": null,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP garbage-yamlish.tap bail > stringified 1`] = `
TAP version 13
not ok 1 - de-indenting the yamlish wrongly.
Bail out! de-indenting the yamlish wrongly.
 this is not valid yamlish

`

exports[`test/parser-stringify.js TAP garbage-yamlish.tap bail > stringified flat 1`] = `
TAP version 13
not ok 1 - de-indenting the yamlish wrongly.
Bail out! de-indenting the yamlish wrongly.
 this is not valid yamlish

`

exports[`test/parser-stringify.js TAP garbage-yamlish.tap default settings > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "de-indenting the yamlish wrongly.",
      "ok": false,
    },
  ],
  Array [
    "extra",
    String(
        ---
        message: "Failed with error 'hostname peebles.example.com not found'"
        severity: fail
      
    ),
  ],
  Array [
    "extra",
    " this is not valid yamlish\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "But this is not garbage",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "truncating the yamlish",
      "ok": false,
    },
  ],
  Array [
    "extra",
    String(
        ---
        here: is some yaml
        i: guess
      
    ),
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "name": "this is truncated weirdly",
      "ok": false,
    },
  ],
  Array [
    "extra",
    "     not ok 99 this is not a child test\\n",
  ],
  Array [
    "plan",
    Object {
      "end": 4,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# failed 3 of 4 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 4,
      "fail": 3,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 1,
          "name": "de-indenting the yamlish wrongly.",
          "ok": false,
        },
        Result {
          "fullname": "",
          "id": 3,
          "name": "truncating the yamlish",
          "ok": false,
        },
        Result {
          "fullname": "",
          "id": 4,
          "name": "this is truncated weirdly",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 4,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP garbage-yamlish.tap default settings > stringified 1`] = `
TAP version 13
not ok 1 - de-indenting the yamlish wrongly.
  ---
  message: "Failed with error 'hostname peebles.example.com not found'"
  severity: fail
 this is not valid yamlish
ok 2 - But this is not garbage
not ok 3 - truncating the yamlish
  ---
  here: is some yaml
  i: guess
not ok 4 - this is truncated weirdly
     not ok 99 this is not a child test
1..4
# failed 3 of 4 tests

`

exports[`test/parser-stringify.js TAP garbage-yamlish.tap default settings > stringified flat 1`] = `
TAP version 13
not ok 1 - de-indenting the yamlish wrongly.
  ---
  message: "Failed with error 'hostname peebles.example.com not found'"
  severity: fail
 this is not valid yamlish
ok 2 - But this is not garbage
not ok 3 - truncating the yamlish
  ---
  here: is some yaml
  i: guess
not ok 4 - this is truncated weirdly
     not ok 99 this is not a child test
1..4
# failed 3 of 4 tests

`

exports[`test/parser-stringify.js TAP garbage-yamlish.tap strict > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "de-indenting the yamlish wrongly.",
      "ok": false,
    },
  ],
  Array [
    "extra",
    String(
        ---
        message: "Failed with error 'hostname peebles.example.com not found'"
        severity: fail
      
    ),
  ],
  Array [
    "extra",
    " this is not valid yamlish\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "But this is not garbage",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "truncating the yamlish",
      "ok": false,
    },
  ],
  Array [
    "extra",
    String(
        ---
        here: is some yaml
        i: guess
      
    ),
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "name": "this is truncated weirdly",
      "ok": false,
    },
  ],
  Array [
    "extra",
    "     not ok 99 this is not a child test\\n",
  ],
  Array [
    "plan",
    Object {
      "end": 4,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# failed 7 of 4 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 4,
      "fail": 7,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 1,
          "name": "de-indenting the yamlish wrongly.",
          "ok": false,
        },
        Object {
          "data": String(
              ---
              message: "Failed with error 'hostname peebles.example.com not found'"
              severity: fail
            
          ),
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": " this is not valid yamlish\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Result {
          "fullname": "",
          "id": 3,
          "name": "truncating the yamlish",
          "ok": false,
        },
        Object {
          "data": String(
              ---
              here: is some yaml
              i: guess
            
          ),
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "     not ok 99 this is not a child test\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Result {
          "fullname": "",
          "id": 4,
          "name": "this is truncated weirdly",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 4,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP garbage-yamlish.tap strict > stringified 1`] = `
TAP version 13
not ok 1 - de-indenting the yamlish wrongly.
  ---
  message: "Failed with error 'hostname peebles.example.com not found'"
  severity: fail
 this is not valid yamlish
ok 2 - But this is not garbage
not ok 3 - truncating the yamlish
  ---
  here: is some yaml
  i: guess
not ok 4 - this is truncated weirdly
     not ok 99 this is not a child test
1..4
# failed 7 of 4 tests

`

exports[`test/parser-stringify.js TAP garbage-yamlish.tap strict > stringified flat 1`] = `
TAP version 13
not ok 1 - de-indenting the yamlish wrongly.
  ---
  message: "Failed with error 'hostname peebles.example.com not found'"
  severity: fail
 this is not valid yamlish
ok 2 - But this is not garbage
not ok 3 - truncating the yamlish
  ---
  here: is some yaml
  i: guess
not ok 4 - this is truncated weirdly
     not ok 99 this is not a child test
1..4
# failed 7 of 4 tests

`

exports[`test/parser-stringify.js TAP garbage-yamlish.tap strictBail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "de-indenting the yamlish wrongly.",
      "ok": false,
    },
  ],
  Array [
    "bailout",
    "de-indenting the yamlish wrongly.",
  ],
  Array [
    "extra",
    " this is not valid yamlish\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": "de-indenting the yamlish wrongly.",
      "count": 1,
      "fail": 2,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 1,
          "name": "de-indenting the yamlish wrongly.",
          "ok": false,
        },
        Object {
          "data": " this is not valid yamlish\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
      ],
      "ok": false,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": null,
        "skipAll": false,
        "skipReason": "",
        "start": null,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP garbage-yamlish.tap strictBail > stringified 1`] = `
TAP version 13
not ok 1 - de-indenting the yamlish wrongly.
Bail out! de-indenting the yamlish wrongly.
 this is not valid yamlish

`

exports[`test/parser-stringify.js TAP garbage-yamlish.tap strictBail > stringified flat 1`] = `
TAP version 13
not ok 1 - de-indenting the yamlish wrongly.
Bail out! de-indenting the yamlish wrongly.
 this is not valid yamlish

`

exports[`test/parser-stringify.js TAP giving-up.tap bail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "end": 573,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "database handle",
      "ok": false,
    },
  ],
  Array [
    "bailout",
    "Couldn't connect to database.",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": "Couldn't connect to database.",
      "count": 1,
      "fail": 1,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 1,
          "name": "database handle",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": 573,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP giving-up.tap bail > stringified 1`] = `
TAP version 13
1..573
not ok 1 - database handle
Bail out! Couldn't connect to database.

`

exports[`test/parser-stringify.js TAP giving-up.tap bail > stringified flat 1`] = `
TAP version 13
1..573
not ok 1 - database handle
Bail out! Couldn't connect to database.

`

exports[`test/parser-stringify.js TAP giving-up.tap default settings > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "end": 573,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "database handle",
      "ok": false,
    },
  ],
  Array [
    "bailout",
    "Couldn't connect to database.",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": "Couldn't connect to database.",
      "count": 1,
      "fail": 1,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 1,
          "name": "database handle",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": 573,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP giving-up.tap default settings > stringified 1`] = `
TAP version 13
1..573
not ok 1 - database handle
Bail out! Couldn't connect to database.

`

exports[`test/parser-stringify.js TAP giving-up.tap default settings > stringified flat 1`] = `
TAP version 13
1..573
not ok 1 - database handle
Bail out! Couldn't connect to database.

`

exports[`test/parser-stringify.js TAP giving-up.tap strict > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "end": 573,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "database handle",
      "ok": false,
    },
  ],
  Array [
    "bailout",
    "Couldn't connect to database.",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": "Couldn't connect to database.",
      "count": 1,
      "fail": 1,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 1,
          "name": "database handle",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": 573,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP giving-up.tap strict > stringified 1`] = `
TAP version 13
1..573
not ok 1 - database handle
Bail out! Couldn't connect to database.

`

exports[`test/parser-stringify.js TAP giving-up.tap strict > stringified flat 1`] = `
TAP version 13
1..573
not ok 1 - database handle
Bail out! Couldn't connect to database.

`

exports[`test/parser-stringify.js TAP giving-up.tap strictBail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "end": 573,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "database handle",
      "ok": false,
    },
  ],
  Array [
    "bailout",
    "Couldn't connect to database.",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": "Couldn't connect to database.",
      "count": 1,
      "fail": 1,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 1,
          "name": "database handle",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": 573,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP giving-up.tap strictBail > stringified 1`] = `
TAP version 13
1..573
not ok 1 - database handle
Bail out! Couldn't connect to database.

`

exports[`test/parser-stringify.js TAP giving-up.tap strictBail > stringified flat 1`] = `
TAP version 13
1..573
not ok 1 - database handle
Bail out! Couldn't connect to database.

`

exports[`test/parser-stringify.js TAP got-spare-tuits.tap bail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "end": 4,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "Creating test program",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "Test program runs, no error",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "infinite loop",
      "ok": false,
      "todo": "halting problem unsolved",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "name": "infinite loop 2",
      "ok": false,
      "todo": "halting problem unsolved",
    },
  ],
  Array [
    "comment",
    "# todo: 2\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 4,
      "fail": 2,
      "failures": Array [],
      "ok": true,
      "pass": 2,
      "plan": FinalPlan {
        "comment": "",
        "end": 4,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 2,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP got-spare-tuits.tap bail > stringified 1`] = `
TAP version 13
1..4
ok 1 - Creating test program
ok 2 - Test program runs, no error
not ok 3 - infinite loop # TODO halting problem unsolved
not ok 4 - infinite loop 2 # TODO halting problem unsolved
# todo: 2

`

exports[`test/parser-stringify.js TAP got-spare-tuits.tap bail > stringified flat 1`] = `
TAP version 13
1..4
ok 1 - Creating test program
ok 2 - Test program runs, no error
not ok 3 - infinite loop # TODO halting problem unsolved
not ok 4 - infinite loop 2 # TODO halting problem unsolved
# todo: 2

`

exports[`test/parser-stringify.js TAP got-spare-tuits.tap default settings > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "end": 4,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "Creating test program",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "Test program runs, no error",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "infinite loop",
      "ok": false,
      "todo": "halting problem unsolved",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "name": "infinite loop 2",
      "ok": false,
      "todo": "halting problem unsolved",
    },
  ],
  Array [
    "comment",
    "# todo: 2\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 4,
      "fail": 2,
      "failures": Array [],
      "ok": true,
      "pass": 2,
      "plan": FinalPlan {
        "comment": "",
        "end": 4,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 2,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP got-spare-tuits.tap default settings > stringified 1`] = `
TAP version 13
1..4
ok 1 - Creating test program
ok 2 - Test program runs, no error
not ok 3 - infinite loop # TODO halting problem unsolved
not ok 4 - infinite loop 2 # TODO halting problem unsolved
# todo: 2

`

exports[`test/parser-stringify.js TAP got-spare-tuits.tap default settings > stringified flat 1`] = `
TAP version 13
1..4
ok 1 - Creating test program
ok 2 - Test program runs, no error
not ok 3 - infinite loop # TODO halting problem unsolved
not ok 4 - infinite loop 2 # TODO halting problem unsolved
# todo: 2

`

exports[`test/parser-stringify.js TAP got-spare-tuits.tap strict > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "end": 4,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "Creating test program",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "Test program runs, no error",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "infinite loop",
      "ok": false,
      "todo": "halting problem unsolved",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "name": "infinite loop 2",
      "ok": false,
      "todo": "halting problem unsolved",
    },
  ],
  Array [
    "comment",
    "# todo: 2\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 4,
      "fail": 2,
      "failures": Array [],
      "ok": true,
      "pass": 2,
      "plan": FinalPlan {
        "comment": "",
        "end": 4,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 2,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP got-spare-tuits.tap strict > stringified 1`] = `
TAP version 13
1..4
ok 1 - Creating test program
ok 2 - Test program runs, no error
not ok 3 - infinite loop # TODO halting problem unsolved
not ok 4 - infinite loop 2 # TODO halting problem unsolved
# todo: 2

`

exports[`test/parser-stringify.js TAP got-spare-tuits.tap strict > stringified flat 1`] = `
TAP version 13
1..4
ok 1 - Creating test program
ok 2 - Test program runs, no error
not ok 3 - infinite loop # TODO halting problem unsolved
not ok 4 - infinite loop 2 # TODO halting problem unsolved
# todo: 2

`

exports[`test/parser-stringify.js TAP got-spare-tuits.tap strictBail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "end": 4,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "Creating test program",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "Test program runs, no error",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "infinite loop",
      "ok": false,
      "todo": "halting problem unsolved",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "name": "infinite loop 2",
      "ok": false,
      "todo": "halting problem unsolved",
    },
  ],
  Array [
    "comment",
    "# todo: 2\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 4,
      "fail": 2,
      "failures": Array [],
      "ok": true,
      "pass": 2,
      "plan": FinalPlan {
        "comment": "",
        "end": 4,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 2,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP got-spare-tuits.tap strictBail > stringified 1`] = `
TAP version 13
1..4
ok 1 - Creating test program
ok 2 - Test program runs, no error
not ok 3 - infinite loop # TODO halting problem unsolved
not ok 4 - infinite loop 2 # TODO halting problem unsolved
# todo: 2

`

exports[`test/parser-stringify.js TAP got-spare-tuits.tap strictBail > stringified flat 1`] = `
TAP version 13
1..4
ok 1 - Creating test program
ok 2 - Test program runs, no error
not ok 3 - infinite loop # TODO halting problem unsolved
not ok 4 - infinite loop 2 # TODO halting problem unsolved
# todo: 2

`

exports[`test/parser-stringify.js TAP hashes.tap bail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "contains # hash",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "directive",
      "ok": true,
      "todo": "# x # y",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "escaped \\\\ slash \\\\",
      "ok": true,
      "todo": "true",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "name": "not todo # hash # todo",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "name": "yes todo",
      "ok": true,
      "todo": "# hash",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 6,
      "name": "not todo # hash # todo",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 6,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# todo: 3\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 6,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 6,
      "plan": FinalPlan {
        "comment": "",
        "end": 6,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 3,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP hashes.tap bail > stringified 1`] = `
TAP version 13
ok 1 - contains \\# hash
ok 2 - directive # TODO \\# x \\# y
ok 3 - escaped \\\\ slash \\\\ # TODO true
ok 4 - not todo \\# hash \\# todo
ok 5 - yes todo # TODO \\# hash
ok 6 - not todo \\# hash \\# todo
1..6
# todo: 3

`

exports[`test/parser-stringify.js TAP hashes.tap bail > stringified flat 1`] = `
TAP version 13
ok 1 - contains \\# hash
ok 2 - directive # TODO \\# x \\# y
ok 3 - escaped \\\\ slash \\\\ # TODO true
ok 4 - not todo \\# hash \\# todo
ok 5 - yes todo # TODO \\# hash
ok 6 - not todo \\# hash \\# todo
1..6
# todo: 3

`

exports[`test/parser-stringify.js TAP hashes.tap default settings > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "contains # hash",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "directive",
      "ok": true,
      "todo": "# x # y",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "escaped \\\\ slash \\\\",
      "ok": true,
      "todo": "true",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "name": "not todo # hash # todo",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "name": "yes todo",
      "ok": true,
      "todo": "# hash",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 6,
      "name": "not todo # hash # todo",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 6,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# todo: 3\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 6,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 6,
      "plan": FinalPlan {
        "comment": "",
        "end": 6,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 3,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP hashes.tap default settings > stringified 1`] = `
TAP version 13
ok 1 - contains \\# hash
ok 2 - directive # TODO \\# x \\# y
ok 3 - escaped \\\\ slash \\\\ # TODO true
ok 4 - not todo \\# hash \\# todo
ok 5 - yes todo # TODO \\# hash
ok 6 - not todo \\# hash \\# todo
1..6
# todo: 3

`

exports[`test/parser-stringify.js TAP hashes.tap default settings > stringified flat 1`] = `
TAP version 13
ok 1 - contains \\# hash
ok 2 - directive # TODO \\# x \\# y
ok 3 - escaped \\\\ slash \\\\ # TODO true
ok 4 - not todo \\# hash \\# todo
ok 5 - yes todo # TODO \\# hash
ok 6 - not todo \\# hash \\# todo
1..6
# todo: 3

`

exports[`test/parser-stringify.js TAP hashes.tap strict > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "contains # hash",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "directive",
      "ok": true,
      "todo": "# x # y",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "escaped \\\\ slash \\\\",
      "ok": true,
      "todo": "true",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "name": "not todo # hash # todo",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "name": "yes todo",
      "ok": true,
      "todo": "# hash",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 6,
      "name": "not todo # hash # todo",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 6,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# todo: 3\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 6,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 6,
      "plan": FinalPlan {
        "comment": "",
        "end": 6,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 3,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP hashes.tap strict > stringified 1`] = `
TAP version 13
ok 1 - contains \\# hash
ok 2 - directive # TODO \\# x \\# y
ok 3 - escaped \\\\ slash \\\\ # TODO true
ok 4 - not todo \\# hash \\# todo
ok 5 - yes todo # TODO \\# hash
ok 6 - not todo \\# hash \\# todo
1..6
# todo: 3

`

exports[`test/parser-stringify.js TAP hashes.tap strict > stringified flat 1`] = `
TAP version 13
ok 1 - contains \\# hash
ok 2 - directive # TODO \\# x \\# y
ok 3 - escaped \\\\ slash \\\\ # TODO true
ok 4 - not todo \\# hash \\# todo
ok 5 - yes todo # TODO \\# hash
ok 6 - not todo \\# hash \\# todo
1..6
# todo: 3

`

exports[`test/parser-stringify.js TAP hashes.tap strictBail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "contains # hash",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "directive",
      "ok": true,
      "todo": "# x # y",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "escaped \\\\ slash \\\\",
      "ok": true,
      "todo": "true",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "name": "not todo # hash # todo",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "name": "yes todo",
      "ok": true,
      "todo": "# hash",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 6,
      "name": "not todo # hash # todo",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 6,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# todo: 3\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 6,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 6,
      "plan": FinalPlan {
        "comment": "",
        "end": 6,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 3,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP hashes.tap strictBail > stringified 1`] = `
TAP version 13
ok 1 - contains \\# hash
ok 2 - directive # TODO \\# x \\# y
ok 3 - escaped \\\\ slash \\\\ # TODO true
ok 4 - not todo \\# hash \\# todo
ok 5 - yes todo # TODO \\# hash
ok 6 - not todo \\# hash \\# todo
1..6
# todo: 3

`

exports[`test/parser-stringify.js TAP hashes.tap strictBail > stringified flat 1`] = `
TAP version 13
ok 1 - contains \\# hash
ok 2 - directive # TODO \\# x \\# y
ok 3 - escaped \\\\ slash \\\\ # TODO true
ok 4 - not todo \\# hash \\# todo
ok 5 - yes todo # TODO \\# hash
ok 6 - not todo \\# hash \\# todo
1..6
# todo: 3

`

exports[`test/parser-stringify.js TAP head_end.tap bail > parsed 1`] = `
Array [
  Array [
    "comment",
    "# comments\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# comment\\n",
  ],
  Array [
    "plan",
    Object {
      "end": 4,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# more ignored stuff\\n",
  ],
  Array [
    "comment",
    "# and yet more\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 4,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 4,
      "plan": FinalPlan {
        "comment": "",
        "end": 4,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP head_end.tap bail > stringified 1`] = `
# comments
ok 1
ok 2
ok 3
ok 4
# comment
1..4
# more ignored stuff
# and yet more

`

exports[`test/parser-stringify.js TAP head_end.tap bail > stringified flat 1`] = `
# comments
ok 1
ok 2
ok 3
ok 4
# comment
1..4
# more ignored stuff
# and yet more

`

exports[`test/parser-stringify.js TAP head_end.tap default settings > parsed 1`] = `
Array [
  Array [
    "comment",
    "# comments\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# comment\\n",
  ],
  Array [
    "plan",
    Object {
      "end": 4,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# more ignored stuff\\n",
  ],
  Array [
    "comment",
    "# and yet more\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 4,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 4,
      "plan": FinalPlan {
        "comment": "",
        "end": 4,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP head_end.tap default settings > stringified 1`] = `
# comments
ok 1
ok 2
ok 3
ok 4
# comment
1..4
# more ignored stuff
# and yet more

`

exports[`test/parser-stringify.js TAP head_end.tap default settings > stringified flat 1`] = `
# comments
ok 1
ok 2
ok 3
ok 4
# comment
1..4
# more ignored stuff
# and yet more

`

exports[`test/parser-stringify.js TAP head_end.tap strict > parsed 1`] = `
Array [
  Array [
    "comment",
    "# comments\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# comment\\n",
  ],
  Array [
    "plan",
    Object {
      "end": 4,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# more ignored stuff\\n",
  ],
  Array [
    "comment",
    "# and yet more\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 4,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 4,
      "plan": FinalPlan {
        "comment": "",
        "end": 4,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP head_end.tap strict > stringified 1`] = `
# comments
ok 1
ok 2
ok 3
ok 4
# comment
1..4
# more ignored stuff
# and yet more

`

exports[`test/parser-stringify.js TAP head_end.tap strict > stringified flat 1`] = `
# comments
ok 1
ok 2
ok 3
ok 4
# comment
1..4
# more ignored stuff
# and yet more

`

exports[`test/parser-stringify.js TAP head_end.tap strictBail > parsed 1`] = `
Array [
  Array [
    "comment",
    "# comments\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# comment\\n",
  ],
  Array [
    "plan",
    Object {
      "end": 4,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# more ignored stuff\\n",
  ],
  Array [
    "comment",
    "# and yet more\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 4,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 4,
      "plan": FinalPlan {
        "comment": "",
        "end": 4,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP head_end.tap strictBail > stringified 1`] = `
# comments
ok 1
ok 2
ok 3
ok 4
# comment
1..4
# more ignored stuff
# and yet more

`

exports[`test/parser-stringify.js TAP head_end.tap strictBail > stringified flat 1`] = `
# comments
ok 1
ok 2
ok 3
ok 4
# comment
1..4
# more ignored stuff
# and yet more

`

exports[`test/parser-stringify.js TAP head_fail.tap bail > parsed 1`] = `
Array [
  Array [
    "comment",
    "# comments\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": false,
    },
  ],
  Array [
    "bailout",
    "",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": true,
      "count": 2,
      "fail": 1,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 2,
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": null,
        "skipAll": false,
        "skipReason": "",
        "start": null,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP head_fail.tap bail > stringified 1`] = `
# comments
ok 1
not ok 2
Bail out!

`

exports[`test/parser-stringify.js TAP head_fail.tap bail > stringified flat 1`] = `
# comments
ok 1
not ok 2
Bail out!

`

exports[`test/parser-stringify.js TAP head_fail.tap default settings > parsed 1`] = `
Array [
  Array [
    "comment",
    "# comments\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": false,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# comment\\n",
  ],
  Array [
    "plan",
    Object {
      "end": 4,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# more ignored stuff\\n",
  ],
  Array [
    "comment",
    "# and yet more\\n",
  ],
  Array [
    "comment",
    "# failed 1 of 4 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 4,
      "fail": 1,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 2,
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 3,
      "plan": FinalPlan {
        "comment": "",
        "end": 4,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP head_fail.tap default settings > stringified 1`] = `
# comments
ok 1
not ok 2
ok 3
ok 4
# comment
1..4
# more ignored stuff
# and yet more
# failed 1 of 4 tests

`

exports[`test/parser-stringify.js TAP head_fail.tap default settings > stringified flat 1`] = `
# comments
ok 1
not ok 2
ok 3
ok 4
# comment
1..4
# more ignored stuff
# and yet more
# failed 1 of 4 tests

`

exports[`test/parser-stringify.js TAP head_fail.tap strict > parsed 1`] = `
Array [
  Array [
    "comment",
    "# comments\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": false,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# comment\\n",
  ],
  Array [
    "plan",
    Object {
      "end": 4,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# more ignored stuff\\n",
  ],
  Array [
    "comment",
    "# and yet more\\n",
  ],
  Array [
    "comment",
    "# failed 1 of 4 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 4,
      "fail": 1,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 2,
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 3,
      "plan": FinalPlan {
        "comment": "",
        "end": 4,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP head_fail.tap strict > stringified 1`] = `
# comments
ok 1
not ok 2
ok 3
ok 4
# comment
1..4
# more ignored stuff
# and yet more
# failed 1 of 4 tests

`

exports[`test/parser-stringify.js TAP head_fail.tap strict > stringified flat 1`] = `
# comments
ok 1
not ok 2
ok 3
ok 4
# comment
1..4
# more ignored stuff
# and yet more
# failed 1 of 4 tests

`

exports[`test/parser-stringify.js TAP head_fail.tap strictBail > parsed 1`] = `
Array [
  Array [
    "comment",
    "# comments\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": false,
    },
  ],
  Array [
    "bailout",
    "",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": true,
      "count": 2,
      "fail": 1,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 2,
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": null,
        "skipAll": false,
        "skipReason": "",
        "start": null,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP head_fail.tap strictBail > stringified 1`] = `
# comments
ok 1
not ok 2
Bail out!

`

exports[`test/parser-stringify.js TAP head_fail.tap strictBail > stringified flat 1`] = `
# comments
ok 1
not ok 2
Bail out!

`

exports[`test/parser-stringify.js TAP implicit-counter.tap bail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "comment",
    "# before 1\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "name": "one",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "name": "two",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# before 3\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "name": "three",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "name": "four",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# after 4\\n",
  ],
  Array [
    "plan",
    Object {
      "end": 4,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# tests 4\\n",
  ],
  Array [
    "comment",
    "# pass  4\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 4,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 4,
      "plan": FinalPlan {
        "comment": "",
        "end": 4,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP implicit-counter.tap bail > stringified 1`] = `
TAP version 13
# before 1
ok - one
ok - two
# before 3
ok - three
ok - four
# after 4
1..4
# tests 4
# pass  4
# ok

`

exports[`test/parser-stringify.js TAP implicit-counter.tap bail > stringified flat 1`] = `
TAP version 13
# before 1
ok - one
ok - two
# before 3
ok - three
ok - four
# after 4
1..4
# tests 4
# pass  4
# ok

`

exports[`test/parser-stringify.js TAP implicit-counter.tap default settings > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "comment",
    "# before 1\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "name": "one",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "name": "two",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# before 3\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "name": "three",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "name": "four",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# after 4\\n",
  ],
  Array [
    "plan",
    Object {
      "end": 4,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# tests 4\\n",
  ],
  Array [
    "comment",
    "# pass  4\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 4,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 4,
      "plan": FinalPlan {
        "comment": "",
        "end": 4,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP implicit-counter.tap default settings > stringified 1`] = `
TAP version 13
# before 1
ok - one
ok - two
# before 3
ok - three
ok - four
# after 4
1..4
# tests 4
# pass  4
# ok

`

exports[`test/parser-stringify.js TAP implicit-counter.tap default settings > stringified flat 1`] = `
TAP version 13
# before 1
ok - one
ok - two
# before 3
ok - three
ok - four
# after 4
1..4
# tests 4
# pass  4
# ok

`

exports[`test/parser-stringify.js TAP implicit-counter.tap strict > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "comment",
    "# before 1\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "name": "one",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "name": "two",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# before 3\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "name": "three",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "name": "four",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# after 4\\n",
  ],
  Array [
    "plan",
    Object {
      "end": 4,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# tests 4\\n",
  ],
  Array [
    "comment",
    "# pass  4\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 4,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 4,
      "plan": FinalPlan {
        "comment": "",
        "end": 4,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP implicit-counter.tap strict > stringified 1`] = `
TAP version 13
# before 1
ok - one
ok - two
# before 3
ok - three
ok - four
# after 4
1..4
# tests 4
# pass  4
# ok

`

exports[`test/parser-stringify.js TAP implicit-counter.tap strict > stringified flat 1`] = `
TAP version 13
# before 1
ok - one
ok - two
# before 3
ok - three
ok - four
# after 4
1..4
# tests 4
# pass  4
# ok

`

exports[`test/parser-stringify.js TAP implicit-counter.tap strictBail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "comment",
    "# before 1\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "name": "one",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "name": "two",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# before 3\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "name": "three",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "name": "four",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# after 4\\n",
  ],
  Array [
    "plan",
    Object {
      "end": 4,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# tests 4\\n",
  ],
  Array [
    "comment",
    "# pass  4\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 4,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 4,
      "plan": FinalPlan {
        "comment": "",
        "end": 4,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP implicit-counter.tap strictBail > stringified 1`] = `
TAP version 13
# before 1
ok - one
ok - two
# before 3
ok - three
ok - four
# after 4
1..4
# tests 4
# pass  4
# ok

`

exports[`test/parser-stringify.js TAP implicit-counter.tap strictBail > stringified flat 1`] = `
TAP version 13
# before 1
ok - one
ok - two
# before 3
ok - three
ok - four
# after 4
1..4
# tests 4
# pass  4
# ok

`

exports[`test/parser-stringify.js TAP indent.tap bail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "end": 2,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# nesting\\n",
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: first\\n",
      ],
      Array [
        "plan",
        Object {
          "end": 2,
          "start": 1,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "first",
          "id": 1,
          "name": "true is ok",
          "ok": true,
          "time": 1.234,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "first",
          "id": 2,
          "name": "doag is also okay",
          "ok": true,
          "time": 1.234,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 2,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 2,
          "plan": FinalPlan {
            "comment": "",
            "end": 2,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": 2.589,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "first",
      "ok": true,
      "time": 2.589,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: second\\n",
      ],
      Array [
        "assert",
        Result {
          "fullname": "second",
          "id": 1,
          "name": "no plan",
          "ok": true,
          "time": 1.001,
        },
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: this passes\\n",
          ],
          Array [
            "plan",
            Object {
              "end": 3,
              "start": 1,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "second this passes",
              "name": "granddaughter",
              "ok": false,
              "skip": "for no raisin",
            },
          ],
          Array [
            "assert",
            Result {
              "diag": Object {
                "it": "is yaml",
                "ok": 1,
                "this": "is not tap",
              },
              "fullname": "second this passes",
              "name": "grandson",
              "ok": true,
              "time": 1001,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "second this passes",
              "name": "grandchild",
              "ok": false,
              "todo": true,
            },
          ],
          Array [
            "comment",
            "# todo: 1\\n",
          ],
          Array [
            "comment",
            "# skip: 1\\n",
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 3,
              "fail": 2,
              "failures": Array [],
              "ok": true,
              "pass": 1,
              "plan": FinalPlan {
                "comment": "",
                "end": 3,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 1,
              "time": 1200,
              "todo": 1,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "second",
          "id": 2,
          "name": "this passes",
          "ok": true,
          "time": 1200,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 2,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 2,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 2,
          "plan": FinalPlan {
            "comment": "",
            "end": 2,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": 1.2,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "extra",
    String(
                ---
                ok: 1
                this: is not tap or yaml
                it: is garbage
      
    ),
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "second",
      "ok": true,
      "time": 1.2,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 2,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 2,
      "plan": FinalPlan {
        "comment": "",
        "end": 2,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP indent.tap bail > stringified 1`] = `
TAP version 13
1..2
# nesting
# Subtest: first
    1..2
    ok 1 - true is ok # time=1.234ms
    ok 2 - doag is also okay # time=1.234ms
ok 1 - first # time=2.589ms
# Subtest: second
    ok 1 - no plan # time=1.001ms
    # Subtest: this passes
        1..3
        not ok - granddaughter # SKIP for no raisin
        ok - grandson # time=1001ms
          ---
          ok: 1
          this: is not tap
          it: is yaml
          ...
        not ok - grandchild # TODO
        # todo: 1
        # skip: 1
    ok 2 - this passes # time=1200ms
    1..2
          ---
          ok: 1
          this: is not tap or yaml
          it: is garbage
ok 2 - second # time=1.2ms

`

exports[`test/parser-stringify.js TAP indent.tap bail > stringified flat 1`] = `
TAP version 13
1..2
# nesting
# Subtest: first
    1..2
    ok 1 - true is ok # time=1.234ms
    ok 2 - doag is also okay # time=1.234ms
ok 1 - first # time=2.589ms
# Subtest: second
    ok 1 - no plan # time=1.001ms
    # Subtest: this passes
        1..3
        not ok - granddaughter # SKIP for no raisin
        ok - grandson # time=1001ms
          ---
          ok: 1
          this: is not tap
          it: is yaml
          ...
        not ok - grandchild # TODO
        # todo: 1
        # skip: 1
    ok 2 - this passes # time=1200ms
    1..2
          ---
          ok: 1
          this: is not tap or yaml
          it: is garbage
ok 2 - second # time=1.2ms

`

exports[`test/parser-stringify.js TAP indent.tap default settings > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "end": 2,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# nesting\\n",
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: first\\n",
      ],
      Array [
        "plan",
        Object {
          "end": 2,
          "start": 1,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "first",
          "id": 1,
          "name": "true is ok",
          "ok": true,
          "time": 1.234,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "first",
          "id": 2,
          "name": "doag is also okay",
          "ok": true,
          "time": 1.234,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 2,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 2,
          "plan": FinalPlan {
            "comment": "",
            "end": 2,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": 2.589,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "first",
      "ok": true,
      "time": 2.589,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: second\\n",
      ],
      Array [
        "assert",
        Result {
          "fullname": "second",
          "id": 1,
          "name": "no plan",
          "ok": true,
          "time": 1.001,
        },
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: this passes\\n",
          ],
          Array [
            "plan",
            Object {
              "end": 3,
              "start": 1,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "second this passes",
              "name": "granddaughter",
              "ok": false,
              "skip": "for no raisin",
            },
          ],
          Array [
            "assert",
            Result {
              "diag": Object {
                "it": "is yaml",
                "ok": 1,
                "this": "is not tap",
              },
              "fullname": "second this passes",
              "name": "grandson",
              "ok": true,
              "time": 1001,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "second this passes",
              "name": "grandchild",
              "ok": false,
              "todo": true,
            },
          ],
          Array [
            "comment",
            "# todo: 1\\n",
          ],
          Array [
            "comment",
            "# skip: 1\\n",
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 3,
              "fail": 2,
              "failures": Array [],
              "ok": true,
              "pass": 1,
              "plan": FinalPlan {
                "comment": "",
                "end": 3,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 1,
              "time": 1200,
              "todo": 1,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "second",
          "id": 2,
          "name": "this passes",
          "ok": true,
          "time": 1200,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 2,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 2,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 2,
          "plan": FinalPlan {
            "comment": "",
            "end": 2,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": 1.2,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "extra",
    String(
                ---
                ok: 1
                this: is not tap or yaml
                it: is garbage
      
    ),
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "second",
      "ok": true,
      "time": 1.2,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 2,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 2,
      "plan": FinalPlan {
        "comment": "",
        "end": 2,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP indent.tap default settings > stringified 1`] = `
TAP version 13
1..2
# nesting
# Subtest: first
    1..2
    ok 1 - true is ok # time=1.234ms
    ok 2 - doag is also okay # time=1.234ms
ok 1 - first # time=2.589ms
# Subtest: second
    ok 1 - no plan # time=1.001ms
    # Subtest: this passes
        1..3
        not ok - granddaughter # SKIP for no raisin
        ok - grandson # time=1001ms
          ---
          ok: 1
          this: is not tap
          it: is yaml
          ...
        not ok - grandchild # TODO
        # todo: 1
        # skip: 1
    ok 2 - this passes # time=1200ms
    1..2
          ---
          ok: 1
          this: is not tap or yaml
          it: is garbage
ok 2 - second # time=1.2ms

`

exports[`test/parser-stringify.js TAP indent.tap default settings > stringified flat 1`] = `
TAP version 13
1..2
# nesting
# Subtest: first
    1..2
    ok 1 - true is ok # time=1.234ms
    ok 2 - doag is also okay # time=1.234ms
ok 1 - first # time=2.589ms
# Subtest: second
    ok 1 - no plan # time=1.001ms
    # Subtest: this passes
        1..3
        not ok - granddaughter # SKIP for no raisin
        ok - grandson # time=1001ms
          ---
          ok: 1
          this: is not tap
          it: is yaml
          ...
        not ok - grandchild # TODO
        # todo: 1
        # skip: 1
    ok 2 - this passes # time=1200ms
    1..2
          ---
          ok: 1
          this: is not tap or yaml
          it: is garbage
ok 2 - second # time=1.2ms

`

exports[`test/parser-stringify.js TAP indent.tap strict > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "end": 2,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# nesting\\n",
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: first\\n",
      ],
      Array [
        "plan",
        Object {
          "end": 2,
          "start": 1,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "first",
          "id": 1,
          "name": "true is ok",
          "ok": true,
          "time": 1.234,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "first",
          "id": 2,
          "name": "doag is also okay",
          "ok": true,
          "time": 1.234,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 2,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 2,
          "plan": FinalPlan {
            "comment": "",
            "end": 2,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": 2.589,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "first",
      "ok": true,
      "time": 2.589,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: second\\n",
      ],
      Array [
        "assert",
        Result {
          "fullname": "second",
          "id": 1,
          "name": "no plan",
          "ok": true,
          "time": 1.001,
        },
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: this passes\\n",
          ],
          Array [
            "plan",
            Object {
              "end": 3,
              "start": 1,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "second this passes",
              "name": "granddaughter",
              "ok": false,
              "skip": "for no raisin",
            },
          ],
          Array [
            "assert",
            Result {
              "diag": Object {
                "it": "is yaml",
                "ok": 1,
                "this": "is not tap",
              },
              "fullname": "second this passes",
              "name": "grandson",
              "ok": true,
              "time": 1001,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "second this passes",
              "name": "grandchild",
              "ok": false,
              "todo": true,
            },
          ],
          Array [
            "comment",
            "# failed 3 of 3 tests\\n",
          ],
          Array [
            "comment",
            "# todo: 1\\n",
          ],
          Array [
            "comment",
            "# skip: 1\\n",
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 3,
              "fail": 3,
              "failures": Array [
                Object {
                  "data": String(
                      ---
                      ok: 1
                      this: is not tap or yaml
                      it: is garbage
                    
                  ),
                  "tapError": "Non-TAP data encountered in strict mode",
                },
              ],
              "ok": false,
              "pass": 1,
              "plan": FinalPlan {
                "comment": "",
                "end": 3,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 1,
              "time": 1200,
              "todo": 1,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "second",
          "id": 2,
          "name": "this passes",
          "ok": true,
          "time": 1200,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 2,
          "start": 1,
        },
      ],
      Array [
        "comment",
        "# failed 1 of 2 tests\\n",
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 2,
          "fail": 1,
          "failures": Array [
            Object {
              "data": String(
                  ---
                  ok: 1
                  this: is not tap or yaml
                  it: is garbage
                
              ),
              "tapError": "Non-TAP data encountered in strict mode",
            },
          ],
          "ok": false,
          "pass": 2,
          "plan": FinalPlan {
            "comment": "",
            "end": 2,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": 1.2,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "extra",
    String(
                ---
                ok: 1
                this: is not tap or yaml
                it: is garbage
      
    ),
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "second",
      "ok": true,
      "time": 1.2,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 2,
      "fail": 0,
      "failures": Array [],
      "ok": false,
      "pass": 2,
      "plan": FinalPlan {
        "comment": "",
        "end": 2,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP indent.tap strict > stringified 1`] = `
TAP version 13
1..2
# nesting
# Subtest: first
    1..2
    ok 1 - true is ok # time=1.234ms
    ok 2 - doag is also okay # time=1.234ms
ok 1 - first # time=2.589ms
# Subtest: second
    ok 1 - no plan # time=1.001ms
    # Subtest: this passes
        1..3
        not ok - granddaughter # SKIP for no raisin
        ok - grandson # time=1001ms
          ---
          ok: 1
          this: is not tap
          it: is yaml
          ...
        not ok - grandchild # TODO
        # failed 3 of 3 tests
        # todo: 1
        # skip: 1
    ok 2 - this passes # time=1200ms
    1..2
    # failed 1 of 2 tests
          ---
          ok: 1
          this: is not tap or yaml
          it: is garbage
ok 2 - second # time=1.2ms

`

exports[`test/parser-stringify.js TAP indent.tap strict > stringified flat 1`] = `
TAP version 13
1..2
# nesting
# Subtest: first
    1..2
    ok 1 - true is ok # time=1.234ms
    ok 2 - doag is also okay # time=1.234ms
ok 1 - first # time=2.589ms
# Subtest: second
    ok 1 - no plan # time=1.001ms
    # Subtest: this passes
        1..3
        not ok - granddaughter # SKIP for no raisin
        ok - grandson # time=1001ms
          ---
          ok: 1
          this: is not tap
          it: is yaml
          ...
        not ok - grandchild # TODO
        # failed 3 of 3 tests
        # todo: 1
        # skip: 1
    ok 2 - this passes # time=1200ms
    1..2
    # failed 1 of 2 tests
          ---
          ok: 1
          this: is not tap or yaml
          it: is garbage
ok 2 - second # time=1.2ms

`

exports[`test/parser-stringify.js TAP indent.tap strictBail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "end": 2,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# nesting\\n",
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: first\\n",
      ],
      Array [
        "plan",
        Object {
          "end": 2,
          "start": 1,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "first",
          "id": 1,
          "name": "true is ok",
          "ok": true,
          "time": 1.234,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "first",
          "id": 2,
          "name": "doag is also okay",
          "ok": true,
          "time": 1.234,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 2,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 2,
          "plan": FinalPlan {
            "comment": "",
            "end": 2,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": 2.589,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "first",
      "ok": true,
      "time": 2.589,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: second\\n",
      ],
      Array [
        "assert",
        Result {
          "fullname": "second",
          "id": 1,
          "name": "no plan",
          "ok": true,
          "time": 1.001,
        },
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: this passes\\n",
          ],
          Array [
            "plan",
            Object {
              "end": 3,
              "start": 1,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "second this passes",
              "name": "granddaughter",
              "ok": false,
              "skip": "for no raisin",
            },
          ],
          Array [
            "assert",
            Result {
              "diag": Object {
                "it": "is yaml",
                "ok": 1,
                "this": "is not tap",
              },
              "fullname": "second this passes",
              "name": "grandson",
              "ok": true,
              "time": 1001,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "second this passes",
              "name": "grandchild",
              "ok": false,
              "todo": true,
            },
          ],
          Array [
            "comment",
            "# failed 3 of 3 tests\\n",
          ],
          Array [
            "comment",
            "# todo: 1\\n",
          ],
          Array [
            "comment",
            "# skip: 1\\n",
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 3,
              "fail": 3,
              "failures": Array [
                Object {
                  "data": String(
                      ---
                      ok: 1
                      this: is not tap or yaml
                      it: is garbage
                    
                  ),
                  "tapError": "Non-TAP data encountered in strict mode",
                },
              ],
              "ok": false,
              "pass": 1,
              "plan": FinalPlan {
                "comment": "",
                "end": 3,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 1,
              "time": 1200,
              "todo": 1,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "second",
          "id": 2,
          "name": "this passes",
          "ok": true,
          "time": 1200,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 2,
          "start": 1,
        },
      ],
      Array [
        "comment",
        "# failed 1 of 2 tests\\n",
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 2,
          "fail": 1,
          "failures": Array [
            Object {
              "data": String(
                  ---
                  ok: 1
                  this: is not tap or yaml
                  it: is garbage
                
              ),
              "tapError": "Non-TAP data encountered in strict mode",
            },
          ],
          "ok": false,
          "pass": 2,
          "plan": FinalPlan {
            "comment": "",
            "end": 2,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": 1.2,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "extra",
    String(
                ---
                ok: 1
                this: is not tap or yaml
                it: is garbage
      
    ),
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "second",
      "ok": true,
      "time": 1.2,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 2,
      "fail": 0,
      "failures": Array [],
      "ok": false,
      "pass": 2,
      "plan": FinalPlan {
        "comment": "",
        "end": 2,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP indent.tap strictBail > stringified 1`] = `
TAP version 13
1..2
# nesting
# Subtest: first
    1..2
    ok 1 - true is ok # time=1.234ms
    ok 2 - doag is also okay # time=1.234ms
ok 1 - first # time=2.589ms
# Subtest: second
    ok 1 - no plan # time=1.001ms
    # Subtest: this passes
        1..3
        not ok - granddaughter # SKIP for no raisin
        ok - grandson # time=1001ms
          ---
          ok: 1
          this: is not tap
          it: is yaml
          ...
        not ok - grandchild # TODO
        # failed 3 of 3 tests
        # todo: 1
        # skip: 1
    ok 2 - this passes # time=1200ms
    1..2
    # failed 1 of 2 tests
          ---
          ok: 1
          this: is not tap or yaml
          it: is garbage
ok 2 - second # time=1.2ms

`

exports[`test/parser-stringify.js TAP indent.tap strictBail > stringified flat 1`] = `
TAP version 13
1..2
# nesting
# Subtest: first
    1..2
    ok 1 - true is ok # time=1.234ms
    ok 2 - doag is also okay # time=1.234ms
ok 1 - first # time=2.589ms
# Subtest: second
    ok 1 - no plan # time=1.001ms
    # Subtest: this passes
        1..3
        not ok - granddaughter # SKIP for no raisin
        ok - grandson # time=1001ms
          ---
          ok: 1
          this: is not tap
          it: is yaml
          ...
        not ok - grandchild # TODO
        # failed 3 of 3 tests
        # todo: 1
        # skip: 1
    ok 2 - this passes # time=1200ms
    1..2
    # failed 1 of 2 tests
          ---
          ok: 1
          this: is not tap or yaml
          it: is garbage
ok 2 - second # time=1.2ms

`

exports[`test/parser-stringify.js TAP indented-stdout-noise.tap bail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: index.js\\n",
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: boom\\n",
          ],
          Array [
            "child",
            Array [
              Array [
                "comment",
                "# Subtest: npm install package line\\n",
              ],
              Array [
                "plan",
                Object {
                  "comment": "no tests found",
                  "end": 0,
                  "start": 1,
                },
              ],
              Array [
                "complete",
                FinalResults {
                  "bailout": false,
                  "count": 0,
                  "fail": 0,
                  "failures": Array [],
                  "ok": true,
                  "pass": 0,
                  "plan": FinalPlan {
                    "comment": "no tests found",
                    "end": 0,
                    "skipAll": true,
                    "skipReason": "no tests found",
                    "start": 1,
                  },
                  "skip": 0,
                  "time": null,
                  "todo": 0,
                },
              ],
            ],
          ],
          Array [
            "plan",
            Object {
              "comment": "no tests found",
              "end": 0,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 0,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 0,
              "plan": FinalPlan {
                "comment": "no tests found",
                "end": 0,
                "skipAll": true,
                "skipReason": "no tests found",
                "start": 1,
              },
              "skip": 0,
              "time": 5.26,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "comment",
        "# package - Easy package.json exports.\\n",
      ],
      Array [
        "comment",
        "## Intro\\n",
      ],
      Array [
        "comment",
        "## Installation\\n",
      ],
      Array [
        "comment",
        "## Usage\\n",
      ],
      Array [
        "comment",
        "## Contribution\\n",
      ],
      Array [
        "comment",
        "## Other similar modules\\n",
      ],
      Array [
        "comment",
        "## License\\n",
      ],
      Array [
        "assert",
        Result {
          "fullname": "index.js",
          "id": 1,
          "name": "boom",
          "ok": true,
          "time": 5.26,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "comment",
        "# time=12.555ms\\n",
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": 201.609,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "extra",
    "    This module provides an easy way to export package.json data.\\n",
  ],
  Array [
    "extra",
    "    It contains auto-discovery functionality, which means that it will\\n",
  ],
  Array [
    "extra",
    "    find your package.json file automatically. Cool, ugh?\\n",
  ],
  Array [
    "extra",
    "            $ npm install package\\n",
  ],
  Array [
    "extra",
    "            var package = require('package')(); // contains package.json data.\\n",
  ],
  Array [
    "extra",
    "            var yourAwesomeModule = {};\\n",
  ],
  Array [
    "extra",
    "            yourAwesomeModule.version = package.version;\\n",
  ],
  Array [
    "extra",
    "    Bug fixes and features are welcomed.\\n",
  ],
  Array [
    "extra",
    "    - pkginfo (https://github.com/indexzero/node-pkginfo) by indexzero.\\n",
  ],
  Array [
    "extra",
    "    - JSON.parse + fs.readFile\\n",
  ],
  Array [
    "extra",
    "    MIT License\\n",
  ],
  Array [
    "extra",
    "    Copyright (C) 2011 Veselin Todorov\\n",
  ],
  Array [
    "extra",
    "    Permission is hereby granted, free of charge, to any person obtaining a copy of\\n",
  ],
  Array [
    "extra",
    "    this software and associated documentation files (the \\"Software\\"), to deal in\\n",
  ],
  Array [
    "extra",
    "    the Software without restriction, including without limitation the rights to\\n",
  ],
  Array [
    "extra",
    "    use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\\n",
  ],
  Array [
    "extra",
    "    of the Software, and to permit persons to whom the Software is furnished to do\\n",
  ],
  Array [
    "extra",
    "    so, subject to the following conditions:\\n",
  ],
  Array [
    "extra",
    "    The above copyright notice and this permission notice shall be included in all\\n",
  ],
  Array [
    "extra",
    "    copies or substantial portions of the Software.\\n",
  ],
  Array [
    "extra",
    "    THE SOFTWARE IS PROVIDED \\"AS IS\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n",
  ],
  Array [
    "extra",
    "    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n",
  ],
  Array [
    "extra",
    "    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n",
  ],
  Array [
    "extra",
    "    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n",
  ],
  Array [
    "extra",
    "    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n",
  ],
  Array [
    "extra",
    "    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n",
  ],
  Array [
    "extra",
    "    SOFTWARE.\\n",
  ],
  Array [
    "extra",
    "        1..0\\n",
  ],
  Array [
    "assert",
    Result {
      "diag": Object {
        "arguments": Array [
          "index.js",
        ],
        "command": "/usr/local/bin/iojs",
        "file": "index.js",
        "results": Object {
          "count": 1,
          "ok": false,
          "pass": 1,
          "plan": Object {
            "end": 1,
            "start": 1,
          },
        },
        "timeout": 30000,
      },
      "fullname": "",
      "id": 1,
      "name": "index.js",
      "ok": false,
      "time": 201.609,
    },
  ],
  Array [
    "bailout",
    "index.js",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": "index.js",
      "count": 1,
      "fail": 1,
      "failures": Array [
        Result {
          "diag": Object {
            "arguments": Array [
              "index.js",
            ],
            "command": "/usr/local/bin/iojs",
            "file": "index.js",
            "results": Object {
              "count": 1,
              "ok": false,
              "pass": 1,
              "plan": Object {
                "end": 1,
                "start": 1,
              },
            },
            "timeout": 30000,
          },
          "fullname": "",
          "id": 1,
          "name": "index.js",
          "ok": false,
          "time": 201.609,
        },
      ],
      "ok": false,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": null,
        "skipAll": false,
        "skipReason": "",
        "start": null,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP indented-stdout-noise.tap bail > stringified 1`] = `
TAP version 13
# Subtest: index.js
    # Subtest: boom
        # Subtest: npm install package line
            1..0 # no tests found
        1..0 # no tests found
    # package - Easy package.json exports.
    ## Intro
    ## Installation
    ## Usage
    ## Contribution
    ## Other similar modules
    ## License
    ok 1 - boom # time=5.26ms
    1..1
    # time=12.555ms
    This module provides an easy way to export package.json data.
    It contains auto-discovery functionality, which means that it will
    find your package.json file automatically. Cool, ugh?
            $ npm install package
            var package = require('package')(); // contains package.json data.
            var yourAwesomeModule = {};
            yourAwesomeModule.version = package.version;
    Bug fixes and features are welcomed.
    - pkginfo (https://github.com/indexzero/node-pkginfo) by indexzero.
    - JSON.parse + fs.readFile
    MIT License
    Copyright (C) 2011 Veselin Todorov
    Permission is hereby granted, free of charge, to any person obtaining a copy of
    this software and associated documentation files (the "Software"), to deal in
    the Software without restriction, including without limitation the rights to
    use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
    of the Software, and to permit persons to whom the Software is furnished to do
    so, subject to the following conditions:
    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.
    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.
        1..0
not ok 1 - index.js # time=201.609ms
  ---
  arguments:
    - index.js
  timeout: 30000
  results:
    ok: false
    count: 1
    pass: 1
    plan:
      start: 1
      end: 1
  command: /usr/local/bin/iojs
  file: index.js
  ...
Bail out! index.js

`

exports[`test/parser-stringify.js TAP indented-stdout-noise.tap bail > stringified flat 1`] = `
TAP version 13
# Subtest: index.js
    # Subtest: boom
        # Subtest: npm install package line
            1..0 # no tests found
        1..0 # no tests found
    # package - Easy package.json exports.
    ## Intro
    ## Installation
    ## Usage
    ## Contribution
    ## Other similar modules
    ## License
    ok 1 - boom # time=5.26ms
    1..1
    # time=12.555ms
    This module provides an easy way to export package.json data.
    It contains auto-discovery functionality, which means that it will
    find your package.json file automatically. Cool, ugh?
            $ npm install package
            var package = require('package')(); // contains package.json data.
            var yourAwesomeModule = {};
            yourAwesomeModule.version = package.version;
    Bug fixes and features are welcomed.
    - pkginfo (https://github.com/indexzero/node-pkginfo) by indexzero.
    - JSON.parse + fs.readFile
    MIT License
    Copyright (C) 2011 Veselin Todorov
    Permission is hereby granted, free of charge, to any person obtaining a copy of
    this software and associated documentation files (the "Software"), to deal in
    the Software without restriction, including without limitation the rights to
    use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
    of the Software, and to permit persons to whom the Software is furnished to do
    so, subject to the following conditions:
    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.
    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.
        1..0
not ok 1 - index.js # time=201.609ms
  ---
  arguments:
    - index.js
  timeout: 30000
  results:
    ok: false
    count: 1
    pass: 1
    plan:
      start: 1
      end: 1
  command: /usr/local/bin/iojs
  file: index.js
  ...
Bail out! index.js

`

exports[`test/parser-stringify.js TAP indented-stdout-noise.tap default settings > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: index.js\\n",
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: boom\\n",
          ],
          Array [
            "child",
            Array [
              Array [
                "comment",
                "# Subtest: npm install package line\\n",
              ],
              Array [
                "plan",
                Object {
                  "comment": "no tests found",
                  "end": 0,
                  "start": 1,
                },
              ],
              Array [
                "complete",
                FinalResults {
                  "bailout": false,
                  "count": 0,
                  "fail": 0,
                  "failures": Array [],
                  "ok": true,
                  "pass": 0,
                  "plan": FinalPlan {
                    "comment": "no tests found",
                    "end": 0,
                    "skipAll": true,
                    "skipReason": "no tests found",
                    "start": 1,
                  },
                  "skip": 0,
                  "time": null,
                  "todo": 0,
                },
              ],
            ],
          ],
          Array [
            "plan",
            Object {
              "comment": "no tests found",
              "end": 0,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 0,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 0,
              "plan": FinalPlan {
                "comment": "no tests found",
                "end": 0,
                "skipAll": true,
                "skipReason": "no tests found",
                "start": 1,
              },
              "skip": 0,
              "time": 5.26,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "comment",
        "# package - Easy package.json exports.\\n",
      ],
      Array [
        "comment",
        "## Intro\\n",
      ],
      Array [
        "comment",
        "## Installation\\n",
      ],
      Array [
        "comment",
        "## Usage\\n",
      ],
      Array [
        "comment",
        "## Contribution\\n",
      ],
      Array [
        "comment",
        "## Other similar modules\\n",
      ],
      Array [
        "comment",
        "## License\\n",
      ],
      Array [
        "assert",
        Result {
          "fullname": "index.js",
          "id": 1,
          "name": "boom",
          "ok": true,
          "time": 5.26,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "comment",
        "# time=12.555ms\\n",
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": 201.609,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "extra",
    "    This module provides an easy way to export package.json data.\\n",
  ],
  Array [
    "extra",
    "    It contains auto-discovery functionality, which means that it will\\n",
  ],
  Array [
    "extra",
    "    find your package.json file automatically. Cool, ugh?\\n",
  ],
  Array [
    "extra",
    "            $ npm install package\\n",
  ],
  Array [
    "extra",
    "            var package = require('package')(); // contains package.json data.\\n",
  ],
  Array [
    "extra",
    "            var yourAwesomeModule = {};\\n",
  ],
  Array [
    "extra",
    "            yourAwesomeModule.version = package.version;\\n",
  ],
  Array [
    "extra",
    "    Bug fixes and features are welcomed.\\n",
  ],
  Array [
    "extra",
    "    - pkginfo (https://github.com/indexzero/node-pkginfo) by indexzero.\\n",
  ],
  Array [
    "extra",
    "    - JSON.parse + fs.readFile\\n",
  ],
  Array [
    "extra",
    "    MIT License\\n",
  ],
  Array [
    "extra",
    "    Copyright (C) 2011 Veselin Todorov\\n",
  ],
  Array [
    "extra",
    "    Permission is hereby granted, free of charge, to any person obtaining a copy of\\n",
  ],
  Array [
    "extra",
    "    this software and associated documentation files (the \\"Software\\"), to deal in\\n",
  ],
  Array [
    "extra",
    "    the Software without restriction, including without limitation the rights to\\n",
  ],
  Array [
    "extra",
    "    use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\\n",
  ],
  Array [
    "extra",
    "    of the Software, and to permit persons to whom the Software is furnished to do\\n",
  ],
  Array [
    "extra",
    "    so, subject to the following conditions:\\n",
  ],
  Array [
    "extra",
    "    The above copyright notice and this permission notice shall be included in all\\n",
  ],
  Array [
    "extra",
    "    copies or substantial portions of the Software.\\n",
  ],
  Array [
    "extra",
    "    THE SOFTWARE IS PROVIDED \\"AS IS\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n",
  ],
  Array [
    "extra",
    "    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n",
  ],
  Array [
    "extra",
    "    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n",
  ],
  Array [
    "extra",
    "    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n",
  ],
  Array [
    "extra",
    "    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n",
  ],
  Array [
    "extra",
    "    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n",
  ],
  Array [
    "extra",
    "    SOFTWARE.\\n",
  ],
  Array [
    "extra",
    "        1..0\\n",
  ],
  Array [
    "assert",
    Result {
      "diag": Object {
        "arguments": Array [
          "index.js",
        ],
        "command": "/usr/local/bin/iojs",
        "file": "index.js",
        "results": Object {
          "count": 1,
          "ok": false,
          "pass": 1,
          "plan": Object {
            "end": 1,
            "start": 1,
          },
        },
        "timeout": 30000,
      },
      "fullname": "",
      "id": 1,
      "name": "index.js",
      "ok": false,
      "time": 201.609,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# failed 1 of 1 tests\\n",
  ],
  Array [
    "comment",
    "# time=209.666ms\\n",
  ],
  Array [
    "comment",
    "# failed 1 test\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 1,
      "failures": Array [
        Result {
          "diag": Object {
            "arguments": Array [
              "index.js",
            ],
            "command": "/usr/local/bin/iojs",
            "file": "index.js",
            "results": Object {
              "count": 1,
              "ok": false,
              "pass": 1,
              "plan": Object {
                "end": 1,
                "start": 1,
              },
            },
            "timeout": 30000,
          },
          "fullname": "",
          "id": 1,
          "name": "index.js",
          "ok": false,
          "time": 201.609,
        },
      ],
      "ok": false,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": 209.666,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP indented-stdout-noise.tap default settings > stringified 1`] = `
TAP version 13
# Subtest: index.js
    # Subtest: boom
        # Subtest: npm install package line
            1..0 # no tests found
        1..0 # no tests found
    # package - Easy package.json exports.
    ## Intro
    ## Installation
    ## Usage
    ## Contribution
    ## Other similar modules
    ## License
    ok 1 - boom # time=5.26ms
    1..1
    # time=12.555ms
    This module provides an easy way to export package.json data.
    It contains auto-discovery functionality, which means that it will
    find your package.json file automatically. Cool, ugh?
            $ npm install package
            var package = require('package')(); // contains package.json data.
            var yourAwesomeModule = {};
            yourAwesomeModule.version = package.version;
    Bug fixes and features are welcomed.
    - pkginfo (https://github.com/indexzero/node-pkginfo) by indexzero.
    - JSON.parse + fs.readFile
    MIT License
    Copyright (C) 2011 Veselin Todorov
    Permission is hereby granted, free of charge, to any person obtaining a copy of
    this software and associated documentation files (the "Software"), to deal in
    the Software without restriction, including without limitation the rights to
    use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
    of the Software, and to permit persons to whom the Software is furnished to do
    so, subject to the following conditions:
    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.
    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.
        1..0
not ok 1 - index.js # time=201.609ms
  ---
  arguments:
    - index.js
  timeout: 30000
  results:
    ok: false
    count: 1
    pass: 1
    plan:
      start: 1
      end: 1
  command: /usr/local/bin/iojs
  file: index.js
  ...
1..1
# failed 1 of 1 tests
# time=209.666ms
# failed 1 test

`

exports[`test/parser-stringify.js TAP indented-stdout-noise.tap default settings > stringified flat 1`] = `
TAP version 13
# Subtest: index.js
    # Subtest: boom
        # Subtest: npm install package line
            1..0 # no tests found
        1..0 # no tests found
    # package - Easy package.json exports.
    ## Intro
    ## Installation
    ## Usage
    ## Contribution
    ## Other similar modules
    ## License
    ok 1 - boom # time=5.26ms
    1..1
    # time=12.555ms
    This module provides an easy way to export package.json data.
    It contains auto-discovery functionality, which means that it will
    find your package.json file automatically. Cool, ugh?
            $ npm install package
            var package = require('package')(); // contains package.json data.
            var yourAwesomeModule = {};
            yourAwesomeModule.version = package.version;
    Bug fixes and features are welcomed.
    - pkginfo (https://github.com/indexzero/node-pkginfo) by indexzero.
    - JSON.parse + fs.readFile
    MIT License
    Copyright (C) 2011 Veselin Todorov
    Permission is hereby granted, free of charge, to any person obtaining a copy of
    this software and associated documentation files (the "Software"), to deal in
    the Software without restriction, including without limitation the rights to
    use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
    of the Software, and to permit persons to whom the Software is furnished to do
    so, subject to the following conditions:
    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.
    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.
        1..0
not ok 1 - index.js # time=201.609ms
  ---
  arguments:
    - index.js
  timeout: 30000
  results:
    ok: false
    count: 1
    pass: 1
    plan:
      start: 1
      end: 1
  command: /usr/local/bin/iojs
  file: index.js
  ...
1..1
# failed 1 of 1 tests
# time=209.666ms
# failed 1 test

`

exports[`test/parser-stringify.js TAP indented-stdout-noise.tap strict > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: index.js\\n",
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: boom\\n",
          ],
          Array [
            "child",
            Array [
              Array [
                "comment",
                "# Subtest: npm install package line\\n",
              ],
              Array [
                "plan",
                Object {
                  "comment": "no tests found",
                  "end": 0,
                  "start": 1,
                },
              ],
              Array [
                "comment",
                "# failed 4 test\\n",
              ],
              Array [
                "complete",
                FinalResults {
                  "bailout": false,
                  "count": 0,
                  "fail": 4,
                  "failures": Array [
                    Object {
                      "data": "$ npm install package\\n",
                      "tapError": "Non-TAP data encountered in strict mode",
                    },
                    Object {
                      "data": "var package = require('package')(); // contains package.json data.\\n",
                      "tapError": "Non-TAP data encountered in strict mode",
                    },
                    Object {
                      "data": "var yourAwesomeModule = {};\\n",
                      "tapError": "Non-TAP data encountered in strict mode",
                    },
                    Object {
                      "data": "yourAwesomeModule.version = package.version;\\n",
                      "tapError": "Non-TAP data encountered in strict mode",
                    },
                  ],
                  "ok": false,
                  "pass": 0,
                  "plan": FinalPlan {
                    "comment": "no tests found",
                    "end": 0,
                    "skipAll": true,
                    "skipReason": "no tests found",
                    "start": 1,
                  },
                  "skip": 0,
                  "time": null,
                  "todo": 0,
                },
              ],
            ],
          ],
          Array [
            "plan",
            Object {
              "comment": "no tests found",
              "end": 0,
              "start": 1,
            },
          ],
          Array [
            "comment",
            "# failed 5 test\\n",
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 0,
              "fail": 5,
              "failures": Array [
                Object {
                  "data": "$ npm install package\\n",
                  "tapError": "Non-TAP data encountered in strict mode",
                },
                Object {
                  "data": "var package = require('package')(); // contains package.json data.\\n",
                  "tapError": "Non-TAP data encountered in strict mode",
                },
                Object {
                  "data": "var yourAwesomeModule = {};\\n",
                  "tapError": "Non-TAP data encountered in strict mode",
                },
                Object {
                  "data": "yourAwesomeModule.version = package.version;\\n",
                  "tapError": "Non-TAP data encountered in strict mode",
                },
                Object {
                  "data": "1..0\\n",
                  "tapError": "Non-TAP data encountered in strict mode",
                },
              ],
              "ok": false,
              "pass": 0,
              "plan": FinalPlan {
                "comment": "no tests found",
                "end": 0,
                "skipAll": true,
                "skipReason": "no tests found",
                "start": 1,
              },
              "skip": 0,
              "time": 5.26,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "comment",
        "# package - Easy package.json exports.\\n",
      ],
      Array [
        "comment",
        "## Intro\\n",
      ],
      Array [
        "comment",
        "## Installation\\n",
      ],
      Array [
        "comment",
        "## Usage\\n",
      ],
      Array [
        "comment",
        "## Contribution\\n",
      ],
      Array [
        "comment",
        "## Other similar modules\\n",
      ],
      Array [
        "comment",
        "## License\\n",
      ],
      Array [
        "assert",
        Result {
          "fullname": "index.js",
          "id": 1,
          "name": "boom",
          "ok": true,
          "time": 5.26,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "comment",
        "# time=12.555ms\\n",
      ],
      Array [
        "comment",
        "# failed 24 test\\n",
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 24,
          "failures": Array [
            Object {
              "data": "This module provides an easy way to export package.json data.\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "It contains auto-discovery functionality, which means that it will\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "find your package.json file automatically. Cool, ugh?\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "Bug fixes and features are welcomed.\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "- pkginfo (https://github.com/indexzero/node-pkginfo) by indexzero.\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "- JSON.parse + fs.readFile\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "MIT License\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "Copyright (C) 2011 Veselin Todorov\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "Permission is hereby granted, free of charge, to any person obtaining a copy of\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "this software and associated documentation files (the \\"Software\\"), to deal in\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "the Software without restriction, including without limitation the rights to\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "of the Software, and to permit persons to whom the Software is furnished to do\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "so, subject to the following conditions:\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "The above copyright notice and this permission notice shall be included in all\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "copies or substantial portions of the Software.\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "THE SOFTWARE IS PROVIDED \\"AS IS\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "SOFTWARE.\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "1..0\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
          ],
          "ok": false,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": 201.609,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "extra",
    "    This module provides an easy way to export package.json data.\\n",
  ],
  Array [
    "extra",
    "    It contains auto-discovery functionality, which means that it will\\n",
  ],
  Array [
    "extra",
    "    find your package.json file automatically. Cool, ugh?\\n",
  ],
  Array [
    "extra",
    "            $ npm install package\\n",
  ],
  Array [
    "extra",
    "            var package = require('package')(); // contains package.json data.\\n",
  ],
  Array [
    "extra",
    "            var yourAwesomeModule = {};\\n",
  ],
  Array [
    "extra",
    "            yourAwesomeModule.version = package.version;\\n",
  ],
  Array [
    "extra",
    "    Bug fixes and features are welcomed.\\n",
  ],
  Array [
    "extra",
    "    - pkginfo (https://github.com/indexzero/node-pkginfo) by indexzero.\\n",
  ],
  Array [
    "extra",
    "    - JSON.parse + fs.readFile\\n",
  ],
  Array [
    "extra",
    "    MIT License\\n",
  ],
  Array [
    "extra",
    "    Copyright (C) 2011 Veselin Todorov\\n",
  ],
  Array [
    "extra",
    "    Permission is hereby granted, free of charge, to any person obtaining a copy of\\n",
  ],
  Array [
    "extra",
    "    this software and associated documentation files (the \\"Software\\"), to deal in\\n",
  ],
  Array [
    "extra",
    "    the Software without restriction, including without limitation the rights to\\n",
  ],
  Array [
    "extra",
    "    use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\\n",
  ],
  Array [
    "extra",
    "    of the Software, and to permit persons to whom the Software is furnished to do\\n",
  ],
  Array [
    "extra",
    "    so, subject to the following conditions:\\n",
  ],
  Array [
    "extra",
    "    The above copyright notice and this permission notice shall be included in all\\n",
  ],
  Array [
    "extra",
    "    copies or substantial portions of the Software.\\n",
  ],
  Array [
    "extra",
    "    THE SOFTWARE IS PROVIDED \\"AS IS\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n",
  ],
  Array [
    "extra",
    "    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n",
  ],
  Array [
    "extra",
    "    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n",
  ],
  Array [
    "extra",
    "    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n",
  ],
  Array [
    "extra",
    "    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n",
  ],
  Array [
    "extra",
    "    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n",
  ],
  Array [
    "extra",
    "    SOFTWARE.\\n",
  ],
  Array [
    "extra",
    "        1..0\\n",
  ],
  Array [
    "assert",
    Result {
      "diag": Object {
        "arguments": Array [
          "index.js",
        ],
        "command": "/usr/local/bin/iojs",
        "file": "index.js",
        "results": Object {
          "count": 1,
          "ok": false,
          "pass": 1,
          "plan": Object {
            "end": 1,
            "start": 1,
          },
        },
        "timeout": 30000,
      },
      "fullname": "",
      "id": 1,
      "name": "index.js",
      "ok": false,
      "time": 201.609,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# failed 1 of 1 tests\\n",
  ],
  Array [
    "comment",
    "# time=209.666ms\\n",
  ],
  Array [
    "comment",
    "# failed 24 test\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 24,
      "failures": Array [
        Object {
          "data": "This module provides an easy way to export package.json data.\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "It contains auto-discovery functionality, which means that it will\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "find your package.json file automatically. Cool, ugh?\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "Bug fixes and features are welcomed.\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "- pkginfo (https://github.com/indexzero/node-pkginfo) by indexzero.\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "- JSON.parse + fs.readFile\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "MIT License\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "Copyright (C) 2011 Veselin Todorov\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "Permission is hereby granted, free of charge, to any person obtaining a copy of\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "this software and associated documentation files (the \\"Software\\"), to deal in\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "the Software without restriction, including without limitation the rights to\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "of the Software, and to permit persons to whom the Software is furnished to do\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "so, subject to the following conditions:\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "The above copyright notice and this permission notice shall be included in all\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "copies or substantial portions of the Software.\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "THE SOFTWARE IS PROVIDED \\"AS IS\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "SOFTWARE.\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Result {
          "diag": Object {
            "arguments": Array [
              "index.js",
            ],
            "command": "/usr/local/bin/iojs",
            "file": "index.js",
            "results": Object {
              "count": 1,
              "ok": false,
              "pass": 1,
              "plan": Object {
                "end": 1,
                "start": 1,
              },
            },
            "timeout": 30000,
          },
          "fullname": "",
          "id": 1,
          "name": "index.js",
          "ok": false,
          "time": 201.609,
        },
      ],
      "ok": false,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": 209.666,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP indented-stdout-noise.tap strict > stringified 1`] = `
TAP version 13
# Subtest: index.js
    # Subtest: boom
        # Subtest: npm install package line
            1..0 # no tests found
            # failed 4 test
        1..0 # no tests found
        # failed 5 test
    # package - Easy package.json exports.
    ## Intro
    ## Installation
    ## Usage
    ## Contribution
    ## Other similar modules
    ## License
    ok 1 - boom # time=5.26ms
    1..1
    # time=12.555ms
    # failed 24 test
    This module provides an easy way to export package.json data.
    It contains auto-discovery functionality, which means that it will
    find your package.json file automatically. Cool, ugh?
            $ npm install package
            var package = require('package')(); // contains package.json data.
            var yourAwesomeModule = {};
            yourAwesomeModule.version = package.version;
    Bug fixes and features are welcomed.
    - pkginfo (https://github.com/indexzero/node-pkginfo) by indexzero.
    - JSON.parse + fs.readFile
    MIT License
    Copyright (C) 2011 Veselin Todorov
    Permission is hereby granted, free of charge, to any person obtaining a copy of
    this software and associated documentation files (the "Software"), to deal in
    the Software without restriction, including without limitation the rights to
    use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
    of the Software, and to permit persons to whom the Software is furnished to do
    so, subject to the following conditions:
    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.
    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.
        1..0
not ok 1 - index.js # time=201.609ms
  ---
  arguments:
    - index.js
  timeout: 30000
  results:
    ok: false
    count: 1
    pass: 1
    plan:
      start: 1
      end: 1
  command: /usr/local/bin/iojs
  file: index.js
  ...
1..1
# failed 1 of 1 tests
# time=209.666ms
# failed 24 test

`

exports[`test/parser-stringify.js TAP indented-stdout-noise.tap strict > stringified flat 1`] = `
TAP version 13
# Subtest: index.js
    # Subtest: boom
        # Subtest: npm install package line
            1..0 # no tests found
            # failed 4 test
        1..0 # no tests found
        # failed 5 test
    # package - Easy package.json exports.
    ## Intro
    ## Installation
    ## Usage
    ## Contribution
    ## Other similar modules
    ## License
    ok 1 - boom # time=5.26ms
    1..1
    # time=12.555ms
    # failed 24 test
    This module provides an easy way to export package.json data.
    It contains auto-discovery functionality, which means that it will
    find your package.json file automatically. Cool, ugh?
            $ npm install package
            var package = require('package')(); // contains package.json data.
            var yourAwesomeModule = {};
            yourAwesomeModule.version = package.version;
    Bug fixes and features are welcomed.
    - pkginfo (https://github.com/indexzero/node-pkginfo) by indexzero.
    - JSON.parse + fs.readFile
    MIT License
    Copyright (C) 2011 Veselin Todorov
    Permission is hereby granted, free of charge, to any person obtaining a copy of
    this software and associated documentation files (the "Software"), to deal in
    the Software without restriction, including without limitation the rights to
    use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
    of the Software, and to permit persons to whom the Software is furnished to do
    so, subject to the following conditions:
    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.
    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.
        1..0
not ok 1 - index.js # time=201.609ms
  ---
  arguments:
    - index.js
  timeout: 30000
  results:
    ok: false
    count: 1
    pass: 1
    plan:
      start: 1
      end: 1
  command: /usr/local/bin/iojs
  file: index.js
  ...
1..1
# failed 1 of 1 tests
# time=209.666ms
# failed 24 test

`

exports[`test/parser-stringify.js TAP indented-stdout-noise.tap strictBail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: index.js\\n",
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: boom\\n",
          ],
          Array [
            "child",
            Array [
              Array [
                "comment",
                "# Subtest: npm install package line\\n",
              ],
              Array [
                "plan",
                Object {
                  "comment": "no tests found",
                  "end": 0,
                  "start": 1,
                },
              ],
              Array [
                "comment",
                "# failed 4 test\\n",
              ],
              Array [
                "complete",
                FinalResults {
                  "bailout": false,
                  "count": 0,
                  "fail": 4,
                  "failures": Array [
                    Object {
                      "data": "$ npm install package\\n",
                      "tapError": "Non-TAP data encountered in strict mode",
                    },
                    Object {
                      "data": "var package = require('package')(); // contains package.json data.\\n",
                      "tapError": "Non-TAP data encountered in strict mode",
                    },
                    Object {
                      "data": "var yourAwesomeModule = {};\\n",
                      "tapError": "Non-TAP data encountered in strict mode",
                    },
                    Object {
                      "data": "yourAwesomeModule.version = package.version;\\n",
                      "tapError": "Non-TAP data encountered in strict mode",
                    },
                  ],
                  "ok": false,
                  "pass": 0,
                  "plan": FinalPlan {
                    "comment": "no tests found",
                    "end": 0,
                    "skipAll": true,
                    "skipReason": "no tests found",
                    "start": 1,
                  },
                  "skip": 0,
                  "time": null,
                  "todo": 0,
                },
              ],
            ],
          ],
          Array [
            "plan",
            Object {
              "comment": "no tests found",
              "end": 0,
              "start": 1,
            },
          ],
          Array [
            "comment",
            "# failed 5 test\\n",
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 0,
              "fail": 5,
              "failures": Array [
                Object {
                  "data": "$ npm install package\\n",
                  "tapError": "Non-TAP data encountered in strict mode",
                },
                Object {
                  "data": "var package = require('package')(); // contains package.json data.\\n",
                  "tapError": "Non-TAP data encountered in strict mode",
                },
                Object {
                  "data": "var yourAwesomeModule = {};\\n",
                  "tapError": "Non-TAP data encountered in strict mode",
                },
                Object {
                  "data": "yourAwesomeModule.version = package.version;\\n",
                  "tapError": "Non-TAP data encountered in strict mode",
                },
                Object {
                  "data": "1..0\\n",
                  "tapError": "Non-TAP data encountered in strict mode",
                },
              ],
              "ok": false,
              "pass": 0,
              "plan": FinalPlan {
                "comment": "no tests found",
                "end": 0,
                "skipAll": true,
                "skipReason": "no tests found",
                "start": 1,
              },
              "skip": 0,
              "time": 5.26,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "comment",
        "# package - Easy package.json exports.\\n",
      ],
      Array [
        "comment",
        "## Intro\\n",
      ],
      Array [
        "comment",
        "## Installation\\n",
      ],
      Array [
        "comment",
        "## Usage\\n",
      ],
      Array [
        "comment",
        "## Contribution\\n",
      ],
      Array [
        "comment",
        "## Other similar modules\\n",
      ],
      Array [
        "comment",
        "## License\\n",
      ],
      Array [
        "assert",
        Result {
          "fullname": "index.js",
          "id": 1,
          "name": "boom",
          "ok": true,
          "time": 5.26,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "comment",
        "# time=12.555ms\\n",
      ],
      Array [
        "comment",
        "# failed 24 test\\n",
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 24,
          "failures": Array [
            Object {
              "data": "This module provides an easy way to export package.json data.\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "It contains auto-discovery functionality, which means that it will\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "find your package.json file automatically. Cool, ugh?\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "Bug fixes and features are welcomed.\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "- pkginfo (https://github.com/indexzero/node-pkginfo) by indexzero.\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "- JSON.parse + fs.readFile\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "MIT License\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "Copyright (C) 2011 Veselin Todorov\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "Permission is hereby granted, free of charge, to any person obtaining a copy of\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "this software and associated documentation files (the \\"Software\\"), to deal in\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "the Software without restriction, including without limitation the rights to\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "of the Software, and to permit persons to whom the Software is furnished to do\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "so, subject to the following conditions:\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "The above copyright notice and this permission notice shall be included in all\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "copies or substantial portions of the Software.\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "THE SOFTWARE IS PROVIDED \\"AS IS\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "SOFTWARE.\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "1..0\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
          ],
          "ok": false,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": 201.609,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "extra",
    "    This module provides an easy way to export package.json data.\\n",
  ],
  Array [
    "extra",
    "    It contains auto-discovery functionality, which means that it will\\n",
  ],
  Array [
    "extra",
    "    find your package.json file automatically. Cool, ugh?\\n",
  ],
  Array [
    "extra",
    "            $ npm install package\\n",
  ],
  Array [
    "extra",
    "            var package = require('package')(); // contains package.json data.\\n",
  ],
  Array [
    "extra",
    "            var yourAwesomeModule = {};\\n",
  ],
  Array [
    "extra",
    "            yourAwesomeModule.version = package.version;\\n",
  ],
  Array [
    "extra",
    "    Bug fixes and features are welcomed.\\n",
  ],
  Array [
    "extra",
    "    - pkginfo (https://github.com/indexzero/node-pkginfo) by indexzero.\\n",
  ],
  Array [
    "extra",
    "    - JSON.parse + fs.readFile\\n",
  ],
  Array [
    "extra",
    "    MIT License\\n",
  ],
  Array [
    "extra",
    "    Copyright (C) 2011 Veselin Todorov\\n",
  ],
  Array [
    "extra",
    "    Permission is hereby granted, free of charge, to any person obtaining a copy of\\n",
  ],
  Array [
    "extra",
    "    this software and associated documentation files (the \\"Software\\"), to deal in\\n",
  ],
  Array [
    "extra",
    "    the Software without restriction, including without limitation the rights to\\n",
  ],
  Array [
    "extra",
    "    use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\\n",
  ],
  Array [
    "extra",
    "    of the Software, and to permit persons to whom the Software is furnished to do\\n",
  ],
  Array [
    "extra",
    "    so, subject to the following conditions:\\n",
  ],
  Array [
    "extra",
    "    The above copyright notice and this permission notice shall be included in all\\n",
  ],
  Array [
    "extra",
    "    copies or substantial portions of the Software.\\n",
  ],
  Array [
    "extra",
    "    THE SOFTWARE IS PROVIDED \\"AS IS\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n",
  ],
  Array [
    "extra",
    "    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n",
  ],
  Array [
    "extra",
    "    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n",
  ],
  Array [
    "extra",
    "    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n",
  ],
  Array [
    "extra",
    "    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n",
  ],
  Array [
    "extra",
    "    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n",
  ],
  Array [
    "extra",
    "    SOFTWARE.\\n",
  ],
  Array [
    "extra",
    "        1..0\\n",
  ],
  Array [
    "assert",
    Result {
      "diag": Object {
        "arguments": Array [
          "index.js",
        ],
        "command": "/usr/local/bin/iojs",
        "file": "index.js",
        "results": Object {
          "count": 1,
          "ok": false,
          "pass": 1,
          "plan": Object {
            "end": 1,
            "start": 1,
          },
        },
        "timeout": 30000,
      },
      "fullname": "",
      "id": 1,
      "name": "index.js",
      "ok": false,
      "time": 201.609,
    },
  ],
  Array [
    "bailout",
    "index.js",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": "index.js",
      "count": 1,
      "fail": 24,
      "failures": Array [
        Object {
          "data": "This module provides an easy way to export package.json data.\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "It contains auto-discovery functionality, which means that it will\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "find your package.json file automatically. Cool, ugh?\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "Bug fixes and features are welcomed.\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "- pkginfo (https://github.com/indexzero/node-pkginfo) by indexzero.\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "- JSON.parse + fs.readFile\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "MIT License\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "Copyright (C) 2011 Veselin Todorov\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "Permission is hereby granted, free of charge, to any person obtaining a copy of\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "this software and associated documentation files (the \\"Software\\"), to deal in\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "the Software without restriction, including without limitation the rights to\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "of the Software, and to permit persons to whom the Software is furnished to do\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "so, subject to the following conditions:\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "The above copyright notice and this permission notice shall be included in all\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "copies or substantial portions of the Software.\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "THE SOFTWARE IS PROVIDED \\"AS IS\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "SOFTWARE.\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Result {
          "diag": Object {
            "arguments": Array [
              "index.js",
            ],
            "command": "/usr/local/bin/iojs",
            "file": "index.js",
            "results": Object {
              "count": 1,
              "ok": false,
              "pass": 1,
              "plan": Object {
                "end": 1,
                "start": 1,
              },
            },
            "timeout": 30000,
          },
          "fullname": "",
          "id": 1,
          "name": "index.js",
          "ok": false,
          "time": 201.609,
        },
      ],
      "ok": false,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": null,
        "skipAll": false,
        "skipReason": "",
        "start": null,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP indented-stdout-noise.tap strictBail > stringified 1`] = `
TAP version 13
# Subtest: index.js
    # Subtest: boom
        # Subtest: npm install package line
            1..0 # no tests found
            # failed 4 test
        1..0 # no tests found
        # failed 5 test
    # package - Easy package.json exports.
    ## Intro
    ## Installation
    ## Usage
    ## Contribution
    ## Other similar modules
    ## License
    ok 1 - boom # time=5.26ms
    1..1
    # time=12.555ms
    # failed 24 test
    This module provides an easy way to export package.json data.
    It contains auto-discovery functionality, which means that it will
    find your package.json file automatically. Cool, ugh?
            $ npm install package
            var package = require('package')(); // contains package.json data.
            var yourAwesomeModule = {};
            yourAwesomeModule.version = package.version;
    Bug fixes and features are welcomed.
    - pkginfo (https://github.com/indexzero/node-pkginfo) by indexzero.
    - JSON.parse + fs.readFile
    MIT License
    Copyright (C) 2011 Veselin Todorov
    Permission is hereby granted, free of charge, to any person obtaining a copy of
    this software and associated documentation files (the "Software"), to deal in
    the Software without restriction, including without limitation the rights to
    use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
    of the Software, and to permit persons to whom the Software is furnished to do
    so, subject to the following conditions:
    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.
    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.
        1..0
not ok 1 - index.js # time=201.609ms
  ---
  arguments:
    - index.js
  timeout: 30000
  results:
    ok: false
    count: 1
    pass: 1
    plan:
      start: 1
      end: 1
  command: /usr/local/bin/iojs
  file: index.js
  ...
Bail out! index.js

`

exports[`test/parser-stringify.js TAP indented-stdout-noise.tap strictBail > stringified flat 1`] = `
TAP version 13
# Subtest: index.js
    # Subtest: boom
        # Subtest: npm install package line
            1..0 # no tests found
            # failed 4 test
        1..0 # no tests found
        # failed 5 test
    # package - Easy package.json exports.
    ## Intro
    ## Installation
    ## Usage
    ## Contribution
    ## Other similar modules
    ## License
    ok 1 - boom # time=5.26ms
    1..1
    # time=12.555ms
    # failed 24 test
    This module provides an easy way to export package.json data.
    It contains auto-discovery functionality, which means that it will
    find your package.json file automatically. Cool, ugh?
            $ npm install package
            var package = require('package')(); // contains package.json data.
            var yourAwesomeModule = {};
            yourAwesomeModule.version = package.version;
    Bug fixes and features are welcomed.
    - pkginfo (https://github.com/indexzero/node-pkginfo) by indexzero.
    - JSON.parse + fs.readFile
    MIT License
    Copyright (C) 2011 Veselin Todorov
    Permission is hereby granted, free of charge, to any person obtaining a copy of
    this software and associated documentation files (the "Software"), to deal in
    the Software without restriction, including without limitation the rights to
    use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
    of the Software, and to permit persons to whom the Software is furnished to do
    so, subject to the following conditions:
    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.
    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.
        1..0
not ok 1 - index.js # time=201.609ms
  ---
  arguments:
    - index.js
  timeout: 30000
  results:
    ok: false
    count: 1
    pass: 1
    plan:
      start: 1
      end: 1
  command: /usr/local/bin/iojs
  file: index.js
  ...
Bail out! index.js

`

exports[`test/parser-stringify.js TAP junk_before_plan.tap bail > parsed 1`] = `
Array [
  Array [
    "extra",
    "this is junk\\n",
  ],
  Array [
    "comment",
    "# this is a comment\\n",
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP junk_before_plan.tap bail > stringified 1`] = `
this is junk
# this is a comment
1..1
ok 1

`

exports[`test/parser-stringify.js TAP junk_before_plan.tap bail > stringified flat 1`] = `
this is junk
# this is a comment
1..1
ok 1

`

exports[`test/parser-stringify.js TAP junk_before_plan.tap default settings > parsed 1`] = `
Array [
  Array [
    "extra",
    "this is junk\\n",
  ],
  Array [
    "comment",
    "# this is a comment\\n",
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP junk_before_plan.tap default settings > stringified 1`] = `
this is junk
# this is a comment
1..1
ok 1

`

exports[`test/parser-stringify.js TAP junk_before_plan.tap default settings > stringified flat 1`] = `
this is junk
# this is a comment
1..1
ok 1

`

exports[`test/parser-stringify.js TAP junk_before_plan.tap strict > parsed 1`] = `
Array [
  Array [
    "extra",
    "this is junk\\n",
  ],
  Array [
    "comment",
    "# this is a comment\\n",
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# failed 1 test\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 1,
      "failures": Array [
        Object {
          "data": "this is junk\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
      ],
      "ok": false,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP junk_before_plan.tap strict > stringified 1`] = `
this is junk
# this is a comment
1..1
ok 1
# failed 1 test

`

exports[`test/parser-stringify.js TAP junk_before_plan.tap strict > stringified flat 1`] = `
this is junk
# this is a comment
1..1
ok 1
# failed 1 test

`

exports[`test/parser-stringify.js TAP junk_before_plan.tap strictBail > parsed 1`] = `
Array [
  Array [
    "extra",
    "this is junk\\n",
  ],
  Array [
    "comment",
    "# this is a comment\\n",
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# failed 1 test\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 1,
      "failures": Array [
        Object {
          "data": "this is junk\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
      ],
      "ok": false,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP junk_before_plan.tap strictBail > stringified 1`] = `
this is junk
# this is a comment
1..1
ok 1
# failed 1 test

`

exports[`test/parser-stringify.js TAP junk_before_plan.tap strictBail > stringified flat 1`] = `
this is junk
# this is a comment
1..1
ok 1
# failed 1 test

`

exports[`test/parser-stringify.js TAP line-break.tap bail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: foo\\n",
      ],
      Array [
        "assert",
        Result {
          "diag": Object {
            "found": Array [
              "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy",
            ],
            "wanted": Array [
              String(
                xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
                yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
              ),
            ],
          },
          "fullname": "foo",
          "id": 1,
          "name": "should be equivalent",
          "ok": false,
        },
      ],
      Array [
        "bailout",
        "should be equivalent",
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": "should be equivalent",
          "count": 1,
          "fail": 1,
          "failures": Array [
            Result {
              "diag": Object {
                "found": Array [
                  "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy",
                ],
                "wanted": Array [
                  String(
                    xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
                    yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
                  ),
                ],
              },
              "fullname": "foo",
              "id": 1,
              "name": "should be equivalent",
              "ok": false,
            },
          ],
          "ok": false,
          "pass": 0,
          "plan": FinalPlan {
            "comment": "",
            "end": null,
            "skipAll": false,
            "skipReason": "",
            "start": null,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "bailout",
    "should be equivalent",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": "should be equivalent",
      "count": 0,
      "fail": 0,
      "failures": Array [],
      "ok": false,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": null,
        "skipAll": false,
        "skipReason": "",
        "start": null,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP line-break.tap bail > stringified 1`] = `
TAP version 13
# Subtest: foo
    not ok 1 - should be equivalent
      ---
      found:
        - xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
          yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
      wanted:
        - >-
          xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
      
          yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
      ...
    Bail out! should be equivalent
Bail out! should be equivalent

`

exports[`test/parser-stringify.js TAP line-break.tap bail > stringified flat 1`] = `
TAP version 13
# Subtest: foo
    not ok 1 - should be equivalent
      ---
      found:
        - xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
          yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
      wanted:
        - >-
          xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
      
          yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
      ...
    Bail out! should be equivalent
Bail out! should be equivalent

`

exports[`test/parser-stringify.js TAP line-break.tap default settings > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: foo\\n",
      ],
      Array [
        "assert",
        Result {
          "diag": Object {
            "found": Array [
              "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy",
            ],
            "wanted": Array [
              String(
                xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
                yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
              ),
            ],
          },
          "fullname": "foo",
          "id": 1,
          "name": "should be equivalent",
          "ok": false,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "comment",
        "# failed 1 of 1 tests\\n",
      ],
      Array [
        "comment",
        "# failed 1 test\\n",
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 1,
          "failures": Array [
            Result {
              "diag": Object {
                "found": Array [
                  "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy",
                ],
                "wanted": Array [
                  String(
                    xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
                    yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
                  ),
                ],
              },
              "fullname": "foo",
              "id": 1,
              "name": "should be equivalent",
              "ok": false,
            },
          ],
          "ok": false,
          "pass": 0,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": 13.457,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "diag": Object {
        "results": Object {
          "count": 1,
          "fail": 1,
          "ok": false,
          "pass": 0,
          "plan": Object {
            "end": 1,
            "start": 1,
          },
          "time": 13.457,
        },
      },
      "fullname": "",
      "id": 1,
      "name": "foo",
      "ok": false,
      "time": 13.457,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# failed 1 of 1 tests\\n",
  ],
  Array [
    "comment",
    "# time=22.566ms\\n",
  ],
  Array [
    "comment",
    "# failed 1 test\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 1,
      "failures": Array [
        Result {
          "diag": Object {
            "results": Object {
              "count": 1,
              "fail": 1,
              "ok": false,
              "pass": 0,
              "plan": Object {
                "end": 1,
                "start": 1,
              },
              "time": 13.457,
            },
          },
          "fullname": "",
          "id": 1,
          "name": "foo",
          "ok": false,
          "time": 13.457,
        },
      ],
      "ok": false,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": 22.566,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP line-break.tap default settings > stringified 1`] = `
TAP version 13
# Subtest: foo
    not ok 1 - should be equivalent
      ---
      found:
        - xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
          yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
      wanted:
        - >-
          xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
      
          yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
      ...
    1..1
    # failed 1 of 1 tests
    # failed 1 test
not ok 1 - foo # time=13.457ms
  ---
  results:
    plan:
      start: 1
      end: 1
    count: 1
    pass: 0
    ok: false
    fail: 1
    time: 13.457
  ...
1..1
# failed 1 of 1 tests
# time=22.566ms
# failed 1 test

`

exports[`test/parser-stringify.js TAP line-break.tap default settings > stringified flat 1`] = `
TAP version 13
# Subtest: foo
    not ok 1 - should be equivalent
      ---
      found:
        - xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
          yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
      wanted:
        - >-
          xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
      
          yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
      ...
    1..1
    # failed 1 of 1 tests
    # failed 1 test
not ok 1 - foo # time=13.457ms
  ---
  results:
    plan:
      start: 1
      end: 1
    count: 1
    pass: 0
    ok: false
    fail: 1
    time: 13.457
  ...
1..1
# failed 1 of 1 tests
# time=22.566ms
# failed 1 test

`

exports[`test/parser-stringify.js TAP line-break.tap strict > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: foo\\n",
      ],
      Array [
        "assert",
        Result {
          "diag": Object {
            "found": Array [
              "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy",
            ],
            "wanted": Array [
              String(
                xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
                yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
              ),
            ],
          },
          "fullname": "foo",
          "id": 1,
          "name": "should be equivalent",
          "ok": false,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "comment",
        "# failed 1 of 1 tests\\n",
      ],
      Array [
        "comment",
        "# failed 1 test\\n",
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 1,
          "failures": Array [
            Result {
              "diag": Object {
                "found": Array [
                  "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy",
                ],
                "wanted": Array [
                  String(
                    xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
                    yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
                  ),
                ],
              },
              "fullname": "foo",
              "id": 1,
              "name": "should be equivalent",
              "ok": false,
            },
          ],
          "ok": false,
          "pass": 0,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": 13.457,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "diag": Object {
        "results": Object {
          "count": 1,
          "fail": 1,
          "ok": false,
          "pass": 0,
          "plan": Object {
            "end": 1,
            "start": 1,
          },
          "time": 13.457,
        },
      },
      "fullname": "",
      "id": 1,
      "name": "foo",
      "ok": false,
      "time": 13.457,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# failed 1 of 1 tests\\n",
  ],
  Array [
    "comment",
    "# time=22.566ms\\n",
  ],
  Array [
    "comment",
    "# failed 1 test\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 1,
      "failures": Array [
        Result {
          "diag": Object {
            "results": Object {
              "count": 1,
              "fail": 1,
              "ok": false,
              "pass": 0,
              "plan": Object {
                "end": 1,
                "start": 1,
              },
              "time": 13.457,
            },
          },
          "fullname": "",
          "id": 1,
          "name": "foo",
          "ok": false,
          "time": 13.457,
        },
      ],
      "ok": false,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": 22.566,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP line-break.tap strict > stringified 1`] = `
TAP version 13
# Subtest: foo
    not ok 1 - should be equivalent
      ---
      found:
        - xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
          yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
      wanted:
        - >-
          xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
      
          yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
      ...
    1..1
    # failed 1 of 1 tests
    # failed 1 test
not ok 1 - foo # time=13.457ms
  ---
  results:
    plan:
      start: 1
      end: 1
    count: 1
    pass: 0
    ok: false
    fail: 1
    time: 13.457
  ...
1..1
# failed 1 of 1 tests
# time=22.566ms
# failed 1 test

`

exports[`test/parser-stringify.js TAP line-break.tap strict > stringified flat 1`] = `
TAP version 13
# Subtest: foo
    not ok 1 - should be equivalent
      ---
      found:
        - xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
          yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
      wanted:
        - >-
          xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
      
          yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
      ...
    1..1
    # failed 1 of 1 tests
    # failed 1 test
not ok 1 - foo # time=13.457ms
  ---
  results:
    plan:
      start: 1
      end: 1
    count: 1
    pass: 0
    ok: false
    fail: 1
    time: 13.457
  ...
1..1
# failed 1 of 1 tests
# time=22.566ms
# failed 1 test

`

exports[`test/parser-stringify.js TAP line-break.tap strictBail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: foo\\n",
      ],
      Array [
        "assert",
        Result {
          "diag": Object {
            "found": Array [
              "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy",
            ],
            "wanted": Array [
              String(
                xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
                yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
              ),
            ],
          },
          "fullname": "foo",
          "id": 1,
          "name": "should be equivalent",
          "ok": false,
        },
      ],
      Array [
        "bailout",
        "should be equivalent",
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": "should be equivalent",
          "count": 1,
          "fail": 1,
          "failures": Array [
            Result {
              "diag": Object {
                "found": Array [
                  "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy",
                ],
                "wanted": Array [
                  String(
                    xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
                    yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
                  ),
                ],
              },
              "fullname": "foo",
              "id": 1,
              "name": "should be equivalent",
              "ok": false,
            },
          ],
          "ok": false,
          "pass": 0,
          "plan": FinalPlan {
            "comment": "",
            "end": null,
            "skipAll": false,
            "skipReason": "",
            "start": null,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "bailout",
    "should be equivalent",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": "should be equivalent",
      "count": 0,
      "fail": 0,
      "failures": Array [],
      "ok": false,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": null,
        "skipAll": false,
        "skipReason": "",
        "start": null,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP line-break.tap strictBail > stringified 1`] = `
TAP version 13
# Subtest: foo
    not ok 1 - should be equivalent
      ---
      found:
        - xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
          yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
      wanted:
        - >-
          xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
      
          yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
      ...
    Bail out! should be equivalent
Bail out! should be equivalent

`

exports[`test/parser-stringify.js TAP line-break.tap strictBail > stringified flat 1`] = `
TAP version 13
# Subtest: foo
    not ok 1 - should be equivalent
      ---
      found:
        - xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
          yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
      wanted:
        - >-
          xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
      
          yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
      ...
    Bail out! should be equivalent
Bail out! should be equivalent

`

exports[`test/parser-stringify.js TAP lone_not_bug.tap bail > parsed 1`] = `
Array [
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 4,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 4,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 4,
      "plan": FinalPlan {
        "comment": "",
        "end": 4,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP lone_not_bug.tap bail > stringified 1`] = `
ok 1
ok 2
ok 3
ok 4
1..4

`

exports[`test/parser-stringify.js TAP lone_not_bug.tap bail > stringified flat 1`] = `
ok 1
ok 2
ok 3
ok 4
1..4

`

exports[`test/parser-stringify.js TAP lone_not_bug.tap default settings > parsed 1`] = `
Array [
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 4,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 4,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 4,
      "plan": FinalPlan {
        "comment": "",
        "end": 4,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP lone_not_bug.tap default settings > stringified 1`] = `
ok 1
ok 2
ok 3
ok 4
1..4

`

exports[`test/parser-stringify.js TAP lone_not_bug.tap default settings > stringified flat 1`] = `
ok 1
ok 2
ok 3
ok 4
1..4

`

exports[`test/parser-stringify.js TAP lone_not_bug.tap strict > parsed 1`] = `
Array [
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 4,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 4,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 4,
      "plan": FinalPlan {
        "comment": "",
        "end": 4,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP lone_not_bug.tap strict > stringified 1`] = `
ok 1
ok 2
ok 3
ok 4
1..4

`

exports[`test/parser-stringify.js TAP lone_not_bug.tap strict > stringified flat 1`] = `
ok 1
ok 2
ok 3
ok 4
1..4

`

exports[`test/parser-stringify.js TAP lone_not_bug.tap strictBail > parsed 1`] = `
Array [
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 4,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 4,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 4,
      "plan": FinalPlan {
        "comment": "",
        "end": 4,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP lone_not_bug.tap strictBail > stringified 1`] = `
ok 1
ok 2
ok 3
ok 4
1..4

`

exports[`test/parser-stringify.js TAP lone_not_bug.tap strictBail > stringified flat 1`] = `
ok 1
ok 2
ok 3
ok 4
1..4

`

exports[`test/parser-stringify.js TAP mismatched-child-assert.tap bail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: some child\\n",
      ],
      Array [
        "assert",
        Result {
          "fullname": "some child",
          "id": 1,
          "name": "this is fine",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "different name",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP mismatched-child-assert.tap bail > stringified 1`] = `
TAP version 13
# Subtest: some child
    ok 1 - this is fine
    1..1
ok 1 - different name
1..1

`

exports[`test/parser-stringify.js TAP mismatched-child-assert.tap bail > stringified flat 1`] = `
TAP version 13
# Subtest: some child
    ok 1 - this is fine
    1..1
ok 1 - different name
1..1

`

exports[`test/parser-stringify.js TAP mismatched-child-assert.tap default settings > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: some child\\n",
      ],
      Array [
        "assert",
        Result {
          "fullname": "some child",
          "id": 1,
          "name": "this is fine",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "different name",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP mismatched-child-assert.tap default settings > stringified 1`] = `
TAP version 13
# Subtest: some child
    ok 1 - this is fine
    1..1
ok 1 - different name
1..1

`

exports[`test/parser-stringify.js TAP mismatched-child-assert.tap default settings > stringified flat 1`] = `
TAP version 13
# Subtest: some child
    ok 1 - this is fine
    1..1
ok 1 - different name
1..1

`

exports[`test/parser-stringify.js TAP mismatched-child-assert.tap strict > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: some child\\n",
      ],
      Array [
        "assert",
        Result {
          "fullname": "some child",
          "id": 1,
          "name": "this is fine",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "different name",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP mismatched-child-assert.tap strict > stringified 1`] = `
TAP version 13
# Subtest: some child
    ok 1 - this is fine
    1..1
ok 1 - different name
1..1

`

exports[`test/parser-stringify.js TAP mismatched-child-assert.tap strict > stringified flat 1`] = `
TAP version 13
# Subtest: some child
    ok 1 - this is fine
    1..1
ok 1 - different name
1..1

`

exports[`test/parser-stringify.js TAP mismatched-child-assert.tap strictBail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: some child\\n",
      ],
      Array [
        "assert",
        Result {
          "fullname": "some child",
          "id": 1,
          "name": "this is fine",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "different name",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP mismatched-child-assert.tap strictBail > stringified 1`] = `
TAP version 13
# Subtest: some child
    ok 1 - this is fine
    1..1
ok 1 - different name
1..1

`

exports[`test/parser-stringify.js TAP mismatched-child-assert.tap strictBail > stringified flat 1`] = `
TAP version 13
# Subtest: some child
    ok 1 - this is fine
    1..1
ok 1 - different name
1..1

`

exports[`test/parser-stringify.js TAP missing.tap bail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "end": 6,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test count(5) != plan(6)\\n",
  ],
  Array [
    "comment",
    "# failed 1 of 5 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 5,
      "fail": 1,
      "failures": Array [
        Object {
          "tapError": "incorrect number of tests",
        },
      ],
      "ok": false,
      "pass": 5,
      "plan": FinalPlan {
        "comment": "",
        "end": 6,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP missing.tap bail > stringified 1`] = `
TAP version 13
1..6
ok
ok
ok
ok
ok
# test count(5) != plan(6)
# failed 1 of 5 tests

`

exports[`test/parser-stringify.js TAP missing.tap bail > stringified flat 1`] = `
TAP version 13
1..6
ok
ok
ok
ok
ok
# test count(5) != plan(6)
# failed 1 of 5 tests

`

exports[`test/parser-stringify.js TAP missing.tap default settings > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "end": 6,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test count(5) != plan(6)\\n",
  ],
  Array [
    "comment",
    "# failed 1 of 5 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 5,
      "fail": 1,
      "failures": Array [
        Object {
          "tapError": "incorrect number of tests",
        },
      ],
      "ok": false,
      "pass": 5,
      "plan": FinalPlan {
        "comment": "",
        "end": 6,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP missing.tap default settings > stringified 1`] = `
TAP version 13
1..6
ok
ok
ok
ok
ok
# test count(5) != plan(6)
# failed 1 of 5 tests

`

exports[`test/parser-stringify.js TAP missing.tap default settings > stringified flat 1`] = `
TAP version 13
1..6
ok
ok
ok
ok
ok
# test count(5) != plan(6)
# failed 1 of 5 tests

`

exports[`test/parser-stringify.js TAP missing.tap strict > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "end": 6,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test count(5) != plan(6)\\n",
  ],
  Array [
    "comment",
    "# failed 1 of 5 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 5,
      "fail": 1,
      "failures": Array [
        Object {
          "tapError": "incorrect number of tests",
        },
      ],
      "ok": false,
      "pass": 5,
      "plan": FinalPlan {
        "comment": "",
        "end": 6,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP missing.tap strict > stringified 1`] = `
TAP version 13
1..6
ok
ok
ok
ok
ok
# test count(5) != plan(6)
# failed 1 of 5 tests

`

exports[`test/parser-stringify.js TAP missing.tap strict > stringified flat 1`] = `
TAP version 13
1..6
ok
ok
ok
ok
ok
# test count(5) != plan(6)
# failed 1 of 5 tests

`

exports[`test/parser-stringify.js TAP missing.tap strictBail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "end": 6,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test count(5) != plan(6)\\n",
  ],
  Array [
    "comment",
    "# failed 1 of 5 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 5,
      "fail": 1,
      "failures": Array [
        Object {
          "tapError": "incorrect number of tests",
        },
      ],
      "ok": false,
      "pass": 5,
      "plan": FinalPlan {
        "comment": "",
        "end": 6,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP missing.tap strictBail > stringified 1`] = `
TAP version 13
1..6
ok
ok
ok
ok
ok
# test count(5) != plan(6)
# failed 1 of 5 tests

`

exports[`test/parser-stringify.js TAP missing.tap strictBail > stringified flat 1`] = `
TAP version 13
1..6
ok
ok
ok
ok
ok
# test count(5) != plan(6)
# failed 1 of 5 tests

`

exports[`test/parser-stringify.js TAP no-numbers.tap bail > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 3,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "name": "we are good",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "we are bad",
      "ok": false,
    },
  ],
  Array [
    "bailout",
    "we are bad",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": "we are bad",
      "count": 2,
      "fail": 1,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 2,
          "name": "we are bad",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 3,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP no-numbers.tap bail > stringified 1`] = `
1..3
ok - we are good
not ok 2 - we are bad
Bail out! we are bad

`

exports[`test/parser-stringify.js TAP no-numbers.tap bail > stringified flat 1`] = `
1..3
ok - we are good
not ok 2 - we are bad
Bail out! we are bad

`

exports[`test/parser-stringify.js TAP no-numbers.tap default settings > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 3,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "name": "we are good",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "we are bad",
      "ok": false,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "name": "we are zesty!",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# failed 1 of 3 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 3,
      "fail": 1,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 2,
          "name": "we are bad",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 2,
      "plan": FinalPlan {
        "comment": "",
        "end": 3,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP no-numbers.tap default settings > stringified 1`] = `
1..3
ok - we are good
not ok 2 - we are bad
ok - we are zesty!
# failed 1 of 3 tests

`

exports[`test/parser-stringify.js TAP no-numbers.tap default settings > stringified flat 1`] = `
1..3
ok - we are good
not ok 2 - we are bad
ok - we are zesty!
# failed 1 of 3 tests

`

exports[`test/parser-stringify.js TAP no-numbers.tap strict > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 3,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "name": "we are good",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "we are bad",
      "ok": false,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "name": "we are zesty!",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# failed 1 of 3 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 3,
      "fail": 1,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 2,
          "name": "we are bad",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 2,
      "plan": FinalPlan {
        "comment": "",
        "end": 3,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP no-numbers.tap strict > stringified 1`] = `
1..3
ok - we are good
not ok 2 - we are bad
ok - we are zesty!
# failed 1 of 3 tests

`

exports[`test/parser-stringify.js TAP no-numbers.tap strict > stringified flat 1`] = `
1..3
ok - we are good
not ok 2 - we are bad
ok - we are zesty!
# failed 1 of 3 tests

`

exports[`test/parser-stringify.js TAP no-numbers.tap strictBail > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 3,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "name": "we are good",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "we are bad",
      "ok": false,
    },
  ],
  Array [
    "bailout",
    "we are bad",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": "we are bad",
      "count": 2,
      "fail": 1,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 2,
          "name": "we are bad",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 3,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP no-numbers.tap strictBail > stringified 1`] = `
1..3
ok - we are good
not ok 2 - we are bad
Bail out! we are bad

`

exports[`test/parser-stringify.js TAP no-numbers.tap strictBail > stringified flat 1`] = `
1..3
ok - we are good
not ok 2 - we are bad
Bail out! we are bad

`

exports[`test/parser-stringify.js TAP no-plan.tap bail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "comment",
    "# before 1\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# before 3\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "name": "(unnamed assert)",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test count(4) != plan(null)\\n",
  ],
  Array [
    "comment",
    "# failed 1 of 4 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 4,
      "fail": 1,
      "failures": Array [
        Object {
          "tapError": "no plan",
        },
      ],
      "ok": false,
      "pass": 4,
      "plan": FinalPlan {
        "comment": "",
        "end": null,
        "skipAll": false,
        "skipReason": "",
        "start": null,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP no-plan.tap bail > stringified 1`] = `
TAP version 13
# before 1
ok 1 - should be equal
ok 2 - should be equivalent
# before 3
ok 3 - should be equal
ok 4 - (unnamed assert)
# test count(4) != plan(null)
# failed 1 of 4 tests

`

exports[`test/parser-stringify.js TAP no-plan.tap bail > stringified flat 1`] = `
TAP version 13
# before 1
ok 1 - should be equal
ok 2 - should be equivalent
# before 3
ok 3 - should be equal
ok 4 - (unnamed assert)
# test count(4) != plan(null)
# failed 1 of 4 tests

`

exports[`test/parser-stringify.js TAP no-plan.tap default settings > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "comment",
    "# before 1\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# before 3\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "name": "(unnamed assert)",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test count(4) != plan(null)\\n",
  ],
  Array [
    "comment",
    "# failed 1 of 4 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 4,
      "fail": 1,
      "failures": Array [
        Object {
          "tapError": "no plan",
        },
      ],
      "ok": false,
      "pass": 4,
      "plan": FinalPlan {
        "comment": "",
        "end": null,
        "skipAll": false,
        "skipReason": "",
        "start": null,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP no-plan.tap default settings > stringified 1`] = `
TAP version 13
# before 1
ok 1 - should be equal
ok 2 - should be equivalent
# before 3
ok 3 - should be equal
ok 4 - (unnamed assert)
# test count(4) != plan(null)
# failed 1 of 4 tests

`

exports[`test/parser-stringify.js TAP no-plan.tap default settings > stringified flat 1`] = `
TAP version 13
# before 1
ok 1 - should be equal
ok 2 - should be equivalent
# before 3
ok 3 - should be equal
ok 4 - (unnamed assert)
# test count(4) != plan(null)
# failed 1 of 4 tests

`

exports[`test/parser-stringify.js TAP no-plan.tap strict > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "comment",
    "# before 1\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# before 3\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "name": "(unnamed assert)",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test count(4) != plan(null)\\n",
  ],
  Array [
    "comment",
    "# failed 1 of 4 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 4,
      "fail": 1,
      "failures": Array [
        Object {
          "tapError": "no plan",
        },
      ],
      "ok": false,
      "pass": 4,
      "plan": FinalPlan {
        "comment": "",
        "end": null,
        "skipAll": false,
        "skipReason": "",
        "start": null,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP no-plan.tap strict > stringified 1`] = `
TAP version 13
# before 1
ok 1 - should be equal
ok 2 - should be equivalent
# before 3
ok 3 - should be equal
ok 4 - (unnamed assert)
# test count(4) != plan(null)
# failed 1 of 4 tests

`

exports[`test/parser-stringify.js TAP no-plan.tap strict > stringified flat 1`] = `
TAP version 13
# before 1
ok 1 - should be equal
ok 2 - should be equivalent
# before 3
ok 3 - should be equal
ok 4 - (unnamed assert)
# test count(4) != plan(null)
# failed 1 of 4 tests

`

exports[`test/parser-stringify.js TAP no-plan.tap strictBail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "comment",
    "# before 1\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# before 3\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "name": "(unnamed assert)",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test count(4) != plan(null)\\n",
  ],
  Array [
    "comment",
    "# failed 1 of 4 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 4,
      "fail": 1,
      "failures": Array [
        Object {
          "tapError": "no plan",
        },
      ],
      "ok": false,
      "pass": 4,
      "plan": FinalPlan {
        "comment": "",
        "end": null,
        "skipAll": false,
        "skipReason": "",
        "start": null,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP no-plan.tap strictBail > stringified 1`] = `
TAP version 13
# before 1
ok 1 - should be equal
ok 2 - should be equivalent
# before 3
ok 3 - should be equal
ok 4 - (unnamed assert)
# test count(4) != plan(null)
# failed 1 of 4 tests

`

exports[`test/parser-stringify.js TAP no-plan.tap strictBail > stringified flat 1`] = `
TAP version 13
# before 1
ok 1 - should be equal
ok 2 - should be equivalent
# before 3
ok 3 - should be equal
ok 4 - (unnamed assert)
# test count(4) != plan(null)
# failed 1 of 4 tests

`

exports[`test/parser-stringify.js TAP no_nums.tap bail > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": false,
    },
  ],
  Array [
    "bailout",
    "",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": true,
      "count": 3,
      "fail": 1,
      "failures": Array [
        Result {
          "fullname": "",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 2,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP no_nums.tap bail > stringified 1`] = `
1..5
ok
ok
not ok
Bail out!

`

exports[`test/parser-stringify.js TAP no_nums.tap bail > stringified flat 1`] = `
1..5
ok
ok
not ok
Bail out!

`

exports[`test/parser-stringify.js TAP no_nums.tap default settings > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": false,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# failed 1 of 5 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 5,
      "fail": 1,
      "failures": Array [
        Result {
          "fullname": "",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 4,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP no_nums.tap default settings > stringified 1`] = `
1..5
ok
ok
not ok
ok
ok
# failed 1 of 5 tests

`

exports[`test/parser-stringify.js TAP no_nums.tap default settings > stringified flat 1`] = `
1..5
ok
ok
not ok
ok
ok
# failed 1 of 5 tests

`

exports[`test/parser-stringify.js TAP no_nums.tap strict > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": false,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# failed 1 of 5 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 5,
      "fail": 1,
      "failures": Array [
        Result {
          "fullname": "",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 4,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP no_nums.tap strict > stringified 1`] = `
1..5
ok
ok
not ok
ok
ok
# failed 1 of 5 tests

`

exports[`test/parser-stringify.js TAP no_nums.tap strict > stringified flat 1`] = `
1..5
ok
ok
not ok
ok
ok
# failed 1 of 5 tests

`

exports[`test/parser-stringify.js TAP no_nums.tap strictBail > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": false,
    },
  ],
  Array [
    "bailout",
    "",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": true,
      "count": 3,
      "fail": 1,
      "failures": Array [
        Result {
          "fullname": "",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 2,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP no_nums.tap strictBail > stringified 1`] = `
1..5
ok
ok
not ok
Bail out!

`

exports[`test/parser-stringify.js TAP no_nums.tap strictBail > stringified flat 1`] = `
1..5
ok
ok
not ok
Bail out!

`

exports[`test/parser-stringify.js TAP not-enough.tap bail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "comment",
    "# before 1\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# before 3\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "name": "(unnamed assert)",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# tests 4\\n",
  ],
  Array [
    "comment",
    "# pass  4\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "comment",
    "# test count(4) != plan(5)\\n",
  ],
  Array [
    "comment",
    "# failed 1 of 4 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 4,
      "fail": 1,
      "failures": Array [
        Object {
          "tapError": "incorrect number of tests",
        },
      ],
      "ok": false,
      "pass": 4,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP not-enough.tap bail > stringified 1`] = `
TAP version 13
# before 1
ok 1 - should be equal
ok 2 - should be equivalent
# before 3
ok 3 - should be equal
ok 4 - (unnamed assert)
1..5
# tests 4
# pass  4
# ok
# test count(4) != plan(5)
# failed 1 of 4 tests

`

exports[`test/parser-stringify.js TAP not-enough.tap bail > stringified flat 1`] = `
TAP version 13
# before 1
ok 1 - should be equal
ok 2 - should be equivalent
# before 3
ok 3 - should be equal
ok 4 - (unnamed assert)
1..5
# tests 4
# pass  4
# ok
# test count(4) != plan(5)
# failed 1 of 4 tests

`

exports[`test/parser-stringify.js TAP not-enough.tap default settings > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "comment",
    "# before 1\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# before 3\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "name": "(unnamed assert)",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# tests 4\\n",
  ],
  Array [
    "comment",
    "# pass  4\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "comment",
    "# test count(4) != plan(5)\\n",
  ],
  Array [
    "comment",
    "# failed 1 of 4 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 4,
      "fail": 1,
      "failures": Array [
        Object {
          "tapError": "incorrect number of tests",
        },
      ],
      "ok": false,
      "pass": 4,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP not-enough.tap default settings > stringified 1`] = `
TAP version 13
# before 1
ok 1 - should be equal
ok 2 - should be equivalent
# before 3
ok 3 - should be equal
ok 4 - (unnamed assert)
1..5
# tests 4
# pass  4
# ok
# test count(4) != plan(5)
# failed 1 of 4 tests

`

exports[`test/parser-stringify.js TAP not-enough.tap default settings > stringified flat 1`] = `
TAP version 13
# before 1
ok 1 - should be equal
ok 2 - should be equivalent
# before 3
ok 3 - should be equal
ok 4 - (unnamed assert)
1..5
# tests 4
# pass  4
# ok
# test count(4) != plan(5)
# failed 1 of 4 tests

`

exports[`test/parser-stringify.js TAP not-enough.tap strict > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "comment",
    "# before 1\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# before 3\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "name": "(unnamed assert)",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# tests 4\\n",
  ],
  Array [
    "comment",
    "# pass  4\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "comment",
    "# test count(4) != plan(5)\\n",
  ],
  Array [
    "comment",
    "# failed 1 of 4 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 4,
      "fail": 1,
      "failures": Array [
        Object {
          "tapError": "incorrect number of tests",
        },
      ],
      "ok": false,
      "pass": 4,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP not-enough.tap strict > stringified 1`] = `
TAP version 13
# before 1
ok 1 - should be equal
ok 2 - should be equivalent
# before 3
ok 3 - should be equal
ok 4 - (unnamed assert)
1..5
# tests 4
# pass  4
# ok
# test count(4) != plan(5)
# failed 1 of 4 tests

`

exports[`test/parser-stringify.js TAP not-enough.tap strict > stringified flat 1`] = `
TAP version 13
# before 1
ok 1 - should be equal
ok 2 - should be equivalent
# before 3
ok 3 - should be equal
ok 4 - (unnamed assert)
1..5
# tests 4
# pass  4
# ok
# test count(4) != plan(5)
# failed 1 of 4 tests

`

exports[`test/parser-stringify.js TAP not-enough.tap strictBail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "comment",
    "# before 1\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# before 3\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "name": "(unnamed assert)",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# tests 4\\n",
  ],
  Array [
    "comment",
    "# pass  4\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "comment",
    "# test count(4) != plan(5)\\n",
  ],
  Array [
    "comment",
    "# failed 1 of 4 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 4,
      "fail": 1,
      "failures": Array [
        Object {
          "tapError": "incorrect number of tests",
        },
      ],
      "ok": false,
      "pass": 4,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP not-enough.tap strictBail > stringified 1`] = `
TAP version 13
# before 1
ok 1 - should be equal
ok 2 - should be equivalent
# before 3
ok 3 - should be equal
ok 4 - (unnamed assert)
1..5
# tests 4
# pass  4
# ok
# test count(4) != plan(5)
# failed 1 of 4 tests

`

exports[`test/parser-stringify.js TAP not-enough.tap strictBail > stringified flat 1`] = `
TAP version 13
# before 1
ok 1 - should be equal
ok 2 - should be equivalent
# before 3
ok 3 - should be equal
ok 4 - (unnamed assert)
1..5
# tests 4
# pass  4
# ok
# test count(4) != plan(5)
# failed 1 of 4 tests

`

exports[`test/parser-stringify.js TAP not-ok-todo.tap bail > parsed 1`] = `
Array [
  Array [
    "comment",
    "# TAP emitted by Test::More 0.98\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "should be equivalent",
      "ok": false,
      "todo": "but we will fix it later",
    },
  ],
  Array [
    "comment",
    "# boop\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "name": "(unnamed assert)",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 4,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# Looks like you failed 1 test of 4.\\n",
  ],
  Array [
    "comment",
    "# todo: 1\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 4,
      "fail": 1,
      "failures": Array [],
      "ok": true,
      "pass": 3,
      "plan": FinalPlan {
        "comment": "",
        "end": 4,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 1,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP not-ok-todo.tap bail > stringified 1`] = `
# TAP emitted by Test::More 0.98
ok 1 - should be equal
not ok 2 - should be equivalent # TODO but we will fix it later
# boop
ok 3 - should be equal
ok 4 - (unnamed assert)
1..4
# Looks like you failed 1 test of 4.
# todo: 1

`

exports[`test/parser-stringify.js TAP not-ok-todo.tap bail > stringified flat 1`] = `
# TAP emitted by Test::More 0.98
ok 1 - should be equal
not ok 2 - should be equivalent # TODO but we will fix it later
# boop
ok 3 - should be equal
ok 4 - (unnamed assert)
1..4
# Looks like you failed 1 test of 4.
# todo: 1

`

exports[`test/parser-stringify.js TAP not-ok-todo.tap default settings > parsed 1`] = `
Array [
  Array [
    "comment",
    "# TAP emitted by Test::More 0.98\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "should be equivalent",
      "ok": false,
      "todo": "but we will fix it later",
    },
  ],
  Array [
    "comment",
    "# boop\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "name": "(unnamed assert)",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 4,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# Looks like you failed 1 test of 4.\\n",
  ],
  Array [
    "comment",
    "# todo: 1\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 4,
      "fail": 1,
      "failures": Array [],
      "ok": true,
      "pass": 3,
      "plan": FinalPlan {
        "comment": "",
        "end": 4,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 1,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP not-ok-todo.tap default settings > stringified 1`] = `
# TAP emitted by Test::More 0.98
ok 1 - should be equal
not ok 2 - should be equivalent # TODO but we will fix it later
# boop
ok 3 - should be equal
ok 4 - (unnamed assert)
1..4
# Looks like you failed 1 test of 4.
# todo: 1

`

exports[`test/parser-stringify.js TAP not-ok-todo.tap default settings > stringified flat 1`] = `
# TAP emitted by Test::More 0.98
ok 1 - should be equal
not ok 2 - should be equivalent # TODO but we will fix it later
# boop
ok 3 - should be equal
ok 4 - (unnamed assert)
1..4
# Looks like you failed 1 test of 4.
# todo: 1

`

exports[`test/parser-stringify.js TAP not-ok-todo.tap strict > parsed 1`] = `
Array [
  Array [
    "comment",
    "# TAP emitted by Test::More 0.98\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "should be equivalent",
      "ok": false,
      "todo": "but we will fix it later",
    },
  ],
  Array [
    "comment",
    "# boop\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "name": "(unnamed assert)",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 4,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# Looks like you failed 1 test of 4.\\n",
  ],
  Array [
    "comment",
    "# todo: 1\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 4,
      "fail": 1,
      "failures": Array [],
      "ok": true,
      "pass": 3,
      "plan": FinalPlan {
        "comment": "",
        "end": 4,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 1,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP not-ok-todo.tap strict > stringified 1`] = `
# TAP emitted by Test::More 0.98
ok 1 - should be equal
not ok 2 - should be equivalent # TODO but we will fix it later
# boop
ok 3 - should be equal
ok 4 - (unnamed assert)
1..4
# Looks like you failed 1 test of 4.
# todo: 1

`

exports[`test/parser-stringify.js TAP not-ok-todo.tap strict > stringified flat 1`] = `
# TAP emitted by Test::More 0.98
ok 1 - should be equal
not ok 2 - should be equivalent # TODO but we will fix it later
# boop
ok 3 - should be equal
ok 4 - (unnamed assert)
1..4
# Looks like you failed 1 test of 4.
# todo: 1

`

exports[`test/parser-stringify.js TAP not-ok-todo.tap strictBail > parsed 1`] = `
Array [
  Array [
    "comment",
    "# TAP emitted by Test::More 0.98\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "should be equivalent",
      "ok": false,
      "todo": "but we will fix it later",
    },
  ],
  Array [
    "comment",
    "# boop\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "name": "(unnamed assert)",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 4,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# Looks like you failed 1 test of 4.\\n",
  ],
  Array [
    "comment",
    "# todo: 1\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 4,
      "fail": 1,
      "failures": Array [],
      "ok": true,
      "pass": 3,
      "plan": FinalPlan {
        "comment": "",
        "end": 4,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 1,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP not-ok-todo.tap strictBail > stringified 1`] = `
# TAP emitted by Test::More 0.98
ok 1 - should be equal
not ok 2 - should be equivalent # TODO but we will fix it later
# boop
ok 3 - should be equal
ok 4 - (unnamed assert)
1..4
# Looks like you failed 1 test of 4.
# todo: 1

`

exports[`test/parser-stringify.js TAP not-ok-todo.tap strictBail > stringified flat 1`] = `
# TAP emitted by Test::More 0.98
ok 1 - should be equal
not ok 2 - should be equivalent # TODO but we will fix it later
# boop
ok 3 - should be equal
ok 4 - (unnamed assert)
1..4
# Looks like you failed 1 test of 4.
# todo: 1

`

exports[`test/parser-stringify.js TAP not-ok-with-trailing-comment.tap bail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "comment",
    "# beep\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "should be equivalent",
      "ok": false,
    },
  ],
  Array [
    "comment",
    "# boop\\n",
  ],
  Array [
    "bailout",
    "should be equivalent",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": "should be equivalent",
      "count": 2,
      "fail": 1,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 2,
          "name": "should be equivalent",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": null,
        "skipAll": false,
        "skipReason": "",
        "start": null,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP not-ok-with-trailing-comment.tap bail > stringified 1`] = `
TAP version 13
# beep
ok 1 - should be equal
not ok 2 - should be equivalent
# boop
Bail out! should be equivalent

`

exports[`test/parser-stringify.js TAP not-ok-with-trailing-comment.tap bail > stringified flat 1`] = `
TAP version 13
# beep
ok 1 - should be equal
not ok 2 - should be equivalent
# boop
Bail out! should be equivalent

`

exports[`test/parser-stringify.js TAP not-ok-with-trailing-comment.tap default settings > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "comment",
    "# beep\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "should be equivalent",
      "ok": false,
    },
  ],
  Array [
    "comment",
    "# boop\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "name": "(unnamed assert)",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 4,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# tests 4\\n",
  ],
  Array [
    "comment",
    "# pass  3\\n",
  ],
  Array [
    "comment",
    "# fail  1\\n",
  ],
  Array [
    "comment",
    "# failed 1 of 4 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 4,
      "fail": 1,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 2,
          "name": "should be equivalent",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 3,
      "plan": FinalPlan {
        "comment": "",
        "end": 4,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP not-ok-with-trailing-comment.tap default settings > stringified 1`] = `
TAP version 13
# beep
ok 1 - should be equal
not ok 2 - should be equivalent
# boop
ok 3 - should be equal
ok 4 - (unnamed assert)
1..4
# tests 4
# pass  3
# fail  1
# failed 1 of 4 tests

`

exports[`test/parser-stringify.js TAP not-ok-with-trailing-comment.tap default settings > stringified flat 1`] = `
TAP version 13
# beep
ok 1 - should be equal
not ok 2 - should be equivalent
# boop
ok 3 - should be equal
ok 4 - (unnamed assert)
1..4
# tests 4
# pass  3
# fail  1
# failed 1 of 4 tests

`

exports[`test/parser-stringify.js TAP not-ok-with-trailing-comment.tap strict > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "comment",
    "# beep\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "should be equivalent",
      "ok": false,
    },
  ],
  Array [
    "comment",
    "# boop\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "name": "(unnamed assert)",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 4,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# tests 4\\n",
  ],
  Array [
    "comment",
    "# pass  3\\n",
  ],
  Array [
    "comment",
    "# fail  1\\n",
  ],
  Array [
    "comment",
    "# failed 1 of 4 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 4,
      "fail": 1,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 2,
          "name": "should be equivalent",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 3,
      "plan": FinalPlan {
        "comment": "",
        "end": 4,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP not-ok-with-trailing-comment.tap strict > stringified 1`] = `
TAP version 13
# beep
ok 1 - should be equal
not ok 2 - should be equivalent
# boop
ok 3 - should be equal
ok 4 - (unnamed assert)
1..4
# tests 4
# pass  3
# fail  1
# failed 1 of 4 tests

`

exports[`test/parser-stringify.js TAP not-ok-with-trailing-comment.tap strict > stringified flat 1`] = `
TAP version 13
# beep
ok 1 - should be equal
not ok 2 - should be equivalent
# boop
ok 3 - should be equal
ok 4 - (unnamed assert)
1..4
# tests 4
# pass  3
# fail  1
# failed 1 of 4 tests

`

exports[`test/parser-stringify.js TAP not-ok-with-trailing-comment.tap strictBail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "comment",
    "# beep\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "should be equivalent",
      "ok": false,
    },
  ],
  Array [
    "comment",
    "# boop\\n",
  ],
  Array [
    "bailout",
    "should be equivalent",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": "should be equivalent",
      "count": 2,
      "fail": 1,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 2,
          "name": "should be equivalent",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": null,
        "skipAll": false,
        "skipReason": "",
        "start": null,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP not-ok-with-trailing-comment.tap strictBail > stringified 1`] = `
TAP version 13
# beep
ok 1 - should be equal
not ok 2 - should be equivalent
# boop
Bail out! should be equivalent

`

exports[`test/parser-stringify.js TAP not-ok-with-trailing-comment.tap strictBail > stringified flat 1`] = `
TAP version 13
# beep
ok 1 - should be equal
not ok 2 - should be equivalent
# boop
Bail out! should be equivalent

`

exports[`test/parser-stringify.js TAP not-ok.tap bail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "comment",
    "# beep\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "should be equivalent",
      "ok": false,
    },
  ],
  Array [
    "comment",
    "# boop\\n",
  ],
  Array [
    "bailout",
    "should be equivalent",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": "should be equivalent",
      "count": 2,
      "fail": 1,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 2,
          "name": "should be equivalent",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": null,
        "skipAll": false,
        "skipReason": "",
        "start": null,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP not-ok.tap bail > stringified 1`] = `
TAP version 13
# beep
ok 1 - should be equal
not ok 2 - should be equivalent
# boop
Bail out! should be equivalent

`

exports[`test/parser-stringify.js TAP not-ok.tap bail > stringified flat 1`] = `
TAP version 13
# beep
ok 1 - should be equal
not ok 2 - should be equivalent
# boop
Bail out! should be equivalent

`

exports[`test/parser-stringify.js TAP not-ok.tap default settings > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "comment",
    "# beep\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "should be equivalent",
      "ok": false,
    },
  ],
  Array [
    "comment",
    "# boop\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "name": "(unnamed assert)",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 4,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# tests 4\\n",
  ],
  Array [
    "comment",
    "# pass  3\\n",
  ],
  Array [
    "comment",
    "# fail  1\\n",
  ],
  Array [
    "comment",
    "# failed 1 of 4 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 4,
      "fail": 1,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 2,
          "name": "should be equivalent",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 3,
      "plan": FinalPlan {
        "comment": "",
        "end": 4,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP not-ok.tap default settings > stringified 1`] = `
TAP version 13
# beep
ok 1 - should be equal
not ok 2 - should be equivalent
# boop
ok 3 - should be equal
ok 4 - (unnamed assert)
1..4
# tests 4
# pass  3
# fail  1
# failed 1 of 4 tests

`

exports[`test/parser-stringify.js TAP not-ok.tap default settings > stringified flat 1`] = `
TAP version 13
# beep
ok 1 - should be equal
not ok 2 - should be equivalent
# boop
ok 3 - should be equal
ok 4 - (unnamed assert)
1..4
# tests 4
# pass  3
# fail  1
# failed 1 of 4 tests

`

exports[`test/parser-stringify.js TAP not-ok.tap strict > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "comment",
    "# beep\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "should be equivalent",
      "ok": false,
    },
  ],
  Array [
    "comment",
    "# boop\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "name": "(unnamed assert)",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 4,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# tests 4\\n",
  ],
  Array [
    "comment",
    "# pass  3\\n",
  ],
  Array [
    "comment",
    "# fail  1\\n",
  ],
  Array [
    "comment",
    "# failed 1 of 4 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 4,
      "fail": 1,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 2,
          "name": "should be equivalent",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 3,
      "plan": FinalPlan {
        "comment": "",
        "end": 4,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP not-ok.tap strict > stringified 1`] = `
TAP version 13
# beep
ok 1 - should be equal
not ok 2 - should be equivalent
# boop
ok 3 - should be equal
ok 4 - (unnamed assert)
1..4
# tests 4
# pass  3
# fail  1
# failed 1 of 4 tests

`

exports[`test/parser-stringify.js TAP not-ok.tap strict > stringified flat 1`] = `
TAP version 13
# beep
ok 1 - should be equal
not ok 2 - should be equivalent
# boop
ok 3 - should be equal
ok 4 - (unnamed assert)
1..4
# tests 4
# pass  3
# fail  1
# failed 1 of 4 tests

`

exports[`test/parser-stringify.js TAP not-ok.tap strictBail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "comment",
    "# beep\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "should be equivalent",
      "ok": false,
    },
  ],
  Array [
    "comment",
    "# boop\\n",
  ],
  Array [
    "bailout",
    "should be equivalent",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": "should be equivalent",
      "count": 2,
      "fail": 1,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 2,
          "name": "should be equivalent",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": null,
        "skipAll": false,
        "skipReason": "",
        "start": null,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP not-ok.tap strictBail > stringified 1`] = `
TAP version 13
# beep
ok 1 - should be equal
not ok 2 - should be equivalent
# boop
Bail out! should be equivalent

`

exports[`test/parser-stringify.js TAP not-ok.tap strictBail > stringified flat 1`] = `
TAP version 13
# beep
ok 1 - should be equal
not ok 2 - should be equivalent
# boop
Bail out! should be equivalent

`

exports[`test/parser-stringify.js TAP offset-mismatch.tap bail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "comment",
    "# beep\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 8,
      "name": "should be equal",
      "ok": true,
      "plan": Object {
        "end": 4,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 9,
      "name": "should be equivalent",
      "ok": true,
      "plan": Object {
        "end": 4,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "comment",
    "# boop\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 10,
      "name": "should be equal",
      "ok": true,
      "plan": Object {
        "end": 4,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 11,
      "name": "(unnamed assert)",
      "ok": true,
      "plan": Object {
        "end": 4,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "plan",
    Object {
      "end": 4,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# tests 4\\n",
  ],
  Array [
    "comment",
    "# pass  4\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "comment",
    "# failed 4 of 4 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 4,
      "fail": 4,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 8,
          "name": "should be equal",
          "ok": true,
          "plan": Object {
            "end": 4,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
        Result {
          "fullname": "",
          "id": 9,
          "name": "should be equivalent",
          "ok": true,
          "plan": Object {
            "end": 4,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
        Result {
          "fullname": "",
          "id": 10,
          "name": "should be equal",
          "ok": true,
          "plan": Object {
            "end": 4,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
        Result {
          "fullname": "",
          "id": 11,
          "name": "(unnamed assert)",
          "ok": true,
          "plan": Object {
            "end": 4,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
      ],
      "ok": false,
      "pass": 4,
      "plan": FinalPlan {
        "comment": "",
        "end": 4,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP offset-mismatch.tap bail > stringified 1`] = `
TAP version 13
# beep
ok 8 - should be equal
ok 9 - should be equivalent
# boop
ok 10 - should be equal
ok 11 - (unnamed assert)
1..4
# tests 4
# pass  4
# ok
# failed 4 of 4 tests

`

exports[`test/parser-stringify.js TAP offset-mismatch.tap bail > stringified flat 1`] = `
TAP version 13
# beep
ok 8 - should be equal
ok 9 - should be equivalent
# boop
ok 10 - should be equal
ok 11 - (unnamed assert)
1..4
# tests 4
# pass  4
# ok
# failed 4 of 4 tests

`

exports[`test/parser-stringify.js TAP offset-mismatch.tap default settings > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "comment",
    "# beep\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 8,
      "name": "should be equal",
      "ok": true,
      "plan": Object {
        "end": 4,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 9,
      "name": "should be equivalent",
      "ok": true,
      "plan": Object {
        "end": 4,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "comment",
    "# boop\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 10,
      "name": "should be equal",
      "ok": true,
      "plan": Object {
        "end": 4,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 11,
      "name": "(unnamed assert)",
      "ok": true,
      "plan": Object {
        "end": 4,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "plan",
    Object {
      "end": 4,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# tests 4\\n",
  ],
  Array [
    "comment",
    "# pass  4\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "comment",
    "# failed 4 of 4 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 4,
      "fail": 4,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 8,
          "name": "should be equal",
          "ok": true,
          "plan": Object {
            "end": 4,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
        Result {
          "fullname": "",
          "id": 9,
          "name": "should be equivalent",
          "ok": true,
          "plan": Object {
            "end": 4,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
        Result {
          "fullname": "",
          "id": 10,
          "name": "should be equal",
          "ok": true,
          "plan": Object {
            "end": 4,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
        Result {
          "fullname": "",
          "id": 11,
          "name": "(unnamed assert)",
          "ok": true,
          "plan": Object {
            "end": 4,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
      ],
      "ok": false,
      "pass": 4,
      "plan": FinalPlan {
        "comment": "",
        "end": 4,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP offset-mismatch.tap default settings > stringified 1`] = `
TAP version 13
# beep
ok 8 - should be equal
ok 9 - should be equivalent
# boop
ok 10 - should be equal
ok 11 - (unnamed assert)
1..4
# tests 4
# pass  4
# ok
# failed 4 of 4 tests

`

exports[`test/parser-stringify.js TAP offset-mismatch.tap default settings > stringified flat 1`] = `
TAP version 13
# beep
ok 8 - should be equal
ok 9 - should be equivalent
# boop
ok 10 - should be equal
ok 11 - (unnamed assert)
1..4
# tests 4
# pass  4
# ok
# failed 4 of 4 tests

`

exports[`test/parser-stringify.js TAP offset-mismatch.tap strict > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "comment",
    "# beep\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 8,
      "name": "should be equal",
      "ok": true,
      "plan": Object {
        "end": 4,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 9,
      "name": "should be equivalent",
      "ok": true,
      "plan": Object {
        "end": 4,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "comment",
    "# boop\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 10,
      "name": "should be equal",
      "ok": true,
      "plan": Object {
        "end": 4,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 11,
      "name": "(unnamed assert)",
      "ok": true,
      "plan": Object {
        "end": 4,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "plan",
    Object {
      "end": 4,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# tests 4\\n",
  ],
  Array [
    "comment",
    "# pass  4\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "comment",
    "# failed 4 of 4 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 4,
      "fail": 4,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 8,
          "name": "should be equal",
          "ok": true,
          "plan": Object {
            "end": 4,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
        Result {
          "fullname": "",
          "id": 9,
          "name": "should be equivalent",
          "ok": true,
          "plan": Object {
            "end": 4,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
        Result {
          "fullname": "",
          "id": 10,
          "name": "should be equal",
          "ok": true,
          "plan": Object {
            "end": 4,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
        Result {
          "fullname": "",
          "id": 11,
          "name": "(unnamed assert)",
          "ok": true,
          "plan": Object {
            "end": 4,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
      ],
      "ok": false,
      "pass": 4,
      "plan": FinalPlan {
        "comment": "",
        "end": 4,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP offset-mismatch.tap strict > stringified 1`] = `
TAP version 13
# beep
ok 8 - should be equal
ok 9 - should be equivalent
# boop
ok 10 - should be equal
ok 11 - (unnamed assert)
1..4
# tests 4
# pass  4
# ok
# failed 4 of 4 tests

`

exports[`test/parser-stringify.js TAP offset-mismatch.tap strict > stringified flat 1`] = `
TAP version 13
# beep
ok 8 - should be equal
ok 9 - should be equivalent
# boop
ok 10 - should be equal
ok 11 - (unnamed assert)
1..4
# tests 4
# pass  4
# ok
# failed 4 of 4 tests

`

exports[`test/parser-stringify.js TAP offset-mismatch.tap strictBail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "comment",
    "# beep\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 8,
      "name": "should be equal",
      "ok": true,
      "plan": Object {
        "end": 4,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 9,
      "name": "should be equivalent",
      "ok": true,
      "plan": Object {
        "end": 4,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "comment",
    "# boop\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 10,
      "name": "should be equal",
      "ok": true,
      "plan": Object {
        "end": 4,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 11,
      "name": "(unnamed assert)",
      "ok": true,
      "plan": Object {
        "end": 4,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "plan",
    Object {
      "end": 4,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# tests 4\\n",
  ],
  Array [
    "comment",
    "# pass  4\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "comment",
    "# failed 4 of 4 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 4,
      "fail": 4,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 8,
          "name": "should be equal",
          "ok": true,
          "plan": Object {
            "end": 4,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
        Result {
          "fullname": "",
          "id": 9,
          "name": "should be equivalent",
          "ok": true,
          "plan": Object {
            "end": 4,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
        Result {
          "fullname": "",
          "id": 10,
          "name": "should be equal",
          "ok": true,
          "plan": Object {
            "end": 4,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
        Result {
          "fullname": "",
          "id": 11,
          "name": "(unnamed assert)",
          "ok": true,
          "plan": Object {
            "end": 4,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
      ],
      "ok": false,
      "pass": 4,
      "plan": FinalPlan {
        "comment": "",
        "end": 4,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP offset-mismatch.tap strictBail > stringified 1`] = `
TAP version 13
# beep
ok 8 - should be equal
ok 9 - should be equivalent
# boop
ok 10 - should be equal
ok 11 - (unnamed assert)
1..4
# tests 4
# pass  4
# ok
# failed 4 of 4 tests

`

exports[`test/parser-stringify.js TAP offset-mismatch.tap strictBail > stringified flat 1`] = `
TAP version 13
# beep
ok 8 - should be equal
ok 9 - should be equivalent
# boop
ok 10 - should be equal
ok 11 - (unnamed assert)
1..4
# tests 4
# pass  4
# ok
# failed 4 of 4 tests

`

exports[`test/parser-stringify.js TAP offset.tap bail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "comment",
    "# beep\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 8,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 9,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# boop\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 10,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 11,
      "name": "(unnamed assert)",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 11,
      "start": 8,
    },
  ],
  Array [
    "comment",
    "# tests 4\\n",
  ],
  Array [
    "comment",
    "# pass  4\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "comment",
    "# test count(4) != plan(11)\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 4,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 4,
      "plan": FinalPlan {
        "comment": "",
        "end": 11,
        "skipAll": false,
        "skipReason": "",
        "start": 8,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP offset.tap bail > stringified 1`] = `
TAP version 13
# beep
ok 8 - should be equal
ok 9 - should be equivalent
# boop
ok 10 - should be equal
ok 11 - (unnamed assert)
8..11
# tests 4
# pass  4
# ok
# test count(4) != plan(11)

`

exports[`test/parser-stringify.js TAP offset.tap bail > stringified flat 1`] = `
TAP version 13
# beep
ok 8 - should be equal
ok 9 - should be equivalent
# boop
ok 10 - should be equal
ok 11 - (unnamed assert)
8..11
# tests 4
# pass  4
# ok
# test count(4) != plan(11)

`

exports[`test/parser-stringify.js TAP offset.tap default settings > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "comment",
    "# beep\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 8,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 9,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# boop\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 10,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 11,
      "name": "(unnamed assert)",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 11,
      "start": 8,
    },
  ],
  Array [
    "comment",
    "# tests 4\\n",
  ],
  Array [
    "comment",
    "# pass  4\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "comment",
    "# test count(4) != plan(11)\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 4,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 4,
      "plan": FinalPlan {
        "comment": "",
        "end": 11,
        "skipAll": false,
        "skipReason": "",
        "start": 8,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP offset.tap default settings > stringified 1`] = `
TAP version 13
# beep
ok 8 - should be equal
ok 9 - should be equivalent
# boop
ok 10 - should be equal
ok 11 - (unnamed assert)
8..11
# tests 4
# pass  4
# ok
# test count(4) != plan(11)

`

exports[`test/parser-stringify.js TAP offset.tap default settings > stringified flat 1`] = `
TAP version 13
# beep
ok 8 - should be equal
ok 9 - should be equivalent
# boop
ok 10 - should be equal
ok 11 - (unnamed assert)
8..11
# tests 4
# pass  4
# ok
# test count(4) != plan(11)

`

exports[`test/parser-stringify.js TAP offset.tap strict > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "comment",
    "# beep\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 8,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 9,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# boop\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 10,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 11,
      "name": "(unnamed assert)",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 11,
      "start": 8,
    },
  ],
  Array [
    "comment",
    "# tests 4\\n",
  ],
  Array [
    "comment",
    "# pass  4\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "comment",
    "# test count(4) != plan(11)\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 4,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 4,
      "plan": FinalPlan {
        "comment": "",
        "end": 11,
        "skipAll": false,
        "skipReason": "",
        "start": 8,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP offset.tap strict > stringified 1`] = `
TAP version 13
# beep
ok 8 - should be equal
ok 9 - should be equivalent
# boop
ok 10 - should be equal
ok 11 - (unnamed assert)
8..11
# tests 4
# pass  4
# ok
# test count(4) != plan(11)

`

exports[`test/parser-stringify.js TAP offset.tap strict > stringified flat 1`] = `
TAP version 13
# beep
ok 8 - should be equal
ok 9 - should be equivalent
# boop
ok 10 - should be equal
ok 11 - (unnamed assert)
8..11
# tests 4
# pass  4
# ok
# test count(4) != plan(11)

`

exports[`test/parser-stringify.js TAP offset.tap strictBail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "comment",
    "# beep\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 8,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 9,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# boop\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 10,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 11,
      "name": "(unnamed assert)",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 11,
      "start": 8,
    },
  ],
  Array [
    "comment",
    "# tests 4\\n",
  ],
  Array [
    "comment",
    "# pass  4\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "comment",
    "# test count(4) != plan(11)\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 4,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 4,
      "plan": FinalPlan {
        "comment": "",
        "end": 11,
        "skipAll": false,
        "skipReason": "",
        "start": 8,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP offset.tap strictBail > stringified 1`] = `
TAP version 13
# beep
ok 8 - should be equal
ok 9 - should be equivalent
# boop
ok 10 - should be equal
ok 11 - (unnamed assert)
8..11
# tests 4
# pass  4
# ok
# test count(4) != plan(11)

`

exports[`test/parser-stringify.js TAP offset.tap strictBail > stringified flat 1`] = `
TAP version 13
# beep
ok 8 - should be equal
ok 9 - should be equivalent
# boop
ok 10 - should be equal
ok 11 - (unnamed assert)
8..11
# tests 4
# pass  4
# ok
# test count(4) != plan(11)

`

exports[`test/parser-stringify.js TAP ok.tap bail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "comment",
    "# beep\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# boop\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "name": "(unnamed assert)",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "comment": "just some plan comment",
      "end": 4,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# tests 4\\n",
  ],
  Array [
    "comment",
    "# pass  4\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 4,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 4,
      "plan": FinalPlan {
        "comment": "just some plan comment",
        "end": 4,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP ok.tap bail > stringified 1`] = `
TAP version 13
# beep
ok 1 - should be equal
ok 2 - should be equivalent
# boop
ok 3 - should be equal
ok 4 - (unnamed assert)
1..4 # just some plan comment
# tests 4
# pass  4
# ok

`

exports[`test/parser-stringify.js TAP ok.tap bail > stringified flat 1`] = `
TAP version 13
# beep
ok 1 - should be equal
ok 2 - should be equivalent
# boop
ok 3 - should be equal
ok 4 - (unnamed assert)
1..4 # just some plan comment
# tests 4
# pass  4
# ok

`

exports[`test/parser-stringify.js TAP ok.tap default settings > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "comment",
    "# beep\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# boop\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "name": "(unnamed assert)",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "comment": "just some plan comment",
      "end": 4,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# tests 4\\n",
  ],
  Array [
    "comment",
    "# pass  4\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 4,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 4,
      "plan": FinalPlan {
        "comment": "just some plan comment",
        "end": 4,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP ok.tap default settings > stringified 1`] = `
TAP version 13
# beep
ok 1 - should be equal
ok 2 - should be equivalent
# boop
ok 3 - should be equal
ok 4 - (unnamed assert)
1..4 # just some plan comment
# tests 4
# pass  4
# ok

`

exports[`test/parser-stringify.js TAP ok.tap default settings > stringified flat 1`] = `
TAP version 13
# beep
ok 1 - should be equal
ok 2 - should be equivalent
# boop
ok 3 - should be equal
ok 4 - (unnamed assert)
1..4 # just some plan comment
# tests 4
# pass  4
# ok

`

exports[`test/parser-stringify.js TAP ok.tap strict > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "comment",
    "# beep\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# boop\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "name": "(unnamed assert)",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "comment": "just some plan comment",
      "end": 4,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# tests 4\\n",
  ],
  Array [
    "comment",
    "# pass  4\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 4,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 4,
      "plan": FinalPlan {
        "comment": "just some plan comment",
        "end": 4,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP ok.tap strict > stringified 1`] = `
TAP version 13
# beep
ok 1 - should be equal
ok 2 - should be equivalent
# boop
ok 3 - should be equal
ok 4 - (unnamed assert)
1..4 # just some plan comment
# tests 4
# pass  4
# ok

`

exports[`test/parser-stringify.js TAP ok.tap strict > stringified flat 1`] = `
TAP version 13
# beep
ok 1 - should be equal
ok 2 - should be equivalent
# boop
ok 3 - should be equal
ok 4 - (unnamed assert)
1..4 # just some plan comment
# tests 4
# pass  4
# ok

`

exports[`test/parser-stringify.js TAP ok.tap strictBail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "comment",
    "# beep\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# boop\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "name": "(unnamed assert)",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "comment": "just some plan comment",
      "end": 4,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# tests 4\\n",
  ],
  Array [
    "comment",
    "# pass  4\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 4,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 4,
      "plan": FinalPlan {
        "comment": "just some plan comment",
        "end": 4,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP ok.tap strictBail > stringified 1`] = `
TAP version 13
# beep
ok 1 - should be equal
ok 2 - should be equivalent
# boop
ok 3 - should be equal
ok 4 - (unnamed assert)
1..4 # just some plan comment
# tests 4
# pass  4
# ok

`

exports[`test/parser-stringify.js TAP ok.tap strictBail > stringified flat 1`] = `
TAP version 13
# beep
ok 1 - should be equal
ok 2 - should be equivalent
# boop
ok 3 - should be equal
ok 4 - (unnamed assert)
1..4 # just some plan comment
# tests 4
# pass  4
# ok

`

exports[`test/parser-stringify.js TAP one-ok.tap bail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP one-ok.tap bail > stringified 1`] = `
TAP version 13
ok 1
1..1

`

exports[`test/parser-stringify.js TAP one-ok.tap bail > stringified flat 1`] = `
TAP version 13
ok 1
1..1

`

exports[`test/parser-stringify.js TAP one-ok.tap default settings > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP one-ok.tap default settings > stringified 1`] = `
TAP version 13
ok 1
1..1

`

exports[`test/parser-stringify.js TAP one-ok.tap default settings > stringified flat 1`] = `
TAP version 13
ok 1
1..1

`

exports[`test/parser-stringify.js TAP one-ok.tap strict > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP one-ok.tap strict > stringified 1`] = `
TAP version 13
ok 1
1..1

`

exports[`test/parser-stringify.js TAP one-ok.tap strict > stringified flat 1`] = `
TAP version 13
ok 1
1..1

`

exports[`test/parser-stringify.js TAP one-ok.tap strictBail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP one-ok.tap strictBail > stringified 1`] = `
TAP version 13
ok 1
1..1

`

exports[`test/parser-stringify.js TAP one-ok.tap strictBail > stringified flat 1`] = `
TAP version 13
ok 1
1..1

`

exports[`test/parser-stringify.js TAP out-of-order.tap bail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "comment",
    "# beep\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# boop\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "name": "(unnamed assert)",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 4,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# tests 4\\n",
  ],
  Array [
    "comment",
    "# pass  4\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 4,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 4,
      "plan": FinalPlan {
        "comment": "",
        "end": 4,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP out-of-order.tap bail > stringified 1`] = `
TAP version 13
# beep
ok 1 - should be equal
ok 3 - should be equivalent
# boop
ok 2 - should be equal
ok 4 - (unnamed assert)
1..4
# tests 4
# pass  4
# ok

`

exports[`test/parser-stringify.js TAP out-of-order.tap bail > stringified flat 1`] = `
TAP version 13
# beep
ok 1 - should be equal
ok 3 - should be equivalent
# boop
ok 2 - should be equal
ok 4 - (unnamed assert)
1..4
# tests 4
# pass  4
# ok

`

exports[`test/parser-stringify.js TAP out-of-order.tap default settings > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "comment",
    "# beep\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# boop\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "name": "(unnamed assert)",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 4,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# tests 4\\n",
  ],
  Array [
    "comment",
    "# pass  4\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 4,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 4,
      "plan": FinalPlan {
        "comment": "",
        "end": 4,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP out-of-order.tap default settings > stringified 1`] = `
TAP version 13
# beep
ok 1 - should be equal
ok 3 - should be equivalent
# boop
ok 2 - should be equal
ok 4 - (unnamed assert)
1..4
# tests 4
# pass  4
# ok

`

exports[`test/parser-stringify.js TAP out-of-order.tap default settings > stringified flat 1`] = `
TAP version 13
# beep
ok 1 - should be equal
ok 3 - should be equivalent
# boop
ok 2 - should be equal
ok 4 - (unnamed assert)
1..4
# tests 4
# pass  4
# ok

`

exports[`test/parser-stringify.js TAP out-of-order.tap strict > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "comment",
    "# beep\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# boop\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "name": "(unnamed assert)",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 4,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# tests 4\\n",
  ],
  Array [
    "comment",
    "# pass  4\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 4,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 4,
      "plan": FinalPlan {
        "comment": "",
        "end": 4,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP out-of-order.tap strict > stringified 1`] = `
TAP version 13
# beep
ok 1 - should be equal
ok 3 - should be equivalent
# boop
ok 2 - should be equal
ok 4 - (unnamed assert)
1..4
# tests 4
# pass  4
# ok

`

exports[`test/parser-stringify.js TAP out-of-order.tap strict > stringified flat 1`] = `
TAP version 13
# beep
ok 1 - should be equal
ok 3 - should be equivalent
# boop
ok 2 - should be equal
ok 4 - (unnamed assert)
1..4
# tests 4
# pass  4
# ok

`

exports[`test/parser-stringify.js TAP out-of-order.tap strictBail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "comment",
    "# beep\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# boop\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "name": "(unnamed assert)",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 4,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# tests 4\\n",
  ],
  Array [
    "comment",
    "# pass  4\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 4,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 4,
      "plan": FinalPlan {
        "comment": "",
        "end": 4,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP out-of-order.tap strictBail > stringified 1`] = `
TAP version 13
# beep
ok 1 - should be equal
ok 3 - should be equivalent
# boop
ok 2 - should be equal
ok 4 - (unnamed assert)
1..4
# tests 4
# pass  4
# ok

`

exports[`test/parser-stringify.js TAP out-of-order.tap strictBail > stringified flat 1`] = `
TAP version 13
# beep
ok 1 - should be equal
ok 3 - should be equivalent
# boop
ok 2 - should be equal
ok 4 - (unnamed assert)
1..4
# tests 4
# pass  4
# ok

`

exports[`test/parser-stringify.js TAP out_err_mix.tap bail > parsed 1`] = `
Array [
  Array [
    "extra",
    "one\\n",
  ],
  Array [
    "extra",
    "three\\n",
  ],
  Array [
    "plan",
    Object {
      "comment": "no tests found",
      "end": 0,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 0,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "no tests found",
        "end": 0,
        "skipAll": true,
        "skipReason": "no tests found",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP out_err_mix.tap bail > stringified 1`] = `
one
three
1..0 # no tests found

`

exports[`test/parser-stringify.js TAP out_err_mix.tap bail > stringified flat 1`] = `
one
three
1..0 # no tests found

`

exports[`test/parser-stringify.js TAP out_err_mix.tap default settings > parsed 1`] = `
Array [
  Array [
    "extra",
    "one\\n",
  ],
  Array [
    "extra",
    "three\\n",
  ],
  Array [
    "plan",
    Object {
      "comment": "no tests found",
      "end": 0,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 0,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "no tests found",
        "end": 0,
        "skipAll": true,
        "skipReason": "no tests found",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP out_err_mix.tap default settings > stringified 1`] = `
one
three
1..0 # no tests found

`

exports[`test/parser-stringify.js TAP out_err_mix.tap default settings > stringified flat 1`] = `
one
three
1..0 # no tests found

`

exports[`test/parser-stringify.js TAP out_err_mix.tap strict > parsed 1`] = `
Array [
  Array [
    "extra",
    "one\\n",
  ],
  Array [
    "extra",
    "three\\n",
  ],
  Array [
    "plan",
    Object {
      "comment": "no tests found",
      "end": 0,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# failed 2 test\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 0,
      "fail": 2,
      "failures": Array [
        Object {
          "data": "one\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "three\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
      ],
      "ok": false,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "no tests found",
        "end": 0,
        "skipAll": true,
        "skipReason": "no tests found",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP out_err_mix.tap strict > stringified 1`] = `
one
three
1..0 # no tests found
# failed 2 test

`

exports[`test/parser-stringify.js TAP out_err_mix.tap strict > stringified flat 1`] = `
one
three
1..0 # no tests found
# failed 2 test

`

exports[`test/parser-stringify.js TAP out_err_mix.tap strictBail > parsed 1`] = `
Array [
  Array [
    "extra",
    "one\\n",
  ],
  Array [
    "extra",
    "three\\n",
  ],
  Array [
    "plan",
    Object {
      "comment": "no tests found",
      "end": 0,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# failed 2 test\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 0,
      "fail": 2,
      "failures": Array [
        Object {
          "data": "one\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "three\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
      ],
      "ok": false,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "no tests found",
        "end": 0,
        "skipAll": true,
        "skipReason": "no tests found",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP out_err_mix.tap strictBail > stringified 1`] = `
one
three
1..0 # no tests found
# failed 2 test

`

exports[`test/parser-stringify.js TAP out_err_mix.tap strictBail > stringified flat 1`] = `
one
three
1..0 # no tests found
# failed 2 test

`

exports[`test/parser-stringify.js TAP out_of_order.tap bail > parsed 1`] = `
Array [
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "Test that argument passing works",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "Test that passing arguments as references work",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "name": "Test a normal sub",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 6,
      "name": "Detach test",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 8,
      "name": "Nested thread test",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 9,
      "name": "Nested thread test",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 10,
      "name": "Wanted 7, got 7",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 11,
      "name": "Wanted 7, got 7",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 12,
      "name": "Wanted 8, got 8",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 13,
      "name": "Wanted 8, got 8",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 15,
      "start": 1,
    },
  ],
  Array [
    "extra",
    "ok 1\\n",
  ],
  Array [
    "extra",
    "ok 5 - Check that Config::threads is true\\n",
  ],
  Array [
    "extra",
    "ok 7 - Detach test\\n",
  ],
  Array [
    "extra",
    "ok 14 - Check so that tid for threads work for main thread\\n",
  ],
  Array [
    "extra",
    "ok 15 - Check so that tid for threads work for main thread\\n",
  ],
  Array [
    "comment",
    "# test count(10) != plan(15)\\n",
  ],
  Array [
    "comment",
    "# failed 1 of 10 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 10,
      "fail": 1,
      "failures": Array [
        Object {
          "tapError": "incorrect number of tests",
        },
      ],
      "ok": false,
      "pass": 10,
      "plan": FinalPlan {
        "comment": "",
        "end": 15,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP out_of_order.tap bail > stringified 1`] = `
ok 2 - Test that argument passing works
ok 3 - Test that passing arguments as references work
ok 4 - Test a normal sub
ok 6 - Detach test
ok 8 - Nested thread test
ok 9 - Nested thread test
ok 10 - Wanted 7, got 7
ok 11 - Wanted 7, got 7
ok 12 - Wanted 8, got 8
ok 13 - Wanted 8, got 8
1..15
ok 1
ok 5 - Check that Config::threads is true
ok 7 - Detach test
ok 14 - Check so that tid for threads work for main thread
ok 15 - Check so that tid for threads work for main thread
# test count(10) != plan(15)
# failed 1 of 10 tests

`

exports[`test/parser-stringify.js TAP out_of_order.tap bail > stringified flat 1`] = `
ok 2 - Test that argument passing works
ok 3 - Test that passing arguments as references work
ok 4 - Test a normal sub
ok 6 - Detach test
ok 8 - Nested thread test
ok 9 - Nested thread test
ok 10 - Wanted 7, got 7
ok 11 - Wanted 7, got 7
ok 12 - Wanted 8, got 8
ok 13 - Wanted 8, got 8
1..15
ok 1
ok 5 - Check that Config::threads is true
ok 7 - Detach test
ok 14 - Check so that tid for threads work for main thread
ok 15 - Check so that tid for threads work for main thread
# test count(10) != plan(15)
# failed 1 of 10 tests

`

exports[`test/parser-stringify.js TAP out_of_order.tap default settings > parsed 1`] = `
Array [
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "Test that argument passing works",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "Test that passing arguments as references work",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "name": "Test a normal sub",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 6,
      "name": "Detach test",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 8,
      "name": "Nested thread test",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 9,
      "name": "Nested thread test",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 10,
      "name": "Wanted 7, got 7",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 11,
      "name": "Wanted 7, got 7",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 12,
      "name": "Wanted 8, got 8",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 13,
      "name": "Wanted 8, got 8",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 15,
      "start": 1,
    },
  ],
  Array [
    "extra",
    "ok 1\\n",
  ],
  Array [
    "extra",
    "ok 5 - Check that Config::threads is true\\n",
  ],
  Array [
    "extra",
    "ok 7 - Detach test\\n",
  ],
  Array [
    "extra",
    "ok 14 - Check so that tid for threads work for main thread\\n",
  ],
  Array [
    "extra",
    "ok 15 - Check so that tid for threads work for main thread\\n",
  ],
  Array [
    "comment",
    "# test count(10) != plan(15)\\n",
  ],
  Array [
    "comment",
    "# failed 1 of 10 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 10,
      "fail": 1,
      "failures": Array [
        Object {
          "tapError": "incorrect number of tests",
        },
      ],
      "ok": false,
      "pass": 10,
      "plan": FinalPlan {
        "comment": "",
        "end": 15,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP out_of_order.tap default settings > stringified 1`] = `
ok 2 - Test that argument passing works
ok 3 - Test that passing arguments as references work
ok 4 - Test a normal sub
ok 6 - Detach test
ok 8 - Nested thread test
ok 9 - Nested thread test
ok 10 - Wanted 7, got 7
ok 11 - Wanted 7, got 7
ok 12 - Wanted 8, got 8
ok 13 - Wanted 8, got 8
1..15
ok 1
ok 5 - Check that Config::threads is true
ok 7 - Detach test
ok 14 - Check so that tid for threads work for main thread
ok 15 - Check so that tid for threads work for main thread
# test count(10) != plan(15)
# failed 1 of 10 tests

`

exports[`test/parser-stringify.js TAP out_of_order.tap default settings > stringified flat 1`] = `
ok 2 - Test that argument passing works
ok 3 - Test that passing arguments as references work
ok 4 - Test a normal sub
ok 6 - Detach test
ok 8 - Nested thread test
ok 9 - Nested thread test
ok 10 - Wanted 7, got 7
ok 11 - Wanted 7, got 7
ok 12 - Wanted 8, got 8
ok 13 - Wanted 8, got 8
1..15
ok 1
ok 5 - Check that Config::threads is true
ok 7 - Detach test
ok 14 - Check so that tid for threads work for main thread
ok 15 - Check so that tid for threads work for main thread
# test count(10) != plan(15)
# failed 1 of 10 tests

`

exports[`test/parser-stringify.js TAP out_of_order.tap strict > parsed 1`] = `
Array [
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "Test that argument passing works",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "Test that passing arguments as references work",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "name": "Test a normal sub",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 6,
      "name": "Detach test",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 8,
      "name": "Nested thread test",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 9,
      "name": "Nested thread test",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 10,
      "name": "Wanted 7, got 7",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 11,
      "name": "Wanted 7, got 7",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 12,
      "name": "Wanted 8, got 8",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 13,
      "name": "Wanted 8, got 8",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 15,
      "start": 1,
    },
  ],
  Array [
    "extra",
    "ok 1\\n",
  ],
  Array [
    "extra",
    "ok 5 - Check that Config::threads is true\\n",
  ],
  Array [
    "extra",
    "ok 7 - Detach test\\n",
  ],
  Array [
    "extra",
    "ok 14 - Check so that tid for threads work for main thread\\n",
  ],
  Array [
    "extra",
    "ok 15 - Check so that tid for threads work for main thread\\n",
  ],
  Array [
    "comment",
    "# test count(10) != plan(15)\\n",
  ],
  Array [
    "comment",
    "# failed 5 of 10 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 10,
      "fail": 5,
      "failures": Array [
        Object {
          "data": "ok 1\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "ok 5 - Check that Config::threads is true\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "ok 7 - Detach test\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "ok 14 - Check so that tid for threads work for main thread\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "ok 15 - Check so that tid for threads work for main thread\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
      ],
      "ok": false,
      "pass": 10,
      "plan": FinalPlan {
        "comment": "",
        "end": 15,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP out_of_order.tap strict > stringified 1`] = `
ok 2 - Test that argument passing works
ok 3 - Test that passing arguments as references work
ok 4 - Test a normal sub
ok 6 - Detach test
ok 8 - Nested thread test
ok 9 - Nested thread test
ok 10 - Wanted 7, got 7
ok 11 - Wanted 7, got 7
ok 12 - Wanted 8, got 8
ok 13 - Wanted 8, got 8
1..15
ok 1
ok 5 - Check that Config::threads is true
ok 7 - Detach test
ok 14 - Check so that tid for threads work for main thread
ok 15 - Check so that tid for threads work for main thread
# test count(10) != plan(15)
# failed 5 of 10 tests

`

exports[`test/parser-stringify.js TAP out_of_order.tap strict > stringified flat 1`] = `
ok 2 - Test that argument passing works
ok 3 - Test that passing arguments as references work
ok 4 - Test a normal sub
ok 6 - Detach test
ok 8 - Nested thread test
ok 9 - Nested thread test
ok 10 - Wanted 7, got 7
ok 11 - Wanted 7, got 7
ok 12 - Wanted 8, got 8
ok 13 - Wanted 8, got 8
1..15
ok 1
ok 5 - Check that Config::threads is true
ok 7 - Detach test
ok 14 - Check so that tid for threads work for main thread
ok 15 - Check so that tid for threads work for main thread
# test count(10) != plan(15)
# failed 5 of 10 tests

`

exports[`test/parser-stringify.js TAP out_of_order.tap strictBail > parsed 1`] = `
Array [
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "Test that argument passing works",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "Test that passing arguments as references work",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "name": "Test a normal sub",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 6,
      "name": "Detach test",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 8,
      "name": "Nested thread test",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 9,
      "name": "Nested thread test",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 10,
      "name": "Wanted 7, got 7",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 11,
      "name": "Wanted 7, got 7",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 12,
      "name": "Wanted 8, got 8",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 13,
      "name": "Wanted 8, got 8",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 15,
      "start": 1,
    },
  ],
  Array [
    "extra",
    "ok 1\\n",
  ],
  Array [
    "extra",
    "ok 5 - Check that Config::threads is true\\n",
  ],
  Array [
    "extra",
    "ok 7 - Detach test\\n",
  ],
  Array [
    "extra",
    "ok 14 - Check so that tid for threads work for main thread\\n",
  ],
  Array [
    "extra",
    "ok 15 - Check so that tid for threads work for main thread\\n",
  ],
  Array [
    "comment",
    "# test count(10) != plan(15)\\n",
  ],
  Array [
    "comment",
    "# failed 5 of 10 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 10,
      "fail": 5,
      "failures": Array [
        Object {
          "data": "ok 1\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "ok 5 - Check that Config::threads is true\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "ok 7 - Detach test\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "ok 14 - Check so that tid for threads work for main thread\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "ok 15 - Check so that tid for threads work for main thread\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
      ],
      "ok": false,
      "pass": 10,
      "plan": FinalPlan {
        "comment": "",
        "end": 15,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP out_of_order.tap strictBail > stringified 1`] = `
ok 2 - Test that argument passing works
ok 3 - Test that passing arguments as references work
ok 4 - Test a normal sub
ok 6 - Detach test
ok 8 - Nested thread test
ok 9 - Nested thread test
ok 10 - Wanted 7, got 7
ok 11 - Wanted 7, got 7
ok 12 - Wanted 8, got 8
ok 13 - Wanted 8, got 8
1..15
ok 1
ok 5 - Check that Config::threads is true
ok 7 - Detach test
ok 14 - Check so that tid for threads work for main thread
ok 15 - Check so that tid for threads work for main thread
# test count(10) != plan(15)
# failed 5 of 10 tests

`

exports[`test/parser-stringify.js TAP out_of_order.tap strictBail > stringified flat 1`] = `
ok 2 - Test that argument passing works
ok 3 - Test that passing arguments as references work
ok 4 - Test a normal sub
ok 6 - Detach test
ok 8 - Nested thread test
ok 9 - Nested thread test
ok 10 - Wanted 7, got 7
ok 11 - Wanted 7, got 7
ok 12 - Wanted 8, got 8
ok 13 - Wanted 8, got 8
1..15
ok 1
ok 5 - Check that Config::threads is true
ok 7 - Detach test
ok 14 - Check so that tid for threads work for main thread
ok 15 - Check so that tid for threads work for main thread
# test count(10) != plan(15)
# failed 5 of 10 tests

`

exports[`test/parser-stringify.js TAP outside-plan-end-many.tap bail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 420,
      "ok": true,
      "plan": Object {
        "end": 4,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "ok": true,
      "plan": Object {
        "end": 4,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 4,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# failed 2 of 4 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 4,
      "fail": 2,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 420,
          "ok": true,
          "plan": Object {
            "end": 4,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
        Result {
          "fullname": "",
          "id": 5,
          "ok": true,
          "plan": Object {
            "end": 4,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
      ],
      "ok": false,
      "pass": 4,
      "plan": FinalPlan {
        "comment": "",
        "end": 4,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP outside-plan-end-many.tap bail > stringified 1`] = `
TAP version 13
ok 1
ok 420
ok 5
ok
1..4
# failed 2 of 4 tests

`

exports[`test/parser-stringify.js TAP outside-plan-end-many.tap bail > stringified flat 1`] = `
TAP version 13
ok 1
ok 420
ok 5
ok
1..4
# failed 2 of 4 tests

`

exports[`test/parser-stringify.js TAP outside-plan-end-many.tap default settings > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 420,
      "ok": true,
      "plan": Object {
        "end": 4,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "ok": true,
      "plan": Object {
        "end": 4,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 4,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# failed 2 of 4 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 4,
      "fail": 2,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 420,
          "ok": true,
          "plan": Object {
            "end": 4,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
        Result {
          "fullname": "",
          "id": 5,
          "ok": true,
          "plan": Object {
            "end": 4,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
      ],
      "ok": false,
      "pass": 4,
      "plan": FinalPlan {
        "comment": "",
        "end": 4,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP outside-plan-end-many.tap default settings > stringified 1`] = `
TAP version 13
ok 1
ok 420
ok 5
ok
1..4
# failed 2 of 4 tests

`

exports[`test/parser-stringify.js TAP outside-plan-end-many.tap default settings > stringified flat 1`] = `
TAP version 13
ok 1
ok 420
ok 5
ok
1..4
# failed 2 of 4 tests

`

exports[`test/parser-stringify.js TAP outside-plan-end-many.tap strict > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 420,
      "ok": true,
      "plan": Object {
        "end": 4,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "ok": true,
      "plan": Object {
        "end": 4,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 4,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# failed 2 of 4 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 4,
      "fail": 2,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 420,
          "ok": true,
          "plan": Object {
            "end": 4,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
        Result {
          "fullname": "",
          "id": 5,
          "ok": true,
          "plan": Object {
            "end": 4,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
      ],
      "ok": false,
      "pass": 4,
      "plan": FinalPlan {
        "comment": "",
        "end": 4,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP outside-plan-end-many.tap strict > stringified 1`] = `
TAP version 13
ok 1
ok 420
ok 5
ok
1..4
# failed 2 of 4 tests

`

exports[`test/parser-stringify.js TAP outside-plan-end-many.tap strict > stringified flat 1`] = `
TAP version 13
ok 1
ok 420
ok 5
ok
1..4
# failed 2 of 4 tests

`

exports[`test/parser-stringify.js TAP outside-plan-end-many.tap strictBail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 420,
      "ok": true,
      "plan": Object {
        "end": 4,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "ok": true,
      "plan": Object {
        "end": 4,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 4,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# failed 2 of 4 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 4,
      "fail": 2,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 420,
          "ok": true,
          "plan": Object {
            "end": 4,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
        Result {
          "fullname": "",
          "id": 5,
          "ok": true,
          "plan": Object {
            "end": 4,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
      ],
      "ok": false,
      "pass": 4,
      "plan": FinalPlan {
        "comment": "",
        "end": 4,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP outside-plan-end-many.tap strictBail > stringified 1`] = `
TAP version 13
ok 1
ok 420
ok 5
ok
1..4
# failed 2 of 4 tests

`

exports[`test/parser-stringify.js TAP outside-plan-end-many.tap strictBail > stringified flat 1`] = `
TAP version 13
ok 1
ok 420
ok 5
ok
1..4
# failed 2 of 4 tests

`

exports[`test/parser-stringify.js TAP outside-plan-end.tap bail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "ok": true,
      "plan": Object {
        "end": 4,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 4,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# failed 1 of 4 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 4,
      "fail": 1,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 5,
          "ok": true,
          "plan": Object {
            "end": 4,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
      ],
      "ok": false,
      "pass": 4,
      "plan": FinalPlan {
        "comment": "",
        "end": 4,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP outside-plan-end.tap bail > stringified 1`] = `
TAP version 13
ok 1
ok
ok 5
ok
1..4
# failed 1 of 4 tests

`

exports[`test/parser-stringify.js TAP outside-plan-end.tap bail > stringified flat 1`] = `
TAP version 13
ok 1
ok
ok 5
ok
1..4
# failed 1 of 4 tests

`

exports[`test/parser-stringify.js TAP outside-plan-end.tap default settings > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "ok": true,
      "plan": Object {
        "end": 4,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 4,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# failed 1 of 4 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 4,
      "fail": 1,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 5,
          "ok": true,
          "plan": Object {
            "end": 4,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
      ],
      "ok": false,
      "pass": 4,
      "plan": FinalPlan {
        "comment": "",
        "end": 4,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP outside-plan-end.tap default settings > stringified 1`] = `
TAP version 13
ok 1
ok
ok 5
ok
1..4
# failed 1 of 4 tests

`

exports[`test/parser-stringify.js TAP outside-plan-end.tap default settings > stringified flat 1`] = `
TAP version 13
ok 1
ok
ok 5
ok
1..4
# failed 1 of 4 tests

`

exports[`test/parser-stringify.js TAP outside-plan-end.tap strict > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "ok": true,
      "plan": Object {
        "end": 4,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 4,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# failed 1 of 4 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 4,
      "fail": 1,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 5,
          "ok": true,
          "plan": Object {
            "end": 4,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
      ],
      "ok": false,
      "pass": 4,
      "plan": FinalPlan {
        "comment": "",
        "end": 4,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP outside-plan-end.tap strict > stringified 1`] = `
TAP version 13
ok 1
ok
ok 5
ok
1..4
# failed 1 of 4 tests

`

exports[`test/parser-stringify.js TAP outside-plan-end.tap strict > stringified flat 1`] = `
TAP version 13
ok 1
ok
ok 5
ok
1..4
# failed 1 of 4 tests

`

exports[`test/parser-stringify.js TAP outside-plan-end.tap strictBail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "ok": true,
      "plan": Object {
        "end": 4,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 4,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# failed 1 of 4 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 4,
      "fail": 1,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 5,
          "ok": true,
          "plan": Object {
            "end": 4,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
      ],
      "ok": false,
      "pass": 4,
      "plan": FinalPlan {
        "comment": "",
        "end": 4,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP outside-plan-end.tap strictBail > stringified 1`] = `
TAP version 13
ok 1
ok
ok 5
ok
1..4
# failed 1 of 4 tests

`

exports[`test/parser-stringify.js TAP outside-plan-end.tap strictBail > stringified flat 1`] = `
TAP version 13
ok 1
ok
ok 5
ok
1..4
# failed 1 of 4 tests

`

exports[`test/parser-stringify.js TAP outside-plan-start.tap bail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
      "plan": Object {
        "end": 5,
        "start": 2,
      },
      "tapError": "id less than plan start",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 2,
    },
  ],
  Array [
    "comment",
    "# test count(4) != plan(5)\\n",
  ],
  Array [
    "comment",
    "# failed 1 of 4 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 4,
      "fail": 1,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 1,
          "ok": true,
          "plan": Object {
            "end": 5,
            "start": 2,
          },
          "tapError": "id less than plan start",
        },
      ],
      "ok": false,
      "pass": 4,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 2,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP outside-plan-start.tap bail > stringified 1`] = `
TAP version 13
ok 1
ok
ok 5
ok
2..5
# test count(4) != plan(5)
# failed 1 of 4 tests

`

exports[`test/parser-stringify.js TAP outside-plan-start.tap bail > stringified flat 1`] = `
TAP version 13
ok 1
ok
ok 5
ok
2..5
# test count(4) != plan(5)
# failed 1 of 4 tests

`

exports[`test/parser-stringify.js TAP outside-plan-start.tap default settings > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
      "plan": Object {
        "end": 5,
        "start": 2,
      },
      "tapError": "id less than plan start",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 2,
    },
  ],
  Array [
    "comment",
    "# test count(4) != plan(5)\\n",
  ],
  Array [
    "comment",
    "# failed 1 of 4 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 4,
      "fail": 1,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 1,
          "ok": true,
          "plan": Object {
            "end": 5,
            "start": 2,
          },
          "tapError": "id less than plan start",
        },
      ],
      "ok": false,
      "pass": 4,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 2,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP outside-plan-start.tap default settings > stringified 1`] = `
TAP version 13
ok 1
ok
ok 5
ok
2..5
# test count(4) != plan(5)
# failed 1 of 4 tests

`

exports[`test/parser-stringify.js TAP outside-plan-start.tap default settings > stringified flat 1`] = `
TAP version 13
ok 1
ok
ok 5
ok
2..5
# test count(4) != plan(5)
# failed 1 of 4 tests

`

exports[`test/parser-stringify.js TAP outside-plan-start.tap strict > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
      "plan": Object {
        "end": 5,
        "start": 2,
      },
      "tapError": "id less than plan start",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 2,
    },
  ],
  Array [
    "comment",
    "# test count(4) != plan(5)\\n",
  ],
  Array [
    "comment",
    "# failed 1 of 4 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 4,
      "fail": 1,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 1,
          "ok": true,
          "plan": Object {
            "end": 5,
            "start": 2,
          },
          "tapError": "id less than plan start",
        },
      ],
      "ok": false,
      "pass": 4,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 2,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP outside-plan-start.tap strict > stringified 1`] = `
TAP version 13
ok 1
ok
ok 5
ok
2..5
# test count(4) != plan(5)
# failed 1 of 4 tests

`

exports[`test/parser-stringify.js TAP outside-plan-start.tap strict > stringified flat 1`] = `
TAP version 13
ok 1
ok
ok 5
ok
2..5
# test count(4) != plan(5)
# failed 1 of 4 tests

`

exports[`test/parser-stringify.js TAP outside-plan-start.tap strictBail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
      "plan": Object {
        "end": 5,
        "start": 2,
      },
      "tapError": "id less than plan start",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 2,
    },
  ],
  Array [
    "comment",
    "# test count(4) != plan(5)\\n",
  ],
  Array [
    "comment",
    "# failed 1 of 4 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 4,
      "fail": 1,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 1,
          "ok": true,
          "plan": Object {
            "end": 5,
            "start": 2,
          },
          "tapError": "id less than plan start",
        },
      ],
      "ok": false,
      "pass": 4,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 2,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP outside-plan-start.tap strictBail > stringified 1`] = `
TAP version 13
ok 1
ok
ok 5
ok
2..5
# test count(4) != plan(5)
# failed 1 of 4 tests

`

exports[`test/parser-stringify.js TAP outside-plan-start.tap strictBail > stringified flat 1`] = `
TAP version 13
ok 1
ok
ok 5
ok
2..5
# test count(4) != plan(5)
# failed 1 of 4 tests

`

exports[`test/parser-stringify.js TAP outside-plan.tap bail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "end": 3,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 234,
      "name": "pretty big",
      "ok": true,
      "plan": Object {
        "end": 3,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "name": "less big",
      "ok": true,
      "plan": Object {
        "end": 3,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "three",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# failed 2 of 3 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 3,
      "fail": 2,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 234,
          "name": "pretty big",
          "ok": true,
          "plan": Object {
            "end": 3,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
        Result {
          "fullname": "",
          "id": 5,
          "name": "less big",
          "ok": true,
          "plan": Object {
            "end": 3,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
      ],
      "ok": false,
      "pass": 3,
      "plan": FinalPlan {
        "comment": "",
        "end": 3,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP outside-plan.tap bail > stringified 1`] = `
TAP version 13
1..3
ok 234 - pretty big
ok 5 - less big
ok 3 - three
# failed 2 of 3 tests

`

exports[`test/parser-stringify.js TAP outside-plan.tap bail > stringified flat 1`] = `
TAP version 13
1..3
ok 234 - pretty big
ok 5 - less big
ok 3 - three
# failed 2 of 3 tests

`

exports[`test/parser-stringify.js TAP outside-plan.tap default settings > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "end": 3,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 234,
      "name": "pretty big",
      "ok": true,
      "plan": Object {
        "end": 3,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "name": "less big",
      "ok": true,
      "plan": Object {
        "end": 3,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "three",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# failed 2 of 3 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 3,
      "fail": 2,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 234,
          "name": "pretty big",
          "ok": true,
          "plan": Object {
            "end": 3,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
        Result {
          "fullname": "",
          "id": 5,
          "name": "less big",
          "ok": true,
          "plan": Object {
            "end": 3,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
      ],
      "ok": false,
      "pass": 3,
      "plan": FinalPlan {
        "comment": "",
        "end": 3,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP outside-plan.tap default settings > stringified 1`] = `
TAP version 13
1..3
ok 234 - pretty big
ok 5 - less big
ok 3 - three
# failed 2 of 3 tests

`

exports[`test/parser-stringify.js TAP outside-plan.tap default settings > stringified flat 1`] = `
TAP version 13
1..3
ok 234 - pretty big
ok 5 - less big
ok 3 - three
# failed 2 of 3 tests

`

exports[`test/parser-stringify.js TAP outside-plan.tap strict > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "end": 3,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 234,
      "name": "pretty big",
      "ok": true,
      "plan": Object {
        "end": 3,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "name": "less big",
      "ok": true,
      "plan": Object {
        "end": 3,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "three",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# failed 2 of 3 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 3,
      "fail": 2,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 234,
          "name": "pretty big",
          "ok": true,
          "plan": Object {
            "end": 3,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
        Result {
          "fullname": "",
          "id": 5,
          "name": "less big",
          "ok": true,
          "plan": Object {
            "end": 3,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
      ],
      "ok": false,
      "pass": 3,
      "plan": FinalPlan {
        "comment": "",
        "end": 3,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP outside-plan.tap strict > stringified 1`] = `
TAP version 13
1..3
ok 234 - pretty big
ok 5 - less big
ok 3 - three
# failed 2 of 3 tests

`

exports[`test/parser-stringify.js TAP outside-plan.tap strict > stringified flat 1`] = `
TAP version 13
1..3
ok 234 - pretty big
ok 5 - less big
ok 3 - three
# failed 2 of 3 tests

`

exports[`test/parser-stringify.js TAP outside-plan.tap strictBail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "end": 3,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 234,
      "name": "pretty big",
      "ok": true,
      "plan": Object {
        "end": 3,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "name": "less big",
      "ok": true,
      "plan": Object {
        "end": 3,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "three",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# failed 2 of 3 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 3,
      "fail": 2,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 234,
          "name": "pretty big",
          "ok": true,
          "plan": Object {
            "end": 3,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
        Result {
          "fullname": "",
          "id": 5,
          "name": "less big",
          "ok": true,
          "plan": Object {
            "end": 3,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
      ],
      "ok": false,
      "pass": 3,
      "plan": FinalPlan {
        "comment": "",
        "end": 3,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP outside-plan.tap strictBail > stringified 1`] = `
TAP version 13
1..3
ok 234 - pretty big
ok 5 - less big
ok 3 - three
# failed 2 of 3 tests

`

exports[`test/parser-stringify.js TAP outside-plan.tap strictBail > stringified flat 1`] = `
TAP version 13
1..3
ok 234 - pretty big
ok 5 - less big
ok 3 - three
# failed 2 of 3 tests

`

exports[`test/parser-stringify.js TAP perl-test2-buffered.tap bail > parsed 1`] = `
Array [
  Array [
    "comment",
    "# Seeded srand with seed '20160810' from local date.\\n",
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: empty\\n",
      ],
      Array [
        "plan",
        Object {
          "end": 0,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 0,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 0,
          "plan": FinalPlan {
            "comment": "",
            "end": 0,
            "skipAll": true,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "buffered": true,
      "fullname": "",
      "id": 1,
      "name": "empty",
      "ok": false,
    },
  ],
  Array [
    "bailout",
    "empty",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": "empty",
      "count": 1,
      "fail": 1,
      "failures": Array [
        Result {
          "buffered": true,
          "fullname": "",
          "id": 1,
          "name": "empty",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": null,
        "skipAll": false,
        "skipReason": "",
        "start": null,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP perl-test2-buffered.tap bail > stringified 1`] = `
# Seeded srand with seed '20160810' from local date.
# Subtest: empty
    1..0
not ok 1 - empty
Bail out! empty

`

exports[`test/parser-stringify.js TAP perl-test2-buffered.tap bail > stringified flat 1`] = `
# Seeded srand with seed '20160810' from local date.
# Subtest: empty
    1..0
not ok 1 - empty
Bail out! empty

`

exports[`test/parser-stringify.js TAP perl-test2-buffered.tap default settings > parsed 1`] = `
Array [
  Array [
    "comment",
    "# Seeded srand with seed '20160810' from local date.\\n",
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: empty\\n",
      ],
      Array [
        "plan",
        Object {
          "end": 0,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 0,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 0,
          "plan": FinalPlan {
            "comment": "",
            "end": 0,
            "skipAll": true,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "buffered": true,
      "fullname": "",
      "id": 1,
      "name": "empty",
      "ok": false,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: my_test\\n",
      ],
      Array [
        "assert",
        Result {
          "fullname": "my_test",
          "id": 1,
          "name": "subtest event A",
          "ok": true,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "my_test",
          "id": 2,
          "name": "subtest event B",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 2,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 2,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 2,
          "plan": FinalPlan {
            "comment": "",
            "end": 2,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "buffered": true,
      "fullname": "",
      "id": 2,
      "name": "my_test",
      "ok": true,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: my_test_plan\\n",
      ],
      Array [
        "plan",
        Object {
          "end": 2,
          "start": 1,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "my_test_plan",
          "id": 1,
          "name": "subtest event A",
          "ok": true,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "my_test_plan",
          "id": 2,
          "name": "subtest event B",
          "ok": true,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 2,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 2,
          "plan": FinalPlan {
            "comment": "",
            "end": 2,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "buffered": true,
      "fullname": "",
      "id": 3,
      "name": "my_test_plan",
      "ok": true,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: my_streamy_test\\n",
      ],
      Array [
        "assert",
        Result {
          "fullname": "my_streamy_test",
          "id": 1,
          "name": "subtest event A",
          "ok": true,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "my_streamy_test",
          "id": 2,
          "name": "subtest event B",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 2,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 2,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 2,
          "plan": FinalPlan {
            "comment": "",
            "end": 2,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "name": "Subtest: my_streamy_test",
      "ok": true,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: my_streamy_test_plan\\n",
      ],
      Array [
        "plan",
        Object {
          "end": 2,
          "start": 1,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "my_streamy_test_plan",
          "id": 1,
          "name": "subtest event A",
          "ok": true,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "my_streamy_test_plan",
          "id": 2,
          "name": "subtest event B",
          "ok": true,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 2,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 2,
          "plan": FinalPlan {
            "comment": "",
            "end": 2,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "name": "Subtest: my_streamy_test_plan",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# failed 1 of 5 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 5,
      "fail": 1,
      "failures": Array [
        Result {
          "buffered": true,
          "fullname": "",
          "id": 1,
          "name": "empty",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 4,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP perl-test2-buffered.tap default settings > stringified 1`] = `
# Seeded srand with seed '20160810' from local date.
# Subtest: empty
    1..0
not ok 1 - empty
# Subtest: my_test
    ok 1 - subtest event A
    ok 2 - subtest event B
    1..2
ok 2 - my_test
# Subtest: my_test_plan
    1..2
    ok 1 - subtest event A
    ok 2 - subtest event B
ok 3 - my_test_plan
# Subtest: my_streamy_test
    ok 1 - subtest event A
    ok 2 - subtest event B
    1..2
ok 4 - Subtest: my_streamy_test
# Subtest: my_streamy_test_plan
    1..2
    ok 1 - subtest event A
    ok 2 - subtest event B
ok 5 - Subtest: my_streamy_test_plan
1..5
# failed 1 of 5 tests

`

exports[`test/parser-stringify.js TAP perl-test2-buffered.tap default settings > stringified flat 1`] = `
# Seeded srand with seed '20160810' from local date.
# Subtest: empty
    1..0
not ok 1 - empty
# Subtest: my_test
    ok 1 - subtest event A
    ok 2 - subtest event B
    1..2
ok 2 - my_test
# Subtest: my_test_plan
    1..2
    ok 1 - subtest event A
    ok 2 - subtest event B
ok 3 - my_test_plan
# Subtest: my_streamy_test
    ok 1 - subtest event A
    ok 2 - subtest event B
    1..2
ok 4 - Subtest: my_streamy_test
# Subtest: my_streamy_test_plan
    1..2
    ok 1 - subtest event A
    ok 2 - subtest event B
ok 5 - Subtest: my_streamy_test_plan
1..5
# failed 1 of 5 tests

`

exports[`test/parser-stringify.js TAP perl-test2-buffered.tap strict > parsed 1`] = `
Array [
  Array [
    "comment",
    "# Seeded srand with seed '20160810' from local date.\\n",
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: empty\\n",
      ],
      Array [
        "plan",
        Object {
          "end": 0,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 0,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 0,
          "plan": FinalPlan {
            "comment": "",
            "end": 0,
            "skipAll": true,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "buffered": true,
      "fullname": "",
      "id": 1,
      "name": "empty",
      "ok": false,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: my_test\\n",
      ],
      Array [
        "assert",
        Result {
          "fullname": "my_test",
          "id": 1,
          "name": "subtest event A",
          "ok": true,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "my_test",
          "id": 2,
          "name": "subtest event B",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 2,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 2,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 2,
          "plan": FinalPlan {
            "comment": "",
            "end": 2,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "buffered": true,
      "fullname": "",
      "id": 2,
      "name": "my_test",
      "ok": true,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: my_test_plan\\n",
      ],
      Array [
        "plan",
        Object {
          "end": 2,
          "start": 1,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "my_test_plan",
          "id": 1,
          "name": "subtest event A",
          "ok": true,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "my_test_plan",
          "id": 2,
          "name": "subtest event B",
          "ok": true,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 2,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 2,
          "plan": FinalPlan {
            "comment": "",
            "end": 2,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "buffered": true,
      "fullname": "",
      "id": 3,
      "name": "my_test_plan",
      "ok": true,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: my_streamy_test\\n",
      ],
      Array [
        "assert",
        Result {
          "fullname": "my_streamy_test",
          "id": 1,
          "name": "subtest event A",
          "ok": true,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "my_streamy_test",
          "id": 2,
          "name": "subtest event B",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 2,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 2,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 2,
          "plan": FinalPlan {
            "comment": "",
            "end": 2,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "name": "Subtest: my_streamy_test",
      "ok": true,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: my_streamy_test_plan\\n",
      ],
      Array [
        "plan",
        Object {
          "end": 2,
          "start": 1,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "my_streamy_test_plan",
          "id": 1,
          "name": "subtest event A",
          "ok": true,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "my_streamy_test_plan",
          "id": 2,
          "name": "subtest event B",
          "ok": true,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 2,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 2,
          "plan": FinalPlan {
            "comment": "",
            "end": 2,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "name": "Subtest: my_streamy_test_plan",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# failed 1 of 5 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 5,
      "fail": 1,
      "failures": Array [
        Result {
          "buffered": true,
          "fullname": "",
          "id": 1,
          "name": "empty",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 4,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP perl-test2-buffered.tap strict > stringified 1`] = `
# Seeded srand with seed '20160810' from local date.
# Subtest: empty
    1..0
not ok 1 - empty
# Subtest: my_test
    ok 1 - subtest event A
    ok 2 - subtest event B
    1..2
ok 2 - my_test
# Subtest: my_test_plan
    1..2
    ok 1 - subtest event A
    ok 2 - subtest event B
ok 3 - my_test_plan
# Subtest: my_streamy_test
    ok 1 - subtest event A
    ok 2 - subtest event B
    1..2
ok 4 - Subtest: my_streamy_test
# Subtest: my_streamy_test_plan
    1..2
    ok 1 - subtest event A
    ok 2 - subtest event B
ok 5 - Subtest: my_streamy_test_plan
1..5
# failed 1 of 5 tests

`

exports[`test/parser-stringify.js TAP perl-test2-buffered.tap strict > stringified flat 1`] = `
# Seeded srand with seed '20160810' from local date.
# Subtest: empty
    1..0
not ok 1 - empty
# Subtest: my_test
    ok 1 - subtest event A
    ok 2 - subtest event B
    1..2
ok 2 - my_test
# Subtest: my_test_plan
    1..2
    ok 1 - subtest event A
    ok 2 - subtest event B
ok 3 - my_test_plan
# Subtest: my_streamy_test
    ok 1 - subtest event A
    ok 2 - subtest event B
    1..2
ok 4 - Subtest: my_streamy_test
# Subtest: my_streamy_test_plan
    1..2
    ok 1 - subtest event A
    ok 2 - subtest event B
ok 5 - Subtest: my_streamy_test_plan
1..5
# failed 1 of 5 tests

`

exports[`test/parser-stringify.js TAP perl-test2-buffered.tap strictBail > parsed 1`] = `
Array [
  Array [
    "comment",
    "# Seeded srand with seed '20160810' from local date.\\n",
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: empty\\n",
      ],
      Array [
        "plan",
        Object {
          "end": 0,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 0,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 0,
          "plan": FinalPlan {
            "comment": "",
            "end": 0,
            "skipAll": true,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "buffered": true,
      "fullname": "",
      "id": 1,
      "name": "empty",
      "ok": false,
    },
  ],
  Array [
    "bailout",
    "empty",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": "empty",
      "count": 1,
      "fail": 1,
      "failures": Array [
        Result {
          "buffered": true,
          "fullname": "",
          "id": 1,
          "name": "empty",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": null,
        "skipAll": false,
        "skipReason": "",
        "start": null,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP perl-test2-buffered.tap strictBail > stringified 1`] = `
# Seeded srand with seed '20160810' from local date.
# Subtest: empty
    1..0
not ok 1 - empty
Bail out! empty

`

exports[`test/parser-stringify.js TAP perl-test2-buffered.tap strictBail > stringified flat 1`] = `
# Seeded srand with seed '20160810' from local date.
# Subtest: empty
    1..0
not ok 1 - empty
Bail out! empty

`

exports[`test/parser-stringify.js TAP perl-test2-streamed.tap bail > parsed 1`] = `
Array [
  Array [
    "comment",
    "# Seeded srand with seed '20160809' from local date.\\n",
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: my_streamy_test\\n",
      ],
      Array [
        "assert",
        Result {
          "fullname": "my_streamy_test",
          "id": 1,
          "name": "subtest event A",
          "ok": true,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "my_streamy_test",
          "id": 2,
          "name": "subtest event B",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 2,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 2,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 2,
          "plan": FinalPlan {
            "comment": "",
            "end": 2,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "Subtest: my_streamy_test",
      "ok": true,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: my_streamy_test_plan\\n",
      ],
      Array [
        "plan",
        Object {
          "end": 2,
          "start": 1,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "my_streamy_test_plan",
          "id": 1,
          "name": "subtest event A",
          "ok": true,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "my_streamy_test_plan",
          "id": 2,
          "name": "subtest event B",
          "ok": true,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 2,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 2,
          "plan": FinalPlan {
            "comment": "",
            "end": 2,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "Subtest: my_streamy_test_plan",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 2,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 2,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 2,
      "plan": FinalPlan {
        "comment": "",
        "end": 2,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP perl-test2-streamed.tap bail > stringified 1`] = `
# Seeded srand with seed '20160809' from local date.
# Subtest: my_streamy_test
    ok 1 - subtest event A
    ok 2 - subtest event B
    1..2
ok 1 - Subtest: my_streamy_test
# Subtest: my_streamy_test_plan
    1..2
    ok 1 - subtest event A
    ok 2 - subtest event B
ok 2 - Subtest: my_streamy_test_plan
1..2

`

exports[`test/parser-stringify.js TAP perl-test2-streamed.tap bail > stringified flat 1`] = `
# Seeded srand with seed '20160809' from local date.
# Subtest: my_streamy_test
    ok 1 - subtest event A
    ok 2 - subtest event B
    1..2
ok 1 - Subtest: my_streamy_test
# Subtest: my_streamy_test_plan
    1..2
    ok 1 - subtest event A
    ok 2 - subtest event B
ok 2 - Subtest: my_streamy_test_plan
1..2

`

exports[`test/parser-stringify.js TAP perl-test2-streamed.tap default settings > parsed 1`] = `
Array [
  Array [
    "comment",
    "# Seeded srand with seed '20160809' from local date.\\n",
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: my_streamy_test\\n",
      ],
      Array [
        "assert",
        Result {
          "fullname": "my_streamy_test",
          "id": 1,
          "name": "subtest event A",
          "ok": true,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "my_streamy_test",
          "id": 2,
          "name": "subtest event B",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 2,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 2,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 2,
          "plan": FinalPlan {
            "comment": "",
            "end": 2,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "Subtest: my_streamy_test",
      "ok": true,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: my_streamy_test_plan\\n",
      ],
      Array [
        "plan",
        Object {
          "end": 2,
          "start": 1,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "my_streamy_test_plan",
          "id": 1,
          "name": "subtest event A",
          "ok": true,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "my_streamy_test_plan",
          "id": 2,
          "name": "subtest event B",
          "ok": true,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 2,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 2,
          "plan": FinalPlan {
            "comment": "",
            "end": 2,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "Subtest: my_streamy_test_plan",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 2,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 2,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 2,
      "plan": FinalPlan {
        "comment": "",
        "end": 2,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP perl-test2-streamed.tap default settings > stringified 1`] = `
# Seeded srand with seed '20160809' from local date.
# Subtest: my_streamy_test
    ok 1 - subtest event A
    ok 2 - subtest event B
    1..2
ok 1 - Subtest: my_streamy_test
# Subtest: my_streamy_test_plan
    1..2
    ok 1 - subtest event A
    ok 2 - subtest event B
ok 2 - Subtest: my_streamy_test_plan
1..2

`

exports[`test/parser-stringify.js TAP perl-test2-streamed.tap default settings > stringified flat 1`] = `
# Seeded srand with seed '20160809' from local date.
# Subtest: my_streamy_test
    ok 1 - subtest event A
    ok 2 - subtest event B
    1..2
ok 1 - Subtest: my_streamy_test
# Subtest: my_streamy_test_plan
    1..2
    ok 1 - subtest event A
    ok 2 - subtest event B
ok 2 - Subtest: my_streamy_test_plan
1..2

`

exports[`test/parser-stringify.js TAP perl-test2-streamed.tap strict > parsed 1`] = `
Array [
  Array [
    "comment",
    "# Seeded srand with seed '20160809' from local date.\\n",
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: my_streamy_test\\n",
      ],
      Array [
        "assert",
        Result {
          "fullname": "my_streamy_test",
          "id": 1,
          "name": "subtest event A",
          "ok": true,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "my_streamy_test",
          "id": 2,
          "name": "subtest event B",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 2,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 2,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 2,
          "plan": FinalPlan {
            "comment": "",
            "end": 2,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "Subtest: my_streamy_test",
      "ok": true,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: my_streamy_test_plan\\n",
      ],
      Array [
        "plan",
        Object {
          "end": 2,
          "start": 1,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "my_streamy_test_plan",
          "id": 1,
          "name": "subtest event A",
          "ok": true,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "my_streamy_test_plan",
          "id": 2,
          "name": "subtest event B",
          "ok": true,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 2,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 2,
          "plan": FinalPlan {
            "comment": "",
            "end": 2,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "Subtest: my_streamy_test_plan",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 2,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 2,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 2,
      "plan": FinalPlan {
        "comment": "",
        "end": 2,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP perl-test2-streamed.tap strict > stringified 1`] = `
# Seeded srand with seed '20160809' from local date.
# Subtest: my_streamy_test
    ok 1 - subtest event A
    ok 2 - subtest event B
    1..2
ok 1 - Subtest: my_streamy_test
# Subtest: my_streamy_test_plan
    1..2
    ok 1 - subtest event A
    ok 2 - subtest event B
ok 2 - Subtest: my_streamy_test_plan
1..2

`

exports[`test/parser-stringify.js TAP perl-test2-streamed.tap strict > stringified flat 1`] = `
# Seeded srand with seed '20160809' from local date.
# Subtest: my_streamy_test
    ok 1 - subtest event A
    ok 2 - subtest event B
    1..2
ok 1 - Subtest: my_streamy_test
# Subtest: my_streamy_test_plan
    1..2
    ok 1 - subtest event A
    ok 2 - subtest event B
ok 2 - Subtest: my_streamy_test_plan
1..2

`

exports[`test/parser-stringify.js TAP perl-test2-streamed.tap strictBail > parsed 1`] = `
Array [
  Array [
    "comment",
    "# Seeded srand with seed '20160809' from local date.\\n",
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: my_streamy_test\\n",
      ],
      Array [
        "assert",
        Result {
          "fullname": "my_streamy_test",
          "id": 1,
          "name": "subtest event A",
          "ok": true,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "my_streamy_test",
          "id": 2,
          "name": "subtest event B",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 2,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 2,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 2,
          "plan": FinalPlan {
            "comment": "",
            "end": 2,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "Subtest: my_streamy_test",
      "ok": true,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: my_streamy_test_plan\\n",
      ],
      Array [
        "plan",
        Object {
          "end": 2,
          "start": 1,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "my_streamy_test_plan",
          "id": 1,
          "name": "subtest event A",
          "ok": true,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "my_streamy_test_plan",
          "id": 2,
          "name": "subtest event B",
          "ok": true,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 2,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 2,
          "plan": FinalPlan {
            "comment": "",
            "end": 2,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "Subtest: my_streamy_test_plan",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 2,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 2,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 2,
      "plan": FinalPlan {
        "comment": "",
        "end": 2,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP perl-test2-streamed.tap strictBail > stringified 1`] = `
# Seeded srand with seed '20160809' from local date.
# Subtest: my_streamy_test
    ok 1 - subtest event A
    ok 2 - subtest event B
    1..2
ok 1 - Subtest: my_streamy_test
# Subtest: my_streamy_test_plan
    1..2
    ok 1 - subtest event A
    ok 2 - subtest event B
ok 2 - Subtest: my_streamy_test_plan
1..2

`

exports[`test/parser-stringify.js TAP perl-test2-streamed.tap strictBail > stringified flat 1`] = `
# Seeded srand with seed '20160809' from local date.
# Subtest: my_streamy_test
    ok 1 - subtest event A
    ok 2 - subtest event B
    1..2
ok 1 - Subtest: my_streamy_test
# Subtest: my_streamy_test_plan
    1..2
    ok 1 - subtest event A
    ok 2 - subtest event B
ok 2 - Subtest: my_streamy_test_plan
1..2

`

exports[`test/parser-stringify.js TAP plan-escape.tap bail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "comment": "hash # slash \\\\ noesc hash # noesc slash \\\\",
      "end": 0,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 0,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "hash # slash \\\\ noesc hash # noesc slash \\\\",
        "end": 0,
        "skipAll": true,
        "skipReason": "hash # slash \\\\ noesc hash # noesc slash \\\\",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP plan-escape.tap bail > stringified 1`] = `
TAP version 13
1..0 # hash \\# slash \\\\ noesc hash \\# noesc slash \\\\

`

exports[`test/parser-stringify.js TAP plan-escape.tap bail > stringified flat 1`] = `
TAP version 13
1..0 # hash \\# slash \\\\ noesc hash \\# noesc slash \\\\

`

exports[`test/parser-stringify.js TAP plan-escape.tap default settings > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "comment": "hash # slash \\\\ noesc hash # noesc slash \\\\",
      "end": 0,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 0,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "hash # slash \\\\ noesc hash # noesc slash \\\\",
        "end": 0,
        "skipAll": true,
        "skipReason": "hash # slash \\\\ noesc hash # noesc slash \\\\",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP plan-escape.tap default settings > stringified 1`] = `
TAP version 13
1..0 # hash \\# slash \\\\ noesc hash \\# noesc slash \\\\

`

exports[`test/parser-stringify.js TAP plan-escape.tap default settings > stringified flat 1`] = `
TAP version 13
1..0 # hash \\# slash \\\\ noesc hash \\# noesc slash \\\\

`

exports[`test/parser-stringify.js TAP plan-escape.tap strict > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "comment": "hash # slash \\\\ noesc hash # noesc slash \\\\",
      "end": 0,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 0,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "hash # slash \\\\ noesc hash # noesc slash \\\\",
        "end": 0,
        "skipAll": true,
        "skipReason": "hash # slash \\\\ noesc hash # noesc slash \\\\",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP plan-escape.tap strict > stringified 1`] = `
TAP version 13
1..0 # hash \\# slash \\\\ noesc hash \\# noesc slash \\\\

`

exports[`test/parser-stringify.js TAP plan-escape.tap strict > stringified flat 1`] = `
TAP version 13
1..0 # hash \\# slash \\\\ noesc hash \\# noesc slash \\\\

`

exports[`test/parser-stringify.js TAP plan-escape.tap strictBail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "comment": "hash # slash \\\\ noesc hash # noesc slash \\\\",
      "end": 0,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 0,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "hash # slash \\\\ noesc hash # noesc slash \\\\",
        "end": 0,
        "skipAll": true,
        "skipReason": "hash # slash \\\\ noesc hash # noesc slash \\\\",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP plan-escape.tap strictBail > stringified 1`] = `
TAP version 13
1..0 # hash \\# slash \\\\ noesc hash \\# noesc slash \\\\

`

exports[`test/parser-stringify.js TAP plan-escape.tap strictBail > stringified flat 1`] = `
TAP version 13
1..0 # hash \\# slash \\\\ noesc hash \\# noesc slash \\\\

`

exports[`test/parser-stringify.js TAP plan-in-bad-places-post.tap bail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: subtest\\n",
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "subtest",
          "ok": true,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "buffered": true,
      "fullname": "",
      "name": "subtest",
      "ok": true,
    },
  ],
  Array [
    "extra",
    "1..99\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "name": "yaml",
      "ok": true,
    },
  ],
  Array [
    "extra",
    String(
        ---
        ok: lamy
      
    ),
  ],
  Array [
    "plan",
    Object {
      "end": 99,
      "start": 1,
    },
  ],
  Array [
    "extra",
    "  ...\\n",
  ],
  Array [
    "extra",
    "1..2\\n",
  ],
  Array [
    "extra",
    "1..2\\n",
  ],
  Array [
    "comment",
    "# test count(2) != plan(99)\\n",
  ],
  Array [
    "comment",
    "# failed 1 of 2 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 2,
      "fail": 1,
      "failures": Array [
        Object {
          "tapError": "incorrect number of tests",
        },
      ],
      "ok": false,
      "pass": 2,
      "plan": FinalPlan {
        "comment": "",
        "end": 99,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP plan-in-bad-places-post.tap bail > stringified 1`] = `
TAP version 13
# Subtest: subtest
    1..1
    ok
ok - subtest
1..99
ok - yaml
  ---
  ok: lamy
1..99
  ...
1..2
1..2
# test count(2) != plan(99)
# failed 1 of 2 tests

`

exports[`test/parser-stringify.js TAP plan-in-bad-places-post.tap bail > stringified flat 1`] = `
TAP version 13
# Subtest: subtest
    1..1
    ok
ok - subtest
1..99
ok - yaml
  ---
  ok: lamy
1..99
  ...
1..2
1..2
# test count(2) != plan(99)
# failed 1 of 2 tests

`

exports[`test/parser-stringify.js TAP plan-in-bad-places-post.tap default settings > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: subtest\\n",
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "subtest",
          "ok": true,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "buffered": true,
      "fullname": "",
      "name": "subtest",
      "ok": true,
    },
  ],
  Array [
    "extra",
    "1..99\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "name": "yaml",
      "ok": true,
    },
  ],
  Array [
    "extra",
    String(
        ---
        ok: lamy
      
    ),
  ],
  Array [
    "plan",
    Object {
      "end": 99,
      "start": 1,
    },
  ],
  Array [
    "extra",
    "  ...\\n",
  ],
  Array [
    "extra",
    "1..2\\n",
  ],
  Array [
    "extra",
    "1..2\\n",
  ],
  Array [
    "comment",
    "# test count(2) != plan(99)\\n",
  ],
  Array [
    "comment",
    "# failed 1 of 2 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 2,
      "fail": 1,
      "failures": Array [
        Object {
          "tapError": "incorrect number of tests",
        },
      ],
      "ok": false,
      "pass": 2,
      "plan": FinalPlan {
        "comment": "",
        "end": 99,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP plan-in-bad-places-post.tap default settings > stringified 1`] = `
TAP version 13
# Subtest: subtest
    1..1
    ok
ok - subtest
1..99
ok - yaml
  ---
  ok: lamy
1..99
  ...
1..2
1..2
# test count(2) != plan(99)
# failed 1 of 2 tests

`

exports[`test/parser-stringify.js TAP plan-in-bad-places-post.tap default settings > stringified flat 1`] = `
TAP version 13
# Subtest: subtest
    1..1
    ok
ok - subtest
1..99
ok - yaml
  ---
  ok: lamy
1..99
  ...
1..2
1..2
# test count(2) != plan(99)
# failed 1 of 2 tests

`

exports[`test/parser-stringify.js TAP plan-in-bad-places-post.tap strict > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: subtest\\n",
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "subtest",
          "ok": true,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "buffered": true,
      "fullname": "",
      "name": "subtest",
      "ok": true,
    },
  ],
  Array [
    "extra",
    "1..99\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "name": "yaml",
      "ok": true,
    },
  ],
  Array [
    "extra",
    String(
        ---
        ok: lamy
      
    ),
  ],
  Array [
    "plan",
    Object {
      "end": 99,
      "start": 1,
    },
  ],
  Array [
    "extra",
    "  ...\\n",
  ],
  Array [
    "extra",
    "1..2\\n",
  ],
  Array [
    "extra",
    "1..2\\n",
  ],
  Array [
    "comment",
    "# test count(2) != plan(99)\\n",
  ],
  Array [
    "comment",
    "# failed 5 of 2 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 2,
      "fail": 5,
      "failures": Array [
        Object {
          "data": "1..99\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": String(
              ---
              ok: lamy
            
          ),
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "  ...\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "1..2\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "1..2\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
      ],
      "ok": false,
      "pass": 2,
      "plan": FinalPlan {
        "comment": "",
        "end": 99,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP plan-in-bad-places-post.tap strict > stringified 1`] = `
TAP version 13
# Subtest: subtest
    1..1
    ok
ok - subtest
1..99
ok - yaml
  ---
  ok: lamy
1..99
  ...
1..2
1..2
# test count(2) != plan(99)
# failed 5 of 2 tests

`

exports[`test/parser-stringify.js TAP plan-in-bad-places-post.tap strict > stringified flat 1`] = `
TAP version 13
# Subtest: subtest
    1..1
    ok
ok - subtest
1..99
ok - yaml
  ---
  ok: lamy
1..99
  ...
1..2
1..2
# test count(2) != plan(99)
# failed 5 of 2 tests

`

exports[`test/parser-stringify.js TAP plan-in-bad-places-post.tap strictBail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: subtest\\n",
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "subtest",
          "ok": true,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "buffered": true,
      "fullname": "",
      "name": "subtest",
      "ok": true,
    },
  ],
  Array [
    "extra",
    "1..99\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "name": "yaml",
      "ok": true,
    },
  ],
  Array [
    "extra",
    String(
        ---
        ok: lamy
      
    ),
  ],
  Array [
    "plan",
    Object {
      "end": 99,
      "start": 1,
    },
  ],
  Array [
    "extra",
    "  ...\\n",
  ],
  Array [
    "extra",
    "1..2\\n",
  ],
  Array [
    "extra",
    "1..2\\n",
  ],
  Array [
    "comment",
    "# test count(2) != plan(99)\\n",
  ],
  Array [
    "comment",
    "# failed 5 of 2 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 2,
      "fail": 5,
      "failures": Array [
        Object {
          "data": "1..99\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": String(
              ---
              ok: lamy
            
          ),
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "  ...\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "1..2\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "1..2\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
      ],
      "ok": false,
      "pass": 2,
      "plan": FinalPlan {
        "comment": "",
        "end": 99,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP plan-in-bad-places-post.tap strictBail > stringified 1`] = `
TAP version 13
# Subtest: subtest
    1..1
    ok
ok - subtest
1..99
ok - yaml
  ---
  ok: lamy
1..99
  ...
1..2
1..2
# test count(2) != plan(99)
# failed 5 of 2 tests

`

exports[`test/parser-stringify.js TAP plan-in-bad-places-post.tap strictBail > stringified flat 1`] = `
TAP version 13
# Subtest: subtest
    1..1
    ok
ok - subtest
1..99
ok - yaml
  ---
  ok: lamy
1..99
  ...
1..2
1..2
# test count(2) != plan(99)
# failed 5 of 2 tests

`

exports[`test/parser-stringify.js TAP plan-in-bad-places-pre.tap bail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "end": 2,
      "start": 1,
    },
  ],
  Array [
    "extra",
    "1..2\\n",
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: subtest\\n",
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "subtest",
          "ok": true,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "buffered": true,
      "fullname": "",
      "name": "subtest",
      "ok": true,
    },
  ],
  Array [
    "extra",
    "1..99\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "name": "yaml",
      "ok": true,
    },
  ],
  Array [
    "extra",
    String(
        ---
        ok: lamy
      
    ),
  ],
  Array [
    "extra",
    "1..99\\n",
  ],
  Array [
    "extra",
    "  ...\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 2,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 2,
      "plan": FinalPlan {
        "comment": "",
        "end": 2,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP plan-in-bad-places-pre.tap bail > stringified 1`] = `
TAP version 13
1..2
1..2
# Subtest: subtest
    1..1
    ok
ok - subtest
1..99
ok - yaml
  ---
  ok: lamy
1..99
  ...

`

exports[`test/parser-stringify.js TAP plan-in-bad-places-pre.tap bail > stringified flat 1`] = `
TAP version 13
1..2
1..2
# Subtest: subtest
    1..1
    ok
ok - subtest
1..99
ok - yaml
  ---
  ok: lamy
1..99
  ...

`

exports[`test/parser-stringify.js TAP plan-in-bad-places-pre.tap default settings > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "end": 2,
      "start": 1,
    },
  ],
  Array [
    "extra",
    "1..2\\n",
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: subtest\\n",
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "subtest",
          "ok": true,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "buffered": true,
      "fullname": "",
      "name": "subtest",
      "ok": true,
    },
  ],
  Array [
    "extra",
    "1..99\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "name": "yaml",
      "ok": true,
    },
  ],
  Array [
    "extra",
    String(
        ---
        ok: lamy
      
    ),
  ],
  Array [
    "extra",
    "1..99\\n",
  ],
  Array [
    "extra",
    "  ...\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 2,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 2,
      "plan": FinalPlan {
        "comment": "",
        "end": 2,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP plan-in-bad-places-pre.tap default settings > stringified 1`] = `
TAP version 13
1..2
1..2
# Subtest: subtest
    1..1
    ok
ok - subtest
1..99
ok - yaml
  ---
  ok: lamy
1..99
  ...

`

exports[`test/parser-stringify.js TAP plan-in-bad-places-pre.tap default settings > stringified flat 1`] = `
TAP version 13
1..2
1..2
# Subtest: subtest
    1..1
    ok
ok - subtest
1..99
ok - yaml
  ---
  ok: lamy
1..99
  ...

`

exports[`test/parser-stringify.js TAP plan-in-bad-places-pre.tap strict > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "end": 2,
      "start": 1,
    },
  ],
  Array [
    "extra",
    "1..2\\n",
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: subtest\\n",
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "subtest",
          "ok": true,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "buffered": true,
      "fullname": "",
      "name": "subtest",
      "ok": true,
    },
  ],
  Array [
    "extra",
    "1..99\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "name": "yaml",
      "ok": true,
    },
  ],
  Array [
    "extra",
    String(
        ---
        ok: lamy
      
    ),
  ],
  Array [
    "extra",
    "1..99\\n",
  ],
  Array [
    "extra",
    "  ...\\n",
  ],
  Array [
    "comment",
    "# failed 5 of 2 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 2,
      "fail": 5,
      "failures": Array [
        Object {
          "data": "1..2\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "1..99\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": String(
              ---
              ok: lamy
            
          ),
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "1..99\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "  ...\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
      ],
      "ok": false,
      "pass": 2,
      "plan": FinalPlan {
        "comment": "",
        "end": 2,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP plan-in-bad-places-pre.tap strict > stringified 1`] = `
TAP version 13
1..2
1..2
# Subtest: subtest
    1..1
    ok
ok - subtest
1..99
ok - yaml
  ---
  ok: lamy
1..99
  ...
# failed 5 of 2 tests

`

exports[`test/parser-stringify.js TAP plan-in-bad-places-pre.tap strict > stringified flat 1`] = `
TAP version 13
1..2
1..2
# Subtest: subtest
    1..1
    ok
ok - subtest
1..99
ok - yaml
  ---
  ok: lamy
1..99
  ...
# failed 5 of 2 tests

`

exports[`test/parser-stringify.js TAP plan-in-bad-places-pre.tap strictBail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "end": 2,
      "start": 1,
    },
  ],
  Array [
    "extra",
    "1..2\\n",
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: subtest\\n",
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "subtest",
          "ok": true,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "buffered": true,
      "fullname": "",
      "name": "subtest",
      "ok": true,
    },
  ],
  Array [
    "extra",
    "1..99\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "name": "yaml",
      "ok": true,
    },
  ],
  Array [
    "extra",
    String(
        ---
        ok: lamy
      
    ),
  ],
  Array [
    "extra",
    "1..99\\n",
  ],
  Array [
    "extra",
    "  ...\\n",
  ],
  Array [
    "comment",
    "# failed 5 of 2 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 2,
      "fail": 5,
      "failures": Array [
        Object {
          "data": "1..2\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "1..99\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": String(
              ---
              ok: lamy
            
          ),
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "1..99\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "  ...\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
      ],
      "ok": false,
      "pass": 2,
      "plan": FinalPlan {
        "comment": "",
        "end": 2,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP plan-in-bad-places-pre.tap strictBail > stringified 1`] = `
TAP version 13
1..2
1..2
# Subtest: subtest
    1..1
    ok
ok - subtest
1..99
ok - yaml
  ---
  ok: lamy
1..99
  ...
# failed 5 of 2 tests

`

exports[`test/parser-stringify.js TAP plan-in-bad-places-pre.tap strictBail > stringified flat 1`] = `
TAP version 13
1..2
1..2
# Subtest: subtest
    1..1
    ok
ok - subtest
1..99
ok - yaml
  ---
  ok: lamy
1..99
  ...
# failed 5 of 2 tests

`

exports[`test/parser-stringify.js TAP plan-invalid-strict.tap bail > parsed 1`] = `
Array [
  Array [
    "pragma",
    "strict",
    true,
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# failed 1 test\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 1,
      "failures": Array [
        Object {
          "plan": Object {
            "end": 1,
            "start": 100,
          },
          "tapError": "plan end cannot be less than plan start",
        },
      ],
      "ok": false,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP plan-invalid-strict.tap bail > stringified 1`] = `
pragma +strict
ok 1
1..1
# failed 1 test

`

exports[`test/parser-stringify.js TAP plan-invalid-strict.tap bail > stringified flat 1`] = `
pragma +strict
ok 1
1..1
# failed 1 test

`

exports[`test/parser-stringify.js TAP plan-invalid-strict.tap default settings > parsed 1`] = `
Array [
  Array [
    "pragma",
    "strict",
    true,
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# failed 1 test\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 1,
      "failures": Array [
        Object {
          "plan": Object {
            "end": 1,
            "start": 100,
          },
          "tapError": "plan end cannot be less than plan start",
        },
      ],
      "ok": false,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP plan-invalid-strict.tap default settings > stringified 1`] = `
pragma +strict
ok 1
1..1
# failed 1 test

`

exports[`test/parser-stringify.js TAP plan-invalid-strict.tap default settings > stringified flat 1`] = `
pragma +strict
ok 1
1..1
# failed 1 test

`

exports[`test/parser-stringify.js TAP plan-invalid-strict.tap strict > parsed 1`] = `
Array [
  Array [
    "pragma",
    "strict",
    true,
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# failed 1 test\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 1,
      "failures": Array [
        Object {
          "plan": Object {
            "end": 1,
            "start": 100,
          },
          "tapError": "plan end cannot be less than plan start",
        },
      ],
      "ok": false,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP plan-invalid-strict.tap strict > stringified 1`] = `
pragma +strict
ok 1
1..1
# failed 1 test

`

exports[`test/parser-stringify.js TAP plan-invalid-strict.tap strict > stringified flat 1`] = `
pragma +strict
ok 1
1..1
# failed 1 test

`

exports[`test/parser-stringify.js TAP plan-invalid-strict.tap strictBail > parsed 1`] = `
Array [
  Array [
    "pragma",
    "strict",
    true,
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# failed 1 test\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 1,
      "failures": Array [
        Object {
          "plan": Object {
            "end": 1,
            "start": 100,
          },
          "tapError": "plan end cannot be less than plan start",
        },
      ],
      "ok": false,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP plan-invalid-strict.tap strictBail > stringified 1`] = `
pragma +strict
ok 1
1..1
# failed 1 test

`

exports[`test/parser-stringify.js TAP plan-invalid-strict.tap strictBail > stringified flat 1`] = `
pragma +strict
ok 1
1..1
# failed 1 test

`

exports[`test/parser-stringify.js TAP plan-invalid.tap bail > parsed 1`] = `
Array [
  Array [
    "extra",
    "100..1\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP plan-invalid.tap bail > stringified 1`] = `
100..1
ok 1
1..1

`

exports[`test/parser-stringify.js TAP plan-invalid.tap bail > stringified flat 1`] = `
100..1
ok 1
1..1

`

exports[`test/parser-stringify.js TAP plan-invalid.tap default settings > parsed 1`] = `
Array [
  Array [
    "extra",
    "100..1\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP plan-invalid.tap default settings > stringified 1`] = `
100..1
ok 1
1..1

`

exports[`test/parser-stringify.js TAP plan-invalid.tap default settings > stringified flat 1`] = `
100..1
ok 1
1..1

`

exports[`test/parser-stringify.js TAP plan-invalid.tap strict > parsed 1`] = `
Array [
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# failed 1 test\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 1,
      "failures": Array [
        Object {
          "plan": Object {
            "end": 1,
            "start": 100,
          },
          "tapError": "plan end cannot be less than plan start",
        },
      ],
      "ok": false,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP plan-invalid.tap strict > stringified 1`] = `
ok 1
1..1
# failed 1 test

`

exports[`test/parser-stringify.js TAP plan-invalid.tap strict > stringified flat 1`] = `
ok 1
1..1
# failed 1 test

`

exports[`test/parser-stringify.js TAP plan-invalid.tap strictBail > parsed 1`] = `
Array [
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# failed 1 test\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 1,
      "failures": Array [
        Object {
          "plan": Object {
            "end": 1,
            "start": 100,
          },
          "tapError": "plan end cannot be less than plan start",
        },
      ],
      "ok": false,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP plan-invalid.tap strictBail > stringified 1`] = `
ok 1
1..1
# failed 1 test

`

exports[`test/parser-stringify.js TAP plan-invalid.tap strictBail > stringified flat 1`] = `
ok 1
1..1
# failed 1 test

`

exports[`test/parser-stringify.js TAP pragma-after-failure.tap bail > parsed 1`] = `
Array [
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": false,
    },
  ],
  Array [
    "bailout",
    "",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": true,
      "count": 1,
      "fail": 1,
      "failures": Array [
        Result {
          "fullname": "",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": null,
        "skipAll": false,
        "skipReason": "",
        "start": null,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP pragma-after-failure.tap bail > stringified 1`] = `
not ok
Bail out!

`

exports[`test/parser-stringify.js TAP pragma-after-failure.tap bail > stringified flat 1`] = `
not ok
Bail out!

`

exports[`test/parser-stringify.js TAP pragma-after-failure.tap default settings > parsed 1`] = `
Array [
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": false,
    },
  ],
  Array [
    "pragma",
    "custom",
    true,
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 2,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# failed 1 of 2 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 2,
      "fail": 1,
      "failures": Array [
        Result {
          "fullname": "",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 2,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP pragma-after-failure.tap default settings > stringified 1`] = `
not ok
pragma +custom
ok
1..2
# failed 1 of 2 tests

`

exports[`test/parser-stringify.js TAP pragma-after-failure.tap default settings > stringified flat 1`] = `
not ok
pragma +custom
ok
1..2
# failed 1 of 2 tests

`

exports[`test/parser-stringify.js TAP pragma-after-failure.tap strict > parsed 1`] = `
Array [
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": false,
    },
  ],
  Array [
    "pragma",
    "custom",
    true,
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 2,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# failed 1 of 2 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 2,
      "fail": 1,
      "failures": Array [
        Result {
          "fullname": "",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 2,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP pragma-after-failure.tap strict > stringified 1`] = `
not ok
pragma +custom
ok
1..2
# failed 1 of 2 tests

`

exports[`test/parser-stringify.js TAP pragma-after-failure.tap strict > stringified flat 1`] = `
not ok
pragma +custom
ok
1..2
# failed 1 of 2 tests

`

exports[`test/parser-stringify.js TAP pragma-after-failure.tap strictBail > parsed 1`] = `
Array [
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": false,
    },
  ],
  Array [
    "bailout",
    "",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": true,
      "count": 1,
      "fail": 1,
      "failures": Array [
        Result {
          "fullname": "",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": null,
        "skipAll": false,
        "skipReason": "",
        "start": null,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP pragma-after-failure.tap strictBail > stringified 1`] = `
not ok
Bail out!

`

exports[`test/parser-stringify.js TAP pragma-after-failure.tap strictBail > stringified flat 1`] = `
not ok
Bail out!

`

exports[`test/parser-stringify.js TAP pragma-invalid.tap bail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "extra",
    "pragma +this is not a valid pragma\\n",
  ],
  Array [
    "extra",
    "pragma -neither # is this\\n",
  ],
  Array [
    "pragma",
    "thisISfineTHO_420-69_lolyolo",
    true,
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP pragma-invalid.tap bail > stringified 1`] = `
TAP version 13
1..1
pragma +this is not a valid pragma
pragma -neither # is this
pragma +thisISfineTHO_420-69_lolyolo
ok

`

exports[`test/parser-stringify.js TAP pragma-invalid.tap bail > stringified flat 1`] = `
TAP version 13
1..1
pragma +this is not a valid pragma
pragma -neither # is this
pragma +thisISfineTHO_420-69_lolyolo
ok

`

exports[`test/parser-stringify.js TAP pragma-invalid.tap default settings > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "extra",
    "pragma +this is not a valid pragma\\n",
  ],
  Array [
    "extra",
    "pragma -neither # is this\\n",
  ],
  Array [
    "pragma",
    "thisISfineTHO_420-69_lolyolo",
    true,
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP pragma-invalid.tap default settings > stringified 1`] = `
TAP version 13
1..1
pragma +this is not a valid pragma
pragma -neither # is this
pragma +thisISfineTHO_420-69_lolyolo
ok

`

exports[`test/parser-stringify.js TAP pragma-invalid.tap default settings > stringified flat 1`] = `
TAP version 13
1..1
pragma +this is not a valid pragma
pragma -neither # is this
pragma +thisISfineTHO_420-69_lolyolo
ok

`

exports[`test/parser-stringify.js TAP pragma-invalid.tap strict > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "extra",
    "pragma +this is not a valid pragma\\n",
  ],
  Array [
    "extra",
    "pragma -neither # is this\\n",
  ],
  Array [
    "pragma",
    "thisISfineTHO_420-69_lolyolo",
    true,
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# failed 2 test\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 2,
      "failures": Array [
        Object {
          "data": "pragma +this is not a valid pragma\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "pragma -neither # is this\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
      ],
      "ok": false,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP pragma-invalid.tap strict > stringified 1`] = `
TAP version 13
1..1
pragma +this is not a valid pragma
pragma -neither # is this
pragma +thisISfineTHO_420-69_lolyolo
ok
# failed 2 test

`

exports[`test/parser-stringify.js TAP pragma-invalid.tap strict > stringified flat 1`] = `
TAP version 13
1..1
pragma +this is not a valid pragma
pragma -neither # is this
pragma +thisISfineTHO_420-69_lolyolo
ok
# failed 2 test

`

exports[`test/parser-stringify.js TAP pragma-invalid.tap strictBail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "extra",
    "pragma +this is not a valid pragma\\n",
  ],
  Array [
    "extra",
    "pragma -neither # is this\\n",
  ],
  Array [
    "pragma",
    "thisISfineTHO_420-69_lolyolo",
    true,
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# failed 2 test\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 2,
      "failures": Array [
        Object {
          "data": "pragma +this is not a valid pragma\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "pragma -neither # is this\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
      ],
      "ok": false,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP pragma-invalid.tap strictBail > stringified 1`] = `
TAP version 13
1..1
pragma +this is not a valid pragma
pragma -neither # is this
pragma +thisISfineTHO_420-69_lolyolo
ok
# failed 2 test

`

exports[`test/parser-stringify.js TAP pragma-invalid.tap strictBail > stringified flat 1`] = `
TAP version 13
1..1
pragma +this is not a valid pragma
pragma -neither # is this
pragma +thisISfineTHO_420-69_lolyolo
ok
# failed 2 test

`

exports[`test/parser-stringify.js TAP pragma-mid-child-strict.tap bail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "pragma",
    "strict",
    true,
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest\\n",
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "",
          "ok": true,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "extra",
    "pragma +strict\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# failed 1 test\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 1,
      "failures": Array [
        Object {
          "data": "pragma +strict\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
      ],
      "ok": false,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP pragma-mid-child-strict.tap bail > stringified 1`] = `
TAP version 13
pragma +strict
1..1
# Subtest
    1..1
    ok
pragma +strict
ok
# failed 1 test

`

exports[`test/parser-stringify.js TAP pragma-mid-child-strict.tap bail > stringified flat 1`] = `
TAP version 13
pragma +strict
1..1
# Subtest
    1..1
    ok
pragma +strict
ok
# failed 1 test

`

exports[`test/parser-stringify.js TAP pragma-mid-child-strict.tap default settings > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "pragma",
    "strict",
    true,
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest\\n",
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "",
          "ok": true,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "extra",
    "pragma +strict\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# failed 1 test\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 1,
      "failures": Array [
        Object {
          "data": "pragma +strict\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
      ],
      "ok": false,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP pragma-mid-child-strict.tap default settings > stringified 1`] = `
TAP version 13
pragma +strict
1..1
# Subtest
    1..1
    ok
pragma +strict
ok
# failed 1 test

`

exports[`test/parser-stringify.js TAP pragma-mid-child-strict.tap default settings > stringified flat 1`] = `
TAP version 13
pragma +strict
1..1
# Subtest
    1..1
    ok
pragma +strict
ok
# failed 1 test

`

exports[`test/parser-stringify.js TAP pragma-mid-child-strict.tap strict > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "pragma",
    "strict",
    true,
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest\\n",
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "",
          "ok": true,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "extra",
    "pragma +strict\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# failed 1 test\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 1,
      "failures": Array [
        Object {
          "data": "pragma +strict\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
      ],
      "ok": false,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP pragma-mid-child-strict.tap strict > stringified 1`] = `
TAP version 13
pragma +strict
1..1
# Subtest
    1..1
    ok
pragma +strict
ok
# failed 1 test

`

exports[`test/parser-stringify.js TAP pragma-mid-child-strict.tap strict > stringified flat 1`] = `
TAP version 13
pragma +strict
1..1
# Subtest
    1..1
    ok
pragma +strict
ok
# failed 1 test

`

exports[`test/parser-stringify.js TAP pragma-mid-child-strict.tap strictBail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "pragma",
    "strict",
    true,
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest\\n",
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "",
          "ok": true,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "extra",
    "pragma +strict\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# failed 1 test\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 1,
      "failures": Array [
        Object {
          "data": "pragma +strict\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
      ],
      "ok": false,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP pragma-mid-child-strict.tap strictBail > stringified 1`] = `
TAP version 13
pragma +strict
1..1
# Subtest
    1..1
    ok
pragma +strict
ok
# failed 1 test

`

exports[`test/parser-stringify.js TAP pragma-mid-child-strict.tap strictBail > stringified flat 1`] = `
TAP version 13
pragma +strict
1..1
# Subtest
    1..1
    ok
pragma +strict
ok
# failed 1 test

`

exports[`test/parser-stringify.js TAP pragma-mid-child.tap bail > parsed 1`] = `
Array [
  Array [
    "pragma",
    "foo",
    true,
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest\\n",
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "",
          "ok": true,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "extra",
    "pragma +foo\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP pragma-mid-child.tap bail > stringified 1`] = `
pragma +foo
1..1
# Subtest
    1..1
    ok
pragma +foo
ok

`

exports[`test/parser-stringify.js TAP pragma-mid-child.tap bail > stringified flat 1`] = `
pragma +foo
1..1
# Subtest
    1..1
    ok
pragma +foo
ok

`

exports[`test/parser-stringify.js TAP pragma-mid-child.tap default settings > parsed 1`] = `
Array [
  Array [
    "pragma",
    "foo",
    true,
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest\\n",
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "",
          "ok": true,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "extra",
    "pragma +foo\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP pragma-mid-child.tap default settings > stringified 1`] = `
pragma +foo
1..1
# Subtest
    1..1
    ok
pragma +foo
ok

`

exports[`test/parser-stringify.js TAP pragma-mid-child.tap default settings > stringified flat 1`] = `
pragma +foo
1..1
# Subtest
    1..1
    ok
pragma +foo
ok

`

exports[`test/parser-stringify.js TAP pragma-mid-child.tap strict > parsed 1`] = `
Array [
  Array [
    "pragma",
    "foo",
    true,
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest\\n",
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "",
          "ok": true,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "extra",
    "pragma +foo\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# failed 1 test\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 1,
      "failures": Array [
        Object {
          "data": "pragma +foo\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
      ],
      "ok": false,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP pragma-mid-child.tap strict > stringified 1`] = `
pragma +foo
1..1
# Subtest
    1..1
    ok
pragma +foo
ok
# failed 1 test

`

exports[`test/parser-stringify.js TAP pragma-mid-child.tap strict > stringified flat 1`] = `
pragma +foo
1..1
# Subtest
    1..1
    ok
pragma +foo
ok
# failed 1 test

`

exports[`test/parser-stringify.js TAP pragma-mid-child.tap strictBail > parsed 1`] = `
Array [
  Array [
    "pragma",
    "foo",
    true,
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest\\n",
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "",
          "ok": true,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "extra",
    "pragma +foo\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# failed 1 test\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 1,
      "failures": Array [
        Object {
          "data": "pragma +foo\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
      ],
      "ok": false,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP pragma-mid-child.tap strictBail > stringified 1`] = `
pragma +foo
1..1
# Subtest
    1..1
    ok
pragma +foo
ok
# failed 1 test

`

exports[`test/parser-stringify.js TAP pragma-mid-child.tap strictBail > stringified flat 1`] = `
pragma +foo
1..1
# Subtest
    1..1
    ok
pragma +foo
ok
# failed 1 test

`

exports[`test/parser-stringify.js TAP pragma-mid-yaml.tap bail > parsed 1`] = `
Array [
  Array [
    "pragma",
    "foo",
    true,
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "some yaml",
      "ok": true,
    },
  ],
  Array [
    "extra",
    String(
        ---
        ok: true
      
    ),
  ],
  Array [
    "pragma",
    "foo",
    true,
  ],
  Array [
    "extra",
    "  name: some yaml\\n",
  ],
  Array [
    "extra",
    "  ...\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP pragma-mid-yaml.tap bail > stringified 1`] = `
pragma +foo
1..1
ok 1 - some yaml
  ---
  ok: true
pragma +foo
  name: some yaml
  ...

`

exports[`test/parser-stringify.js TAP pragma-mid-yaml.tap bail > stringified flat 1`] = `
pragma +foo
1..1
ok 1 - some yaml
  ---
  ok: true
pragma +foo
  name: some yaml
  ...

`

exports[`test/parser-stringify.js TAP pragma-mid-yaml.tap default settings > parsed 1`] = `
Array [
  Array [
    "pragma",
    "foo",
    true,
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "some yaml",
      "ok": true,
    },
  ],
  Array [
    "extra",
    String(
        ---
        ok: true
      
    ),
  ],
  Array [
    "pragma",
    "foo",
    true,
  ],
  Array [
    "extra",
    "  name: some yaml\\n",
  ],
  Array [
    "extra",
    "  ...\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP pragma-mid-yaml.tap default settings > stringified 1`] = `
pragma +foo
1..1
ok 1 - some yaml
  ---
  ok: true
pragma +foo
  name: some yaml
  ...

`

exports[`test/parser-stringify.js TAP pragma-mid-yaml.tap default settings > stringified flat 1`] = `
pragma +foo
1..1
ok 1 - some yaml
  ---
  ok: true
pragma +foo
  name: some yaml
  ...

`

exports[`test/parser-stringify.js TAP pragma-mid-yaml.tap strict > parsed 1`] = `
Array [
  Array [
    "pragma",
    "foo",
    true,
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "some yaml",
      "ok": true,
    },
  ],
  Array [
    "extra",
    String(
        ---
        ok: true
      
    ),
  ],
  Array [
    "pragma",
    "foo",
    true,
  ],
  Array [
    "extra",
    "  name: some yaml\\n",
  ],
  Array [
    "extra",
    "  ...\\n",
  ],
  Array [
    "comment",
    "# failed 3 test\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 3,
      "failures": Array [
        Object {
          "data": String(
              ---
              ok: true
            
          ),
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "  name: some yaml\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "  ...\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
      ],
      "ok": false,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP pragma-mid-yaml.tap strict > stringified 1`] = `
pragma +foo
1..1
ok 1 - some yaml
  ---
  ok: true
pragma +foo
  name: some yaml
  ...
# failed 3 test

`

exports[`test/parser-stringify.js TAP pragma-mid-yaml.tap strict > stringified flat 1`] = `
pragma +foo
1..1
ok 1 - some yaml
  ---
  ok: true
pragma +foo
  name: some yaml
  ...
# failed 3 test

`

exports[`test/parser-stringify.js TAP pragma-mid-yaml.tap strictBail > parsed 1`] = `
Array [
  Array [
    "pragma",
    "foo",
    true,
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "some yaml",
      "ok": true,
    },
  ],
  Array [
    "extra",
    String(
        ---
        ok: true
      
    ),
  ],
  Array [
    "pragma",
    "foo",
    true,
  ],
  Array [
    "extra",
    "  name: some yaml\\n",
  ],
  Array [
    "extra",
    "  ...\\n",
  ],
  Array [
    "comment",
    "# failed 3 test\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 3,
      "failures": Array [
        Object {
          "data": String(
              ---
              ok: true
            
          ),
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "  name: some yaml\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "  ...\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
      ],
      "ok": false,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP pragma-mid-yaml.tap strictBail > stringified 1`] = `
pragma +foo
1..1
ok 1 - some yaml
  ---
  ok: true
pragma +foo
  name: some yaml
  ...
# failed 3 test

`

exports[`test/parser-stringify.js TAP pragma-mid-yaml.tap strictBail > stringified flat 1`] = `
pragma +foo
1..1
ok 1 - some yaml
  ---
  ok: true
pragma +foo
  name: some yaml
  ...
# failed 3 test

`

exports[`test/parser-stringify.js TAP repeat-test-point-id.tap bail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
      "previous": Result {
        "fullname": "",
        "id": 1,
        "ok": true,
      },
      "tapError": "test point id 1 appears multiple times",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
      "previous": Result {
        "fullname": "",
        "id": 1,
        "ok": true,
      },
      "tapError": "test point id 1 appears multiple times",
    },
  ],
  Array [
    "plan",
    Object {
      "end": 3,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# failed 2 of 3 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 3,
      "fail": 2,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 1,
          "ok": true,
          "previous": Result {
            "fullname": "",
            "id": 1,
            "ok": true,
          },
          "tapError": "test point id 1 appears multiple times",
        },
        Result {
          "fullname": "",
          "id": 1,
          "ok": true,
          "previous": Result {
            "fullname": "",
            "id": 1,
            "ok": true,
          },
          "tapError": "test point id 1 appears multiple times",
        },
      ],
      "ok": false,
      "pass": 3,
      "plan": FinalPlan {
        "comment": "",
        "end": 3,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP repeat-test-point-id.tap bail > stringified 1`] = `
TAP version 13
ok 1
ok 1
ok 1
1..3
# failed 2 of 3 tests

`

exports[`test/parser-stringify.js TAP repeat-test-point-id.tap bail > stringified flat 1`] = `
TAP version 13
ok 1
ok 1
ok 1
1..3
# failed 2 of 3 tests

`

exports[`test/parser-stringify.js TAP repeat-test-point-id.tap default settings > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
      "previous": Result {
        "fullname": "",
        "id": 1,
        "ok": true,
      },
      "tapError": "test point id 1 appears multiple times",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
      "previous": Result {
        "fullname": "",
        "id": 1,
        "ok": true,
      },
      "tapError": "test point id 1 appears multiple times",
    },
  ],
  Array [
    "plan",
    Object {
      "end": 3,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# failed 2 of 3 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 3,
      "fail": 2,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 1,
          "ok": true,
          "previous": Result {
            "fullname": "",
            "id": 1,
            "ok": true,
          },
          "tapError": "test point id 1 appears multiple times",
        },
        Result {
          "fullname": "",
          "id": 1,
          "ok": true,
          "previous": Result {
            "fullname": "",
            "id": 1,
            "ok": true,
          },
          "tapError": "test point id 1 appears multiple times",
        },
      ],
      "ok": false,
      "pass": 3,
      "plan": FinalPlan {
        "comment": "",
        "end": 3,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP repeat-test-point-id.tap default settings > stringified 1`] = `
TAP version 13
ok 1
ok 1
ok 1
1..3
# failed 2 of 3 tests

`

exports[`test/parser-stringify.js TAP repeat-test-point-id.tap default settings > stringified flat 1`] = `
TAP version 13
ok 1
ok 1
ok 1
1..3
# failed 2 of 3 tests

`

exports[`test/parser-stringify.js TAP repeat-test-point-id.tap strict > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
      "previous": Result {
        "fullname": "",
        "id": 1,
        "ok": true,
      },
      "tapError": "test point id 1 appears multiple times",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
      "previous": Result {
        "fullname": "",
        "id": 1,
        "ok": true,
      },
      "tapError": "test point id 1 appears multiple times",
    },
  ],
  Array [
    "plan",
    Object {
      "end": 3,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# failed 2 of 3 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 3,
      "fail": 2,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 1,
          "ok": true,
          "previous": Result {
            "fullname": "",
            "id": 1,
            "ok": true,
          },
          "tapError": "test point id 1 appears multiple times",
        },
        Result {
          "fullname": "",
          "id": 1,
          "ok": true,
          "previous": Result {
            "fullname": "",
            "id": 1,
            "ok": true,
          },
          "tapError": "test point id 1 appears multiple times",
        },
      ],
      "ok": false,
      "pass": 3,
      "plan": FinalPlan {
        "comment": "",
        "end": 3,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP repeat-test-point-id.tap strict > stringified 1`] = `
TAP version 13
ok 1
ok 1
ok 1
1..3
# failed 2 of 3 tests

`

exports[`test/parser-stringify.js TAP repeat-test-point-id.tap strict > stringified flat 1`] = `
TAP version 13
ok 1
ok 1
ok 1
1..3
# failed 2 of 3 tests

`

exports[`test/parser-stringify.js TAP repeat-test-point-id.tap strictBail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
      "previous": Result {
        "fullname": "",
        "id": 1,
        "ok": true,
      },
      "tapError": "test point id 1 appears multiple times",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
      "previous": Result {
        "fullname": "",
        "id": 1,
        "ok": true,
      },
      "tapError": "test point id 1 appears multiple times",
    },
  ],
  Array [
    "plan",
    Object {
      "end": 3,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# failed 2 of 3 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 3,
      "fail": 2,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 1,
          "ok": true,
          "previous": Result {
            "fullname": "",
            "id": 1,
            "ok": true,
          },
          "tapError": "test point id 1 appears multiple times",
        },
        Result {
          "fullname": "",
          "id": 1,
          "ok": true,
          "previous": Result {
            "fullname": "",
            "id": 1,
            "ok": true,
          },
          "tapError": "test point id 1 appears multiple times",
        },
      ],
      "ok": false,
      "pass": 3,
      "plan": FinalPlan {
        "comment": "",
        "end": 3,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP repeat-test-point-id.tap strictBail > stringified 1`] = `
TAP version 13
ok 1
ok 1
ok 1
1..3
# failed 2 of 3 tests

`

exports[`test/parser-stringify.js TAP repeat-test-point-id.tap strictBail > stringified flat 1`] = `
TAP version 13
ok 1
ok 1
ok 1
1..3
# failed 2 of 3 tests

`

exports[`test/parser-stringify.js TAP schwern-todo-quiet.tap bail > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 3,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": false,
    },
  ],
  Array [
    "comment",
    "#   Failed test at ../../andy/schwern.pl line 17.\\n",
  ],
  Array [
    "comment",
    "#          got: '23'\\n",
  ],
  Array [
    "comment",
    "#     expected: '42'\\n",
  ],
  Array [
    "bailout",
    "",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": true,
      "count": 2,
      "fail": 1,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 2,
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 3,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP schwern-todo-quiet.tap bail > stringified 1`] = `
1..3
ok 1
not ok 2
#   Failed test at ../../andy/schwern.pl line 17.
#          got: '23'
#     expected: '42'
Bail out!

`

exports[`test/parser-stringify.js TAP schwern-todo-quiet.tap bail > stringified flat 1`] = `
1..3
ok 1
not ok 2
#   Failed test at ../../andy/schwern.pl line 17.
#          got: '23'
#     expected: '42'
Bail out!

`

exports[`test/parser-stringify.js TAP schwern-todo-quiet.tap default settings > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 3,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": false,
    },
  ],
  Array [
    "comment",
    "#   Failed test at ../../andy/schwern.pl line 17.\\n",
  ],
  Array [
    "comment",
    "#          got: '23'\\n",
  ],
  Array [
    "comment",
    "#     expected: '42'\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "",
      "ok": false,
      "todo": "Roman numerials still not a built in type",
    },
  ],
  Array [
    "comment",
    "#   Failed (TODO) test at ../../andy/schwern.pl line 20.\\n",
  ],
  Array [
    "comment",
    "#          got: 'XXIII'\\n",
  ],
  Array [
    "comment",
    "#     expected: '23'\\n",
  ],
  Array [
    "comment",
    "# Looks like you failed 1 test of 3.\\n",
  ],
  Array [
    "comment",
    "# failed 2 of 3 tests\\n",
  ],
  Array [
    "comment",
    "# todo: 1\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 3,
      "fail": 2,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 2,
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 3,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 1,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP schwern-todo-quiet.tap default settings > stringified 1`] = `
1..3
ok 1
not ok 2
#   Failed test at ../../andy/schwern.pl line 17.
#          got: '23'
#     expected: '42'
not ok 3 # TODO Roman numerials still not a built in type
#   Failed (TODO) test at ../../andy/schwern.pl line 20.
#          got: 'XXIII'
#     expected: '23'
# Looks like you failed 1 test of 3.
# failed 2 of 3 tests
# todo: 1

`

exports[`test/parser-stringify.js TAP schwern-todo-quiet.tap default settings > stringified flat 1`] = `
1..3
ok 1
not ok 2
#   Failed test at ../../andy/schwern.pl line 17.
#          got: '23'
#     expected: '42'
not ok 3 # TODO Roman numerials still not a built in type
#   Failed (TODO) test at ../../andy/schwern.pl line 20.
#          got: 'XXIII'
#     expected: '23'
# Looks like you failed 1 test of 3.
# failed 2 of 3 tests
# todo: 1

`

exports[`test/parser-stringify.js TAP schwern-todo-quiet.tap strict > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 3,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": false,
    },
  ],
  Array [
    "comment",
    "#   Failed test at ../../andy/schwern.pl line 17.\\n",
  ],
  Array [
    "comment",
    "#          got: '23'\\n",
  ],
  Array [
    "comment",
    "#     expected: '42'\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "",
      "ok": false,
      "todo": "Roman numerials still not a built in type",
    },
  ],
  Array [
    "comment",
    "#   Failed (TODO) test at ../../andy/schwern.pl line 20.\\n",
  ],
  Array [
    "comment",
    "#          got: 'XXIII'\\n",
  ],
  Array [
    "comment",
    "#     expected: '23'\\n",
  ],
  Array [
    "comment",
    "# Looks like you failed 1 test of 3.\\n",
  ],
  Array [
    "comment",
    "# failed 2 of 3 tests\\n",
  ],
  Array [
    "comment",
    "# todo: 1\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 3,
      "fail": 2,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 2,
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 3,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 1,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP schwern-todo-quiet.tap strict > stringified 1`] = `
1..3
ok 1
not ok 2
#   Failed test at ../../andy/schwern.pl line 17.
#          got: '23'
#     expected: '42'
not ok 3 # TODO Roman numerials still not a built in type
#   Failed (TODO) test at ../../andy/schwern.pl line 20.
#          got: 'XXIII'
#     expected: '23'
# Looks like you failed 1 test of 3.
# failed 2 of 3 tests
# todo: 1

`

exports[`test/parser-stringify.js TAP schwern-todo-quiet.tap strict > stringified flat 1`] = `
1..3
ok 1
not ok 2
#   Failed test at ../../andy/schwern.pl line 17.
#          got: '23'
#     expected: '42'
not ok 3 # TODO Roman numerials still not a built in type
#   Failed (TODO) test at ../../andy/schwern.pl line 20.
#          got: 'XXIII'
#     expected: '23'
# Looks like you failed 1 test of 3.
# failed 2 of 3 tests
# todo: 1

`

exports[`test/parser-stringify.js TAP schwern-todo-quiet.tap strictBail > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 3,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": false,
    },
  ],
  Array [
    "comment",
    "#   Failed test at ../../andy/schwern.pl line 17.\\n",
  ],
  Array [
    "comment",
    "#          got: '23'\\n",
  ],
  Array [
    "comment",
    "#     expected: '42'\\n",
  ],
  Array [
    "bailout",
    "",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": true,
      "count": 2,
      "fail": 1,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 2,
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 3,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP schwern-todo-quiet.tap strictBail > stringified 1`] = `
1..3
ok 1
not ok 2
#   Failed test at ../../andy/schwern.pl line 17.
#          got: '23'
#     expected: '42'
Bail out!

`

exports[`test/parser-stringify.js TAP schwern-todo-quiet.tap strictBail > stringified flat 1`] = `
1..3
ok 1
not ok 2
#   Failed test at ../../andy/schwern.pl line 17.
#          got: '23'
#     expected: '42'
Bail out!

`

exports[`test/parser-stringify.js TAP schwern.tap bail > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "42",
      "ok": true,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP schwern.tap bail > stringified 1`] = `
1..1
ok 1 - 42

`

exports[`test/parser-stringify.js TAP schwern.tap bail > stringified flat 1`] = `
1..1
ok 1 - 42

`

exports[`test/parser-stringify.js TAP schwern.tap default settings > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "42",
      "ok": true,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP schwern.tap default settings > stringified 1`] = `
1..1
ok 1 - 42

`

exports[`test/parser-stringify.js TAP schwern.tap default settings > stringified flat 1`] = `
1..1
ok 1 - 42

`

exports[`test/parser-stringify.js TAP schwern.tap strict > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "42",
      "ok": true,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP schwern.tap strict > stringified 1`] = `
1..1
ok 1 - 42

`

exports[`test/parser-stringify.js TAP schwern.tap strict > stringified flat 1`] = `
1..1
ok 1 - 42

`

exports[`test/parser-stringify.js TAP schwern.tap strictBail > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "42",
      "ok": true,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP schwern.tap strictBail > stringified 1`] = `
1..1
ok 1 - 42

`

exports[`test/parser-stringify.js TAP schwern.tap strictBail > stringified flat 1`] = `
1..1
ok 1 - 42

`

exports[`test/parser-stringify.js TAP sequence_misparse.tap bail > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "",
      "ok": true,
      "skip": "on foobar system",
    },
  ],
  Array [
    "comment",
    "# 1234567890123456789012345678901234567890\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# 1234567890123456789012345678901234567890\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# skip: 1\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 5,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 5,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 1,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP sequence_misparse.tap bail > stringified 1`] = `
1..5
ok 1
ok 2
ok 3 # SKIP on foobar system
# 1234567890123456789012345678901234567890
ok 4
# 1234567890123456789012345678901234567890
ok 5
# skip: 1

`

exports[`test/parser-stringify.js TAP sequence_misparse.tap bail > stringified flat 1`] = `
1..5
ok 1
ok 2
ok 3 # SKIP on foobar system
# 1234567890123456789012345678901234567890
ok 4
# 1234567890123456789012345678901234567890
ok 5
# skip: 1

`

exports[`test/parser-stringify.js TAP sequence_misparse.tap default settings > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "",
      "ok": true,
      "skip": "on foobar system",
    },
  ],
  Array [
    "comment",
    "# 1234567890123456789012345678901234567890\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# 1234567890123456789012345678901234567890\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# skip: 1\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 5,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 5,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 1,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP sequence_misparse.tap default settings > stringified 1`] = `
1..5
ok 1
ok 2
ok 3 # SKIP on foobar system
# 1234567890123456789012345678901234567890
ok 4
# 1234567890123456789012345678901234567890
ok 5
# skip: 1

`

exports[`test/parser-stringify.js TAP sequence_misparse.tap default settings > stringified flat 1`] = `
1..5
ok 1
ok 2
ok 3 # SKIP on foobar system
# 1234567890123456789012345678901234567890
ok 4
# 1234567890123456789012345678901234567890
ok 5
# skip: 1

`

exports[`test/parser-stringify.js TAP sequence_misparse.tap strict > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "",
      "ok": true,
      "skip": "on foobar system",
    },
  ],
  Array [
    "comment",
    "# 1234567890123456789012345678901234567890\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# 1234567890123456789012345678901234567890\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# skip: 1\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 5,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 5,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 1,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP sequence_misparse.tap strict > stringified 1`] = `
1..5
ok 1
ok 2
ok 3 # SKIP on foobar system
# 1234567890123456789012345678901234567890
ok 4
# 1234567890123456789012345678901234567890
ok 5
# skip: 1

`

exports[`test/parser-stringify.js TAP sequence_misparse.tap strict > stringified flat 1`] = `
1..5
ok 1
ok 2
ok 3 # SKIP on foobar system
# 1234567890123456789012345678901234567890
ok 4
# 1234567890123456789012345678901234567890
ok 5
# skip: 1

`

exports[`test/parser-stringify.js TAP sequence_misparse.tap strictBail > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "",
      "ok": true,
      "skip": "on foobar system",
    },
  ],
  Array [
    "comment",
    "# 1234567890123456789012345678901234567890\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# 1234567890123456789012345678901234567890\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# skip: 1\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 5,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 5,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 1,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP sequence_misparse.tap strictBail > stringified 1`] = `
1..5
ok 1
ok 2
ok 3 # SKIP on foobar system
# 1234567890123456789012345678901234567890
ok 4
# 1234567890123456789012345678901234567890
ok 5
# skip: 1

`

exports[`test/parser-stringify.js TAP sequence_misparse.tap strictBail > stringified flat 1`] = `
1..5
ok 1
ok 2
ok 3 # SKIP on foobar system
# 1234567890123456789012345678901234567890
ok 4
# 1234567890123456789012345678901234567890
ok 5
# skip: 1

`

exports[`test/parser-stringify.js TAP simple.tap bail > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "ok": true,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 5,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 5,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP simple.tap bail > stringified 1`] = `
1..5
ok 1
ok 2
ok 3
ok 4
ok 5

`

exports[`test/parser-stringify.js TAP simple.tap bail > stringified flat 1`] = `
1..5
ok 1
ok 2
ok 3
ok 4
ok 5

`

exports[`test/parser-stringify.js TAP simple.tap default settings > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "ok": true,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 5,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 5,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP simple.tap default settings > stringified 1`] = `
1..5
ok 1
ok 2
ok 3
ok 4
ok 5

`

exports[`test/parser-stringify.js TAP simple.tap default settings > stringified flat 1`] = `
1..5
ok 1
ok 2
ok 3
ok 4
ok 5

`

exports[`test/parser-stringify.js TAP simple.tap strict > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "ok": true,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 5,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 5,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP simple.tap strict > stringified 1`] = `
1..5
ok 1
ok 2
ok 3
ok 4
ok 5

`

exports[`test/parser-stringify.js TAP simple.tap strict > stringified flat 1`] = `
1..5
ok 1
ok 2
ok 3
ok 4
ok 5

`

exports[`test/parser-stringify.js TAP simple.tap strictBail > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "ok": true,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 5,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 5,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP simple.tap strictBail > stringified 1`] = `
1..5
ok 1
ok 2
ok 3
ok 4
ok 5

`

exports[`test/parser-stringify.js TAP simple.tap strictBail > stringified flat 1`] = `
1..5
ok 1
ok 2
ok 3
ok 4
ok 5

`

exports[`test/parser-stringify.js TAP simple_fail.tap bail > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": false,
    },
  ],
  Array [
    "bailout",
    "",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": true,
      "count": 2,
      "fail": 1,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 2,
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP simple_fail.tap bail > stringified 1`] = `
1..5
ok 1
not ok 2
Bail out!

`

exports[`test/parser-stringify.js TAP simple_fail.tap bail > stringified flat 1`] = `
1..5
ok 1
not ok 2
Bail out!

`

exports[`test/parser-stringify.js TAP simple_fail.tap default settings > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": false,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "ok": false,
    },
  ],
  Array [
    "comment",
    "# failed 2 of 5 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 5,
      "fail": 2,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 2,
          "ok": false,
        },
        Result {
          "fullname": "",
          "id": 5,
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 3,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP simple_fail.tap default settings > stringified 1`] = `
1..5
ok 1
not ok 2
ok 3
ok 4
not ok 5
# failed 2 of 5 tests

`

exports[`test/parser-stringify.js TAP simple_fail.tap default settings > stringified flat 1`] = `
1..5
ok 1
not ok 2
ok 3
ok 4
not ok 5
# failed 2 of 5 tests

`

exports[`test/parser-stringify.js TAP simple_fail.tap strict > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": false,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "ok": false,
    },
  ],
  Array [
    "comment",
    "# failed 2 of 5 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 5,
      "fail": 2,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 2,
          "ok": false,
        },
        Result {
          "fullname": "",
          "id": 5,
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 3,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP simple_fail.tap strict > stringified 1`] = `
1..5
ok 1
not ok 2
ok 3
ok 4
not ok 5
# failed 2 of 5 tests

`

exports[`test/parser-stringify.js TAP simple_fail.tap strict > stringified flat 1`] = `
1..5
ok 1
not ok 2
ok 3
ok 4
not ok 5
# failed 2 of 5 tests

`

exports[`test/parser-stringify.js TAP simple_fail.tap strictBail > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": false,
    },
  ],
  Array [
    "bailout",
    "",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": true,
      "count": 2,
      "fail": 1,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 2,
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP simple_fail.tap strictBail > stringified 1`] = `
1..5
ok 1
not ok 2
Bail out!

`

exports[`test/parser-stringify.js TAP simple_fail.tap strictBail > stringified flat 1`] = `
1..5
ok 1
not ok 2
Bail out!

`

exports[`test/parser-stringify.js TAP simple_yaml.tap bail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "diag": Array [
        Object {
          "fnurk": "skib",
          "ponk": "gleeb",
        },
        Object {
          "bar": "krup",
          "foo": "plink",
        },
      ],
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "diag": Object {
        "expected": Array [
          1,
          2,
          4,
        ],
        "got": Array [
          1,
          "pong",
          4,
        ],
      },
      "fullname": "",
      "id": 4,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "ok": true,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 5,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 5,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP simple_yaml.tap bail > stringified 1`] = `
TAP version 13
1..5
ok 1
ok 2
  ---
  - fnurk: skib
    ponk: gleeb
  - bar: krup
    foo: plink
  ...
ok 3
ok 4
  ---
  expected:
    - 1
    - 2
    - 4
  got:
    - 1
    - pong
    - 4
  ...
ok 5

`

exports[`test/parser-stringify.js TAP simple_yaml.tap bail > stringified flat 1`] = `
TAP version 13
1..5
ok 1
ok 2
  ---
  - fnurk: skib
    ponk: gleeb
  - bar: krup
    foo: plink
  ...
ok 3
ok 4
  ---
  expected:
    - 1
    - 2
    - 4
  got:
    - 1
    - pong
    - 4
  ...
ok 5

`

exports[`test/parser-stringify.js TAP simple_yaml.tap default settings > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "diag": Array [
        Object {
          "fnurk": "skib",
          "ponk": "gleeb",
        },
        Object {
          "bar": "krup",
          "foo": "plink",
        },
      ],
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "diag": Object {
        "expected": Array [
          1,
          2,
          4,
        ],
        "got": Array [
          1,
          "pong",
          4,
        ],
      },
      "fullname": "",
      "id": 4,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "ok": true,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 5,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 5,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP simple_yaml.tap default settings > stringified 1`] = `
TAP version 13
1..5
ok 1
ok 2
  ---
  - fnurk: skib
    ponk: gleeb
  - bar: krup
    foo: plink
  ...
ok 3
ok 4
  ---
  expected:
    - 1
    - 2
    - 4
  got:
    - 1
    - pong
    - 4
  ...
ok 5

`

exports[`test/parser-stringify.js TAP simple_yaml.tap default settings > stringified flat 1`] = `
TAP version 13
1..5
ok 1
ok 2
  ---
  - fnurk: skib
    ponk: gleeb
  - bar: krup
    foo: plink
  ...
ok 3
ok 4
  ---
  expected:
    - 1
    - 2
    - 4
  got:
    - 1
    - pong
    - 4
  ...
ok 5

`

exports[`test/parser-stringify.js TAP simple_yaml.tap strict > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "diag": Array [
        Object {
          "fnurk": "skib",
          "ponk": "gleeb",
        },
        Object {
          "bar": "krup",
          "foo": "plink",
        },
      ],
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "diag": Object {
        "expected": Array [
          1,
          2,
          4,
        ],
        "got": Array [
          1,
          "pong",
          4,
        ],
      },
      "fullname": "",
      "id": 4,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "ok": true,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 5,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 5,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP simple_yaml.tap strict > stringified 1`] = `
TAP version 13
1..5
ok 1
ok 2
  ---
  - fnurk: skib
    ponk: gleeb
  - bar: krup
    foo: plink
  ...
ok 3
ok 4
  ---
  expected:
    - 1
    - 2
    - 4
  got:
    - 1
    - pong
    - 4
  ...
ok 5

`

exports[`test/parser-stringify.js TAP simple_yaml.tap strict > stringified flat 1`] = `
TAP version 13
1..5
ok 1
ok 2
  ---
  - fnurk: skib
    ponk: gleeb
  - bar: krup
    foo: plink
  ...
ok 3
ok 4
  ---
  expected:
    - 1
    - 2
    - 4
  got:
    - 1
    - pong
    - 4
  ...
ok 5

`

exports[`test/parser-stringify.js TAP simple_yaml.tap strictBail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "diag": Array [
        Object {
          "fnurk": "skib",
          "ponk": "gleeb",
        },
        Object {
          "bar": "krup",
          "foo": "plink",
        },
      ],
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "diag": Object {
        "expected": Array [
          1,
          2,
          4,
        ],
        "got": Array [
          1,
          "pong",
          4,
        ],
      },
      "fullname": "",
      "id": 4,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "ok": true,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 5,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 5,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP simple_yaml.tap strictBail > stringified 1`] = `
TAP version 13
1..5
ok 1
ok 2
  ---
  - fnurk: skib
    ponk: gleeb
  - bar: krup
    foo: plink
  ...
ok 3
ok 4
  ---
  expected:
    - 1
    - 2
    - 4
  got:
    - 1
    - pong
    - 4
  ...
ok 5

`

exports[`test/parser-stringify.js TAP simple_yaml.tap strictBail > stringified flat 1`] = `
TAP version 13
1..5
ok 1
ok 2
  ---
  - fnurk: skib
    ponk: gleeb
  - bar: krup
    foo: plink
  ...
ok 3
ok 4
  ---
  expected:
    - 1
    - 2
    - 4
  got:
    - 1
    - pong
    - 4
  ...
ok 5

`

exports[`test/parser-stringify.js TAP simple_yaml_missing_version13.tap bail > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "diag": Array [
        Object {
          "fnurk": "skib",
          "ponk": "gleeb",
        },
        Object {
          "bar": "krup",
          "foo": "plink",
        },
      ],
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "diag": Object {
        "expected": Array [
          1,
          2,
          4,
        ],
        "got": Array [
          1,
          "pong",
          4,
        ],
      },
      "fullname": "",
      "id": 4,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "ok": true,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 5,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 5,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP simple_yaml_missing_version13.tap bail > stringified 1`] = `
1..5
ok 1
ok 2
  ---
  - fnurk: skib
    ponk: gleeb
  - bar: krup
    foo: plink
  ...
ok 3
ok 4
  ---
  expected:
    - 1
    - 2
    - 4
  got:
    - 1
    - pong
    - 4
  ...
ok 5

`

exports[`test/parser-stringify.js TAP simple_yaml_missing_version13.tap bail > stringified flat 1`] = `
1..5
ok 1
ok 2
  ---
  - fnurk: skib
    ponk: gleeb
  - bar: krup
    foo: plink
  ...
ok 3
ok 4
  ---
  expected:
    - 1
    - 2
    - 4
  got:
    - 1
    - pong
    - 4
  ...
ok 5

`

exports[`test/parser-stringify.js TAP simple_yaml_missing_version13.tap default settings > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "diag": Array [
        Object {
          "fnurk": "skib",
          "ponk": "gleeb",
        },
        Object {
          "bar": "krup",
          "foo": "plink",
        },
      ],
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "diag": Object {
        "expected": Array [
          1,
          2,
          4,
        ],
        "got": Array [
          1,
          "pong",
          4,
        ],
      },
      "fullname": "",
      "id": 4,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "ok": true,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 5,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 5,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP simple_yaml_missing_version13.tap default settings > stringified 1`] = `
1..5
ok 1
ok 2
  ---
  - fnurk: skib
    ponk: gleeb
  - bar: krup
    foo: plink
  ...
ok 3
ok 4
  ---
  expected:
    - 1
    - 2
    - 4
  got:
    - 1
    - pong
    - 4
  ...
ok 5

`

exports[`test/parser-stringify.js TAP simple_yaml_missing_version13.tap default settings > stringified flat 1`] = `
1..5
ok 1
ok 2
  ---
  - fnurk: skib
    ponk: gleeb
  - bar: krup
    foo: plink
  ...
ok 3
ok 4
  ---
  expected:
    - 1
    - 2
    - 4
  got:
    - 1
    - pong
    - 4
  ...
ok 5

`

exports[`test/parser-stringify.js TAP simple_yaml_missing_version13.tap strict > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "diag": Array [
        Object {
          "fnurk": "skib",
          "ponk": "gleeb",
        },
        Object {
          "bar": "krup",
          "foo": "plink",
        },
      ],
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "diag": Object {
        "expected": Array [
          1,
          2,
          4,
        ],
        "got": Array [
          1,
          "pong",
          4,
        ],
      },
      "fullname": "",
      "id": 4,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "ok": true,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 5,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 5,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP simple_yaml_missing_version13.tap strict > stringified 1`] = `
1..5
ok 1
ok 2
  ---
  - fnurk: skib
    ponk: gleeb
  - bar: krup
    foo: plink
  ...
ok 3
ok 4
  ---
  expected:
    - 1
    - 2
    - 4
  got:
    - 1
    - pong
    - 4
  ...
ok 5

`

exports[`test/parser-stringify.js TAP simple_yaml_missing_version13.tap strict > stringified flat 1`] = `
1..5
ok 1
ok 2
  ---
  - fnurk: skib
    ponk: gleeb
  - bar: krup
    foo: plink
  ...
ok 3
ok 4
  ---
  expected:
    - 1
    - 2
    - 4
  got:
    - 1
    - pong
    - 4
  ...
ok 5

`

exports[`test/parser-stringify.js TAP simple_yaml_missing_version13.tap strictBail > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "diag": Array [
        Object {
          "fnurk": "skib",
          "ponk": "gleeb",
        },
        Object {
          "bar": "krup",
          "foo": "plink",
        },
      ],
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "diag": Object {
        "expected": Array [
          1,
          2,
          4,
        ],
        "got": Array [
          1,
          "pong",
          4,
        ],
      },
      "fullname": "",
      "id": 4,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "ok": true,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 5,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 5,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP simple_yaml_missing_version13.tap strictBail > stringified 1`] = `
1..5
ok 1
ok 2
  ---
  - fnurk: skib
    ponk: gleeb
  - bar: krup
    foo: plink
  ...
ok 3
ok 4
  ---
  expected:
    - 1
    - 2
    - 4
  got:
    - 1
    - pong
    - 4
  ...
ok 5

`

exports[`test/parser-stringify.js TAP simple_yaml_missing_version13.tap strictBail > stringified flat 1`] = `
1..5
ok 1
ok 2
  ---
  - fnurk: skib
    ponk: gleeb
  - bar: krup
    foo: plink
  ...
ok 3
ok 4
  ---
  expected:
    - 1
    - 2
    - 4
  got:
    - 1
    - pong
    - 4
  ...
ok 5

`

exports[`test/parser-stringify.js TAP skip-all-nonempty.tap bail > parsed 1`] = `
Array [
  Array [
    "comment",
    "# TAP emitted by Test::More 0.98\\n",
  ],
  Array [
    "plan",
    Object {
      "comment": "SKIP Insufficient positron flux",
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "found some spare flux in bottom drawer",
      "ok": true,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "SKIP Insufficient positron flux",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP skip-all-nonempty.tap bail > stringified 1`] = `
# TAP emitted by Test::More 0.98
1..1 # SKIP Insufficient positron flux
ok 1 - found some spare flux in bottom drawer

`

exports[`test/parser-stringify.js TAP skip-all-nonempty.tap bail > stringified flat 1`] = `
# TAP emitted by Test::More 0.98
1..1 # SKIP Insufficient positron flux
ok 1 - found some spare flux in bottom drawer

`

exports[`test/parser-stringify.js TAP skip-all-nonempty.tap default settings > parsed 1`] = `
Array [
  Array [
    "comment",
    "# TAP emitted by Test::More 0.98\\n",
  ],
  Array [
    "plan",
    Object {
      "comment": "SKIP Insufficient positron flux",
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "found some spare flux in bottom drawer",
      "ok": true,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "SKIP Insufficient positron flux",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP skip-all-nonempty.tap default settings > stringified 1`] = `
# TAP emitted by Test::More 0.98
1..1 # SKIP Insufficient positron flux
ok 1 - found some spare flux in bottom drawer

`

exports[`test/parser-stringify.js TAP skip-all-nonempty.tap default settings > stringified flat 1`] = `
# TAP emitted by Test::More 0.98
1..1 # SKIP Insufficient positron flux
ok 1 - found some spare flux in bottom drawer

`

exports[`test/parser-stringify.js TAP skip-all-nonempty.tap strict > parsed 1`] = `
Array [
  Array [
    "comment",
    "# TAP emitted by Test::More 0.98\\n",
  ],
  Array [
    "plan",
    Object {
      "comment": "SKIP Insufficient positron flux",
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "found some spare flux in bottom drawer",
      "ok": true,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "SKIP Insufficient positron flux",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP skip-all-nonempty.tap strict > stringified 1`] = `
# TAP emitted by Test::More 0.98
1..1 # SKIP Insufficient positron flux
ok 1 - found some spare flux in bottom drawer

`

exports[`test/parser-stringify.js TAP skip-all-nonempty.tap strict > stringified flat 1`] = `
# TAP emitted by Test::More 0.98
1..1 # SKIP Insufficient positron flux
ok 1 - found some spare flux in bottom drawer

`

exports[`test/parser-stringify.js TAP skip-all-nonempty.tap strictBail > parsed 1`] = `
Array [
  Array [
    "comment",
    "# TAP emitted by Test::More 0.98\\n",
  ],
  Array [
    "plan",
    Object {
      "comment": "SKIP Insufficient positron flux",
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "found some spare flux in bottom drawer",
      "ok": true,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "SKIP Insufficient positron flux",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP skip-all-nonempty.tap strictBail > stringified 1`] = `
# TAP emitted by Test::More 0.98
1..1 # SKIP Insufficient positron flux
ok 1 - found some spare flux in bottom drawer

`

exports[`test/parser-stringify.js TAP skip-all-nonempty.tap strictBail > stringified flat 1`] = `
# TAP emitted by Test::More 0.98
1..1 # SKIP Insufficient positron flux
ok 1 - found some spare flux in bottom drawer

`

exports[`test/parser-stringify.js TAP skip-all-with-assert.tap bail > parsed 1`] = `
Array [
  Array [
    "comment",
    "# TAP emitted by Test::More 0.98\\n",
  ],
  Array [
    "plan",
    Object {
      "comment": "SKIP Insufficient skipping",
      "end": 0,
      "start": 1,
    },
  ],
  Array [
    "extra",
    "ok 1 - should not be asserting\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 0,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "SKIP Insufficient skipping",
        "end": 0,
        "skipAll": true,
        "skipReason": "SKIP Insufficient skipping",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP skip-all-with-assert.tap bail > stringified 1`] = `
# TAP emitted by Test::More 0.98
1..0 # SKIP Insufficient skipping
ok 1 - should not be asserting

`

exports[`test/parser-stringify.js TAP skip-all-with-assert.tap bail > stringified flat 1`] = `
# TAP emitted by Test::More 0.98
1..0 # SKIP Insufficient skipping
ok 1 - should not be asserting

`

exports[`test/parser-stringify.js TAP skip-all-with-assert.tap default settings > parsed 1`] = `
Array [
  Array [
    "comment",
    "# TAP emitted by Test::More 0.98\\n",
  ],
  Array [
    "plan",
    Object {
      "comment": "SKIP Insufficient skipping",
      "end": 0,
      "start": 1,
    },
  ],
  Array [
    "extra",
    "ok 1 - should not be asserting\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 0,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "SKIP Insufficient skipping",
        "end": 0,
        "skipAll": true,
        "skipReason": "SKIP Insufficient skipping",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP skip-all-with-assert.tap default settings > stringified 1`] = `
# TAP emitted by Test::More 0.98
1..0 # SKIP Insufficient skipping
ok 1 - should not be asserting

`

exports[`test/parser-stringify.js TAP skip-all-with-assert.tap default settings > stringified flat 1`] = `
# TAP emitted by Test::More 0.98
1..0 # SKIP Insufficient skipping
ok 1 - should not be asserting

`

exports[`test/parser-stringify.js TAP skip-all-with-assert.tap strict > parsed 1`] = `
Array [
  Array [
    "comment",
    "# TAP emitted by Test::More 0.98\\n",
  ],
  Array [
    "plan",
    Object {
      "comment": "SKIP Insufficient skipping",
      "end": 0,
      "start": 1,
    },
  ],
  Array [
    "extra",
    "ok 1 - should not be asserting\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 0,
      "fail": 1,
      "failures": Array [
        Object {
          "data": "ok 1 - should not be asserting\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
      ],
      "ok": true,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "SKIP Insufficient skipping",
        "end": 0,
        "skipAll": true,
        "skipReason": "SKIP Insufficient skipping",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP skip-all-with-assert.tap strict > stringified 1`] = `
# TAP emitted by Test::More 0.98
1..0 # SKIP Insufficient skipping
ok 1 - should not be asserting

`

exports[`test/parser-stringify.js TAP skip-all-with-assert.tap strict > stringified flat 1`] = `
# TAP emitted by Test::More 0.98
1..0 # SKIP Insufficient skipping
ok 1 - should not be asserting

`

exports[`test/parser-stringify.js TAP skip-all-with-assert.tap strictBail > parsed 1`] = `
Array [
  Array [
    "comment",
    "# TAP emitted by Test::More 0.98\\n",
  ],
  Array [
    "plan",
    Object {
      "comment": "SKIP Insufficient skipping",
      "end": 0,
      "start": 1,
    },
  ],
  Array [
    "extra",
    "ok 1 - should not be asserting\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 0,
      "fail": 1,
      "failures": Array [
        Object {
          "data": "ok 1 - should not be asserting\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
      ],
      "ok": true,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "SKIP Insufficient skipping",
        "end": 0,
        "skipAll": true,
        "skipReason": "SKIP Insufficient skipping",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP skip-all-with-assert.tap strictBail > stringified 1`] = `
# TAP emitted by Test::More 0.98
1..0 # SKIP Insufficient skipping
ok 1 - should not be asserting

`

exports[`test/parser-stringify.js TAP skip-all-with-assert.tap strictBail > stringified flat 1`] = `
# TAP emitted by Test::More 0.98
1..0 # SKIP Insufficient skipping
ok 1 - should not be asserting

`

exports[`test/parser-stringify.js TAP skip-all-with-test.tap bail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 0,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# test count(1) != plan(0)\\n",
  ],
  Array [
    "comment",
    "# failed 1 test\\n",
  ],
  Array [
    "comment",
    "# skip: 1\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 1,
      "failures": Array [
        Object {
          "tapError": "Plan of 1..0, but test points encountered",
        },
      ],
      "ok": false,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 0,
        "skipAll": true,
        "skipReason": "",
        "start": 1,
      },
      "skip": 1,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP skip-all-with-test.tap bail > stringified 1`] = `
TAP version 13
ok
1..0
# test count(1) != plan(0)
# failed 1 test
# skip: 1

`

exports[`test/parser-stringify.js TAP skip-all-with-test.tap bail > stringified flat 1`] = `
TAP version 13
ok
1..0
# test count(1) != plan(0)
# failed 1 test
# skip: 1

`

exports[`test/parser-stringify.js TAP skip-all-with-test.tap default settings > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 0,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# test count(1) != plan(0)\\n",
  ],
  Array [
    "comment",
    "# failed 1 test\\n",
  ],
  Array [
    "comment",
    "# skip: 1\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 1,
      "failures": Array [
        Object {
          "tapError": "Plan of 1..0, but test points encountered",
        },
      ],
      "ok": false,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 0,
        "skipAll": true,
        "skipReason": "",
        "start": 1,
      },
      "skip": 1,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP skip-all-with-test.tap default settings > stringified 1`] = `
TAP version 13
ok
1..0
# test count(1) != plan(0)
# failed 1 test
# skip: 1

`

exports[`test/parser-stringify.js TAP skip-all-with-test.tap default settings > stringified flat 1`] = `
TAP version 13
ok
1..0
# test count(1) != plan(0)
# failed 1 test
# skip: 1

`

exports[`test/parser-stringify.js TAP skip-all-with-test.tap strict > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 0,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# test count(1) != plan(0)\\n",
  ],
  Array [
    "comment",
    "# failed 1 test\\n",
  ],
  Array [
    "comment",
    "# skip: 1\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 1,
      "failures": Array [
        Object {
          "tapError": "Plan of 1..0, but test points encountered",
        },
      ],
      "ok": false,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 0,
        "skipAll": true,
        "skipReason": "",
        "start": 1,
      },
      "skip": 1,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP skip-all-with-test.tap strict > stringified 1`] = `
TAP version 13
ok
1..0
# test count(1) != plan(0)
# failed 1 test
# skip: 1

`

exports[`test/parser-stringify.js TAP skip-all-with-test.tap strict > stringified flat 1`] = `
TAP version 13
ok
1..0
# test count(1) != plan(0)
# failed 1 test
# skip: 1

`

exports[`test/parser-stringify.js TAP skip-all-with-test.tap strictBail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 0,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# test count(1) != plan(0)\\n",
  ],
  Array [
    "comment",
    "# failed 1 test\\n",
  ],
  Array [
    "comment",
    "# skip: 1\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 1,
      "failures": Array [
        Object {
          "tapError": "Plan of 1..0, but test points encountered",
        },
      ],
      "ok": false,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 0,
        "skipAll": true,
        "skipReason": "",
        "start": 1,
      },
      "skip": 1,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP skip-all-with-test.tap strictBail > stringified 1`] = `
TAP version 13
ok
1..0
# test count(1) != plan(0)
# failed 1 test
# skip: 1

`

exports[`test/parser-stringify.js TAP skip-all-with-test.tap strictBail > stringified flat 1`] = `
TAP version 13
ok
1..0
# test count(1) != plan(0)
# failed 1 test
# skip: 1

`

exports[`test/parser-stringify.js TAP skip-all.tap bail > parsed 1`] = `
Array [
  Array [
    "comment",
    "# TAP emitted by Test::More 0.98\\n",
  ],
  Array [
    "plan",
    Object {
      "comment": "SKIP Insufficient positron flux",
      "end": 0,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 0,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "SKIP Insufficient positron flux",
        "end": 0,
        "skipAll": true,
        "skipReason": "SKIP Insufficient positron flux",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP skip-all.tap bail > stringified 1`] = `
# TAP emitted by Test::More 0.98
1..0 # SKIP Insufficient positron flux

`

exports[`test/parser-stringify.js TAP skip-all.tap bail > stringified flat 1`] = `
# TAP emitted by Test::More 0.98
1..0 # SKIP Insufficient positron flux

`

exports[`test/parser-stringify.js TAP skip-all.tap default settings > parsed 1`] = `
Array [
  Array [
    "comment",
    "# TAP emitted by Test::More 0.98\\n",
  ],
  Array [
    "plan",
    Object {
      "comment": "SKIP Insufficient positron flux",
      "end": 0,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 0,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "SKIP Insufficient positron flux",
        "end": 0,
        "skipAll": true,
        "skipReason": "SKIP Insufficient positron flux",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP skip-all.tap default settings > stringified 1`] = `
# TAP emitted by Test::More 0.98
1..0 # SKIP Insufficient positron flux

`

exports[`test/parser-stringify.js TAP skip-all.tap default settings > stringified flat 1`] = `
# TAP emitted by Test::More 0.98
1..0 # SKIP Insufficient positron flux

`

exports[`test/parser-stringify.js TAP skip-all.tap strict > parsed 1`] = `
Array [
  Array [
    "comment",
    "# TAP emitted by Test::More 0.98\\n",
  ],
  Array [
    "plan",
    Object {
      "comment": "SKIP Insufficient positron flux",
      "end": 0,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 0,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "SKIP Insufficient positron flux",
        "end": 0,
        "skipAll": true,
        "skipReason": "SKIP Insufficient positron flux",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP skip-all.tap strict > stringified 1`] = `
# TAP emitted by Test::More 0.98
1..0 # SKIP Insufficient positron flux

`

exports[`test/parser-stringify.js TAP skip-all.tap strict > stringified flat 1`] = `
# TAP emitted by Test::More 0.98
1..0 # SKIP Insufficient positron flux

`

exports[`test/parser-stringify.js TAP skip-all.tap strictBail > parsed 1`] = `
Array [
  Array [
    "comment",
    "# TAP emitted by Test::More 0.98\\n",
  ],
  Array [
    "plan",
    Object {
      "comment": "SKIP Insufficient positron flux",
      "end": 0,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 0,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "SKIP Insufficient positron flux",
        "end": 0,
        "skipAll": true,
        "skipReason": "SKIP Insufficient positron flux",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP skip-all.tap strictBail > stringified 1`] = `
# TAP emitted by Test::More 0.98
1..0 # SKIP Insufficient positron flux

`

exports[`test/parser-stringify.js TAP skip-all.tap strictBail > stringified flat 1`] = `
# TAP emitted by Test::More 0.98
1..0 # SKIP Insufficient positron flux

`

exports[`test/parser-stringify.js TAP skip-one-fail.tap bail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "does not count as failure",
      "ok": false,
      "skip": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# skip: 1\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 1,
      "failures": Array [],
      "ok": true,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 1,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP skip-one-fail.tap bail > stringified 1`] = `
TAP version 13
not ok 1 - does not count as failure # SKIP
1..1
# skip: 1

`

exports[`test/parser-stringify.js TAP skip-one-fail.tap bail > stringified flat 1`] = `
TAP version 13
not ok 1 - does not count as failure # SKIP
1..1
# skip: 1

`

exports[`test/parser-stringify.js TAP skip-one-fail.tap default settings > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "does not count as failure",
      "ok": false,
      "skip": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# skip: 1\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 1,
      "failures": Array [],
      "ok": true,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 1,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP skip-one-fail.tap default settings > stringified 1`] = `
TAP version 13
not ok 1 - does not count as failure # SKIP
1..1
# skip: 1

`

exports[`test/parser-stringify.js TAP skip-one-fail.tap default settings > stringified flat 1`] = `
TAP version 13
not ok 1 - does not count as failure # SKIP
1..1
# skip: 1

`

exports[`test/parser-stringify.js TAP skip-one-fail.tap strict > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "does not count as failure",
      "ok": false,
      "skip": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# skip: 1\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 1,
      "failures": Array [],
      "ok": true,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 1,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP skip-one-fail.tap strict > stringified 1`] = `
TAP version 13
not ok 1 - does not count as failure # SKIP
1..1
# skip: 1

`

exports[`test/parser-stringify.js TAP skip-one-fail.tap strict > stringified flat 1`] = `
TAP version 13
not ok 1 - does not count as failure # SKIP
1..1
# skip: 1

`

exports[`test/parser-stringify.js TAP skip-one-fail.tap strictBail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "does not count as failure",
      "ok": false,
      "skip": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# skip: 1\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 1,
      "failures": Array [],
      "ok": true,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 1,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP skip-one-fail.tap strictBail > stringified 1`] = `
TAP version 13
not ok 1 - does not count as failure # SKIP
1..1
# skip: 1

`

exports[`test/parser-stringify.js TAP skip-one-fail.tap strictBail > stringified flat 1`] = `
TAP version 13
not ok 1 - does not count as failure # SKIP
1..1
# skip: 1

`

exports[`test/parser-stringify.js TAP skip-one-ok.tap bail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "totally fine",
      "ok": true,
      "skip": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# skip: 1\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 1,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP skip-one-ok.tap bail > stringified 1`] = `
TAP version 13
ok 1 - totally fine # SKIP
1..1
# skip: 1

`

exports[`test/parser-stringify.js TAP skip-one-ok.tap bail > stringified flat 1`] = `
TAP version 13
ok 1 - totally fine # SKIP
1..1
# skip: 1

`

exports[`test/parser-stringify.js TAP skip-one-ok.tap default settings > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "totally fine",
      "ok": true,
      "skip": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# skip: 1\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 1,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP skip-one-ok.tap default settings > stringified 1`] = `
TAP version 13
ok 1 - totally fine # SKIP
1..1
# skip: 1

`

exports[`test/parser-stringify.js TAP skip-one-ok.tap default settings > stringified flat 1`] = `
TAP version 13
ok 1 - totally fine # SKIP
1..1
# skip: 1

`

exports[`test/parser-stringify.js TAP skip-one-ok.tap strict > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "totally fine",
      "ok": true,
      "skip": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# skip: 1\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 1,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP skip-one-ok.tap strict > stringified 1`] = `
TAP version 13
ok 1 - totally fine # SKIP
1..1
# skip: 1

`

exports[`test/parser-stringify.js TAP skip-one-ok.tap strict > stringified flat 1`] = `
TAP version 13
ok 1 - totally fine # SKIP
1..1
# skip: 1

`

exports[`test/parser-stringify.js TAP skip-one-ok.tap strictBail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "totally fine",
      "ok": true,
      "skip": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# skip: 1\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 1,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP skip-one-ok.tap strictBail > stringified 1`] = `
TAP version 13
ok 1 - totally fine # SKIP
1..1
# skip: 1

`

exports[`test/parser-stringify.js TAP skip-one-ok.tap strictBail > stringified flat 1`] = `
TAP version 13
ok 1 - totally fine # SKIP
1..1
# skip: 1

`

exports[`test/parser-stringify.js TAP skip.tap bail > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "",
      "ok": true,
      "skip": "rain delay",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "#skip should not skip because escaped",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "name": "notskip, because testTitle#skip is not a directive",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "name": "",
      "ok": true,
      "skip": "weird spelling but ok, skip it",
    },
  ],
  Array [
    "comment",
    "# skip: 2\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 5,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 5,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 2,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP skip.tap bail > stringified 1`] = `
1..5
ok 1
ok 2 # SKIP rain delay
ok 3 - \\#skip should not skip because escaped
ok 4 - notskip, because testTitle\\#skip is not a directive
ok 5 # SKIP weird spelling but ok, skip it
# skip: 2

`

exports[`test/parser-stringify.js TAP skip.tap bail > stringified flat 1`] = `
1..5
ok 1
ok 2 # SKIP rain delay
ok 3 - \\#skip should not skip because escaped
ok 4 - notskip, because testTitle\\#skip is not a directive
ok 5 # SKIP weird spelling but ok, skip it
# skip: 2

`

exports[`test/parser-stringify.js TAP skip.tap default settings > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "",
      "ok": true,
      "skip": "rain delay",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "#skip should not skip because escaped",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "name": "notskip, because testTitle#skip is not a directive",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "name": "",
      "ok": true,
      "skip": "weird spelling but ok, skip it",
    },
  ],
  Array [
    "comment",
    "# skip: 2\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 5,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 5,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 2,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP skip.tap default settings > stringified 1`] = `
1..5
ok 1
ok 2 # SKIP rain delay
ok 3 - \\#skip should not skip because escaped
ok 4 - notskip, because testTitle\\#skip is not a directive
ok 5 # SKIP weird spelling but ok, skip it
# skip: 2

`

exports[`test/parser-stringify.js TAP skip.tap default settings > stringified flat 1`] = `
1..5
ok 1
ok 2 # SKIP rain delay
ok 3 - \\#skip should not skip because escaped
ok 4 - notskip, because testTitle\\#skip is not a directive
ok 5 # SKIP weird spelling but ok, skip it
# skip: 2

`

exports[`test/parser-stringify.js TAP skip.tap strict > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "",
      "ok": true,
      "skip": "rain delay",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "#skip should not skip because escaped",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "name": "notskip, because testTitle#skip is not a directive",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "name": "",
      "ok": true,
      "skip": "weird spelling but ok, skip it",
    },
  ],
  Array [
    "comment",
    "# skip: 2\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 5,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 5,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 2,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP skip.tap strict > stringified 1`] = `
1..5
ok 1
ok 2 # SKIP rain delay
ok 3 - \\#skip should not skip because escaped
ok 4 - notskip, because testTitle\\#skip is not a directive
ok 5 # SKIP weird spelling but ok, skip it
# skip: 2

`

exports[`test/parser-stringify.js TAP skip.tap strict > stringified flat 1`] = `
1..5
ok 1
ok 2 # SKIP rain delay
ok 3 - \\#skip should not skip because escaped
ok 4 - notskip, because testTitle\\#skip is not a directive
ok 5 # SKIP weird spelling but ok, skip it
# skip: 2

`

exports[`test/parser-stringify.js TAP skip.tap strictBail > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "",
      "ok": true,
      "skip": "rain delay",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "#skip should not skip because escaped",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "name": "notskip, because testTitle#skip is not a directive",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "name": "",
      "ok": true,
      "skip": "weird spelling but ok, skip it",
    },
  ],
  Array [
    "comment",
    "# skip: 2\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 5,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 5,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 2,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP skip.tap strictBail > stringified 1`] = `
1..5
ok 1
ok 2 # SKIP rain delay
ok 3 - \\#skip should not skip because escaped
ok 4 - notskip, because testTitle\\#skip is not a directive
ok 5 # SKIP weird spelling but ok, skip it
# skip: 2

`

exports[`test/parser-stringify.js TAP skip.tap strictBail > stringified flat 1`] = `
1..5
ok 1
ok 2 # SKIP rain delay
ok 3 - \\#skip should not skip because escaped
ok 4 - notskip, because testTitle\\#skip is not a directive
ok 5 # SKIP weird spelling but ok, skip it
# skip: 2

`

exports[`test/parser-stringify.js TAP skip_nomsg.tap bail > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "",
      "ok": true,
      "skip": true,
    },
  ],
  Array [
    "comment",
    "# skip: 1\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 1,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP skip_nomsg.tap bail > stringified 1`] = `
1..1
ok 1 # SKIP
# skip: 1

`

exports[`test/parser-stringify.js TAP skip_nomsg.tap bail > stringified flat 1`] = `
1..1
ok 1 # SKIP
# skip: 1

`

exports[`test/parser-stringify.js TAP skip_nomsg.tap default settings > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "",
      "ok": true,
      "skip": true,
    },
  ],
  Array [
    "comment",
    "# skip: 1\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 1,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP skip_nomsg.tap default settings > stringified 1`] = `
1..1
ok 1 # SKIP
# skip: 1

`

exports[`test/parser-stringify.js TAP skip_nomsg.tap default settings > stringified flat 1`] = `
1..1
ok 1 # SKIP
# skip: 1

`

exports[`test/parser-stringify.js TAP skip_nomsg.tap strict > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "",
      "ok": true,
      "skip": true,
    },
  ],
  Array [
    "comment",
    "# skip: 1\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 1,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP skip_nomsg.tap strict > stringified 1`] = `
1..1
ok 1 # SKIP
# skip: 1

`

exports[`test/parser-stringify.js TAP skip_nomsg.tap strict > stringified flat 1`] = `
1..1
ok 1 # SKIP
# skip: 1

`

exports[`test/parser-stringify.js TAP skip_nomsg.tap strictBail > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "",
      "ok": true,
      "skip": true,
    },
  ],
  Array [
    "comment",
    "# skip: 1\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 1,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP skip_nomsg.tap strictBail > stringified 1`] = `
1..1
ok 1 # SKIP
# skip: 1

`

exports[`test/parser-stringify.js TAP skip_nomsg.tap strictBail > stringified flat 1`] = `
1..1
ok 1 # SKIP
# skip: 1

`

exports[`test/parser-stringify.js TAP skipall.tap bail > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "comment": "skipping: rope",
      "end": 0,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 0,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "skipping: rope",
        "end": 0,
        "skipAll": true,
        "skipReason": "skipping: rope",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP skipall.tap bail > stringified 1`] = `
1..0 # skipping: rope

`

exports[`test/parser-stringify.js TAP skipall.tap bail > stringified flat 1`] = `
1..0 # skipping: rope

`

exports[`test/parser-stringify.js TAP skipall.tap default settings > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "comment": "skipping: rope",
      "end": 0,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 0,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "skipping: rope",
        "end": 0,
        "skipAll": true,
        "skipReason": "skipping: rope",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP skipall.tap default settings > stringified 1`] = `
1..0 # skipping: rope

`

exports[`test/parser-stringify.js TAP skipall.tap default settings > stringified flat 1`] = `
1..0 # skipping: rope

`

exports[`test/parser-stringify.js TAP skipall.tap strict > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "comment": "skipping: rope",
      "end": 0,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 0,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "skipping: rope",
        "end": 0,
        "skipAll": true,
        "skipReason": "skipping: rope",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP skipall.tap strict > stringified 1`] = `
1..0 # skipping: rope

`

exports[`test/parser-stringify.js TAP skipall.tap strict > stringified flat 1`] = `
1..0 # skipping: rope

`

exports[`test/parser-stringify.js TAP skipall.tap strictBail > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "comment": "skipping: rope",
      "end": 0,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 0,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "skipping: rope",
        "end": 0,
        "skipAll": true,
        "skipReason": "skipping: rope",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP skipall.tap strictBail > stringified 1`] = `
1..0 # skipping: rope

`

exports[`test/parser-stringify.js TAP skipall.tap strictBail > stringified flat 1`] = `
1..0 # skipping: rope

`

exports[`test/parser-stringify.js TAP skipall_nomsg.tap bail > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 0,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 0,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": 0,
        "skipAll": true,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP skipall_nomsg.tap bail > stringified 1`] = `
1..0

`

exports[`test/parser-stringify.js TAP skipall_nomsg.tap bail > stringified flat 1`] = `
1..0

`

exports[`test/parser-stringify.js TAP skipall_nomsg.tap default settings > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 0,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 0,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": 0,
        "skipAll": true,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP skipall_nomsg.tap default settings > stringified 1`] = `
1..0

`

exports[`test/parser-stringify.js TAP skipall_nomsg.tap default settings > stringified flat 1`] = `
1..0

`

exports[`test/parser-stringify.js TAP skipall_nomsg.tap strict > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 0,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 0,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": 0,
        "skipAll": true,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP skipall_nomsg.tap strict > stringified 1`] = `
1..0

`

exports[`test/parser-stringify.js TAP skipall_nomsg.tap strict > stringified flat 1`] = `
1..0

`

exports[`test/parser-stringify.js TAP skipall_nomsg.tap strictBail > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 0,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 0,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": 0,
        "skipAll": true,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP skipall_nomsg.tap strictBail > stringified 1`] = `
1..0

`

exports[`test/parser-stringify.js TAP skipall_nomsg.tap strictBail > stringified flat 1`] = `
1..0

`

exports[`test/parser-stringify.js TAP skipall_v13.tap bail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "comment": "skipping: rope",
      "end": 0,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 0,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "skipping: rope",
        "end": 0,
        "skipAll": true,
        "skipReason": "skipping: rope",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP skipall_v13.tap bail > stringified 1`] = `
TAP version 13
1..0 # skipping: rope

`

exports[`test/parser-stringify.js TAP skipall_v13.tap bail > stringified flat 1`] = `
TAP version 13
1..0 # skipping: rope

`

exports[`test/parser-stringify.js TAP skipall_v13.tap default settings > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "comment": "skipping: rope",
      "end": 0,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 0,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "skipping: rope",
        "end": 0,
        "skipAll": true,
        "skipReason": "skipping: rope",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP skipall_v13.tap default settings > stringified 1`] = `
TAP version 13
1..0 # skipping: rope

`

exports[`test/parser-stringify.js TAP skipall_v13.tap default settings > stringified flat 1`] = `
TAP version 13
1..0 # skipping: rope

`

exports[`test/parser-stringify.js TAP skipall_v13.tap strict > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "comment": "skipping: rope",
      "end": 0,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 0,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "skipping: rope",
        "end": 0,
        "skipAll": true,
        "skipReason": "skipping: rope",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP skipall_v13.tap strict > stringified 1`] = `
TAP version 13
1..0 # skipping: rope

`

exports[`test/parser-stringify.js TAP skipall_v13.tap strict > stringified flat 1`] = `
TAP version 13
1..0 # skipping: rope

`

exports[`test/parser-stringify.js TAP skipall_v13.tap strictBail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "comment": "skipping: rope",
      "end": 0,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 0,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "skipping: rope",
        "end": 0,
        "skipAll": true,
        "skipReason": "skipping: rope",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP skipall_v13.tap strictBail > stringified 1`] = `
TAP version 13
1..0 # skipping: rope

`

exports[`test/parser-stringify.js TAP skipall_v13.tap strictBail > stringified flat 1`] = `
TAP version 13
1..0 # skipping: rope

`

exports[`test/parser-stringify.js TAP skippidy-doo-dah.tap bail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "x",
      "ok": true,
      "skip": "doo dah",
    },
  ],
  Array [
    "comment",
    "# skip: 1\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 1,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP skippidy-doo-dah.tap bail > stringified 1`] = `
TAP version 13
1..1
ok 1 - x # SKIP doo dah
# skip: 1

`

exports[`test/parser-stringify.js TAP skippidy-doo-dah.tap bail > stringified flat 1`] = `
TAP version 13
1..1
ok 1 - x # SKIP doo dah
# skip: 1

`

exports[`test/parser-stringify.js TAP skippidy-doo-dah.tap default settings > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "x",
      "ok": true,
      "skip": "doo dah",
    },
  ],
  Array [
    "comment",
    "# skip: 1\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 1,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP skippidy-doo-dah.tap default settings > stringified 1`] = `
TAP version 13
1..1
ok 1 - x # SKIP doo dah
# skip: 1

`

exports[`test/parser-stringify.js TAP skippidy-doo-dah.tap default settings > stringified flat 1`] = `
TAP version 13
1..1
ok 1 - x # SKIP doo dah
# skip: 1

`

exports[`test/parser-stringify.js TAP skippidy-doo-dah.tap strict > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "x",
      "ok": true,
      "skip": "doo dah",
    },
  ],
  Array [
    "comment",
    "# skip: 1\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 1,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP skippidy-doo-dah.tap strict > stringified 1`] = `
TAP version 13
1..1
ok 1 - x # SKIP doo dah
# skip: 1

`

exports[`test/parser-stringify.js TAP skippidy-doo-dah.tap strict > stringified flat 1`] = `
TAP version 13
1..1
ok 1 - x # SKIP doo dah
# skip: 1

`

exports[`test/parser-stringify.js TAP skippidy-doo-dah.tap strictBail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "x",
      "ok": true,
      "skip": "doo dah",
    },
  ],
  Array [
    "comment",
    "# skip: 1\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 1,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP skippidy-doo-dah.tap strictBail > stringified 1`] = `
TAP version 13
1..1
ok 1 - x # SKIP doo dah
# skip: 1

`

exports[`test/parser-stringify.js TAP skippidy-doo-dah.tap strictBail > stringified flat 1`] = `
TAP version 13
1..1
ok 1 - x # SKIP doo dah
# skip: 1

`

exports[`test/parser-stringify.js TAP skipping-a-few.tap bail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "approved operating system",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# $^0 is solaris\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "",
      "ok": true,
      "skip": "no /sys directory",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "",
      "ok": true,
      "skip": "no /sys directory",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "name": "",
      "ok": true,
      "skip": "no /sys directory",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "name": "",
      "ok": true,
      "skip": "no /sys directory",
    },
  ],
  Array [
    "comment",
    "# skip: 4\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 5,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 5,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 4,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP skipping-a-few.tap bail > stringified 1`] = `
TAP version 13
1..5
ok 1 - approved operating system
# $^0 is solaris
ok 2 # SKIP no /sys directory
ok 3 # SKIP no /sys directory
ok 4 # SKIP no /sys directory
ok 5 # SKIP no /sys directory
# skip: 4

`

exports[`test/parser-stringify.js TAP skipping-a-few.tap bail > stringified flat 1`] = `
TAP version 13
1..5
ok 1 - approved operating system
# $^0 is solaris
ok 2 # SKIP no /sys directory
ok 3 # SKIP no /sys directory
ok 4 # SKIP no /sys directory
ok 5 # SKIP no /sys directory
# skip: 4

`

exports[`test/parser-stringify.js TAP skipping-a-few.tap default settings > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "approved operating system",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# $^0 is solaris\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "",
      "ok": true,
      "skip": "no /sys directory",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "",
      "ok": true,
      "skip": "no /sys directory",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "name": "",
      "ok": true,
      "skip": "no /sys directory",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "name": "",
      "ok": true,
      "skip": "no /sys directory",
    },
  ],
  Array [
    "comment",
    "# skip: 4\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 5,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 5,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 4,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP skipping-a-few.tap default settings > stringified 1`] = `
TAP version 13
1..5
ok 1 - approved operating system
# $^0 is solaris
ok 2 # SKIP no /sys directory
ok 3 # SKIP no /sys directory
ok 4 # SKIP no /sys directory
ok 5 # SKIP no /sys directory
# skip: 4

`

exports[`test/parser-stringify.js TAP skipping-a-few.tap default settings > stringified flat 1`] = `
TAP version 13
1..5
ok 1 - approved operating system
# $^0 is solaris
ok 2 # SKIP no /sys directory
ok 3 # SKIP no /sys directory
ok 4 # SKIP no /sys directory
ok 5 # SKIP no /sys directory
# skip: 4

`

exports[`test/parser-stringify.js TAP skipping-a-few.tap strict > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "approved operating system",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# $^0 is solaris\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "",
      "ok": true,
      "skip": "no /sys directory",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "",
      "ok": true,
      "skip": "no /sys directory",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "name": "",
      "ok": true,
      "skip": "no /sys directory",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "name": "",
      "ok": true,
      "skip": "no /sys directory",
    },
  ],
  Array [
    "comment",
    "# skip: 4\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 5,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 5,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 4,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP skipping-a-few.tap strict > stringified 1`] = `
TAP version 13
1..5
ok 1 - approved operating system
# $^0 is solaris
ok 2 # SKIP no /sys directory
ok 3 # SKIP no /sys directory
ok 4 # SKIP no /sys directory
ok 5 # SKIP no /sys directory
# skip: 4

`

exports[`test/parser-stringify.js TAP skipping-a-few.tap strict > stringified flat 1`] = `
TAP version 13
1..5
ok 1 - approved operating system
# $^0 is solaris
ok 2 # SKIP no /sys directory
ok 3 # SKIP no /sys directory
ok 4 # SKIP no /sys directory
ok 5 # SKIP no /sys directory
# skip: 4

`

exports[`test/parser-stringify.js TAP skipping-a-few.tap strictBail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "approved operating system",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# $^0 is solaris\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "",
      "ok": true,
      "skip": "no /sys directory",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "",
      "ok": true,
      "skip": "no /sys directory",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "name": "",
      "ok": true,
      "skip": "no /sys directory",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "name": "",
      "ok": true,
      "skip": "no /sys directory",
    },
  ],
  Array [
    "comment",
    "# skip: 4\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 5,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 5,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 4,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP skipping-a-few.tap strictBail > stringified 1`] = `
TAP version 13
1..5
ok 1 - approved operating system
# $^0 is solaris
ok 2 # SKIP no /sys directory
ok 3 # SKIP no /sys directory
ok 4 # SKIP no /sys directory
ok 5 # SKIP no /sys directory
# skip: 4

`

exports[`test/parser-stringify.js TAP skipping-a-few.tap strictBail > stringified flat 1`] = `
TAP version 13
1..5
ok 1 - approved operating system
# $^0 is solaris
ok 2 # SKIP no /sys directory
ok 3 # SKIP no /sys directory
ok 4 # SKIP no /sys directory
ok 5 # SKIP no /sys directory
# skip: 4

`

exports[`test/parser-stringify.js TAP space_after_plan.tap bail > parsed 1`] = `
Array [
  Array [
    "extra",
    "1..5 \\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "name": "",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "name": "",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test count(5) != plan(null)\\n",
  ],
  Array [
    "comment",
    "# failed 1 of 5 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 5,
      "fail": 1,
      "failures": Array [
        Object {
          "tapError": "no plan",
        },
      ],
      "ok": false,
      "pass": 5,
      "plan": FinalPlan {
        "comment": "",
        "end": null,
        "skipAll": false,
        "skipReason": "",
        "start": null,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP space_after_plan.tap bail > stringified 1`] = `
1..5 
ok 1
ok 2
ok 3
ok 4
ok 5
# test count(5) != plan(null)
# failed 1 of 5 tests

`

exports[`test/parser-stringify.js TAP space_after_plan.tap bail > stringified flat 1`] = `
1..5 
ok 1
ok 2
ok 3
ok 4
ok 5
# test count(5) != plan(null)
# failed 1 of 5 tests

`

exports[`test/parser-stringify.js TAP space_after_plan.tap default settings > parsed 1`] = `
Array [
  Array [
    "extra",
    "1..5 \\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "name": "",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "name": "",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test count(5) != plan(null)\\n",
  ],
  Array [
    "comment",
    "# failed 1 of 5 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 5,
      "fail": 1,
      "failures": Array [
        Object {
          "tapError": "no plan",
        },
      ],
      "ok": false,
      "pass": 5,
      "plan": FinalPlan {
        "comment": "",
        "end": null,
        "skipAll": false,
        "skipReason": "",
        "start": null,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP space_after_plan.tap default settings > stringified 1`] = `
1..5 
ok 1
ok 2
ok 3
ok 4
ok 5
# test count(5) != plan(null)
# failed 1 of 5 tests

`

exports[`test/parser-stringify.js TAP space_after_plan.tap default settings > stringified flat 1`] = `
1..5 
ok 1
ok 2
ok 3
ok 4
ok 5
# test count(5) != plan(null)
# failed 1 of 5 tests

`

exports[`test/parser-stringify.js TAP space_after_plan.tap strict > parsed 1`] = `
Array [
  Array [
    "extra",
    "1..5 \\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "name": "",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "name": "",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test count(5) != plan(null)\\n",
  ],
  Array [
    "comment",
    "# failed 2 of 5 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 5,
      "fail": 2,
      "failures": Array [
        Object {
          "data": "1..5 \\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "tapError": "no plan",
        },
      ],
      "ok": false,
      "pass": 5,
      "plan": FinalPlan {
        "comment": "",
        "end": null,
        "skipAll": false,
        "skipReason": "",
        "start": null,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP space_after_plan.tap strict > stringified 1`] = `
1..5 
ok 1
ok 2
ok 3
ok 4
ok 5
# test count(5) != plan(null)
# failed 2 of 5 tests

`

exports[`test/parser-stringify.js TAP space_after_plan.tap strict > stringified flat 1`] = `
1..5 
ok 1
ok 2
ok 3
ok 4
ok 5
# test count(5) != plan(null)
# failed 2 of 5 tests

`

exports[`test/parser-stringify.js TAP space_after_plan.tap strictBail > parsed 1`] = `
Array [
  Array [
    "extra",
    "1..5 \\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "name": "",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "name": "",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test count(5) != plan(null)\\n",
  ],
  Array [
    "comment",
    "# failed 2 of 5 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 5,
      "fail": 2,
      "failures": Array [
        Object {
          "data": "1..5 \\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "tapError": "no plan",
        },
      ],
      "ok": false,
      "pass": 5,
      "plan": FinalPlan {
        "comment": "",
        "end": null,
        "skipAll": false,
        "skipReason": "",
        "start": null,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP space_after_plan.tap strictBail > stringified 1`] = `
1..5 
ok 1
ok 2
ok 3
ok 4
ok 5
# test count(5) != plan(null)
# failed 2 of 5 tests

`

exports[`test/parser-stringify.js TAP space_after_plan.tap strictBail > stringified flat 1`] = `
1..5 
ok 1
ok 2
ok 3
ok 4
ok 5
# test count(5) != plan(null)
# failed 2 of 5 tests

`

exports[`test/parser-stringify.js TAP stdout_stderr.tap bail > parsed 1`] = `
Array [
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 4,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 4,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 4,
      "plan": FinalPlan {
        "comment": "",
        "end": 4,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP stdout_stderr.tap bail > stringified 1`] = `
ok 1
ok 2
ok 3
ok 4
1..4

`

exports[`test/parser-stringify.js TAP stdout_stderr.tap bail > stringified flat 1`] = `
ok 1
ok 2
ok 3
ok 4
1..4

`

exports[`test/parser-stringify.js TAP stdout_stderr.tap default settings > parsed 1`] = `
Array [
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 4,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 4,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 4,
      "plan": FinalPlan {
        "comment": "",
        "end": 4,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP stdout_stderr.tap default settings > stringified 1`] = `
ok 1
ok 2
ok 3
ok 4
1..4

`

exports[`test/parser-stringify.js TAP stdout_stderr.tap default settings > stringified flat 1`] = `
ok 1
ok 2
ok 3
ok 4
1..4

`

exports[`test/parser-stringify.js TAP stdout_stderr.tap strict > parsed 1`] = `
Array [
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 4,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 4,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 4,
      "plan": FinalPlan {
        "comment": "",
        "end": 4,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP stdout_stderr.tap strict > stringified 1`] = `
ok 1
ok 2
ok 3
ok 4
1..4

`

exports[`test/parser-stringify.js TAP stdout_stderr.tap strict > stringified flat 1`] = `
ok 1
ok 2
ok 3
ok 4
1..4

`

exports[`test/parser-stringify.js TAP stdout_stderr.tap strictBail > parsed 1`] = `
Array [
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 4,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 4,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 4,
      "plan": FinalPlan {
        "comment": "",
        "end": 4,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP stdout_stderr.tap strictBail > stringified 1`] = `
ok 1
ok 2
ok 3
ok 4
1..4

`

exports[`test/parser-stringify.js TAP stdout_stderr.tap strictBail > stringified flat 1`] = `
ok 1
ok 2
ok 3
ok 4
1..4

`

exports[`test/parser-stringify.js TAP strict-pragma-child-broken-diags.tap bail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "pragma",
    "strict",
    true,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: child\\n",
      ],
      Array [
        "assert",
        Result {
          "fullname": "child",
          "id": 1,
          "name": "test point in child",
          "ok": false,
        },
      ],
      Array [
        "bailout",
        "test point in child",
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": "test point in child",
          "count": 1,
          "fail": 3,
          "failures": Array [
            Object {
              "data": "  ...\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "  hello: world\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Result {
              "fullname": "child",
              "id": 1,
              "name": "test point in child",
              "ok": false,
            },
          ],
          "ok": false,
          "pass": 0,
          "plan": FinalPlan {
            "comment": "",
            "end": null,
            "skipAll": false,
            "skipReason": "",
            "start": null,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "extra",
    "      ...\\n",
  ],
  Array [
    "extra",
    "      hello: world\\n",
  ],
  Array [
    "bailout",
    "test point in child",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": "test point in child",
      "count": 0,
      "fail": 2,
      "failures": Array [
        Object {
          "data": "  ...\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "  hello: world\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
      ],
      "ok": false,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": null,
        "skipAll": false,
        "skipReason": "",
        "start": null,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP strict-pragma-child-broken-diags.tap bail > stringified 1`] = `
TAP version 13
pragma +strict
# Subtest: child
    not ok 1 - test point in child
    Bail out! test point in child
      ...
      hello: world
Bail out! test point in child

`

exports[`test/parser-stringify.js TAP strict-pragma-child-broken-diags.tap bail > stringified flat 1`] = `
TAP version 13
pragma +strict
# Subtest: child
    not ok 1 - test point in child
    Bail out! test point in child
      ...
      hello: world
Bail out! test point in child

`

exports[`test/parser-stringify.js TAP strict-pragma-child-broken-diags.tap default settings > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "pragma",
    "strict",
    true,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: child\\n",
      ],
      Array [
        "assert",
        Result {
          "fullname": "child",
          "id": 1,
          "name": "test point in child",
          "ok": false,
        },
      ],
      Array [
        "comment",
        "# test count(1) != plan(null)\\n",
      ],
      Array [
        "comment",
        "# failed 4 test\\n",
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 4,
          "failures": Array [
            Object {
              "data": "  ...\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "  hello: world\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Result {
              "fullname": "child",
              "id": 1,
              "name": "test point in child",
              "ok": false,
            },
            Object {
              "tapError": "no plan",
            },
          ],
          "ok": false,
          "pass": 0,
          "plan": FinalPlan {
            "comment": "",
            "end": null,
            "skipAll": false,
            "skipReason": "",
            "start": null,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "extra",
    "      ...\\n",
  ],
  Array [
    "extra",
    "      hello: world\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "child",
      "ok": false,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# failed 3 test\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 3,
      "failures": Array [
        Object {
          "data": "  ...\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "  hello: world\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Result {
          "fullname": "",
          "id": 1,
          "name": "child",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP strict-pragma-child-broken-diags.tap default settings > stringified 1`] = `
TAP version 13
pragma +strict
# Subtest: child
    not ok 1 - test point in child
    # test count(1) != plan(null)
    # failed 4 test
      ...
      hello: world
not ok 1 - child
1..1
# failed 3 test

`

exports[`test/parser-stringify.js TAP strict-pragma-child-broken-diags.tap default settings > stringified flat 1`] = `
TAP version 13
pragma +strict
# Subtest: child
    not ok 1 - test point in child
    # test count(1) != plan(null)
    # failed 4 test
      ...
      hello: world
not ok 1 - child
1..1
# failed 3 test

`

exports[`test/parser-stringify.js TAP strict-pragma-child-broken-diags.tap strict > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "pragma",
    "strict",
    true,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: child\\n",
      ],
      Array [
        "assert",
        Result {
          "fullname": "child",
          "id": 1,
          "name": "test point in child",
          "ok": false,
        },
      ],
      Array [
        "comment",
        "# test count(1) != plan(null)\\n",
      ],
      Array [
        "comment",
        "# failed 4 test\\n",
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 4,
          "failures": Array [
            Object {
              "data": "  ...\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "  hello: world\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Result {
              "fullname": "child",
              "id": 1,
              "name": "test point in child",
              "ok": false,
            },
            Object {
              "tapError": "no plan",
            },
          ],
          "ok": false,
          "pass": 0,
          "plan": FinalPlan {
            "comment": "",
            "end": null,
            "skipAll": false,
            "skipReason": "",
            "start": null,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "extra",
    "      ...\\n",
  ],
  Array [
    "extra",
    "      hello: world\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "child",
      "ok": false,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# failed 3 test\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 3,
      "failures": Array [
        Object {
          "data": "  ...\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "  hello: world\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Result {
          "fullname": "",
          "id": 1,
          "name": "child",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP strict-pragma-child-broken-diags.tap strict > stringified 1`] = `
TAP version 13
pragma +strict
# Subtest: child
    not ok 1 - test point in child
    # test count(1) != plan(null)
    # failed 4 test
      ...
      hello: world
not ok 1 - child
1..1
# failed 3 test

`

exports[`test/parser-stringify.js TAP strict-pragma-child-broken-diags.tap strict > stringified flat 1`] = `
TAP version 13
pragma +strict
# Subtest: child
    not ok 1 - test point in child
    # test count(1) != plan(null)
    # failed 4 test
      ...
      hello: world
not ok 1 - child
1..1
# failed 3 test

`

exports[`test/parser-stringify.js TAP strict-pragma-child-broken-diags.tap strictBail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "pragma",
    "strict",
    true,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: child\\n",
      ],
      Array [
        "assert",
        Result {
          "fullname": "child",
          "id": 1,
          "name": "test point in child",
          "ok": false,
        },
      ],
      Array [
        "bailout",
        "test point in child",
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": "test point in child",
          "count": 1,
          "fail": 3,
          "failures": Array [
            Object {
              "data": "  ...\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Object {
              "data": "  hello: world\\n",
              "tapError": "Non-TAP data encountered in strict mode",
            },
            Result {
              "fullname": "child",
              "id": 1,
              "name": "test point in child",
              "ok": false,
            },
          ],
          "ok": false,
          "pass": 0,
          "plan": FinalPlan {
            "comment": "",
            "end": null,
            "skipAll": false,
            "skipReason": "",
            "start": null,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "extra",
    "      ...\\n",
  ],
  Array [
    "extra",
    "      hello: world\\n",
  ],
  Array [
    "bailout",
    "test point in child",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": "test point in child",
      "count": 0,
      "fail": 2,
      "failures": Array [
        Object {
          "data": "  ...\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "  hello: world\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
      ],
      "ok": false,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": null,
        "skipAll": false,
        "skipReason": "",
        "start": null,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP strict-pragma-child-broken-diags.tap strictBail > stringified 1`] = `
TAP version 13
pragma +strict
# Subtest: child
    not ok 1 - test point in child
    Bail out! test point in child
      ...
      hello: world
Bail out! test point in child

`

exports[`test/parser-stringify.js TAP strict-pragma-child-broken-diags.tap strictBail > stringified flat 1`] = `
TAP version 13
pragma +strict
# Subtest: child
    not ok 1 - test point in child
    Bail out! test point in child
      ...
      hello: world
Bail out! test point in child

`

exports[`test/parser-stringify.js TAP strict.tap bail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "pragma",
    "strict",
    true,
  ],
  Array [
    "extra",
    "Nonsense!\\n",
  ],
  Array [
    "pragma",
    "strict",
    false,
  ],
  Array [
    "extra",
    "Doesn't matter.\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "All OK",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# failed 1 test\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 1,
      "failures": Array [
        Object {
          "data": "Nonsense!\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
      ],
      "ok": false,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP strict.tap bail > stringified 1`] = `
TAP version 13
1..1
pragma +strict
Nonsense!
pragma -strict
Doesn't matter.
ok 1 - All OK
# failed 1 test

`

exports[`test/parser-stringify.js TAP strict.tap bail > stringified flat 1`] = `
TAP version 13
1..1
pragma +strict
Nonsense!
pragma -strict
Doesn't matter.
ok 1 - All OK
# failed 1 test

`

exports[`test/parser-stringify.js TAP strict.tap default settings > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "pragma",
    "strict",
    true,
  ],
  Array [
    "extra",
    "Nonsense!\\n",
  ],
  Array [
    "pragma",
    "strict",
    false,
  ],
  Array [
    "extra",
    "Doesn't matter.\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "All OK",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# failed 1 test\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 1,
      "failures": Array [
        Object {
          "data": "Nonsense!\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
      ],
      "ok": false,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP strict.tap default settings > stringified 1`] = `
TAP version 13
1..1
pragma +strict
Nonsense!
pragma -strict
Doesn't matter.
ok 1 - All OK
# failed 1 test

`

exports[`test/parser-stringify.js TAP strict.tap default settings > stringified flat 1`] = `
TAP version 13
1..1
pragma +strict
Nonsense!
pragma -strict
Doesn't matter.
ok 1 - All OK
# failed 1 test

`

exports[`test/parser-stringify.js TAP strict.tap strict > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "pragma",
    "strict",
    true,
  ],
  Array [
    "extra",
    "Nonsense!\\n",
  ],
  Array [
    "pragma",
    "strict",
    false,
  ],
  Array [
    "extra",
    "Doesn't matter.\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "All OK",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# failed 1 test\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 1,
      "failures": Array [
        Object {
          "data": "Nonsense!\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
      ],
      "ok": false,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP strict.tap strict > stringified 1`] = `
TAP version 13
1..1
pragma +strict
Nonsense!
pragma -strict
Doesn't matter.
ok 1 - All OK
# failed 1 test

`

exports[`test/parser-stringify.js TAP strict.tap strict > stringified flat 1`] = `
TAP version 13
1..1
pragma +strict
Nonsense!
pragma -strict
Doesn't matter.
ok 1 - All OK
# failed 1 test

`

exports[`test/parser-stringify.js TAP strict.tap strictBail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "pragma",
    "strict",
    true,
  ],
  Array [
    "extra",
    "Nonsense!\\n",
  ],
  Array [
    "pragma",
    "strict",
    false,
  ],
  Array [
    "extra",
    "Doesn't matter.\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "All OK",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# failed 1 test\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 1,
      "failures": Array [
        Object {
          "data": "Nonsense!\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
      ],
      "ok": false,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP strict.tap strictBail > stringified 1`] = `
TAP version 13
1..1
pragma +strict
Nonsense!
pragma -strict
Doesn't matter.
ok 1 - All OK
# failed 1 test

`

exports[`test/parser-stringify.js TAP strict.tap strictBail > stringified flat 1`] = `
TAP version 13
1..1
pragma +strict
Nonsense!
pragma -strict
Doesn't matter.
ok 1 - All OK
# failed 1 test

`

exports[`test/parser-stringify.js TAP subtest-buffer-diags-time.tap bail > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 3,
      "start": 1,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: first\\n",
      ],
      Array [
        "assert",
        Result {
          "fullname": "first",
          "name": "x",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": 12.34,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "buffered": true,
      "fullname": "",
      "id": 1,
      "name": "first",
      "ok": true,
      "time": 12.34,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: second\\n",
      ],
      Array [
        "assert",
        Result {
          "fullname": "second",
          "name": "x",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": 12.34,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "buffered": true,
      "fullname": "",
      "id": 2,
      "name": "second",
      "ok": true,
      "time": 12.34,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: third\\n",
      ],
      Array [
        "assert",
        Result {
          "fullname": "third",
          "name": "y",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": 43.21,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "buffered": true,
      "diag": Object {
        "some": "diagnostic",
      },
      "fullname": "",
      "id": 3,
      "name": "third",
      "ok": true,
      "time": 43.21,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 3,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 3,
      "plan": FinalPlan {
        "comment": "",
        "end": 3,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP subtest-buffer-diags-time.tap bail > stringified 1`] = `
1..3
# Subtest: first
    ok - x
    1..1
ok 1 - first # time=12.34ms
# Subtest: second
    ok - x
    1..1
ok 2 - second # time=12.34ms
# Subtest: third
    ok - y
    1..1
ok 3 - third # time=43.21ms
  ---
  some: diagnostic
  ...

`

exports[`test/parser-stringify.js TAP subtest-buffer-diags-time.tap bail > stringified flat 1`] = `
1..3
# Subtest: first
    ok - x
    1..1
ok 1 - first # time=12.34ms
# Subtest: second
    ok - x
    1..1
ok 2 - second # time=12.34ms
# Subtest: third
    ok - y
    1..1
ok 3 - third # time=43.21ms
  ---
  some: diagnostic
  ...

`

exports[`test/parser-stringify.js TAP subtest-buffer-diags-time.tap default settings > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 3,
      "start": 1,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: first\\n",
      ],
      Array [
        "assert",
        Result {
          "fullname": "first",
          "name": "x",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": 12.34,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "buffered": true,
      "fullname": "",
      "id": 1,
      "name": "first",
      "ok": true,
      "time": 12.34,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: second\\n",
      ],
      Array [
        "assert",
        Result {
          "fullname": "second",
          "name": "x",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": 12.34,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "buffered": true,
      "fullname": "",
      "id": 2,
      "name": "second",
      "ok": true,
      "time": 12.34,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: third\\n",
      ],
      Array [
        "assert",
        Result {
          "fullname": "third",
          "name": "y",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": 43.21,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "buffered": true,
      "diag": Object {
        "some": "diagnostic",
      },
      "fullname": "",
      "id": 3,
      "name": "third",
      "ok": true,
      "time": 43.21,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 3,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 3,
      "plan": FinalPlan {
        "comment": "",
        "end": 3,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP subtest-buffer-diags-time.tap default settings > stringified 1`] = `
1..3
# Subtest: first
    ok - x
    1..1
ok 1 - first # time=12.34ms
# Subtest: second
    ok - x
    1..1
ok 2 - second # time=12.34ms
# Subtest: third
    ok - y
    1..1
ok 3 - third # time=43.21ms
  ---
  some: diagnostic
  ...

`

exports[`test/parser-stringify.js TAP subtest-buffer-diags-time.tap default settings > stringified flat 1`] = `
1..3
# Subtest: first
    ok - x
    1..1
ok 1 - first # time=12.34ms
# Subtest: second
    ok - x
    1..1
ok 2 - second # time=12.34ms
# Subtest: third
    ok - y
    1..1
ok 3 - third # time=43.21ms
  ---
  some: diagnostic
  ...

`

exports[`test/parser-stringify.js TAP subtest-buffer-diags-time.tap strict > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 3,
      "start": 1,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: first\\n",
      ],
      Array [
        "assert",
        Result {
          "fullname": "first",
          "name": "x",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": 12.34,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "buffered": true,
      "fullname": "",
      "id": 1,
      "name": "first",
      "ok": true,
      "time": 12.34,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: second\\n",
      ],
      Array [
        "assert",
        Result {
          "fullname": "second",
          "name": "x",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": 12.34,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "buffered": true,
      "fullname": "",
      "id": 2,
      "name": "second",
      "ok": true,
      "time": 12.34,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: third\\n",
      ],
      Array [
        "assert",
        Result {
          "fullname": "third",
          "name": "y",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": 43.21,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "buffered": true,
      "diag": Object {
        "some": "diagnostic",
      },
      "fullname": "",
      "id": 3,
      "name": "third",
      "ok": true,
      "time": 43.21,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 3,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 3,
      "plan": FinalPlan {
        "comment": "",
        "end": 3,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP subtest-buffer-diags-time.tap strict > stringified 1`] = `
1..3
# Subtest: first
    ok - x
    1..1
ok 1 - first # time=12.34ms
# Subtest: second
    ok - x
    1..1
ok 2 - second # time=12.34ms
# Subtest: third
    ok - y
    1..1
ok 3 - third # time=43.21ms
  ---
  some: diagnostic
  ...

`

exports[`test/parser-stringify.js TAP subtest-buffer-diags-time.tap strict > stringified flat 1`] = `
1..3
# Subtest: first
    ok - x
    1..1
ok 1 - first # time=12.34ms
# Subtest: second
    ok - x
    1..1
ok 2 - second # time=12.34ms
# Subtest: third
    ok - y
    1..1
ok 3 - third # time=43.21ms
  ---
  some: diagnostic
  ...

`

exports[`test/parser-stringify.js TAP subtest-buffer-diags-time.tap strictBail > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 3,
      "start": 1,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: first\\n",
      ],
      Array [
        "assert",
        Result {
          "fullname": "first",
          "name": "x",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": 12.34,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "buffered": true,
      "fullname": "",
      "id": 1,
      "name": "first",
      "ok": true,
      "time": 12.34,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: second\\n",
      ],
      Array [
        "assert",
        Result {
          "fullname": "second",
          "name": "x",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": 12.34,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "buffered": true,
      "fullname": "",
      "id": 2,
      "name": "second",
      "ok": true,
      "time": 12.34,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: third\\n",
      ],
      Array [
        "assert",
        Result {
          "fullname": "third",
          "name": "y",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": 43.21,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "buffered": true,
      "diag": Object {
        "some": "diagnostic",
      },
      "fullname": "",
      "id": 3,
      "name": "third",
      "ok": true,
      "time": 43.21,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 3,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 3,
      "plan": FinalPlan {
        "comment": "",
        "end": 3,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP subtest-buffer-diags-time.tap strictBail > stringified 1`] = `
1..3
# Subtest: first
    ok - x
    1..1
ok 1 - first # time=12.34ms
# Subtest: second
    ok - x
    1..1
ok 2 - second # time=12.34ms
# Subtest: third
    ok - y
    1..1
ok 3 - third # time=43.21ms
  ---
  some: diagnostic
  ...

`

exports[`test/parser-stringify.js TAP subtest-buffer-diags-time.tap strictBail > stringified flat 1`] = `
1..3
# Subtest: first
    ok - x
    1..1
ok 1 - first # time=12.34ms
# Subtest: second
    ok - x
    1..1
ok 2 - second # time=12.34ms
# Subtest: third
    ok - y
    1..1
ok 3 - third # time=43.21ms
  ---
  some: diagnostic
  ...

`

exports[`test/parser-stringify.js TAP subtest-buffer-todo.tap bail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: tbd\\n",
      ],
      Array [
        "assert",
        Result {
          "fullname": "tbd",
          "id": 1,
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "buffered": true,
      "fullname": "",
      "id": 1,
      "name": "tbd",
      "ok": true,
      "todo": "foo",
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: skippy\\n",
      ],
      Array [
        "assert",
        Result {
          "fullname": "skippy",
          "id": 1,
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "buffered": true,
      "fullname": "",
      "id": 2,
      "name": "skippy",
      "ok": true,
      "skip": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 2,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# todo: 1\\n",
  ],
  Array [
    "comment",
    "# skip: 1\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 2,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 2,
      "plan": FinalPlan {
        "comment": "",
        "end": 2,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 1,
      "time": null,
      "todo": 1,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP subtest-buffer-todo.tap bail > stringified 1`] = `
TAP version 13
# Subtest: tbd
    ok 1
    1..1
ok 1 - tbd # TODO foo
# Subtest: skippy
    ok 1
    1..1
ok 2 - skippy # SKIP
1..2
# todo: 1
# skip: 1

`

exports[`test/parser-stringify.js TAP subtest-buffer-todo.tap bail > stringified flat 1`] = `
TAP version 13
# Subtest: tbd
    ok 1
    1..1
ok 1 - tbd # TODO foo
# Subtest: skippy
    ok 1
    1..1
ok 2 - skippy # SKIP
1..2
# todo: 1
# skip: 1

`

exports[`test/parser-stringify.js TAP subtest-buffer-todo.tap default settings > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: tbd\\n",
      ],
      Array [
        "assert",
        Result {
          "fullname": "tbd",
          "id": 1,
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "buffered": true,
      "fullname": "",
      "id": 1,
      "name": "tbd",
      "ok": true,
      "todo": "foo",
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: skippy\\n",
      ],
      Array [
        "assert",
        Result {
          "fullname": "skippy",
          "id": 1,
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "buffered": true,
      "fullname": "",
      "id": 2,
      "name": "skippy",
      "ok": true,
      "skip": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 2,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# todo: 1\\n",
  ],
  Array [
    "comment",
    "# skip: 1\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 2,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 2,
      "plan": FinalPlan {
        "comment": "",
        "end": 2,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 1,
      "time": null,
      "todo": 1,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP subtest-buffer-todo.tap default settings > stringified 1`] = `
TAP version 13
# Subtest: tbd
    ok 1
    1..1
ok 1 - tbd # TODO foo
# Subtest: skippy
    ok 1
    1..1
ok 2 - skippy # SKIP
1..2
# todo: 1
# skip: 1

`

exports[`test/parser-stringify.js TAP subtest-buffer-todo.tap default settings > stringified flat 1`] = `
TAP version 13
# Subtest: tbd
    ok 1
    1..1
ok 1 - tbd # TODO foo
# Subtest: skippy
    ok 1
    1..1
ok 2 - skippy # SKIP
1..2
# todo: 1
# skip: 1

`

exports[`test/parser-stringify.js TAP subtest-buffer-todo.tap strict > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: tbd\\n",
      ],
      Array [
        "assert",
        Result {
          "fullname": "tbd",
          "id": 1,
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "buffered": true,
      "fullname": "",
      "id": 1,
      "name": "tbd",
      "ok": true,
      "todo": "foo",
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: skippy\\n",
      ],
      Array [
        "assert",
        Result {
          "fullname": "skippy",
          "id": 1,
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "buffered": true,
      "fullname": "",
      "id": 2,
      "name": "skippy",
      "ok": true,
      "skip": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 2,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# todo: 1\\n",
  ],
  Array [
    "comment",
    "# skip: 1\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 2,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 2,
      "plan": FinalPlan {
        "comment": "",
        "end": 2,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 1,
      "time": null,
      "todo": 1,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP subtest-buffer-todo.tap strict > stringified 1`] = `
TAP version 13
# Subtest: tbd
    ok 1
    1..1
ok 1 - tbd # TODO foo
# Subtest: skippy
    ok 1
    1..1
ok 2 - skippy # SKIP
1..2
# todo: 1
# skip: 1

`

exports[`test/parser-stringify.js TAP subtest-buffer-todo.tap strict > stringified flat 1`] = `
TAP version 13
# Subtest: tbd
    ok 1
    1..1
ok 1 - tbd # TODO foo
# Subtest: skippy
    ok 1
    1..1
ok 2 - skippy # SKIP
1..2
# todo: 1
# skip: 1

`

exports[`test/parser-stringify.js TAP subtest-buffer-todo.tap strictBail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: tbd\\n",
      ],
      Array [
        "assert",
        Result {
          "fullname": "tbd",
          "id": 1,
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "buffered": true,
      "fullname": "",
      "id": 1,
      "name": "tbd",
      "ok": true,
      "todo": "foo",
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: skippy\\n",
      ],
      Array [
        "assert",
        Result {
          "fullname": "skippy",
          "id": 1,
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "buffered": true,
      "fullname": "",
      "id": 2,
      "name": "skippy",
      "ok": true,
      "skip": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 2,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# todo: 1\\n",
  ],
  Array [
    "comment",
    "# skip: 1\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 2,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 2,
      "plan": FinalPlan {
        "comment": "",
        "end": 2,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 1,
      "time": null,
      "todo": 1,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP subtest-buffer-todo.tap strictBail > stringified 1`] = `
TAP version 13
# Subtest: tbd
    ok 1
    1..1
ok 1 - tbd # TODO foo
# Subtest: skippy
    ok 1
    1..1
ok 2 - skippy # SKIP
1..2
# todo: 1
# skip: 1

`

exports[`test/parser-stringify.js TAP subtest-buffer-todo.tap strictBail > stringified flat 1`] = `
TAP version 13
# Subtest: tbd
    ok 1
    1..1
ok 1 - tbd # TODO foo
# Subtest: skippy
    ok 1
    1..1
ok 2 - skippy # SKIP
1..2
# todo: 1
# skip: 1

`

exports[`test/parser-stringify.js TAP subtest-buffer.tap bail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: nesting\\n",
      ],
      Array [
        "plan",
        Object {
          "end": 2,
          "start": 1,
        },
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: first\\n",
          ],
          Array [
            "plan",
            Object {
              "end": 2,
              "start": 1,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "nesting first",
              "id": 1,
              "name": "true is ok",
              "ok": true,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "nesting first",
              "id": 2,
              "name": "doag is also okay",
              "ok": true,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 2,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 2,
              "plan": FinalPlan {
                "comment": "",
                "end": 2,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": null,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "buffered": true,
          "fullname": "nesting",
          "id": 1,
          "name": "first",
          "ok": true,
        },
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: second\\n",
          ],
          Array [
            "assert",
            Result {
              "fullname": "nesting second",
              "id": 1,
              "name": "but that is ok",
              "ok": true,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "nesting second",
              "id": 2,
              "name": "this passes",
              "ok": true,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "nesting second",
              "id": 3,
              "name": "nested ok",
              "ok": true,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 3,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 3,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 3,
              "plan": FinalPlan {
                "comment": "",
                "end": 3,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": null,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "buffered": true,
          "fullname": "nesting",
          "id": 2,
          "name": "second",
          "ok": true,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 2,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 2,
          "plan": FinalPlan {
            "comment": "",
            "end": 2,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "buffered": true,
      "fullname": "",
      "id": 1,
      "name": "nesting",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "this passes",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 2,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# time=66.857ms\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 2,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 2,
      "plan": FinalPlan {
        "comment": "",
        "end": 2,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": 66.857,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP subtest-buffer.tap bail > stringified 1`] = `
TAP version 13
# Subtest: nesting
    1..2
    # Subtest: first
        1..2
        ok 1 - true is ok
        ok 2 - doag is also okay
    ok 1 - first
    # Subtest: second
        ok 1 - but that is ok
        ok 2 - this passes
        ok 3 - nested ok
        1..3
    ok 2 - second
ok 1 - nesting
ok 2 - this passes
1..2
# time=66.857ms

`

exports[`test/parser-stringify.js TAP subtest-buffer.tap bail > stringified flat 1`] = `
TAP version 13
# Subtest: nesting
    1..2
    # Subtest: first
        1..2
        ok 1 - true is ok
        ok 2 - doag is also okay
    ok 1 - first
    # Subtest: second
        ok 1 - but that is ok
        ok 2 - this passes
        ok 3 - nested ok
        1..3
    ok 2 - second
ok 1 - nesting
ok 2 - this passes
1..2
# time=66.857ms

`

exports[`test/parser-stringify.js TAP subtest-buffer.tap default settings > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: nesting\\n",
      ],
      Array [
        "plan",
        Object {
          "end": 2,
          "start": 1,
        },
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: first\\n",
          ],
          Array [
            "plan",
            Object {
              "end": 2,
              "start": 1,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "nesting first",
              "id": 1,
              "name": "true is ok",
              "ok": true,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "nesting first",
              "id": 2,
              "name": "doag is also okay",
              "ok": true,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 2,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 2,
              "plan": FinalPlan {
                "comment": "",
                "end": 2,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": null,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "buffered": true,
          "fullname": "nesting",
          "id": 1,
          "name": "first",
          "ok": true,
        },
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: second\\n",
          ],
          Array [
            "assert",
            Result {
              "fullname": "nesting second",
              "id": 1,
              "name": "but that is ok",
              "ok": true,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "nesting second",
              "id": 2,
              "name": "this passes",
              "ok": true,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "nesting second",
              "id": 3,
              "name": "nested ok",
              "ok": true,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 3,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 3,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 3,
              "plan": FinalPlan {
                "comment": "",
                "end": 3,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": null,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "buffered": true,
          "fullname": "nesting",
          "id": 2,
          "name": "second",
          "ok": true,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 2,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 2,
          "plan": FinalPlan {
            "comment": "",
            "end": 2,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "buffered": true,
      "fullname": "",
      "id": 1,
      "name": "nesting",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "this passes",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 2,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# time=66.857ms\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 2,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 2,
      "plan": FinalPlan {
        "comment": "",
        "end": 2,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": 66.857,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP subtest-buffer.tap default settings > stringified 1`] = `
TAP version 13
# Subtest: nesting
    1..2
    # Subtest: first
        1..2
        ok 1 - true is ok
        ok 2 - doag is also okay
    ok 1 - first
    # Subtest: second
        ok 1 - but that is ok
        ok 2 - this passes
        ok 3 - nested ok
        1..3
    ok 2 - second
ok 1 - nesting
ok 2 - this passes
1..2
# time=66.857ms

`

exports[`test/parser-stringify.js TAP subtest-buffer.tap default settings > stringified flat 1`] = `
TAP version 13
# Subtest: nesting
    1..2
    # Subtest: first
        1..2
        ok 1 - true is ok
        ok 2 - doag is also okay
    ok 1 - first
    # Subtest: second
        ok 1 - but that is ok
        ok 2 - this passes
        ok 3 - nested ok
        1..3
    ok 2 - second
ok 1 - nesting
ok 2 - this passes
1..2
# time=66.857ms

`

exports[`test/parser-stringify.js TAP subtest-buffer.tap strict > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: nesting\\n",
      ],
      Array [
        "plan",
        Object {
          "end": 2,
          "start": 1,
        },
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: first\\n",
          ],
          Array [
            "plan",
            Object {
              "end": 2,
              "start": 1,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "nesting first",
              "id": 1,
              "name": "true is ok",
              "ok": true,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "nesting first",
              "id": 2,
              "name": "doag is also okay",
              "ok": true,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 2,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 2,
              "plan": FinalPlan {
                "comment": "",
                "end": 2,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": null,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "buffered": true,
          "fullname": "nesting",
          "id": 1,
          "name": "first",
          "ok": true,
        },
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: second\\n",
          ],
          Array [
            "assert",
            Result {
              "fullname": "nesting second",
              "id": 1,
              "name": "but that is ok",
              "ok": true,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "nesting second",
              "id": 2,
              "name": "this passes",
              "ok": true,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "nesting second",
              "id": 3,
              "name": "nested ok",
              "ok": true,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 3,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 3,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 3,
              "plan": FinalPlan {
                "comment": "",
                "end": 3,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": null,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "buffered": true,
          "fullname": "nesting",
          "id": 2,
          "name": "second",
          "ok": true,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 2,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 2,
          "plan": FinalPlan {
            "comment": "",
            "end": 2,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "buffered": true,
      "fullname": "",
      "id": 1,
      "name": "nesting",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "this passes",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 2,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# time=66.857ms\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 2,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 2,
      "plan": FinalPlan {
        "comment": "",
        "end": 2,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": 66.857,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP subtest-buffer.tap strict > stringified 1`] = `
TAP version 13
# Subtest: nesting
    1..2
    # Subtest: first
        1..2
        ok 1 - true is ok
        ok 2 - doag is also okay
    ok 1 - first
    # Subtest: second
        ok 1 - but that is ok
        ok 2 - this passes
        ok 3 - nested ok
        1..3
    ok 2 - second
ok 1 - nesting
ok 2 - this passes
1..2
# time=66.857ms

`

exports[`test/parser-stringify.js TAP subtest-buffer.tap strict > stringified flat 1`] = `
TAP version 13
# Subtest: nesting
    1..2
    # Subtest: first
        1..2
        ok 1 - true is ok
        ok 2 - doag is also okay
    ok 1 - first
    # Subtest: second
        ok 1 - but that is ok
        ok 2 - this passes
        ok 3 - nested ok
        1..3
    ok 2 - second
ok 1 - nesting
ok 2 - this passes
1..2
# time=66.857ms

`

exports[`test/parser-stringify.js TAP subtest-buffer.tap strictBail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: nesting\\n",
      ],
      Array [
        "plan",
        Object {
          "end": 2,
          "start": 1,
        },
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: first\\n",
          ],
          Array [
            "plan",
            Object {
              "end": 2,
              "start": 1,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "nesting first",
              "id": 1,
              "name": "true is ok",
              "ok": true,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "nesting first",
              "id": 2,
              "name": "doag is also okay",
              "ok": true,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 2,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 2,
              "plan": FinalPlan {
                "comment": "",
                "end": 2,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": null,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "buffered": true,
          "fullname": "nesting",
          "id": 1,
          "name": "first",
          "ok": true,
        },
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: second\\n",
          ],
          Array [
            "assert",
            Result {
              "fullname": "nesting second",
              "id": 1,
              "name": "but that is ok",
              "ok": true,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "nesting second",
              "id": 2,
              "name": "this passes",
              "ok": true,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "nesting second",
              "id": 3,
              "name": "nested ok",
              "ok": true,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 3,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 3,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 3,
              "plan": FinalPlan {
                "comment": "",
                "end": 3,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": null,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "buffered": true,
          "fullname": "nesting",
          "id": 2,
          "name": "second",
          "ok": true,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 2,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 2,
          "plan": FinalPlan {
            "comment": "",
            "end": 2,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "buffered": true,
      "fullname": "",
      "id": 1,
      "name": "nesting",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "this passes",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 2,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# time=66.857ms\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 2,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 2,
      "plan": FinalPlan {
        "comment": "",
        "end": 2,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": 66.857,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP subtest-buffer.tap strictBail > stringified 1`] = `
TAP version 13
# Subtest: nesting
    1..2
    # Subtest: first
        1..2
        ok 1 - true is ok
        ok 2 - doag is also okay
    ok 1 - first
    # Subtest: second
        ok 1 - but that is ok
        ok 2 - this passes
        ok 3 - nested ok
        1..3
    ok 2 - second
ok 1 - nesting
ok 2 - this passes
1..2
# time=66.857ms

`

exports[`test/parser-stringify.js TAP subtest-buffer.tap strictBail > stringified flat 1`] = `
TAP version 13
# Subtest: nesting
    1..2
    # Subtest: first
        1..2
        ok 1 - true is ok
        ok 2 - doag is also okay
    ok 1 - first
    # Subtest: second
        ok 1 - but that is ok
        ok 2 - this passes
        ok 3 - nested ok
        1..3
    ok 2 - second
ok 1 - nesting
ok 2 - this passes
1..2
# time=66.857ms

`

exports[`test/parser-stringify.js TAP subtest-comment-indent.tap bail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: ../tap/test/test/ok.js\\n",
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: nesting\\n",
          ],
          Array [
            "child",
            Array [
              Array [
                "comment",
                "# Subtest: first\\n",
              ],
              Array [
                "plan",
                Object {
                  "end": 2,
                  "start": 1,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "../tap/test/test/ok.js nesting first",
                  "id": 1,
                  "name": "true is ok",
                  "ok": true,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "../tap/test/test/ok.js nesting first",
                  "id": 2,
                  "name": "doag is also okay",
                  "ok": true,
                },
              ],
              Array [
                "complete",
                FinalResults {
                  "bailout": false,
                  "count": 2,
                  "fail": 0,
                  "failures": Array [],
                  "ok": true,
                  "pass": 2,
                  "plan": FinalPlan {
                    "comment": "",
                    "end": 2,
                    "skipAll": false,
                    "skipReason": "",
                    "start": 1,
                  },
                  "skip": 0,
                  "time": 8.987,
                  "todo": 0,
                },
              ],
            ],
          ],
          Array [
            "assert",
            Result {
              "fullname": "../tap/test/test/ok.js nesting",
              "id": 1,
              "name": "first",
              "ok": true,
              "time": 8.987,
            },
          ],
          Array [
            "child",
            Array [
              Array [
                "comment",
                "# Subtest: second\\n",
              ],
              Array [
                "assert",
                Result {
                  "fullname": "../tap/test/test/ok.js nesting second",
                  "id": 1,
                  "name": "but that is ok",
                  "ok": true,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "../tap/test/test/ok.js nesting second",
                  "id": 2,
                  "name": "this passes",
                  "ok": true,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "../tap/test/test/ok.js nesting second",
                  "id": 3,
                  "name": "nested ok",
                  "ok": true,
                },
              ],
              Array [
                "plan",
                Object {
                  "end": 3,
                  "start": 1,
                },
              ],
              Array [
                "complete",
                FinalResults {
                  "bailout": false,
                  "count": 3,
                  "fail": 0,
                  "failures": Array [],
                  "ok": true,
                  "pass": 3,
                  "plan": FinalPlan {
                    "comment": "",
                    "end": 3,
                    "skipAll": false,
                    "skipReason": "",
                    "start": 1,
                  },
                  "skip": 0,
                  "time": 5.988,
                  "todo": 0,
                },
              ],
            ],
          ],
          Array [
            "assert",
            Result {
              "fullname": "../tap/test/test/ok.js nesting",
              "id": 2,
              "name": "second",
              "ok": true,
              "time": 5.988,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 2,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 2,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 2,
              "plan": FinalPlan {
                "comment": "",
                "end": 2,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": 28.647,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "../tap/test/test/ok.js",
          "id": 1,
          "name": "nesting",
          "ok": true,
          "time": 28.647,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "../tap/test/test/ok.js",
          "id": 2,
          "name": "this passes",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 2,
          "start": 1,
        },
      ],
      Array [
        "comment",
        "# time=55.292ms\\n",
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 2,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 2,
          "plan": FinalPlan {
            "comment": "",
            "end": 2,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": 205.826,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "../tap/test/test/ok.js",
      "ok": true,
      "time": 205.826,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# time=223.468ms\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": 223.468,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP subtest-comment-indent.tap bail > stringified 1`] = `
TAP version 13
# Subtest: ../tap/test/test/ok.js
    # Subtest: nesting
        # Subtest: first
            1..2
            ok 1 - true is ok
            ok 2 - doag is also okay
        ok 1 - first # time=8.987ms
        # Subtest: second
            ok 1 - but that is ok
            ok 2 - this passes
            ok 3 - nested ok
            1..3
        ok 2 - second # time=5.988ms
        1..2
    ok 1 - nesting # time=28.647ms
    ok 2 - this passes
    1..2
    # time=55.292ms
ok 1 - ../tap/test/test/ok.js # time=205.826ms
1..1
# time=223.468ms

`

exports[`test/parser-stringify.js TAP subtest-comment-indent.tap bail > stringified flat 1`] = `
TAP version 13
# Subtest: ../tap/test/test/ok.js
    # Subtest: nesting
        # Subtest: first
            1..2
            ok 1 - true is ok
            ok 2 - doag is also okay
        ok 1 - first # time=8.987ms
        # Subtest: second
            ok 1 - but that is ok
            ok 2 - this passes
            ok 3 - nested ok
            1..3
        ok 2 - second # time=5.988ms
        1..2
    ok 1 - nesting # time=28.647ms
    ok 2 - this passes
    1..2
    # time=55.292ms
ok 1 - ../tap/test/test/ok.js # time=205.826ms
1..1
# time=223.468ms

`

exports[`test/parser-stringify.js TAP subtest-comment-indent.tap default settings > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: ../tap/test/test/ok.js\\n",
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: nesting\\n",
          ],
          Array [
            "child",
            Array [
              Array [
                "comment",
                "# Subtest: first\\n",
              ],
              Array [
                "plan",
                Object {
                  "end": 2,
                  "start": 1,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "../tap/test/test/ok.js nesting first",
                  "id": 1,
                  "name": "true is ok",
                  "ok": true,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "../tap/test/test/ok.js nesting first",
                  "id": 2,
                  "name": "doag is also okay",
                  "ok": true,
                },
              ],
              Array [
                "complete",
                FinalResults {
                  "bailout": false,
                  "count": 2,
                  "fail": 0,
                  "failures": Array [],
                  "ok": true,
                  "pass": 2,
                  "plan": FinalPlan {
                    "comment": "",
                    "end": 2,
                    "skipAll": false,
                    "skipReason": "",
                    "start": 1,
                  },
                  "skip": 0,
                  "time": 8.987,
                  "todo": 0,
                },
              ],
            ],
          ],
          Array [
            "assert",
            Result {
              "fullname": "../tap/test/test/ok.js nesting",
              "id": 1,
              "name": "first",
              "ok": true,
              "time": 8.987,
            },
          ],
          Array [
            "child",
            Array [
              Array [
                "comment",
                "# Subtest: second\\n",
              ],
              Array [
                "assert",
                Result {
                  "fullname": "../tap/test/test/ok.js nesting second",
                  "id": 1,
                  "name": "but that is ok",
                  "ok": true,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "../tap/test/test/ok.js nesting second",
                  "id": 2,
                  "name": "this passes",
                  "ok": true,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "../tap/test/test/ok.js nesting second",
                  "id": 3,
                  "name": "nested ok",
                  "ok": true,
                },
              ],
              Array [
                "plan",
                Object {
                  "end": 3,
                  "start": 1,
                },
              ],
              Array [
                "complete",
                FinalResults {
                  "bailout": false,
                  "count": 3,
                  "fail": 0,
                  "failures": Array [],
                  "ok": true,
                  "pass": 3,
                  "plan": FinalPlan {
                    "comment": "",
                    "end": 3,
                    "skipAll": false,
                    "skipReason": "",
                    "start": 1,
                  },
                  "skip": 0,
                  "time": 5.988,
                  "todo": 0,
                },
              ],
            ],
          ],
          Array [
            "assert",
            Result {
              "fullname": "../tap/test/test/ok.js nesting",
              "id": 2,
              "name": "second",
              "ok": true,
              "time": 5.988,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 2,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 2,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 2,
              "plan": FinalPlan {
                "comment": "",
                "end": 2,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": 28.647,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "../tap/test/test/ok.js",
          "id": 1,
          "name": "nesting",
          "ok": true,
          "time": 28.647,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "../tap/test/test/ok.js",
          "id": 2,
          "name": "this passes",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 2,
          "start": 1,
        },
      ],
      Array [
        "comment",
        "# time=55.292ms\\n",
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 2,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 2,
          "plan": FinalPlan {
            "comment": "",
            "end": 2,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": 205.826,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "../tap/test/test/ok.js",
      "ok": true,
      "time": 205.826,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# time=223.468ms\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": 223.468,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP subtest-comment-indent.tap default settings > stringified 1`] = `
TAP version 13
# Subtest: ../tap/test/test/ok.js
    # Subtest: nesting
        # Subtest: first
            1..2
            ok 1 - true is ok
            ok 2 - doag is also okay
        ok 1 - first # time=8.987ms
        # Subtest: second
            ok 1 - but that is ok
            ok 2 - this passes
            ok 3 - nested ok
            1..3
        ok 2 - second # time=5.988ms
        1..2
    ok 1 - nesting # time=28.647ms
    ok 2 - this passes
    1..2
    # time=55.292ms
ok 1 - ../tap/test/test/ok.js # time=205.826ms
1..1
# time=223.468ms

`

exports[`test/parser-stringify.js TAP subtest-comment-indent.tap default settings > stringified flat 1`] = `
TAP version 13
# Subtest: ../tap/test/test/ok.js
    # Subtest: nesting
        # Subtest: first
            1..2
            ok 1 - true is ok
            ok 2 - doag is also okay
        ok 1 - first # time=8.987ms
        # Subtest: second
            ok 1 - but that is ok
            ok 2 - this passes
            ok 3 - nested ok
            1..3
        ok 2 - second # time=5.988ms
        1..2
    ok 1 - nesting # time=28.647ms
    ok 2 - this passes
    1..2
    # time=55.292ms
ok 1 - ../tap/test/test/ok.js # time=205.826ms
1..1
# time=223.468ms

`

exports[`test/parser-stringify.js TAP subtest-comment-indent.tap strict > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: ../tap/test/test/ok.js\\n",
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: nesting\\n",
          ],
          Array [
            "child",
            Array [
              Array [
                "comment",
                "# Subtest: first\\n",
              ],
              Array [
                "plan",
                Object {
                  "end": 2,
                  "start": 1,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "../tap/test/test/ok.js nesting first",
                  "id": 1,
                  "name": "true is ok",
                  "ok": true,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "../tap/test/test/ok.js nesting first",
                  "id": 2,
                  "name": "doag is also okay",
                  "ok": true,
                },
              ],
              Array [
                "complete",
                FinalResults {
                  "bailout": false,
                  "count": 2,
                  "fail": 0,
                  "failures": Array [],
                  "ok": true,
                  "pass": 2,
                  "plan": FinalPlan {
                    "comment": "",
                    "end": 2,
                    "skipAll": false,
                    "skipReason": "",
                    "start": 1,
                  },
                  "skip": 0,
                  "time": 8.987,
                  "todo": 0,
                },
              ],
            ],
          ],
          Array [
            "assert",
            Result {
              "fullname": "../tap/test/test/ok.js nesting",
              "id": 1,
              "name": "first",
              "ok": true,
              "time": 8.987,
            },
          ],
          Array [
            "child",
            Array [
              Array [
                "comment",
                "# Subtest: second\\n",
              ],
              Array [
                "assert",
                Result {
                  "fullname": "../tap/test/test/ok.js nesting second",
                  "id": 1,
                  "name": "but that is ok",
                  "ok": true,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "../tap/test/test/ok.js nesting second",
                  "id": 2,
                  "name": "this passes",
                  "ok": true,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "../tap/test/test/ok.js nesting second",
                  "id": 3,
                  "name": "nested ok",
                  "ok": true,
                },
              ],
              Array [
                "plan",
                Object {
                  "end": 3,
                  "start": 1,
                },
              ],
              Array [
                "complete",
                FinalResults {
                  "bailout": false,
                  "count": 3,
                  "fail": 0,
                  "failures": Array [],
                  "ok": true,
                  "pass": 3,
                  "plan": FinalPlan {
                    "comment": "",
                    "end": 3,
                    "skipAll": false,
                    "skipReason": "",
                    "start": 1,
                  },
                  "skip": 0,
                  "time": 5.988,
                  "todo": 0,
                },
              ],
            ],
          ],
          Array [
            "assert",
            Result {
              "fullname": "../tap/test/test/ok.js nesting",
              "id": 2,
              "name": "second",
              "ok": true,
              "time": 5.988,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 2,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 2,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 2,
              "plan": FinalPlan {
                "comment": "",
                "end": 2,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": 28.647,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "../tap/test/test/ok.js",
          "id": 1,
          "name": "nesting",
          "ok": true,
          "time": 28.647,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "../tap/test/test/ok.js",
          "id": 2,
          "name": "this passes",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 2,
          "start": 1,
        },
      ],
      Array [
        "comment",
        "# time=55.292ms\\n",
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 2,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 2,
          "plan": FinalPlan {
            "comment": "",
            "end": 2,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": 205.826,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "../tap/test/test/ok.js",
      "ok": true,
      "time": 205.826,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# time=223.468ms\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": 223.468,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP subtest-comment-indent.tap strict > stringified 1`] = `
TAP version 13
# Subtest: ../tap/test/test/ok.js
    # Subtest: nesting
        # Subtest: first
            1..2
            ok 1 - true is ok
            ok 2 - doag is also okay
        ok 1 - first # time=8.987ms
        # Subtest: second
            ok 1 - but that is ok
            ok 2 - this passes
            ok 3 - nested ok
            1..3
        ok 2 - second # time=5.988ms
        1..2
    ok 1 - nesting # time=28.647ms
    ok 2 - this passes
    1..2
    # time=55.292ms
ok 1 - ../tap/test/test/ok.js # time=205.826ms
1..1
# time=223.468ms

`

exports[`test/parser-stringify.js TAP subtest-comment-indent.tap strict > stringified flat 1`] = `
TAP version 13
# Subtest: ../tap/test/test/ok.js
    # Subtest: nesting
        # Subtest: first
            1..2
            ok 1 - true is ok
            ok 2 - doag is also okay
        ok 1 - first # time=8.987ms
        # Subtest: second
            ok 1 - but that is ok
            ok 2 - this passes
            ok 3 - nested ok
            1..3
        ok 2 - second # time=5.988ms
        1..2
    ok 1 - nesting # time=28.647ms
    ok 2 - this passes
    1..2
    # time=55.292ms
ok 1 - ../tap/test/test/ok.js # time=205.826ms
1..1
# time=223.468ms

`

exports[`test/parser-stringify.js TAP subtest-comment-indent.tap strictBail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: ../tap/test/test/ok.js\\n",
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: nesting\\n",
          ],
          Array [
            "child",
            Array [
              Array [
                "comment",
                "# Subtest: first\\n",
              ],
              Array [
                "plan",
                Object {
                  "end": 2,
                  "start": 1,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "../tap/test/test/ok.js nesting first",
                  "id": 1,
                  "name": "true is ok",
                  "ok": true,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "../tap/test/test/ok.js nesting first",
                  "id": 2,
                  "name": "doag is also okay",
                  "ok": true,
                },
              ],
              Array [
                "complete",
                FinalResults {
                  "bailout": false,
                  "count": 2,
                  "fail": 0,
                  "failures": Array [],
                  "ok": true,
                  "pass": 2,
                  "plan": FinalPlan {
                    "comment": "",
                    "end": 2,
                    "skipAll": false,
                    "skipReason": "",
                    "start": 1,
                  },
                  "skip": 0,
                  "time": 8.987,
                  "todo": 0,
                },
              ],
            ],
          ],
          Array [
            "assert",
            Result {
              "fullname": "../tap/test/test/ok.js nesting",
              "id": 1,
              "name": "first",
              "ok": true,
              "time": 8.987,
            },
          ],
          Array [
            "child",
            Array [
              Array [
                "comment",
                "# Subtest: second\\n",
              ],
              Array [
                "assert",
                Result {
                  "fullname": "../tap/test/test/ok.js nesting second",
                  "id": 1,
                  "name": "but that is ok",
                  "ok": true,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "../tap/test/test/ok.js nesting second",
                  "id": 2,
                  "name": "this passes",
                  "ok": true,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "../tap/test/test/ok.js nesting second",
                  "id": 3,
                  "name": "nested ok",
                  "ok": true,
                },
              ],
              Array [
                "plan",
                Object {
                  "end": 3,
                  "start": 1,
                },
              ],
              Array [
                "complete",
                FinalResults {
                  "bailout": false,
                  "count": 3,
                  "fail": 0,
                  "failures": Array [],
                  "ok": true,
                  "pass": 3,
                  "plan": FinalPlan {
                    "comment": "",
                    "end": 3,
                    "skipAll": false,
                    "skipReason": "",
                    "start": 1,
                  },
                  "skip": 0,
                  "time": 5.988,
                  "todo": 0,
                },
              ],
            ],
          ],
          Array [
            "assert",
            Result {
              "fullname": "../tap/test/test/ok.js nesting",
              "id": 2,
              "name": "second",
              "ok": true,
              "time": 5.988,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 2,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 2,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 2,
              "plan": FinalPlan {
                "comment": "",
                "end": 2,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": 28.647,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "../tap/test/test/ok.js",
          "id": 1,
          "name": "nesting",
          "ok": true,
          "time": 28.647,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "../tap/test/test/ok.js",
          "id": 2,
          "name": "this passes",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 2,
          "start": 1,
        },
      ],
      Array [
        "comment",
        "# time=55.292ms\\n",
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 2,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 2,
          "plan": FinalPlan {
            "comment": "",
            "end": 2,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": 205.826,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "../tap/test/test/ok.js",
      "ok": true,
      "time": 205.826,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# time=223.468ms\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": 223.468,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP subtest-comment-indent.tap strictBail > stringified 1`] = `
TAP version 13
# Subtest: ../tap/test/test/ok.js
    # Subtest: nesting
        # Subtest: first
            1..2
            ok 1 - true is ok
            ok 2 - doag is also okay
        ok 1 - first # time=8.987ms
        # Subtest: second
            ok 1 - but that is ok
            ok 2 - this passes
            ok 3 - nested ok
            1..3
        ok 2 - second # time=5.988ms
        1..2
    ok 1 - nesting # time=28.647ms
    ok 2 - this passes
    1..2
    # time=55.292ms
ok 1 - ../tap/test/test/ok.js # time=205.826ms
1..1
# time=223.468ms

`

exports[`test/parser-stringify.js TAP subtest-comment-indent.tap strictBail > stringified flat 1`] = `
TAP version 13
# Subtest: ../tap/test/test/ok.js
    # Subtest: nesting
        # Subtest: first
            1..2
            ok 1 - true is ok
            ok 2 - doag is also okay
        ok 1 - first # time=8.987ms
        # Subtest: second
            ok 1 - but that is ok
            ok 2 - this passes
            ok 3 - nested ok
            1..3
        ok 2 - second # time=5.988ms
        1..2
    ok 1 - nesting # time=28.647ms
    ok 2 - this passes
    1..2
    # time=55.292ms
ok 1 - ../tap/test/test/ok.js # time=205.826ms
1..1
# time=223.468ms

`

exports[`test/parser-stringify.js TAP subtest-comment-leading.tap bail > parsed 1`] = `
Array [
  Array [
    "comment",
    "# Subtest: test/test/ok.js\\n",
  ],
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: nesting\\n",
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: first\\n",
          ],
          Array [
            "plan",
            Object {
              "end": 2,
              "start": 1,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "nesting first",
              "id": 1,
              "name": "true is ok",
              "ok": true,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "nesting first",
              "id": 2,
              "name": "doag is also okay",
              "ok": true,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 2,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 2,
              "plan": FinalPlan {
                "comment": "",
                "end": 2,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": 8.987,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "nesting",
          "id": 1,
          "name": "first",
          "ok": true,
          "time": 8.987,
        },
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: second\\n",
          ],
          Array [
            "assert",
            Result {
              "fullname": "nesting second",
              "id": 1,
              "name": "but that is ok",
              "ok": true,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "nesting second",
              "id": 2,
              "name": "this passes",
              "ok": true,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "nesting second",
              "id": 3,
              "name": "nested ok",
              "ok": true,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 3,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 3,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 3,
              "plan": FinalPlan {
                "comment": "",
                "end": 3,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": 5.988,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "nesting",
          "id": 2,
          "name": "second",
          "ok": true,
          "time": 5.988,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 2,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 2,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 2,
          "plan": FinalPlan {
            "comment": "",
            "end": 2,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": 28.647,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "nesting",
      "ok": true,
      "time": 28.647,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "this passes",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 2,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# time=55.292ms\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 2,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 2,
      "plan": FinalPlan {
        "comment": "",
        "end": 2,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": 55.292,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP subtest-comment-leading.tap bail > stringified 1`] = `
# Subtest: test/test/ok.js
TAP version 13
# Subtest: nesting
    # Subtest: first
        1..2
        ok 1 - true is ok
        ok 2 - doag is also okay
    ok 1 - first # time=8.987ms
    # Subtest: second
        ok 1 - but that is ok
        ok 2 - this passes
        ok 3 - nested ok
        1..3
    ok 2 - second # time=5.988ms
    1..2
ok 1 - nesting # time=28.647ms
ok 2 - this passes
1..2
# time=55.292ms

`

exports[`test/parser-stringify.js TAP subtest-comment-leading.tap bail > stringified flat 1`] = `
# Subtest: test/test/ok.js
TAP version 13
# Subtest: nesting
    # Subtest: first
        1..2
        ok 1 - true is ok
        ok 2 - doag is also okay
    ok 1 - first # time=8.987ms
    # Subtest: second
        ok 1 - but that is ok
        ok 2 - this passes
        ok 3 - nested ok
        1..3
    ok 2 - second # time=5.988ms
    1..2
ok 1 - nesting # time=28.647ms
ok 2 - this passes
1..2
# time=55.292ms

`

exports[`test/parser-stringify.js TAP subtest-comment-leading.tap default settings > parsed 1`] = `
Array [
  Array [
    "comment",
    "# Subtest: test/test/ok.js\\n",
  ],
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: nesting\\n",
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: first\\n",
          ],
          Array [
            "plan",
            Object {
              "end": 2,
              "start": 1,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "nesting first",
              "id": 1,
              "name": "true is ok",
              "ok": true,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "nesting first",
              "id": 2,
              "name": "doag is also okay",
              "ok": true,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 2,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 2,
              "plan": FinalPlan {
                "comment": "",
                "end": 2,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": 8.987,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "nesting",
          "id": 1,
          "name": "first",
          "ok": true,
          "time": 8.987,
        },
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: second\\n",
          ],
          Array [
            "assert",
            Result {
              "fullname": "nesting second",
              "id": 1,
              "name": "but that is ok",
              "ok": true,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "nesting second",
              "id": 2,
              "name": "this passes",
              "ok": true,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "nesting second",
              "id": 3,
              "name": "nested ok",
              "ok": true,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 3,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 3,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 3,
              "plan": FinalPlan {
                "comment": "",
                "end": 3,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": 5.988,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "nesting",
          "id": 2,
          "name": "second",
          "ok": true,
          "time": 5.988,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 2,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 2,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 2,
          "plan": FinalPlan {
            "comment": "",
            "end": 2,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": 28.647,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "nesting",
      "ok": true,
      "time": 28.647,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "this passes",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 2,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# time=55.292ms\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 2,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 2,
      "plan": FinalPlan {
        "comment": "",
        "end": 2,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": 55.292,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP subtest-comment-leading.tap default settings > stringified 1`] = `
# Subtest: test/test/ok.js
TAP version 13
# Subtest: nesting
    # Subtest: first
        1..2
        ok 1 - true is ok
        ok 2 - doag is also okay
    ok 1 - first # time=8.987ms
    # Subtest: second
        ok 1 - but that is ok
        ok 2 - this passes
        ok 3 - nested ok
        1..3
    ok 2 - second # time=5.988ms
    1..2
ok 1 - nesting # time=28.647ms
ok 2 - this passes
1..2
# time=55.292ms

`

exports[`test/parser-stringify.js TAP subtest-comment-leading.tap default settings > stringified flat 1`] = `
# Subtest: test/test/ok.js
TAP version 13
# Subtest: nesting
    # Subtest: first
        1..2
        ok 1 - true is ok
        ok 2 - doag is also okay
    ok 1 - first # time=8.987ms
    # Subtest: second
        ok 1 - but that is ok
        ok 2 - this passes
        ok 3 - nested ok
        1..3
    ok 2 - second # time=5.988ms
    1..2
ok 1 - nesting # time=28.647ms
ok 2 - this passes
1..2
# time=55.292ms

`

exports[`test/parser-stringify.js TAP subtest-comment-leading.tap strict > parsed 1`] = `
Array [
  Array [
    "comment",
    "# Subtest: test/test/ok.js\\n",
  ],
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: nesting\\n",
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: first\\n",
          ],
          Array [
            "plan",
            Object {
              "end": 2,
              "start": 1,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "nesting first",
              "id": 1,
              "name": "true is ok",
              "ok": true,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "nesting first",
              "id": 2,
              "name": "doag is also okay",
              "ok": true,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 2,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 2,
              "plan": FinalPlan {
                "comment": "",
                "end": 2,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": 8.987,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "nesting",
          "id": 1,
          "name": "first",
          "ok": true,
          "time": 8.987,
        },
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: second\\n",
          ],
          Array [
            "assert",
            Result {
              "fullname": "nesting second",
              "id": 1,
              "name": "but that is ok",
              "ok": true,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "nesting second",
              "id": 2,
              "name": "this passes",
              "ok": true,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "nesting second",
              "id": 3,
              "name": "nested ok",
              "ok": true,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 3,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 3,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 3,
              "plan": FinalPlan {
                "comment": "",
                "end": 3,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": 5.988,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "nesting",
          "id": 2,
          "name": "second",
          "ok": true,
          "time": 5.988,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 2,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 2,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 2,
          "plan": FinalPlan {
            "comment": "",
            "end": 2,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": 28.647,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "nesting",
      "ok": true,
      "time": 28.647,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "this passes",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 2,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# time=55.292ms\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 2,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 2,
      "plan": FinalPlan {
        "comment": "",
        "end": 2,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": 55.292,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP subtest-comment-leading.tap strict > stringified 1`] = `
# Subtest: test/test/ok.js
TAP version 13
# Subtest: nesting
    # Subtest: first
        1..2
        ok 1 - true is ok
        ok 2 - doag is also okay
    ok 1 - first # time=8.987ms
    # Subtest: second
        ok 1 - but that is ok
        ok 2 - this passes
        ok 3 - nested ok
        1..3
    ok 2 - second # time=5.988ms
    1..2
ok 1 - nesting # time=28.647ms
ok 2 - this passes
1..2
# time=55.292ms

`

exports[`test/parser-stringify.js TAP subtest-comment-leading.tap strict > stringified flat 1`] = `
# Subtest: test/test/ok.js
TAP version 13
# Subtest: nesting
    # Subtest: first
        1..2
        ok 1 - true is ok
        ok 2 - doag is also okay
    ok 1 - first # time=8.987ms
    # Subtest: second
        ok 1 - but that is ok
        ok 2 - this passes
        ok 3 - nested ok
        1..3
    ok 2 - second # time=5.988ms
    1..2
ok 1 - nesting # time=28.647ms
ok 2 - this passes
1..2
# time=55.292ms

`

exports[`test/parser-stringify.js TAP subtest-comment-leading.tap strictBail > parsed 1`] = `
Array [
  Array [
    "comment",
    "# Subtest: test/test/ok.js\\n",
  ],
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: nesting\\n",
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: first\\n",
          ],
          Array [
            "plan",
            Object {
              "end": 2,
              "start": 1,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "nesting first",
              "id": 1,
              "name": "true is ok",
              "ok": true,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "nesting first",
              "id": 2,
              "name": "doag is also okay",
              "ok": true,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 2,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 2,
              "plan": FinalPlan {
                "comment": "",
                "end": 2,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": 8.987,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "nesting",
          "id": 1,
          "name": "first",
          "ok": true,
          "time": 8.987,
        },
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: second\\n",
          ],
          Array [
            "assert",
            Result {
              "fullname": "nesting second",
              "id": 1,
              "name": "but that is ok",
              "ok": true,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "nesting second",
              "id": 2,
              "name": "this passes",
              "ok": true,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "nesting second",
              "id": 3,
              "name": "nested ok",
              "ok": true,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 3,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 3,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 3,
              "plan": FinalPlan {
                "comment": "",
                "end": 3,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": 5.988,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "nesting",
          "id": 2,
          "name": "second",
          "ok": true,
          "time": 5.988,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 2,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 2,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 2,
          "plan": FinalPlan {
            "comment": "",
            "end": 2,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": 28.647,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "nesting",
      "ok": true,
      "time": 28.647,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "this passes",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 2,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# time=55.292ms\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 2,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 2,
      "plan": FinalPlan {
        "comment": "",
        "end": 2,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": 55.292,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP subtest-comment-leading.tap strictBail > stringified 1`] = `
# Subtest: test/test/ok.js
TAP version 13
# Subtest: nesting
    # Subtest: first
        1..2
        ok 1 - true is ok
        ok 2 - doag is also okay
    ok 1 - first # time=8.987ms
    # Subtest: second
        ok 1 - but that is ok
        ok 2 - this passes
        ok 3 - nested ok
        1..3
    ok 2 - second # time=5.988ms
    1..2
ok 1 - nesting # time=28.647ms
ok 2 - this passes
1..2
# time=55.292ms

`

exports[`test/parser-stringify.js TAP subtest-comment-leading.tap strictBail > stringified flat 1`] = `
# Subtest: test/test/ok.js
TAP version 13
# Subtest: nesting
    # Subtest: first
        1..2
        ok 1 - true is ok
        ok 2 - doag is also okay
    ok 1 - first # time=8.987ms
    # Subtest: second
        ok 1 - but that is ok
        ok 2 - this passes
        ok 3 - nested ok
        1..3
    ok 2 - second # time=5.988ms
    1..2
ok 1 - nesting # time=28.647ms
ok 2 - this passes
1..2
# time=55.292ms

`

exports[`test/parser-stringify.js TAP subtest-comment-mixed-indent.tap bail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: ../tap/test/test/ok.js\\n",
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: nesting\\n",
          ],
          Array [
            "child",
            Array [
              Array [
                "comment",
                "# Subtest: first\\n",
              ],
              Array [
                "plan",
                Object {
                  "end": 2,
                  "start": 1,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "../tap/test/test/ok.js nesting first",
                  "id": 1,
                  "name": "true is ok",
                  "ok": true,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "../tap/test/test/ok.js nesting first",
                  "id": 2,
                  "name": "doag is also okay",
                  "ok": true,
                },
              ],
              Array [
                "complete",
                FinalResults {
                  "bailout": false,
                  "count": 2,
                  "fail": 0,
                  "failures": Array [],
                  "ok": true,
                  "pass": 2,
                  "plan": FinalPlan {
                    "comment": "",
                    "end": 2,
                    "skipAll": false,
                    "skipReason": "",
                    "start": 1,
                  },
                  "skip": 0,
                  "time": 8.987,
                  "todo": 0,
                },
              ],
            ],
          ],
          Array [
            "assert",
            Result {
              "fullname": "../tap/test/test/ok.js nesting",
              "id": 1,
              "name": "first",
              "ok": true,
              "time": 8.987,
            },
          ],
          Array [
            "child",
            Array [
              Array [
                "comment",
                "# Subtest: second\\n",
              ],
              Array [
                "assert",
                Result {
                  "fullname": "../tap/test/test/ok.js nesting second",
                  "id": 1,
                  "name": "but that is ok",
                  "ok": true,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "../tap/test/test/ok.js nesting second",
                  "id": 2,
                  "name": "this passes",
                  "ok": true,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "../tap/test/test/ok.js nesting second",
                  "id": 3,
                  "name": "nested ok",
                  "ok": true,
                },
              ],
              Array [
                "plan",
                Object {
                  "end": 3,
                  "start": 1,
                },
              ],
              Array [
                "complete",
                FinalResults {
                  "bailout": false,
                  "count": 3,
                  "fail": 0,
                  "failures": Array [],
                  "ok": true,
                  "pass": 3,
                  "plan": FinalPlan {
                    "comment": "",
                    "end": 3,
                    "skipAll": false,
                    "skipReason": "",
                    "start": 1,
                  },
                  "skip": 0,
                  "time": 5.988,
                  "todo": 0,
                },
              ],
            ],
          ],
          Array [
            "assert",
            Result {
              "fullname": "../tap/test/test/ok.js nesting",
              "id": 2,
              "name": "second",
              "ok": true,
              "time": 5.988,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 2,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 2,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 2,
              "plan": FinalPlan {
                "comment": "",
                "end": 2,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": 28.647,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "../tap/test/test/ok.js",
          "id": 1,
          "name": "nesting",
          "ok": true,
          "time": 28.647,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "../tap/test/test/ok.js",
          "id": 2,
          "name": "this passes",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 2,
          "start": 1,
        },
      ],
      Array [
        "comment",
        "# time=55.292ms\\n",
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 2,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 2,
          "plan": FinalPlan {
            "comment": "",
            "end": 2,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": 205.826,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "../tap/test/test/ok.js",
      "ok": true,
      "time": 205.826,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# time=223.468ms\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": 223.468,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP subtest-comment-mixed-indent.tap bail > stringified 1`] = `
TAP version 13
# Subtest: ../tap/test/test/ok.js
    # Subtest: nesting
        # Subtest: first
            1..2
            ok 1 - true is ok
            ok 2 - doag is also okay
        ok 1 - first # time=8.987ms
        # Subtest: second
            ok 1 - but that is ok
            ok 2 - this passes
            ok 3 - nested ok
            1..3
        ok 2 - second # time=5.988ms
        1..2
    ok 1 - nesting # time=28.647ms
    ok 2 - this passes
    1..2
    # time=55.292ms
ok 1 - ../tap/test/test/ok.js # time=205.826ms
1..1
# time=223.468ms

`

exports[`test/parser-stringify.js TAP subtest-comment-mixed-indent.tap bail > stringified flat 1`] = `
TAP version 13
# Subtest: ../tap/test/test/ok.js
    # Subtest: nesting
        # Subtest: first
            1..2
            ok 1 - true is ok
            ok 2 - doag is also okay
        ok 1 - first # time=8.987ms
        # Subtest: second
            ok 1 - but that is ok
            ok 2 - this passes
            ok 3 - nested ok
            1..3
        ok 2 - second # time=5.988ms
        1..2
    ok 1 - nesting # time=28.647ms
    ok 2 - this passes
    1..2
    # time=55.292ms
ok 1 - ../tap/test/test/ok.js # time=205.826ms
1..1
# time=223.468ms

`

exports[`test/parser-stringify.js TAP subtest-comment-mixed-indent.tap default settings > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: ../tap/test/test/ok.js\\n",
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: nesting\\n",
          ],
          Array [
            "child",
            Array [
              Array [
                "comment",
                "# Subtest: first\\n",
              ],
              Array [
                "plan",
                Object {
                  "end": 2,
                  "start": 1,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "../tap/test/test/ok.js nesting first",
                  "id": 1,
                  "name": "true is ok",
                  "ok": true,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "../tap/test/test/ok.js nesting first",
                  "id": 2,
                  "name": "doag is also okay",
                  "ok": true,
                },
              ],
              Array [
                "complete",
                FinalResults {
                  "bailout": false,
                  "count": 2,
                  "fail": 0,
                  "failures": Array [],
                  "ok": true,
                  "pass": 2,
                  "plan": FinalPlan {
                    "comment": "",
                    "end": 2,
                    "skipAll": false,
                    "skipReason": "",
                    "start": 1,
                  },
                  "skip": 0,
                  "time": 8.987,
                  "todo": 0,
                },
              ],
            ],
          ],
          Array [
            "assert",
            Result {
              "fullname": "../tap/test/test/ok.js nesting",
              "id": 1,
              "name": "first",
              "ok": true,
              "time": 8.987,
            },
          ],
          Array [
            "child",
            Array [
              Array [
                "comment",
                "# Subtest: second\\n",
              ],
              Array [
                "assert",
                Result {
                  "fullname": "../tap/test/test/ok.js nesting second",
                  "id": 1,
                  "name": "but that is ok",
                  "ok": true,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "../tap/test/test/ok.js nesting second",
                  "id": 2,
                  "name": "this passes",
                  "ok": true,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "../tap/test/test/ok.js nesting second",
                  "id": 3,
                  "name": "nested ok",
                  "ok": true,
                },
              ],
              Array [
                "plan",
                Object {
                  "end": 3,
                  "start": 1,
                },
              ],
              Array [
                "complete",
                FinalResults {
                  "bailout": false,
                  "count": 3,
                  "fail": 0,
                  "failures": Array [],
                  "ok": true,
                  "pass": 3,
                  "plan": FinalPlan {
                    "comment": "",
                    "end": 3,
                    "skipAll": false,
                    "skipReason": "",
                    "start": 1,
                  },
                  "skip": 0,
                  "time": 5.988,
                  "todo": 0,
                },
              ],
            ],
          ],
          Array [
            "assert",
            Result {
              "fullname": "../tap/test/test/ok.js nesting",
              "id": 2,
              "name": "second",
              "ok": true,
              "time": 5.988,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 2,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 2,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 2,
              "plan": FinalPlan {
                "comment": "",
                "end": 2,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": 28.647,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "../tap/test/test/ok.js",
          "id": 1,
          "name": "nesting",
          "ok": true,
          "time": 28.647,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "../tap/test/test/ok.js",
          "id": 2,
          "name": "this passes",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 2,
          "start": 1,
        },
      ],
      Array [
        "comment",
        "# time=55.292ms\\n",
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 2,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 2,
          "plan": FinalPlan {
            "comment": "",
            "end": 2,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": 205.826,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "../tap/test/test/ok.js",
      "ok": true,
      "time": 205.826,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# time=223.468ms\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": 223.468,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP subtest-comment-mixed-indent.tap default settings > stringified 1`] = `
TAP version 13
# Subtest: ../tap/test/test/ok.js
    # Subtest: nesting
        # Subtest: first
            1..2
            ok 1 - true is ok
            ok 2 - doag is also okay
        ok 1 - first # time=8.987ms
        # Subtest: second
            ok 1 - but that is ok
            ok 2 - this passes
            ok 3 - nested ok
            1..3
        ok 2 - second # time=5.988ms
        1..2
    ok 1 - nesting # time=28.647ms
    ok 2 - this passes
    1..2
    # time=55.292ms
ok 1 - ../tap/test/test/ok.js # time=205.826ms
1..1
# time=223.468ms

`

exports[`test/parser-stringify.js TAP subtest-comment-mixed-indent.tap default settings > stringified flat 1`] = `
TAP version 13
# Subtest: ../tap/test/test/ok.js
    # Subtest: nesting
        # Subtest: first
            1..2
            ok 1 - true is ok
            ok 2 - doag is also okay
        ok 1 - first # time=8.987ms
        # Subtest: second
            ok 1 - but that is ok
            ok 2 - this passes
            ok 3 - nested ok
            1..3
        ok 2 - second # time=5.988ms
        1..2
    ok 1 - nesting # time=28.647ms
    ok 2 - this passes
    1..2
    # time=55.292ms
ok 1 - ../tap/test/test/ok.js # time=205.826ms
1..1
# time=223.468ms

`

exports[`test/parser-stringify.js TAP subtest-comment-mixed-indent.tap strict > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: ../tap/test/test/ok.js\\n",
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: nesting\\n",
          ],
          Array [
            "child",
            Array [
              Array [
                "comment",
                "# Subtest: first\\n",
              ],
              Array [
                "plan",
                Object {
                  "end": 2,
                  "start": 1,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "../tap/test/test/ok.js nesting first",
                  "id": 1,
                  "name": "true is ok",
                  "ok": true,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "../tap/test/test/ok.js nesting first",
                  "id": 2,
                  "name": "doag is also okay",
                  "ok": true,
                },
              ],
              Array [
                "complete",
                FinalResults {
                  "bailout": false,
                  "count": 2,
                  "fail": 0,
                  "failures": Array [],
                  "ok": true,
                  "pass": 2,
                  "plan": FinalPlan {
                    "comment": "",
                    "end": 2,
                    "skipAll": false,
                    "skipReason": "",
                    "start": 1,
                  },
                  "skip": 0,
                  "time": 8.987,
                  "todo": 0,
                },
              ],
            ],
          ],
          Array [
            "assert",
            Result {
              "fullname": "../tap/test/test/ok.js nesting",
              "id": 1,
              "name": "first",
              "ok": true,
              "time": 8.987,
            },
          ],
          Array [
            "child",
            Array [
              Array [
                "comment",
                "# Subtest: second\\n",
              ],
              Array [
                "assert",
                Result {
                  "fullname": "../tap/test/test/ok.js nesting second",
                  "id": 1,
                  "name": "but that is ok",
                  "ok": true,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "../tap/test/test/ok.js nesting second",
                  "id": 2,
                  "name": "this passes",
                  "ok": true,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "../tap/test/test/ok.js nesting second",
                  "id": 3,
                  "name": "nested ok",
                  "ok": true,
                },
              ],
              Array [
                "plan",
                Object {
                  "end": 3,
                  "start": 1,
                },
              ],
              Array [
                "complete",
                FinalResults {
                  "bailout": false,
                  "count": 3,
                  "fail": 0,
                  "failures": Array [],
                  "ok": true,
                  "pass": 3,
                  "plan": FinalPlan {
                    "comment": "",
                    "end": 3,
                    "skipAll": false,
                    "skipReason": "",
                    "start": 1,
                  },
                  "skip": 0,
                  "time": 5.988,
                  "todo": 0,
                },
              ],
            ],
          ],
          Array [
            "assert",
            Result {
              "fullname": "../tap/test/test/ok.js nesting",
              "id": 2,
              "name": "second",
              "ok": true,
              "time": 5.988,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 2,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 2,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 2,
              "plan": FinalPlan {
                "comment": "",
                "end": 2,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": 28.647,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "../tap/test/test/ok.js",
          "id": 1,
          "name": "nesting",
          "ok": true,
          "time": 28.647,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "../tap/test/test/ok.js",
          "id": 2,
          "name": "this passes",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 2,
          "start": 1,
        },
      ],
      Array [
        "comment",
        "# time=55.292ms\\n",
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 2,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 2,
          "plan": FinalPlan {
            "comment": "",
            "end": 2,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": 205.826,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "../tap/test/test/ok.js",
      "ok": true,
      "time": 205.826,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# time=223.468ms\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": 223.468,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP subtest-comment-mixed-indent.tap strict > stringified 1`] = `
TAP version 13
# Subtest: ../tap/test/test/ok.js
    # Subtest: nesting
        # Subtest: first
            1..2
            ok 1 - true is ok
            ok 2 - doag is also okay
        ok 1 - first # time=8.987ms
        # Subtest: second
            ok 1 - but that is ok
            ok 2 - this passes
            ok 3 - nested ok
            1..3
        ok 2 - second # time=5.988ms
        1..2
    ok 1 - nesting # time=28.647ms
    ok 2 - this passes
    1..2
    # time=55.292ms
ok 1 - ../tap/test/test/ok.js # time=205.826ms
1..1
# time=223.468ms

`

exports[`test/parser-stringify.js TAP subtest-comment-mixed-indent.tap strict > stringified flat 1`] = `
TAP version 13
# Subtest: ../tap/test/test/ok.js
    # Subtest: nesting
        # Subtest: first
            1..2
            ok 1 - true is ok
            ok 2 - doag is also okay
        ok 1 - first # time=8.987ms
        # Subtest: second
            ok 1 - but that is ok
            ok 2 - this passes
            ok 3 - nested ok
            1..3
        ok 2 - second # time=5.988ms
        1..2
    ok 1 - nesting # time=28.647ms
    ok 2 - this passes
    1..2
    # time=55.292ms
ok 1 - ../tap/test/test/ok.js # time=205.826ms
1..1
# time=223.468ms

`

exports[`test/parser-stringify.js TAP subtest-comment-mixed-indent.tap strictBail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: ../tap/test/test/ok.js\\n",
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: nesting\\n",
          ],
          Array [
            "child",
            Array [
              Array [
                "comment",
                "# Subtest: first\\n",
              ],
              Array [
                "plan",
                Object {
                  "end": 2,
                  "start": 1,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "../tap/test/test/ok.js nesting first",
                  "id": 1,
                  "name": "true is ok",
                  "ok": true,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "../tap/test/test/ok.js nesting first",
                  "id": 2,
                  "name": "doag is also okay",
                  "ok": true,
                },
              ],
              Array [
                "complete",
                FinalResults {
                  "bailout": false,
                  "count": 2,
                  "fail": 0,
                  "failures": Array [],
                  "ok": true,
                  "pass": 2,
                  "plan": FinalPlan {
                    "comment": "",
                    "end": 2,
                    "skipAll": false,
                    "skipReason": "",
                    "start": 1,
                  },
                  "skip": 0,
                  "time": 8.987,
                  "todo": 0,
                },
              ],
            ],
          ],
          Array [
            "assert",
            Result {
              "fullname": "../tap/test/test/ok.js nesting",
              "id": 1,
              "name": "first",
              "ok": true,
              "time": 8.987,
            },
          ],
          Array [
            "child",
            Array [
              Array [
                "comment",
                "# Subtest: second\\n",
              ],
              Array [
                "assert",
                Result {
                  "fullname": "../tap/test/test/ok.js nesting second",
                  "id": 1,
                  "name": "but that is ok",
                  "ok": true,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "../tap/test/test/ok.js nesting second",
                  "id": 2,
                  "name": "this passes",
                  "ok": true,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "../tap/test/test/ok.js nesting second",
                  "id": 3,
                  "name": "nested ok",
                  "ok": true,
                },
              ],
              Array [
                "plan",
                Object {
                  "end": 3,
                  "start": 1,
                },
              ],
              Array [
                "complete",
                FinalResults {
                  "bailout": false,
                  "count": 3,
                  "fail": 0,
                  "failures": Array [],
                  "ok": true,
                  "pass": 3,
                  "plan": FinalPlan {
                    "comment": "",
                    "end": 3,
                    "skipAll": false,
                    "skipReason": "",
                    "start": 1,
                  },
                  "skip": 0,
                  "time": 5.988,
                  "todo": 0,
                },
              ],
            ],
          ],
          Array [
            "assert",
            Result {
              "fullname": "../tap/test/test/ok.js nesting",
              "id": 2,
              "name": "second",
              "ok": true,
              "time": 5.988,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 2,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 2,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 2,
              "plan": FinalPlan {
                "comment": "",
                "end": 2,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": 28.647,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "../tap/test/test/ok.js",
          "id": 1,
          "name": "nesting",
          "ok": true,
          "time": 28.647,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "../tap/test/test/ok.js",
          "id": 2,
          "name": "this passes",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 2,
          "start": 1,
        },
      ],
      Array [
        "comment",
        "# time=55.292ms\\n",
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 2,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 2,
          "plan": FinalPlan {
            "comment": "",
            "end": 2,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": 205.826,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "../tap/test/test/ok.js",
      "ok": true,
      "time": 205.826,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# time=223.468ms\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": 223.468,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP subtest-comment-mixed-indent.tap strictBail > stringified 1`] = `
TAP version 13
# Subtest: ../tap/test/test/ok.js
    # Subtest: nesting
        # Subtest: first
            1..2
            ok 1 - true is ok
            ok 2 - doag is also okay
        ok 1 - first # time=8.987ms
        # Subtest: second
            ok 1 - but that is ok
            ok 2 - this passes
            ok 3 - nested ok
            1..3
        ok 2 - second # time=5.988ms
        1..2
    ok 1 - nesting # time=28.647ms
    ok 2 - this passes
    1..2
    # time=55.292ms
ok 1 - ../tap/test/test/ok.js # time=205.826ms
1..1
# time=223.468ms

`

exports[`test/parser-stringify.js TAP subtest-comment-mixed-indent.tap strictBail > stringified flat 1`] = `
TAP version 13
# Subtest: ../tap/test/test/ok.js
    # Subtest: nesting
        # Subtest: first
            1..2
            ok 1 - true is ok
            ok 2 - doag is also okay
        ok 1 - first # time=8.987ms
        # Subtest: second
            ok 1 - but that is ok
            ok 2 - this passes
            ok 3 - nested ok
            1..3
        ok 2 - second # time=5.988ms
        1..2
    ok 1 - nesting # time=28.647ms
    ok 2 - this passes
    1..2
    # time=55.292ms
ok 1 - ../tap/test/test/ok.js # time=205.826ms
1..1
# time=223.468ms

`

exports[`test/parser-stringify.js TAP subtest-comment-noindent.tap bail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: ../tap/test/test/ok.js\\n",
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: nesting\\n",
          ],
          Array [
            "child",
            Array [
              Array [
                "comment",
                "# Subtest: first\\n",
              ],
              Array [
                "plan",
                Object {
                  "end": 2,
                  "start": 1,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "../tap/test/test/ok.js nesting first",
                  "id": 1,
                  "name": "true is ok",
                  "ok": true,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "../tap/test/test/ok.js nesting first",
                  "id": 2,
                  "name": "doag is also okay",
                  "ok": true,
                },
              ],
              Array [
                "complete",
                FinalResults {
                  "bailout": false,
                  "count": 2,
                  "fail": 0,
                  "failures": Array [],
                  "ok": true,
                  "pass": 2,
                  "plan": FinalPlan {
                    "comment": "",
                    "end": 2,
                    "skipAll": false,
                    "skipReason": "",
                    "start": 1,
                  },
                  "skip": 0,
                  "time": 8.987,
                  "todo": 0,
                },
              ],
            ],
          ],
          Array [
            "assert",
            Result {
              "fullname": "../tap/test/test/ok.js nesting",
              "id": 1,
              "name": "first",
              "ok": true,
              "time": 8.987,
            },
          ],
          Array [
            "child",
            Array [
              Array [
                "comment",
                "# Subtest: second\\n",
              ],
              Array [
                "assert",
                Result {
                  "fullname": "../tap/test/test/ok.js nesting second",
                  "id": 1,
                  "name": "but that is ok",
                  "ok": true,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "../tap/test/test/ok.js nesting second",
                  "id": 2,
                  "name": "this passes",
                  "ok": true,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "../tap/test/test/ok.js nesting second",
                  "id": 3,
                  "name": "nested ok",
                  "ok": true,
                },
              ],
              Array [
                "plan",
                Object {
                  "end": 3,
                  "start": 1,
                },
              ],
              Array [
                "complete",
                FinalResults {
                  "bailout": false,
                  "count": 3,
                  "fail": 0,
                  "failures": Array [],
                  "ok": true,
                  "pass": 3,
                  "plan": FinalPlan {
                    "comment": "",
                    "end": 3,
                    "skipAll": false,
                    "skipReason": "",
                    "start": 1,
                  },
                  "skip": 0,
                  "time": 5.988,
                  "todo": 0,
                },
              ],
            ],
          ],
          Array [
            "assert",
            Result {
              "fullname": "../tap/test/test/ok.js nesting",
              "id": 2,
              "name": "second",
              "ok": true,
              "time": 5.988,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 2,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 2,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 2,
              "plan": FinalPlan {
                "comment": "",
                "end": 2,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": 28.647,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "../tap/test/test/ok.js",
          "id": 1,
          "name": "nesting",
          "ok": true,
          "time": 28.647,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "../tap/test/test/ok.js",
          "id": 2,
          "name": "this passes",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 2,
          "start": 1,
        },
      ],
      Array [
        "comment",
        "# time=55.292ms\\n",
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 2,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 2,
          "plan": FinalPlan {
            "comment": "",
            "end": 2,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": 205.826,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "../tap/test/test/ok.js",
      "ok": true,
      "time": 205.826,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# time=223.468ms\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": 223.468,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP subtest-comment-noindent.tap bail > stringified 1`] = `
TAP version 13
# Subtest: ../tap/test/test/ok.js
    # Subtest: nesting
        # Subtest: first
            1..2
            ok 1 - true is ok
            ok 2 - doag is also okay
        ok 1 - first # time=8.987ms
        # Subtest: second
            ok 1 - but that is ok
            ok 2 - this passes
            ok 3 - nested ok
            1..3
        ok 2 - second # time=5.988ms
        1..2
    ok 1 - nesting # time=28.647ms
    ok 2 - this passes
    1..2
    # time=55.292ms
ok 1 - ../tap/test/test/ok.js # time=205.826ms
1..1
# time=223.468ms

`

exports[`test/parser-stringify.js TAP subtest-comment-noindent.tap bail > stringified flat 1`] = `
TAP version 13
# Subtest: ../tap/test/test/ok.js
    # Subtest: nesting
        # Subtest: first
            1..2
            ok 1 - true is ok
            ok 2 - doag is also okay
        ok 1 - first # time=8.987ms
        # Subtest: second
            ok 1 - but that is ok
            ok 2 - this passes
            ok 3 - nested ok
            1..3
        ok 2 - second # time=5.988ms
        1..2
    ok 1 - nesting # time=28.647ms
    ok 2 - this passes
    1..2
    # time=55.292ms
ok 1 - ../tap/test/test/ok.js # time=205.826ms
1..1
# time=223.468ms

`

exports[`test/parser-stringify.js TAP subtest-comment-noindent.tap default settings > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: ../tap/test/test/ok.js\\n",
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: nesting\\n",
          ],
          Array [
            "child",
            Array [
              Array [
                "comment",
                "# Subtest: first\\n",
              ],
              Array [
                "plan",
                Object {
                  "end": 2,
                  "start": 1,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "../tap/test/test/ok.js nesting first",
                  "id": 1,
                  "name": "true is ok",
                  "ok": true,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "../tap/test/test/ok.js nesting first",
                  "id": 2,
                  "name": "doag is also okay",
                  "ok": true,
                },
              ],
              Array [
                "complete",
                FinalResults {
                  "bailout": false,
                  "count": 2,
                  "fail": 0,
                  "failures": Array [],
                  "ok": true,
                  "pass": 2,
                  "plan": FinalPlan {
                    "comment": "",
                    "end": 2,
                    "skipAll": false,
                    "skipReason": "",
                    "start": 1,
                  },
                  "skip": 0,
                  "time": 8.987,
                  "todo": 0,
                },
              ],
            ],
          ],
          Array [
            "assert",
            Result {
              "fullname": "../tap/test/test/ok.js nesting",
              "id": 1,
              "name": "first",
              "ok": true,
              "time": 8.987,
            },
          ],
          Array [
            "child",
            Array [
              Array [
                "comment",
                "# Subtest: second\\n",
              ],
              Array [
                "assert",
                Result {
                  "fullname": "../tap/test/test/ok.js nesting second",
                  "id": 1,
                  "name": "but that is ok",
                  "ok": true,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "../tap/test/test/ok.js nesting second",
                  "id": 2,
                  "name": "this passes",
                  "ok": true,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "../tap/test/test/ok.js nesting second",
                  "id": 3,
                  "name": "nested ok",
                  "ok": true,
                },
              ],
              Array [
                "plan",
                Object {
                  "end": 3,
                  "start": 1,
                },
              ],
              Array [
                "complete",
                FinalResults {
                  "bailout": false,
                  "count": 3,
                  "fail": 0,
                  "failures": Array [],
                  "ok": true,
                  "pass": 3,
                  "plan": FinalPlan {
                    "comment": "",
                    "end": 3,
                    "skipAll": false,
                    "skipReason": "",
                    "start": 1,
                  },
                  "skip": 0,
                  "time": 5.988,
                  "todo": 0,
                },
              ],
            ],
          ],
          Array [
            "assert",
            Result {
              "fullname": "../tap/test/test/ok.js nesting",
              "id": 2,
              "name": "second",
              "ok": true,
              "time": 5.988,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 2,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 2,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 2,
              "plan": FinalPlan {
                "comment": "",
                "end": 2,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": 28.647,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "../tap/test/test/ok.js",
          "id": 1,
          "name": "nesting",
          "ok": true,
          "time": 28.647,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "../tap/test/test/ok.js",
          "id": 2,
          "name": "this passes",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 2,
          "start": 1,
        },
      ],
      Array [
        "comment",
        "# time=55.292ms\\n",
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 2,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 2,
          "plan": FinalPlan {
            "comment": "",
            "end": 2,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": 205.826,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "../tap/test/test/ok.js",
      "ok": true,
      "time": 205.826,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# time=223.468ms\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": 223.468,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP subtest-comment-noindent.tap default settings > stringified 1`] = `
TAP version 13
# Subtest: ../tap/test/test/ok.js
    # Subtest: nesting
        # Subtest: first
            1..2
            ok 1 - true is ok
            ok 2 - doag is also okay
        ok 1 - first # time=8.987ms
        # Subtest: second
            ok 1 - but that is ok
            ok 2 - this passes
            ok 3 - nested ok
            1..3
        ok 2 - second # time=5.988ms
        1..2
    ok 1 - nesting # time=28.647ms
    ok 2 - this passes
    1..2
    # time=55.292ms
ok 1 - ../tap/test/test/ok.js # time=205.826ms
1..1
# time=223.468ms

`

exports[`test/parser-stringify.js TAP subtest-comment-noindent.tap default settings > stringified flat 1`] = `
TAP version 13
# Subtest: ../tap/test/test/ok.js
    # Subtest: nesting
        # Subtest: first
            1..2
            ok 1 - true is ok
            ok 2 - doag is also okay
        ok 1 - first # time=8.987ms
        # Subtest: second
            ok 1 - but that is ok
            ok 2 - this passes
            ok 3 - nested ok
            1..3
        ok 2 - second # time=5.988ms
        1..2
    ok 1 - nesting # time=28.647ms
    ok 2 - this passes
    1..2
    # time=55.292ms
ok 1 - ../tap/test/test/ok.js # time=205.826ms
1..1
# time=223.468ms

`

exports[`test/parser-stringify.js TAP subtest-comment-noindent.tap strict > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: ../tap/test/test/ok.js\\n",
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: nesting\\n",
          ],
          Array [
            "child",
            Array [
              Array [
                "comment",
                "# Subtest: first\\n",
              ],
              Array [
                "plan",
                Object {
                  "end": 2,
                  "start": 1,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "../tap/test/test/ok.js nesting first",
                  "id": 1,
                  "name": "true is ok",
                  "ok": true,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "../tap/test/test/ok.js nesting first",
                  "id": 2,
                  "name": "doag is also okay",
                  "ok": true,
                },
              ],
              Array [
                "complete",
                FinalResults {
                  "bailout": false,
                  "count": 2,
                  "fail": 0,
                  "failures": Array [],
                  "ok": true,
                  "pass": 2,
                  "plan": FinalPlan {
                    "comment": "",
                    "end": 2,
                    "skipAll": false,
                    "skipReason": "",
                    "start": 1,
                  },
                  "skip": 0,
                  "time": 8.987,
                  "todo": 0,
                },
              ],
            ],
          ],
          Array [
            "assert",
            Result {
              "fullname": "../tap/test/test/ok.js nesting",
              "id": 1,
              "name": "first",
              "ok": true,
              "time": 8.987,
            },
          ],
          Array [
            "child",
            Array [
              Array [
                "comment",
                "# Subtest: second\\n",
              ],
              Array [
                "assert",
                Result {
                  "fullname": "../tap/test/test/ok.js nesting second",
                  "id": 1,
                  "name": "but that is ok",
                  "ok": true,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "../tap/test/test/ok.js nesting second",
                  "id": 2,
                  "name": "this passes",
                  "ok": true,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "../tap/test/test/ok.js nesting second",
                  "id": 3,
                  "name": "nested ok",
                  "ok": true,
                },
              ],
              Array [
                "plan",
                Object {
                  "end": 3,
                  "start": 1,
                },
              ],
              Array [
                "complete",
                FinalResults {
                  "bailout": false,
                  "count": 3,
                  "fail": 0,
                  "failures": Array [],
                  "ok": true,
                  "pass": 3,
                  "plan": FinalPlan {
                    "comment": "",
                    "end": 3,
                    "skipAll": false,
                    "skipReason": "",
                    "start": 1,
                  },
                  "skip": 0,
                  "time": 5.988,
                  "todo": 0,
                },
              ],
            ],
          ],
          Array [
            "assert",
            Result {
              "fullname": "../tap/test/test/ok.js nesting",
              "id": 2,
              "name": "second",
              "ok": true,
              "time": 5.988,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 2,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 2,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 2,
              "plan": FinalPlan {
                "comment": "",
                "end": 2,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": 28.647,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "../tap/test/test/ok.js",
          "id": 1,
          "name": "nesting",
          "ok": true,
          "time": 28.647,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "../tap/test/test/ok.js",
          "id": 2,
          "name": "this passes",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 2,
          "start": 1,
        },
      ],
      Array [
        "comment",
        "# time=55.292ms\\n",
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 2,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 2,
          "plan": FinalPlan {
            "comment": "",
            "end": 2,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": 205.826,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "../tap/test/test/ok.js",
      "ok": true,
      "time": 205.826,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# time=223.468ms\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": 223.468,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP subtest-comment-noindent.tap strict > stringified 1`] = `
TAP version 13
# Subtest: ../tap/test/test/ok.js
    # Subtest: nesting
        # Subtest: first
            1..2
            ok 1 - true is ok
            ok 2 - doag is also okay
        ok 1 - first # time=8.987ms
        # Subtest: second
            ok 1 - but that is ok
            ok 2 - this passes
            ok 3 - nested ok
            1..3
        ok 2 - second # time=5.988ms
        1..2
    ok 1 - nesting # time=28.647ms
    ok 2 - this passes
    1..2
    # time=55.292ms
ok 1 - ../tap/test/test/ok.js # time=205.826ms
1..1
# time=223.468ms

`

exports[`test/parser-stringify.js TAP subtest-comment-noindent.tap strict > stringified flat 1`] = `
TAP version 13
# Subtest: ../tap/test/test/ok.js
    # Subtest: nesting
        # Subtest: first
            1..2
            ok 1 - true is ok
            ok 2 - doag is also okay
        ok 1 - first # time=8.987ms
        # Subtest: second
            ok 1 - but that is ok
            ok 2 - this passes
            ok 3 - nested ok
            1..3
        ok 2 - second # time=5.988ms
        1..2
    ok 1 - nesting # time=28.647ms
    ok 2 - this passes
    1..2
    # time=55.292ms
ok 1 - ../tap/test/test/ok.js # time=205.826ms
1..1
# time=223.468ms

`

exports[`test/parser-stringify.js TAP subtest-comment-noindent.tap strictBail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: ../tap/test/test/ok.js\\n",
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: nesting\\n",
          ],
          Array [
            "child",
            Array [
              Array [
                "comment",
                "# Subtest: first\\n",
              ],
              Array [
                "plan",
                Object {
                  "end": 2,
                  "start": 1,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "../tap/test/test/ok.js nesting first",
                  "id": 1,
                  "name": "true is ok",
                  "ok": true,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "../tap/test/test/ok.js nesting first",
                  "id": 2,
                  "name": "doag is also okay",
                  "ok": true,
                },
              ],
              Array [
                "complete",
                FinalResults {
                  "bailout": false,
                  "count": 2,
                  "fail": 0,
                  "failures": Array [],
                  "ok": true,
                  "pass": 2,
                  "plan": FinalPlan {
                    "comment": "",
                    "end": 2,
                    "skipAll": false,
                    "skipReason": "",
                    "start": 1,
                  },
                  "skip": 0,
                  "time": 8.987,
                  "todo": 0,
                },
              ],
            ],
          ],
          Array [
            "assert",
            Result {
              "fullname": "../tap/test/test/ok.js nesting",
              "id": 1,
              "name": "first",
              "ok": true,
              "time": 8.987,
            },
          ],
          Array [
            "child",
            Array [
              Array [
                "comment",
                "# Subtest: second\\n",
              ],
              Array [
                "assert",
                Result {
                  "fullname": "../tap/test/test/ok.js nesting second",
                  "id": 1,
                  "name": "but that is ok",
                  "ok": true,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "../tap/test/test/ok.js nesting second",
                  "id": 2,
                  "name": "this passes",
                  "ok": true,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "../tap/test/test/ok.js nesting second",
                  "id": 3,
                  "name": "nested ok",
                  "ok": true,
                },
              ],
              Array [
                "plan",
                Object {
                  "end": 3,
                  "start": 1,
                },
              ],
              Array [
                "complete",
                FinalResults {
                  "bailout": false,
                  "count": 3,
                  "fail": 0,
                  "failures": Array [],
                  "ok": true,
                  "pass": 3,
                  "plan": FinalPlan {
                    "comment": "",
                    "end": 3,
                    "skipAll": false,
                    "skipReason": "",
                    "start": 1,
                  },
                  "skip": 0,
                  "time": 5.988,
                  "todo": 0,
                },
              ],
            ],
          ],
          Array [
            "assert",
            Result {
              "fullname": "../tap/test/test/ok.js nesting",
              "id": 2,
              "name": "second",
              "ok": true,
              "time": 5.988,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 2,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 2,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 2,
              "plan": FinalPlan {
                "comment": "",
                "end": 2,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": 28.647,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "../tap/test/test/ok.js",
          "id": 1,
          "name": "nesting",
          "ok": true,
          "time": 28.647,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "../tap/test/test/ok.js",
          "id": 2,
          "name": "this passes",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 2,
          "start": 1,
        },
      ],
      Array [
        "comment",
        "# time=55.292ms\\n",
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 2,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 2,
          "plan": FinalPlan {
            "comment": "",
            "end": 2,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": 205.826,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "../tap/test/test/ok.js",
      "ok": true,
      "time": 205.826,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# time=223.468ms\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": 223.468,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP subtest-comment-noindent.tap strictBail > stringified 1`] = `
TAP version 13
# Subtest: ../tap/test/test/ok.js
    # Subtest: nesting
        # Subtest: first
            1..2
            ok 1 - true is ok
            ok 2 - doag is also okay
        ok 1 - first # time=8.987ms
        # Subtest: second
            ok 1 - but that is ok
            ok 2 - this passes
            ok 3 - nested ok
            1..3
        ok 2 - second # time=5.988ms
        1..2
    ok 1 - nesting # time=28.647ms
    ok 2 - this passes
    1..2
    # time=55.292ms
ok 1 - ../tap/test/test/ok.js # time=205.826ms
1..1
# time=223.468ms

`

exports[`test/parser-stringify.js TAP subtest-comment-noindent.tap strictBail > stringified flat 1`] = `
TAP version 13
# Subtest: ../tap/test/test/ok.js
    # Subtest: nesting
        # Subtest: first
            1..2
            ok 1 - true is ok
            ok 2 - doag is also okay
        ok 1 - first # time=8.987ms
        # Subtest: second
            ok 1 - but that is ok
            ok 2 - this passes
            ok 3 - nested ok
            1..3
        ok 2 - second # time=5.988ms
        1..2
    ok 1 - nesting # time=28.647ms
    ok 2 - this passes
    1..2
    # time=55.292ms
ok 1 - ../tap/test/test/ok.js # time=205.826ms
1..1
# time=223.468ms

`

exports[`test/parser-stringify.js TAP subtest-confusing.tap bail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: a brace looks like this\\n",
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: x\\n",
          ],
          Array [
            "comment",
            "# Subtest: y\\n",
          ],
          Array [
            "assert",
            Result {
              "fullname": "a brace looks like this x",
              "id": 1,
              "name": "ypoint",
              "ok": true,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 1,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 1,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 1,
              "plan": FinalPlan {
                "comment": "",
                "end": 1,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": null,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "a brace looks like this",
          "id": 1,
          "name": "y",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "buffered": true,
      "fullname": "",
      "id": 1,
      "name": "a brace looks like this",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "x",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 2,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 2,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 2,
      "plan": FinalPlan {
        "comment": "",
        "end": 2,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP subtest-confusing.tap bail > stringified 1`] = `
TAP version 13
# Subtest: a brace looks like this
    # Subtest: x
        # Subtest: y
        ok 1 - ypoint
        1..1
    ok 1 - y
    1..1
ok 1 - a brace looks like this
ok 2 - x
1..2

`

exports[`test/parser-stringify.js TAP subtest-confusing.tap bail > stringified flat 1`] = `
TAP version 13
# Subtest: a brace looks like this
    # Subtest: x
        # Subtest: y
        ok 1 - ypoint
        1..1
    ok 1 - y
    1..1
ok 1 - a brace looks like this
ok 2 - x
1..2

`

exports[`test/parser-stringify.js TAP subtest-confusing.tap default settings > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: a brace looks like this\\n",
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: x\\n",
          ],
          Array [
            "comment",
            "# Subtest: y\\n",
          ],
          Array [
            "assert",
            Result {
              "fullname": "a brace looks like this x",
              "id": 1,
              "name": "ypoint",
              "ok": true,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 1,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 1,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 1,
              "plan": FinalPlan {
                "comment": "",
                "end": 1,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": null,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "a brace looks like this",
          "id": 1,
          "name": "y",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "buffered": true,
      "fullname": "",
      "id": 1,
      "name": "a brace looks like this",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "x",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 2,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 2,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 2,
      "plan": FinalPlan {
        "comment": "",
        "end": 2,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP subtest-confusing.tap default settings > stringified 1`] = `
TAP version 13
# Subtest: a brace looks like this
    # Subtest: x
        # Subtest: y
        ok 1 - ypoint
        1..1
    ok 1 - y
    1..1
ok 1 - a brace looks like this
ok 2 - x
1..2

`

exports[`test/parser-stringify.js TAP subtest-confusing.tap default settings > stringified flat 1`] = `
TAP version 13
# Subtest: a brace looks like this
    # Subtest: x
        # Subtest: y
        ok 1 - ypoint
        1..1
    ok 1 - y
    1..1
ok 1 - a brace looks like this
ok 2 - x
1..2

`

exports[`test/parser-stringify.js TAP subtest-confusing.tap strict > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: a brace looks like this\\n",
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: x\\n",
          ],
          Array [
            "comment",
            "# Subtest: y\\n",
          ],
          Array [
            "assert",
            Result {
              "fullname": "a brace looks like this x",
              "id": 1,
              "name": "ypoint",
              "ok": true,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 1,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 1,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 1,
              "plan": FinalPlan {
                "comment": "",
                "end": 1,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": null,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "a brace looks like this",
          "id": 1,
          "name": "y",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "buffered": true,
      "fullname": "",
      "id": 1,
      "name": "a brace looks like this",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "x",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 2,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 2,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 2,
      "plan": FinalPlan {
        "comment": "",
        "end": 2,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP subtest-confusing.tap strict > stringified 1`] = `
TAP version 13
# Subtest: a brace looks like this
    # Subtest: x
        # Subtest: y
        ok 1 - ypoint
        1..1
    ok 1 - y
    1..1
ok 1 - a brace looks like this
ok 2 - x
1..2

`

exports[`test/parser-stringify.js TAP subtest-confusing.tap strict > stringified flat 1`] = `
TAP version 13
# Subtest: a brace looks like this
    # Subtest: x
        # Subtest: y
        ok 1 - ypoint
        1..1
    ok 1 - y
    1..1
ok 1 - a brace looks like this
ok 2 - x
1..2

`

exports[`test/parser-stringify.js TAP subtest-confusing.tap strictBail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: a brace looks like this\\n",
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: x\\n",
          ],
          Array [
            "comment",
            "# Subtest: y\\n",
          ],
          Array [
            "assert",
            Result {
              "fullname": "a brace looks like this x",
              "id": 1,
              "name": "ypoint",
              "ok": true,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 1,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 1,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 1,
              "plan": FinalPlan {
                "comment": "",
                "end": 1,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": null,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "a brace looks like this",
          "id": 1,
          "name": "y",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "buffered": true,
      "fullname": "",
      "id": 1,
      "name": "a brace looks like this",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "x",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 2,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 2,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 2,
      "plan": FinalPlan {
        "comment": "",
        "end": 2,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP subtest-confusing.tap strictBail > stringified 1`] = `
TAP version 13
# Subtest: a brace looks like this
    # Subtest: x
        # Subtest: y
        ok 1 - ypoint
        1..1
    ok 1 - y
    1..1
ok 1 - a brace looks like this
ok 2 - x
1..2

`

exports[`test/parser-stringify.js TAP subtest-confusing.tap strictBail > stringified flat 1`] = `
TAP version 13
# Subtest: a brace looks like this
    # Subtest: x
        # Subtest: y
        ok 1 - ypoint
        1..1
    ok 1 - y
    1..1
ok 1 - a brace looks like this
ok 2 - x
1..2

`

exports[`test/parser-stringify.js TAP subtest-heading.tap bail > parsed 1`] = `
Array [
  Array [
    "comment",
    "# Subtest: heading.js\\n",
  ],
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: x\\n",
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: y\\n",
          ],
          Array [
            "assert",
            Result {
              "fullname": "x y",
              "id": 1,
              "name": "ypoint",
              "ok": true,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 1,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 1,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 1,
              "plan": FinalPlan {
                "comment": "",
                "end": 1,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": null,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "x",
          "id": 1,
          "name": "y",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "x",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP subtest-heading.tap bail > stringified 1`] = `
# Subtest: heading.js
TAP version 13
# Subtest: x
    # Subtest: y
        ok 1 - ypoint
        1..1
    ok 1 - y
    1..1
ok 1 - x
1..1

`

exports[`test/parser-stringify.js TAP subtest-heading.tap bail > stringified flat 1`] = `
# Subtest: heading.js
TAP version 13
# Subtest: x
    # Subtest: y
        ok 1 - ypoint
        1..1
    ok 1 - y
    1..1
ok 1 - x
1..1

`

exports[`test/parser-stringify.js TAP subtest-heading.tap default settings > parsed 1`] = `
Array [
  Array [
    "comment",
    "# Subtest: heading.js\\n",
  ],
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: x\\n",
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: y\\n",
          ],
          Array [
            "assert",
            Result {
              "fullname": "x y",
              "id": 1,
              "name": "ypoint",
              "ok": true,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 1,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 1,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 1,
              "plan": FinalPlan {
                "comment": "",
                "end": 1,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": null,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "x",
          "id": 1,
          "name": "y",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "x",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP subtest-heading.tap default settings > stringified 1`] = `
# Subtest: heading.js
TAP version 13
# Subtest: x
    # Subtest: y
        ok 1 - ypoint
        1..1
    ok 1 - y
    1..1
ok 1 - x
1..1

`

exports[`test/parser-stringify.js TAP subtest-heading.tap default settings > stringified flat 1`] = `
# Subtest: heading.js
TAP version 13
# Subtest: x
    # Subtest: y
        ok 1 - ypoint
        1..1
    ok 1 - y
    1..1
ok 1 - x
1..1

`

exports[`test/parser-stringify.js TAP subtest-heading.tap strict > parsed 1`] = `
Array [
  Array [
    "comment",
    "# Subtest: heading.js\\n",
  ],
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: x\\n",
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: y\\n",
          ],
          Array [
            "assert",
            Result {
              "fullname": "x y",
              "id": 1,
              "name": "ypoint",
              "ok": true,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 1,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 1,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 1,
              "plan": FinalPlan {
                "comment": "",
                "end": 1,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": null,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "x",
          "id": 1,
          "name": "y",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "x",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP subtest-heading.tap strict > stringified 1`] = `
# Subtest: heading.js
TAP version 13
# Subtest: x
    # Subtest: y
        ok 1 - ypoint
        1..1
    ok 1 - y
    1..1
ok 1 - x
1..1

`

exports[`test/parser-stringify.js TAP subtest-heading.tap strict > stringified flat 1`] = `
# Subtest: heading.js
TAP version 13
# Subtest: x
    # Subtest: y
        ok 1 - ypoint
        1..1
    ok 1 - y
    1..1
ok 1 - x
1..1

`

exports[`test/parser-stringify.js TAP subtest-heading.tap strictBail > parsed 1`] = `
Array [
  Array [
    "comment",
    "# Subtest: heading.js\\n",
  ],
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: x\\n",
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: y\\n",
          ],
          Array [
            "assert",
            Result {
              "fullname": "x y",
              "id": 1,
              "name": "ypoint",
              "ok": true,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 1,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 1,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 1,
              "plan": FinalPlan {
                "comment": "",
                "end": 1,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": null,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "x",
          "id": 1,
          "name": "y",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "x",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP subtest-heading.tap strictBail > stringified 1`] = `
# Subtest: heading.js
TAP version 13
# Subtest: x
    # Subtest: y
        ok 1 - ypoint
        1..1
    ok 1 - y
    1..1
ok 1 - x
1..1

`

exports[`test/parser-stringify.js TAP subtest-heading.tap strictBail > stringified flat 1`] = `
# Subtest: heading.js
TAP version 13
# Subtest: x
    # Subtest: y
        ok 1 - ypoint
        1..1
    ok 1 - y
    1..1
ok 1 - x
1..1

`

exports[`test/parser-stringify.js TAP subtest-maybe-child-unfulfilled.tap bail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "comment",
    "# just a comment\\n",
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: x\\n",
      ],
      Array [
        "comment",
        "# Subtest: fake\\n",
      ],
      Array [
        "assert",
        Result {
          "fullname": "x",
          "id": 1,
          "name": "not a subtest",
          "ok": true,
        },
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: y\\n",
          ],
          Array [
            "assert",
            Result {
              "fullname": "x y",
              "id": 1,
              "name": "ypoint",
              "ok": true,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 1,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 1,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 1,
              "plan": FinalPlan {
                "comment": "",
                "end": 1,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": null,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "x",
          "id": 2,
          "name": "y",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 2,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 2,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 2,
          "plan": FinalPlan {
            "comment": "",
            "end": 2,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "x",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP subtest-maybe-child-unfulfilled.tap bail > stringified 1`] = `
TAP version 13
# just a comment
# Subtest: x
    # Subtest: fake
    ok 1 - not a subtest
    # Subtest: y
        ok 1 - ypoint
        1..1
    ok 2 - y
    1..2
ok 1 - x
1..1

`

exports[`test/parser-stringify.js TAP subtest-maybe-child-unfulfilled.tap bail > stringified flat 1`] = `
TAP version 13
# just a comment
# Subtest: x
    # Subtest: fake
    ok 1 - not a subtest
    # Subtest: y
        ok 1 - ypoint
        1..1
    ok 2 - y
    1..2
ok 1 - x
1..1

`

exports[`test/parser-stringify.js TAP subtest-maybe-child-unfulfilled.tap default settings > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "comment",
    "# just a comment\\n",
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: x\\n",
      ],
      Array [
        "comment",
        "# Subtest: fake\\n",
      ],
      Array [
        "assert",
        Result {
          "fullname": "x",
          "id": 1,
          "name": "not a subtest",
          "ok": true,
        },
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: y\\n",
          ],
          Array [
            "assert",
            Result {
              "fullname": "x y",
              "id": 1,
              "name": "ypoint",
              "ok": true,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 1,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 1,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 1,
              "plan": FinalPlan {
                "comment": "",
                "end": 1,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": null,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "x",
          "id": 2,
          "name": "y",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 2,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 2,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 2,
          "plan": FinalPlan {
            "comment": "",
            "end": 2,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "x",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP subtest-maybe-child-unfulfilled.tap default settings > stringified 1`] = `
TAP version 13
# just a comment
# Subtest: x
    # Subtest: fake
    ok 1 - not a subtest
    # Subtest: y
        ok 1 - ypoint
        1..1
    ok 2 - y
    1..2
ok 1 - x
1..1

`

exports[`test/parser-stringify.js TAP subtest-maybe-child-unfulfilled.tap default settings > stringified flat 1`] = `
TAP version 13
# just a comment
# Subtest: x
    # Subtest: fake
    ok 1 - not a subtest
    # Subtest: y
        ok 1 - ypoint
        1..1
    ok 2 - y
    1..2
ok 1 - x
1..1

`

exports[`test/parser-stringify.js TAP subtest-maybe-child-unfulfilled.tap strict > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "comment",
    "# just a comment\\n",
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: x\\n",
      ],
      Array [
        "comment",
        "# Subtest: fake\\n",
      ],
      Array [
        "assert",
        Result {
          "fullname": "x",
          "id": 1,
          "name": "not a subtest",
          "ok": true,
        },
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: y\\n",
          ],
          Array [
            "assert",
            Result {
              "fullname": "x y",
              "id": 1,
              "name": "ypoint",
              "ok": true,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 1,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 1,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 1,
              "plan": FinalPlan {
                "comment": "",
                "end": 1,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": null,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "x",
          "id": 2,
          "name": "y",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 2,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 2,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 2,
          "plan": FinalPlan {
            "comment": "",
            "end": 2,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "x",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP subtest-maybe-child-unfulfilled.tap strict > stringified 1`] = `
TAP version 13
# just a comment
# Subtest: x
    # Subtest: fake
    ok 1 - not a subtest
    # Subtest: y
        ok 1 - ypoint
        1..1
    ok 2 - y
    1..2
ok 1 - x
1..1

`

exports[`test/parser-stringify.js TAP subtest-maybe-child-unfulfilled.tap strict > stringified flat 1`] = `
TAP version 13
# just a comment
# Subtest: x
    # Subtest: fake
    ok 1 - not a subtest
    # Subtest: y
        ok 1 - ypoint
        1..1
    ok 2 - y
    1..2
ok 1 - x
1..1

`

exports[`test/parser-stringify.js TAP subtest-maybe-child-unfulfilled.tap strictBail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "comment",
    "# just a comment\\n",
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: x\\n",
      ],
      Array [
        "comment",
        "# Subtest: fake\\n",
      ],
      Array [
        "assert",
        Result {
          "fullname": "x",
          "id": 1,
          "name": "not a subtest",
          "ok": true,
        },
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: y\\n",
          ],
          Array [
            "assert",
            Result {
              "fullname": "x y",
              "id": 1,
              "name": "ypoint",
              "ok": true,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 1,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 1,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 1,
              "plan": FinalPlan {
                "comment": "",
                "end": 1,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": null,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "x",
          "id": 2,
          "name": "y",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 2,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 2,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 2,
          "plan": FinalPlan {
            "comment": "",
            "end": 2,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "x",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP subtest-maybe-child-unfulfilled.tap strictBail > stringified 1`] = `
TAP version 13
# just a comment
# Subtest: x
    # Subtest: fake
    ok 1 - not a subtest
    # Subtest: y
        ok 1 - ypoint
        1..1
    ok 2 - y
    1..2
ok 1 - x
1..1

`

exports[`test/parser-stringify.js TAP subtest-maybe-child-unfulfilled.tap strictBail > stringified flat 1`] = `
TAP version 13
# just a comment
# Subtest: x
    # Subtest: fake
    ok 1 - not a subtest
    # Subtest: y
        ok 1 - ypoint
        1..1
    ok 2 - y
    1..2
ok 1 - x
1..1

`

exports[`test/parser-stringify.js TAP subtest-mixing.tap bail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "comment",
    "# All of these should be semantically equivalent\\n",
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: x1\\n",
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: y\\n",
          ],
          Array [
            "assert",
            Result {
              "fullname": "x1 y",
              "id": 1,
              "name": "ypoint",
              "ok": true,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 1,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 1,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 1,
              "plan": FinalPlan {
                "comment": "",
                "end": 1,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": null,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "buffered": true,
          "fullname": "x1",
          "id": 1,
          "name": "y",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "buffered": true,
      "fullname": "",
      "id": 1,
      "name": "x1",
      "ok": true,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: x2\\n",
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: y\\n",
          ],
          Array [
            "assert",
            Result {
              "fullname": "x2 y",
              "id": 1,
              "name": "ypoint",
              "ok": true,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 1,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 1,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 1,
              "plan": FinalPlan {
                "comment": "",
                "end": 1,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": null,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "x2",
          "id": 1,
          "name": "y",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "buffered": true,
      "fullname": "",
      "id": 2,
      "name": "x2",
      "ok": true,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: x3\\n",
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: y\\n",
          ],
          Array [
            "assert",
            Result {
              "fullname": "x3 y",
              "id": 1,
              "name": "ypoint",
              "ok": true,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 1,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 1,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 1,
              "plan": FinalPlan {
                "comment": "",
                "end": 1,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": null,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "x3",
          "id": 1,
          "name": "y",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "buffered": true,
      "fullname": "",
      "id": 3,
      "name": "x3",
      "ok": true,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: x4\\n",
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: y\\n",
          ],
          Array [
            "assert",
            Result {
              "fullname": "x4 y",
              "id": 1,
              "name": "ypoint",
              "ok": true,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 1,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 1,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 1,
              "plan": FinalPlan {
                "comment": "",
                "end": 1,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": null,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "buffered": true,
          "fullname": "x4",
          "id": 1,
          "name": "y",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "name": "x4",
      "ok": true,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: x5\\n",
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: y\\n",
          ],
          Array [
            "assert",
            Result {
              "fullname": "x5 y",
              "id": 1,
              "name": "ypoint",
              "ok": true,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 1,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 1,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 1,
              "plan": FinalPlan {
                "comment": "",
                "end": 1,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": null,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "x5",
          "id": 1,
          "name": "y",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "name": "x5",
      "ok": true,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: x6\\n",
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: y\\n",
          ],
          Array [
            "assert",
            Result {
              "fullname": "x6 y",
              "id": 1,
              "name": "ypoint",
              "ok": true,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 1,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 1,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 1,
              "plan": FinalPlan {
                "comment": "",
                "end": 1,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": null,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "x6",
          "id": 1,
          "name": "y",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 6,
      "name": "x6",
      "ok": true,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: x7\\n",
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: y\\n",
          ],
          Array [
            "assert",
            Result {
              "fullname": "x7 y",
              "id": 1,
              "name": "ypoint",
              "ok": true,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 1,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 1,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 1,
              "plan": FinalPlan {
                "comment": "",
                "end": 1,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": null,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "buffered": true,
          "fullname": "x7",
          "id": 1,
          "name": "y",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 7,
      "name": "x7",
      "ok": true,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: x8\\n",
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: y\\n",
          ],
          Array [
            "assert",
            Result {
              "fullname": "x8 y",
              "id": 1,
              "name": "ypoint",
              "ok": true,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 1,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 1,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 1,
              "plan": FinalPlan {
                "comment": "",
                "end": 1,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": null,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "x8",
          "id": 1,
          "name": "y",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 8,
      "name": "x8",
      "ok": true,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: x9\\n",
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: y\\n",
          ],
          Array [
            "assert",
            Result {
              "fullname": "x9 y",
              "id": 1,
              "name": "ypoint",
              "ok": true,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 1,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 1,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 1,
              "plan": FinalPlan {
                "comment": "",
                "end": 1,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": null,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "x9",
          "id": 1,
          "name": "y",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 9,
      "name": "x9",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 9,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 9,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 9,
      "plan": FinalPlan {
        "comment": "",
        "end": 9,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP subtest-mixing.tap bail > stringified 1`] = `
TAP version 13
# All of these should be semantically equivalent
# Subtest: x1
    # Subtest: y
        ok 1 - ypoint
        1..1
    ok 1 - y
    1..1
ok 1 - x1
# Subtest: x2
    # Subtest: y
        ok 1 - ypoint
        1..1
    ok 1 - y
    1..1
ok 2 - x2
# Subtest: x3
    # Subtest: y
        ok 1 - ypoint
        1..1
    ok 1 - y
    1..1
ok 3 - x3
# Subtest: x4
    # Subtest: y
        ok 1 - ypoint
        1..1
    ok 1 - y
    1..1
ok 4 - x4
# Subtest: x5
    # Subtest: y
        ok 1 - ypoint
        1..1
    ok 1 - y
    1..1
ok 5 - x5
# Subtest: x6
    # Subtest: y
        ok 1 - ypoint
        1..1
    ok 1 - y
    1..1
ok 6 - x6
# Subtest: x7
    # Subtest: y
        ok 1 - ypoint
        1..1
    ok 1 - y
    1..1
ok 7 - x7
# Subtest: x8
    # Subtest: y
        ok 1 - ypoint
        1..1
    ok 1 - y
    1..1
ok 8 - x8
# Subtest: x9
    # Subtest: y
        ok 1 - ypoint
        1..1
    ok 1 - y
    1..1
ok 9 - x9
1..9

`

exports[`test/parser-stringify.js TAP subtest-mixing.tap bail > stringified flat 1`] = `
TAP version 13
# All of these should be semantically equivalent
# Subtest: x1
    # Subtest: y
        ok 1 - ypoint
        1..1
    ok 1 - y
    1..1
ok 1 - x1
# Subtest: x2
    # Subtest: y
        ok 1 - ypoint
        1..1
    ok 1 - y
    1..1
ok 2 - x2
# Subtest: x3
    # Subtest: y
        ok 1 - ypoint
        1..1
    ok 1 - y
    1..1
ok 3 - x3
# Subtest: x4
    # Subtest: y
        ok 1 - ypoint
        1..1
    ok 1 - y
    1..1
ok 4 - x4
# Subtest: x5
    # Subtest: y
        ok 1 - ypoint
        1..1
    ok 1 - y
    1..1
ok 5 - x5
# Subtest: x6
    # Subtest: y
        ok 1 - ypoint
        1..1
    ok 1 - y
    1..1
ok 6 - x6
# Subtest: x7
    # Subtest: y
        ok 1 - ypoint
        1..1
    ok 1 - y
    1..1
ok 7 - x7
# Subtest: x8
    # Subtest: y
        ok 1 - ypoint
        1..1
    ok 1 - y
    1..1
ok 8 - x8
# Subtest: x9
    # Subtest: y
        ok 1 - ypoint
        1..1
    ok 1 - y
    1..1
ok 9 - x9
1..9

`

exports[`test/parser-stringify.js TAP subtest-mixing.tap default settings > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "comment",
    "# All of these should be semantically equivalent\\n",
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: x1\\n",
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: y\\n",
          ],
          Array [
            "assert",
            Result {
              "fullname": "x1 y",
              "id": 1,
              "name": "ypoint",
              "ok": true,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 1,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 1,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 1,
              "plan": FinalPlan {
                "comment": "",
                "end": 1,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": null,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "buffered": true,
          "fullname": "x1",
          "id": 1,
          "name": "y",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "buffered": true,
      "fullname": "",
      "id": 1,
      "name": "x1",
      "ok": true,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: x2\\n",
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: y\\n",
          ],
          Array [
            "assert",
            Result {
              "fullname": "x2 y",
              "id": 1,
              "name": "ypoint",
              "ok": true,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 1,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 1,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 1,
              "plan": FinalPlan {
                "comment": "",
                "end": 1,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": null,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "x2",
          "id": 1,
          "name": "y",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "buffered": true,
      "fullname": "",
      "id": 2,
      "name": "x2",
      "ok": true,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: x3\\n",
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: y\\n",
          ],
          Array [
            "assert",
            Result {
              "fullname": "x3 y",
              "id": 1,
              "name": "ypoint",
              "ok": true,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 1,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 1,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 1,
              "plan": FinalPlan {
                "comment": "",
                "end": 1,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": null,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "x3",
          "id": 1,
          "name": "y",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "buffered": true,
      "fullname": "",
      "id": 3,
      "name": "x3",
      "ok": true,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: x4\\n",
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: y\\n",
          ],
          Array [
            "assert",
            Result {
              "fullname": "x4 y",
              "id": 1,
              "name": "ypoint",
              "ok": true,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 1,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 1,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 1,
              "plan": FinalPlan {
                "comment": "",
                "end": 1,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": null,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "buffered": true,
          "fullname": "x4",
          "id": 1,
          "name": "y",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "name": "x4",
      "ok": true,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: x5\\n",
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: y\\n",
          ],
          Array [
            "assert",
            Result {
              "fullname": "x5 y",
              "id": 1,
              "name": "ypoint",
              "ok": true,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 1,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 1,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 1,
              "plan": FinalPlan {
                "comment": "",
                "end": 1,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": null,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "x5",
          "id": 1,
          "name": "y",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "name": "x5",
      "ok": true,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: x6\\n",
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: y\\n",
          ],
          Array [
            "assert",
            Result {
              "fullname": "x6 y",
              "id": 1,
              "name": "ypoint",
              "ok": true,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 1,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 1,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 1,
              "plan": FinalPlan {
                "comment": "",
                "end": 1,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": null,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "x6",
          "id": 1,
          "name": "y",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 6,
      "name": "x6",
      "ok": true,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: x7\\n",
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: y\\n",
          ],
          Array [
            "assert",
            Result {
              "fullname": "x7 y",
              "id": 1,
              "name": "ypoint",
              "ok": true,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 1,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 1,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 1,
              "plan": FinalPlan {
                "comment": "",
                "end": 1,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": null,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "buffered": true,
          "fullname": "x7",
          "id": 1,
          "name": "y",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 7,
      "name": "x7",
      "ok": true,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: x8\\n",
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: y\\n",
          ],
          Array [
            "assert",
            Result {
              "fullname": "x8 y",
              "id": 1,
              "name": "ypoint",
              "ok": true,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 1,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 1,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 1,
              "plan": FinalPlan {
                "comment": "",
                "end": 1,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": null,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "x8",
          "id": 1,
          "name": "y",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 8,
      "name": "x8",
      "ok": true,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: x9\\n",
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: y\\n",
          ],
          Array [
            "assert",
            Result {
              "fullname": "x9 y",
              "id": 1,
              "name": "ypoint",
              "ok": true,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 1,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 1,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 1,
              "plan": FinalPlan {
                "comment": "",
                "end": 1,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": null,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "x9",
          "id": 1,
          "name": "y",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 9,
      "name": "x9",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 9,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 9,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 9,
      "plan": FinalPlan {
        "comment": "",
        "end": 9,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP subtest-mixing.tap default settings > stringified 1`] = `
TAP version 13
# All of these should be semantically equivalent
# Subtest: x1
    # Subtest: y
        ok 1 - ypoint
        1..1
    ok 1 - y
    1..1
ok 1 - x1
# Subtest: x2
    # Subtest: y
        ok 1 - ypoint
        1..1
    ok 1 - y
    1..1
ok 2 - x2
# Subtest: x3
    # Subtest: y
        ok 1 - ypoint
        1..1
    ok 1 - y
    1..1
ok 3 - x3
# Subtest: x4
    # Subtest: y
        ok 1 - ypoint
        1..1
    ok 1 - y
    1..1
ok 4 - x4
# Subtest: x5
    # Subtest: y
        ok 1 - ypoint
        1..1
    ok 1 - y
    1..1
ok 5 - x5
# Subtest: x6
    # Subtest: y
        ok 1 - ypoint
        1..1
    ok 1 - y
    1..1
ok 6 - x6
# Subtest: x7
    # Subtest: y
        ok 1 - ypoint
        1..1
    ok 1 - y
    1..1
ok 7 - x7
# Subtest: x8
    # Subtest: y
        ok 1 - ypoint
        1..1
    ok 1 - y
    1..1
ok 8 - x8
# Subtest: x9
    # Subtest: y
        ok 1 - ypoint
        1..1
    ok 1 - y
    1..1
ok 9 - x9
1..9

`

exports[`test/parser-stringify.js TAP subtest-mixing.tap default settings > stringified flat 1`] = `
TAP version 13
# All of these should be semantically equivalent
# Subtest: x1
    # Subtest: y
        ok 1 - ypoint
        1..1
    ok 1 - y
    1..1
ok 1 - x1
# Subtest: x2
    # Subtest: y
        ok 1 - ypoint
        1..1
    ok 1 - y
    1..1
ok 2 - x2
# Subtest: x3
    # Subtest: y
        ok 1 - ypoint
        1..1
    ok 1 - y
    1..1
ok 3 - x3
# Subtest: x4
    # Subtest: y
        ok 1 - ypoint
        1..1
    ok 1 - y
    1..1
ok 4 - x4
# Subtest: x5
    # Subtest: y
        ok 1 - ypoint
        1..1
    ok 1 - y
    1..1
ok 5 - x5
# Subtest: x6
    # Subtest: y
        ok 1 - ypoint
        1..1
    ok 1 - y
    1..1
ok 6 - x6
# Subtest: x7
    # Subtest: y
        ok 1 - ypoint
        1..1
    ok 1 - y
    1..1
ok 7 - x7
# Subtest: x8
    # Subtest: y
        ok 1 - ypoint
        1..1
    ok 1 - y
    1..1
ok 8 - x8
# Subtest: x9
    # Subtest: y
        ok 1 - ypoint
        1..1
    ok 1 - y
    1..1
ok 9 - x9
1..9

`

exports[`test/parser-stringify.js TAP subtest-mixing.tap strict > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "comment",
    "# All of these should be semantically equivalent\\n",
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: x1\\n",
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: y\\n",
          ],
          Array [
            "assert",
            Result {
              "fullname": "x1 y",
              "id": 1,
              "name": "ypoint",
              "ok": true,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 1,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 1,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 1,
              "plan": FinalPlan {
                "comment": "",
                "end": 1,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": null,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "buffered": true,
          "fullname": "x1",
          "id": 1,
          "name": "y",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "buffered": true,
      "fullname": "",
      "id": 1,
      "name": "x1",
      "ok": true,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: x2\\n",
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: y\\n",
          ],
          Array [
            "assert",
            Result {
              "fullname": "x2 y",
              "id": 1,
              "name": "ypoint",
              "ok": true,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 1,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 1,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 1,
              "plan": FinalPlan {
                "comment": "",
                "end": 1,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": null,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "x2",
          "id": 1,
          "name": "y",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "buffered": true,
      "fullname": "",
      "id": 2,
      "name": "x2",
      "ok": true,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: x3\\n",
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: y\\n",
          ],
          Array [
            "assert",
            Result {
              "fullname": "x3 y",
              "id": 1,
              "name": "ypoint",
              "ok": true,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 1,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 1,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 1,
              "plan": FinalPlan {
                "comment": "",
                "end": 1,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": null,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "x3",
          "id": 1,
          "name": "y",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "buffered": true,
      "fullname": "",
      "id": 3,
      "name": "x3",
      "ok": true,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: x4\\n",
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: y\\n",
          ],
          Array [
            "assert",
            Result {
              "fullname": "x4 y",
              "id": 1,
              "name": "ypoint",
              "ok": true,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 1,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 1,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 1,
              "plan": FinalPlan {
                "comment": "",
                "end": 1,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": null,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "buffered": true,
          "fullname": "x4",
          "id": 1,
          "name": "y",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "name": "x4",
      "ok": true,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: x5\\n",
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: y\\n",
          ],
          Array [
            "assert",
            Result {
              "fullname": "x5 y",
              "id": 1,
              "name": "ypoint",
              "ok": true,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 1,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 1,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 1,
              "plan": FinalPlan {
                "comment": "",
                "end": 1,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": null,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "x5",
          "id": 1,
          "name": "y",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "name": "x5",
      "ok": true,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: x6\\n",
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: y\\n",
          ],
          Array [
            "assert",
            Result {
              "fullname": "x6 y",
              "id": 1,
              "name": "ypoint",
              "ok": true,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 1,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 1,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 1,
              "plan": FinalPlan {
                "comment": "",
                "end": 1,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": null,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "x6",
          "id": 1,
          "name": "y",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 6,
      "name": "x6",
      "ok": true,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: x7\\n",
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: y\\n",
          ],
          Array [
            "assert",
            Result {
              "fullname": "x7 y",
              "id": 1,
              "name": "ypoint",
              "ok": true,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 1,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 1,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 1,
              "plan": FinalPlan {
                "comment": "",
                "end": 1,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": null,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "buffered": true,
          "fullname": "x7",
          "id": 1,
          "name": "y",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 7,
      "name": "x7",
      "ok": true,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: x8\\n",
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: y\\n",
          ],
          Array [
            "assert",
            Result {
              "fullname": "x8 y",
              "id": 1,
              "name": "ypoint",
              "ok": true,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 1,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 1,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 1,
              "plan": FinalPlan {
                "comment": "",
                "end": 1,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": null,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "x8",
          "id": 1,
          "name": "y",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 8,
      "name": "x8",
      "ok": true,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: x9\\n",
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: y\\n",
          ],
          Array [
            "assert",
            Result {
              "fullname": "x9 y",
              "id": 1,
              "name": "ypoint",
              "ok": true,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 1,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 1,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 1,
              "plan": FinalPlan {
                "comment": "",
                "end": 1,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": null,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "x9",
          "id": 1,
          "name": "y",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 9,
      "name": "x9",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 9,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 9,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 9,
      "plan": FinalPlan {
        "comment": "",
        "end": 9,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP subtest-mixing.tap strict > stringified 1`] = `
TAP version 13
# All of these should be semantically equivalent
# Subtest: x1
    # Subtest: y
        ok 1 - ypoint
        1..1
    ok 1 - y
    1..1
ok 1 - x1
# Subtest: x2
    # Subtest: y
        ok 1 - ypoint
        1..1
    ok 1 - y
    1..1
ok 2 - x2
# Subtest: x3
    # Subtest: y
        ok 1 - ypoint
        1..1
    ok 1 - y
    1..1
ok 3 - x3
# Subtest: x4
    # Subtest: y
        ok 1 - ypoint
        1..1
    ok 1 - y
    1..1
ok 4 - x4
# Subtest: x5
    # Subtest: y
        ok 1 - ypoint
        1..1
    ok 1 - y
    1..1
ok 5 - x5
# Subtest: x6
    # Subtest: y
        ok 1 - ypoint
        1..1
    ok 1 - y
    1..1
ok 6 - x6
# Subtest: x7
    # Subtest: y
        ok 1 - ypoint
        1..1
    ok 1 - y
    1..1
ok 7 - x7
# Subtest: x8
    # Subtest: y
        ok 1 - ypoint
        1..1
    ok 1 - y
    1..1
ok 8 - x8
# Subtest: x9
    # Subtest: y
        ok 1 - ypoint
        1..1
    ok 1 - y
    1..1
ok 9 - x9
1..9

`

exports[`test/parser-stringify.js TAP subtest-mixing.tap strict > stringified flat 1`] = `
TAP version 13
# All of these should be semantically equivalent
# Subtest: x1
    # Subtest: y
        ok 1 - ypoint
        1..1
    ok 1 - y
    1..1
ok 1 - x1
# Subtest: x2
    # Subtest: y
        ok 1 - ypoint
        1..1
    ok 1 - y
    1..1
ok 2 - x2
# Subtest: x3
    # Subtest: y
        ok 1 - ypoint
        1..1
    ok 1 - y
    1..1
ok 3 - x3
# Subtest: x4
    # Subtest: y
        ok 1 - ypoint
        1..1
    ok 1 - y
    1..1
ok 4 - x4
# Subtest: x5
    # Subtest: y
        ok 1 - ypoint
        1..1
    ok 1 - y
    1..1
ok 5 - x5
# Subtest: x6
    # Subtest: y
        ok 1 - ypoint
        1..1
    ok 1 - y
    1..1
ok 6 - x6
# Subtest: x7
    # Subtest: y
        ok 1 - ypoint
        1..1
    ok 1 - y
    1..1
ok 7 - x7
# Subtest: x8
    # Subtest: y
        ok 1 - ypoint
        1..1
    ok 1 - y
    1..1
ok 8 - x8
# Subtest: x9
    # Subtest: y
        ok 1 - ypoint
        1..1
    ok 1 - y
    1..1
ok 9 - x9
1..9

`

exports[`test/parser-stringify.js TAP subtest-mixing.tap strictBail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "comment",
    "# All of these should be semantically equivalent\\n",
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: x1\\n",
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: y\\n",
          ],
          Array [
            "assert",
            Result {
              "fullname": "x1 y",
              "id": 1,
              "name": "ypoint",
              "ok": true,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 1,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 1,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 1,
              "plan": FinalPlan {
                "comment": "",
                "end": 1,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": null,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "buffered": true,
          "fullname": "x1",
          "id": 1,
          "name": "y",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "buffered": true,
      "fullname": "",
      "id": 1,
      "name": "x1",
      "ok": true,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: x2\\n",
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: y\\n",
          ],
          Array [
            "assert",
            Result {
              "fullname": "x2 y",
              "id": 1,
              "name": "ypoint",
              "ok": true,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 1,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 1,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 1,
              "plan": FinalPlan {
                "comment": "",
                "end": 1,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": null,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "x2",
          "id": 1,
          "name": "y",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "buffered": true,
      "fullname": "",
      "id": 2,
      "name": "x2",
      "ok": true,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: x3\\n",
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: y\\n",
          ],
          Array [
            "assert",
            Result {
              "fullname": "x3 y",
              "id": 1,
              "name": "ypoint",
              "ok": true,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 1,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 1,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 1,
              "plan": FinalPlan {
                "comment": "",
                "end": 1,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": null,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "x3",
          "id": 1,
          "name": "y",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "buffered": true,
      "fullname": "",
      "id": 3,
      "name": "x3",
      "ok": true,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: x4\\n",
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: y\\n",
          ],
          Array [
            "assert",
            Result {
              "fullname": "x4 y",
              "id": 1,
              "name": "ypoint",
              "ok": true,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 1,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 1,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 1,
              "plan": FinalPlan {
                "comment": "",
                "end": 1,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": null,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "buffered": true,
          "fullname": "x4",
          "id": 1,
          "name": "y",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "name": "x4",
      "ok": true,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: x5\\n",
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: y\\n",
          ],
          Array [
            "assert",
            Result {
              "fullname": "x5 y",
              "id": 1,
              "name": "ypoint",
              "ok": true,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 1,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 1,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 1,
              "plan": FinalPlan {
                "comment": "",
                "end": 1,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": null,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "x5",
          "id": 1,
          "name": "y",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "name": "x5",
      "ok": true,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: x6\\n",
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: y\\n",
          ],
          Array [
            "assert",
            Result {
              "fullname": "x6 y",
              "id": 1,
              "name": "ypoint",
              "ok": true,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 1,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 1,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 1,
              "plan": FinalPlan {
                "comment": "",
                "end": 1,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": null,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "x6",
          "id": 1,
          "name": "y",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 6,
      "name": "x6",
      "ok": true,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: x7\\n",
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: y\\n",
          ],
          Array [
            "assert",
            Result {
              "fullname": "x7 y",
              "id": 1,
              "name": "ypoint",
              "ok": true,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 1,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 1,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 1,
              "plan": FinalPlan {
                "comment": "",
                "end": 1,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": null,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "buffered": true,
          "fullname": "x7",
          "id": 1,
          "name": "y",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 7,
      "name": "x7",
      "ok": true,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: x8\\n",
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: y\\n",
          ],
          Array [
            "assert",
            Result {
              "fullname": "x8 y",
              "id": 1,
              "name": "ypoint",
              "ok": true,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 1,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 1,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 1,
              "plan": FinalPlan {
                "comment": "",
                "end": 1,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": null,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "x8",
          "id": 1,
          "name": "y",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 8,
      "name": "x8",
      "ok": true,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: x9\\n",
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: y\\n",
          ],
          Array [
            "assert",
            Result {
              "fullname": "x9 y",
              "id": 1,
              "name": "ypoint",
              "ok": true,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 1,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 1,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 1,
              "plan": FinalPlan {
                "comment": "",
                "end": 1,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": null,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "x9",
          "id": 1,
          "name": "y",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 9,
      "name": "x9",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 9,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 9,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 9,
      "plan": FinalPlan {
        "comment": "",
        "end": 9,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP subtest-mixing.tap strictBail > stringified 1`] = `
TAP version 13
# All of these should be semantically equivalent
# Subtest: x1
    # Subtest: y
        ok 1 - ypoint
        1..1
    ok 1 - y
    1..1
ok 1 - x1
# Subtest: x2
    # Subtest: y
        ok 1 - ypoint
        1..1
    ok 1 - y
    1..1
ok 2 - x2
# Subtest: x3
    # Subtest: y
        ok 1 - ypoint
        1..1
    ok 1 - y
    1..1
ok 3 - x3
# Subtest: x4
    # Subtest: y
        ok 1 - ypoint
        1..1
    ok 1 - y
    1..1
ok 4 - x4
# Subtest: x5
    # Subtest: y
        ok 1 - ypoint
        1..1
    ok 1 - y
    1..1
ok 5 - x5
# Subtest: x6
    # Subtest: y
        ok 1 - ypoint
        1..1
    ok 1 - y
    1..1
ok 6 - x6
# Subtest: x7
    # Subtest: y
        ok 1 - ypoint
        1..1
    ok 1 - y
    1..1
ok 7 - x7
# Subtest: x8
    # Subtest: y
        ok 1 - ypoint
        1..1
    ok 1 - y
    1..1
ok 8 - x8
# Subtest: x9
    # Subtest: y
        ok 1 - ypoint
        1..1
    ok 1 - y
    1..1
ok 9 - x9
1..9

`

exports[`test/parser-stringify.js TAP subtest-mixing.tap strictBail > stringified flat 1`] = `
TAP version 13
# All of these should be semantically equivalent
# Subtest: x1
    # Subtest: y
        ok 1 - ypoint
        1..1
    ok 1 - y
    1..1
ok 1 - x1
# Subtest: x2
    # Subtest: y
        ok 1 - ypoint
        1..1
    ok 1 - y
    1..1
ok 2 - x2
# Subtest: x3
    # Subtest: y
        ok 1 - ypoint
        1..1
    ok 1 - y
    1..1
ok 3 - x3
# Subtest: x4
    # Subtest: y
        ok 1 - ypoint
        1..1
    ok 1 - y
    1..1
ok 4 - x4
# Subtest: x5
    # Subtest: y
        ok 1 - ypoint
        1..1
    ok 1 - y
    1..1
ok 5 - x5
# Subtest: x6
    # Subtest: y
        ok 1 - ypoint
        1..1
    ok 1 - y
    1..1
ok 6 - x6
# Subtest: x7
    # Subtest: y
        ok 1 - ypoint
        1..1
    ok 1 - y
    1..1
ok 7 - x7
# Subtest: x8
    # Subtest: y
        ok 1 - ypoint
        1..1
    ok 1 - y
    1..1
ok 8 - x8
# Subtest: x9
    # Subtest: y
        ok 1 - ypoint
        1..1
    ok 1 - y
    1..1
ok 9 - x9
1..9

`

exports[`test/parser-stringify.js TAP subtest-no-comment-leading-comment.tap bail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: ../tap/test/test/ok.js\\n",
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest\\n",
          ],
          Array [
            "child",
            Array [
              Array [
                "comment",
                "# Subtest\\n",
              ],
              Array [
                "plan",
                Object {
                  "end": 2,
                  "start": 1,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "../tap/test/test/ok.js",
                  "id": 1,
                  "name": "true is ok",
                  "ok": true,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "../tap/test/test/ok.js",
                  "id": 2,
                  "name": "doag is also okay",
                  "ok": true,
                },
              ],
              Array [
                "complete",
                FinalResults {
                  "bailout": false,
                  "count": 2,
                  "fail": 0,
                  "failures": Array [],
                  "ok": true,
                  "pass": 2,
                  "plan": FinalPlan {
                    "comment": "",
                    "end": 2,
                    "skipAll": false,
                    "skipReason": "",
                    "start": 1,
                  },
                  "skip": 0,
                  "time": 8.987,
                  "todo": 0,
                },
              ],
            ],
          ],
          Array [
            "assert",
            Result {
              "fullname": "../tap/test/test/ok.js",
              "id": 1,
              "name": "first",
              "ok": true,
              "time": 8.987,
            },
          ],
          Array [
            "child",
            Array [
              Array [
                "comment",
                "# Subtest\\n",
              ],
              Array [
                "assert",
                Result {
                  "fullname": "../tap/test/test/ok.js",
                  "id": 1,
                  "name": "but that is ok",
                  "ok": true,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "../tap/test/test/ok.js",
                  "id": 2,
                  "name": "this passes",
                  "ok": true,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "../tap/test/test/ok.js",
                  "id": 3,
                  "name": "nested ok",
                  "ok": true,
                },
              ],
              Array [
                "plan",
                Object {
                  "end": 3,
                  "start": 1,
                },
              ],
              Array [
                "complete",
                FinalResults {
                  "bailout": false,
                  "count": 3,
                  "fail": 0,
                  "failures": Array [],
                  "ok": true,
                  "pass": 3,
                  "plan": FinalPlan {
                    "comment": "",
                    "end": 3,
                    "skipAll": false,
                    "skipReason": "",
                    "start": 1,
                  },
                  "skip": 0,
                  "time": 5.988,
                  "todo": 0,
                },
              ],
            ],
          ],
          Array [
            "assert",
            Result {
              "fullname": "../tap/test/test/ok.js",
              "id": 2,
              "name": "second",
              "ok": true,
              "time": 5.988,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 2,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 2,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 2,
              "plan": FinalPlan {
                "comment": "",
                "end": 2,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": 28.647,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "../tap/test/test/ok.js",
          "id": 1,
          "name": "nesting",
          "ok": true,
          "time": 28.647,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "../tap/test/test/ok.js",
          "id": 2,
          "name": "this passes",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 2,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 2,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 2,
          "plan": FinalPlan {
            "comment": "",
            "end": 2,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": 205.826,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "../tap/test/test/ok.js",
      "ok": true,
      "time": 205.826,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP subtest-no-comment-leading-comment.tap bail > stringified 1`] = `
TAP version 13
# Subtest: ../tap/test/test/ok.js
    # Subtest
        # Subtest
            1..2
            ok 1 - true is ok
            ok 2 - doag is also okay
        ok 1 - first # time=8.987ms
        # Subtest
            ok 1 - but that is ok
            ok 2 - this passes
            ok 3 - nested ok
            1..3
        ok 2 - second # time=5.988ms
        1..2
    ok 1 - nesting # time=28.647ms
    ok 2 - this passes
    1..2
ok 1 - ../tap/test/test/ok.js # time=205.826ms
1..1

`

exports[`test/parser-stringify.js TAP subtest-no-comment-leading-comment.tap bail > stringified flat 1`] = `
TAP version 13
# Subtest: ../tap/test/test/ok.js
    # Subtest
        # Subtest
            1..2
            ok 1 - true is ok
            ok 2 - doag is also okay
        ok 1 - first # time=8.987ms
        # Subtest
            ok 1 - but that is ok
            ok 2 - this passes
            ok 3 - nested ok
            1..3
        ok 2 - second # time=5.988ms
        1..2
    ok 1 - nesting # time=28.647ms
    ok 2 - this passes
    1..2
ok 1 - ../tap/test/test/ok.js # time=205.826ms
1..1

`

exports[`test/parser-stringify.js TAP subtest-no-comment-leading-comment.tap default settings > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: ../tap/test/test/ok.js\\n",
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest\\n",
          ],
          Array [
            "child",
            Array [
              Array [
                "comment",
                "# Subtest\\n",
              ],
              Array [
                "plan",
                Object {
                  "end": 2,
                  "start": 1,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "../tap/test/test/ok.js",
                  "id": 1,
                  "name": "true is ok",
                  "ok": true,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "../tap/test/test/ok.js",
                  "id": 2,
                  "name": "doag is also okay",
                  "ok": true,
                },
              ],
              Array [
                "complete",
                FinalResults {
                  "bailout": false,
                  "count": 2,
                  "fail": 0,
                  "failures": Array [],
                  "ok": true,
                  "pass": 2,
                  "plan": FinalPlan {
                    "comment": "",
                    "end": 2,
                    "skipAll": false,
                    "skipReason": "",
                    "start": 1,
                  },
                  "skip": 0,
                  "time": 8.987,
                  "todo": 0,
                },
              ],
            ],
          ],
          Array [
            "assert",
            Result {
              "fullname": "../tap/test/test/ok.js",
              "id": 1,
              "name": "first",
              "ok": true,
              "time": 8.987,
            },
          ],
          Array [
            "child",
            Array [
              Array [
                "comment",
                "# Subtest\\n",
              ],
              Array [
                "assert",
                Result {
                  "fullname": "../tap/test/test/ok.js",
                  "id": 1,
                  "name": "but that is ok",
                  "ok": true,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "../tap/test/test/ok.js",
                  "id": 2,
                  "name": "this passes",
                  "ok": true,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "../tap/test/test/ok.js",
                  "id": 3,
                  "name": "nested ok",
                  "ok": true,
                },
              ],
              Array [
                "plan",
                Object {
                  "end": 3,
                  "start": 1,
                },
              ],
              Array [
                "complete",
                FinalResults {
                  "bailout": false,
                  "count": 3,
                  "fail": 0,
                  "failures": Array [],
                  "ok": true,
                  "pass": 3,
                  "plan": FinalPlan {
                    "comment": "",
                    "end": 3,
                    "skipAll": false,
                    "skipReason": "",
                    "start": 1,
                  },
                  "skip": 0,
                  "time": 5.988,
                  "todo": 0,
                },
              ],
            ],
          ],
          Array [
            "assert",
            Result {
              "fullname": "../tap/test/test/ok.js",
              "id": 2,
              "name": "second",
              "ok": true,
              "time": 5.988,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 2,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 2,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 2,
              "plan": FinalPlan {
                "comment": "",
                "end": 2,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": 28.647,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "../tap/test/test/ok.js",
          "id": 1,
          "name": "nesting",
          "ok": true,
          "time": 28.647,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "../tap/test/test/ok.js",
          "id": 2,
          "name": "this passes",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 2,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 2,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 2,
          "plan": FinalPlan {
            "comment": "",
            "end": 2,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": 205.826,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "../tap/test/test/ok.js",
      "ok": true,
      "time": 205.826,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP subtest-no-comment-leading-comment.tap default settings > stringified 1`] = `
TAP version 13
# Subtest: ../tap/test/test/ok.js
    # Subtest
        # Subtest
            1..2
            ok 1 - true is ok
            ok 2 - doag is also okay
        ok 1 - first # time=8.987ms
        # Subtest
            ok 1 - but that is ok
            ok 2 - this passes
            ok 3 - nested ok
            1..3
        ok 2 - second # time=5.988ms
        1..2
    ok 1 - nesting # time=28.647ms
    ok 2 - this passes
    1..2
ok 1 - ../tap/test/test/ok.js # time=205.826ms
1..1

`

exports[`test/parser-stringify.js TAP subtest-no-comment-leading-comment.tap default settings > stringified flat 1`] = `
TAP version 13
# Subtest: ../tap/test/test/ok.js
    # Subtest
        # Subtest
            1..2
            ok 1 - true is ok
            ok 2 - doag is also okay
        ok 1 - first # time=8.987ms
        # Subtest
            ok 1 - but that is ok
            ok 2 - this passes
            ok 3 - nested ok
            1..3
        ok 2 - second # time=5.988ms
        1..2
    ok 1 - nesting # time=28.647ms
    ok 2 - this passes
    1..2
ok 1 - ../tap/test/test/ok.js # time=205.826ms
1..1

`

exports[`test/parser-stringify.js TAP subtest-no-comment-leading-comment.tap strict > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: ../tap/test/test/ok.js\\n",
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest\\n",
          ],
          Array [
            "child",
            Array [
              Array [
                "comment",
                "# Subtest\\n",
              ],
              Array [
                "plan",
                Object {
                  "end": 2,
                  "start": 1,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "../tap/test/test/ok.js",
                  "id": 1,
                  "name": "true is ok",
                  "ok": true,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "../tap/test/test/ok.js",
                  "id": 2,
                  "name": "doag is also okay",
                  "ok": true,
                },
              ],
              Array [
                "complete",
                FinalResults {
                  "bailout": false,
                  "count": 2,
                  "fail": 0,
                  "failures": Array [],
                  "ok": true,
                  "pass": 2,
                  "plan": FinalPlan {
                    "comment": "",
                    "end": 2,
                    "skipAll": false,
                    "skipReason": "",
                    "start": 1,
                  },
                  "skip": 0,
                  "time": 8.987,
                  "todo": 0,
                },
              ],
            ],
          ],
          Array [
            "assert",
            Result {
              "fullname": "../tap/test/test/ok.js",
              "id": 1,
              "name": "first",
              "ok": true,
              "time": 8.987,
            },
          ],
          Array [
            "child",
            Array [
              Array [
                "comment",
                "# Subtest\\n",
              ],
              Array [
                "assert",
                Result {
                  "fullname": "../tap/test/test/ok.js",
                  "id": 1,
                  "name": "but that is ok",
                  "ok": true,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "../tap/test/test/ok.js",
                  "id": 2,
                  "name": "this passes",
                  "ok": true,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "../tap/test/test/ok.js",
                  "id": 3,
                  "name": "nested ok",
                  "ok": true,
                },
              ],
              Array [
                "plan",
                Object {
                  "end": 3,
                  "start": 1,
                },
              ],
              Array [
                "complete",
                FinalResults {
                  "bailout": false,
                  "count": 3,
                  "fail": 0,
                  "failures": Array [],
                  "ok": true,
                  "pass": 3,
                  "plan": FinalPlan {
                    "comment": "",
                    "end": 3,
                    "skipAll": false,
                    "skipReason": "",
                    "start": 1,
                  },
                  "skip": 0,
                  "time": 5.988,
                  "todo": 0,
                },
              ],
            ],
          ],
          Array [
            "assert",
            Result {
              "fullname": "../tap/test/test/ok.js",
              "id": 2,
              "name": "second",
              "ok": true,
              "time": 5.988,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 2,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 2,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 2,
              "plan": FinalPlan {
                "comment": "",
                "end": 2,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": 28.647,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "../tap/test/test/ok.js",
          "id": 1,
          "name": "nesting",
          "ok": true,
          "time": 28.647,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "../tap/test/test/ok.js",
          "id": 2,
          "name": "this passes",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 2,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 2,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 2,
          "plan": FinalPlan {
            "comment": "",
            "end": 2,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": 205.826,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "../tap/test/test/ok.js",
      "ok": true,
      "time": 205.826,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP subtest-no-comment-leading-comment.tap strict > stringified 1`] = `
TAP version 13
# Subtest: ../tap/test/test/ok.js
    # Subtest
        # Subtest
            1..2
            ok 1 - true is ok
            ok 2 - doag is also okay
        ok 1 - first # time=8.987ms
        # Subtest
            ok 1 - but that is ok
            ok 2 - this passes
            ok 3 - nested ok
            1..3
        ok 2 - second # time=5.988ms
        1..2
    ok 1 - nesting # time=28.647ms
    ok 2 - this passes
    1..2
ok 1 - ../tap/test/test/ok.js # time=205.826ms
1..1

`

exports[`test/parser-stringify.js TAP subtest-no-comment-leading-comment.tap strict > stringified flat 1`] = `
TAP version 13
# Subtest: ../tap/test/test/ok.js
    # Subtest
        # Subtest
            1..2
            ok 1 - true is ok
            ok 2 - doag is also okay
        ok 1 - first # time=8.987ms
        # Subtest
            ok 1 - but that is ok
            ok 2 - this passes
            ok 3 - nested ok
            1..3
        ok 2 - second # time=5.988ms
        1..2
    ok 1 - nesting # time=28.647ms
    ok 2 - this passes
    1..2
ok 1 - ../tap/test/test/ok.js # time=205.826ms
1..1

`

exports[`test/parser-stringify.js TAP subtest-no-comment-leading-comment.tap strictBail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: ../tap/test/test/ok.js\\n",
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest\\n",
          ],
          Array [
            "child",
            Array [
              Array [
                "comment",
                "# Subtest\\n",
              ],
              Array [
                "plan",
                Object {
                  "end": 2,
                  "start": 1,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "../tap/test/test/ok.js",
                  "id": 1,
                  "name": "true is ok",
                  "ok": true,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "../tap/test/test/ok.js",
                  "id": 2,
                  "name": "doag is also okay",
                  "ok": true,
                },
              ],
              Array [
                "complete",
                FinalResults {
                  "bailout": false,
                  "count": 2,
                  "fail": 0,
                  "failures": Array [],
                  "ok": true,
                  "pass": 2,
                  "plan": FinalPlan {
                    "comment": "",
                    "end": 2,
                    "skipAll": false,
                    "skipReason": "",
                    "start": 1,
                  },
                  "skip": 0,
                  "time": 8.987,
                  "todo": 0,
                },
              ],
            ],
          ],
          Array [
            "assert",
            Result {
              "fullname": "../tap/test/test/ok.js",
              "id": 1,
              "name": "first",
              "ok": true,
              "time": 8.987,
            },
          ],
          Array [
            "child",
            Array [
              Array [
                "comment",
                "# Subtest\\n",
              ],
              Array [
                "assert",
                Result {
                  "fullname": "../tap/test/test/ok.js",
                  "id": 1,
                  "name": "but that is ok",
                  "ok": true,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "../tap/test/test/ok.js",
                  "id": 2,
                  "name": "this passes",
                  "ok": true,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "../tap/test/test/ok.js",
                  "id": 3,
                  "name": "nested ok",
                  "ok": true,
                },
              ],
              Array [
                "plan",
                Object {
                  "end": 3,
                  "start": 1,
                },
              ],
              Array [
                "complete",
                FinalResults {
                  "bailout": false,
                  "count": 3,
                  "fail": 0,
                  "failures": Array [],
                  "ok": true,
                  "pass": 3,
                  "plan": FinalPlan {
                    "comment": "",
                    "end": 3,
                    "skipAll": false,
                    "skipReason": "",
                    "start": 1,
                  },
                  "skip": 0,
                  "time": 5.988,
                  "todo": 0,
                },
              ],
            ],
          ],
          Array [
            "assert",
            Result {
              "fullname": "../tap/test/test/ok.js",
              "id": 2,
              "name": "second",
              "ok": true,
              "time": 5.988,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 2,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 2,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 2,
              "plan": FinalPlan {
                "comment": "",
                "end": 2,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": 28.647,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "../tap/test/test/ok.js",
          "id": 1,
          "name": "nesting",
          "ok": true,
          "time": 28.647,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "../tap/test/test/ok.js",
          "id": 2,
          "name": "this passes",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 2,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 2,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 2,
          "plan": FinalPlan {
            "comment": "",
            "end": 2,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": 205.826,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "../tap/test/test/ok.js",
      "ok": true,
      "time": 205.826,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP subtest-no-comment-leading-comment.tap strictBail > stringified 1`] = `
TAP version 13
# Subtest: ../tap/test/test/ok.js
    # Subtest
        # Subtest
            1..2
            ok 1 - true is ok
            ok 2 - doag is also okay
        ok 1 - first # time=8.987ms
        # Subtest
            ok 1 - but that is ok
            ok 2 - this passes
            ok 3 - nested ok
            1..3
        ok 2 - second # time=5.988ms
        1..2
    ok 1 - nesting # time=28.647ms
    ok 2 - this passes
    1..2
ok 1 - ../tap/test/test/ok.js # time=205.826ms
1..1

`

exports[`test/parser-stringify.js TAP subtest-no-comment-leading-comment.tap strictBail > stringified flat 1`] = `
TAP version 13
# Subtest: ../tap/test/test/ok.js
    # Subtest
        # Subtest
            1..2
            ok 1 - true is ok
            ok 2 - doag is also okay
        ok 1 - first # time=8.987ms
        # Subtest
            ok 1 - but that is ok
            ok 2 - this passes
            ok 3 - nested ok
            1..3
        ok 2 - second # time=5.988ms
        1..2
    ok 1 - nesting # time=28.647ms
    ok 2 - this passes
    1..2
ok 1 - ../tap/test/test/ok.js # time=205.826ms
1..1

`

exports[`test/parser-stringify.js TAP subtest-no-comment-mid-comment-indent.tap bail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest\\n",
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: nesting\\n",
          ],
          Array [
            "child",
            Array [
              Array [
                "comment",
                "# Subtest\\n",
              ],
              Array [
                "plan",
                Object {
                  "end": 2,
                  "start": 1,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "nesting",
                  "id": 1,
                  "name": "true is ok",
                  "ok": true,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "nesting",
                  "id": 2,
                  "name": "doag is also okay",
                  "ok": true,
                },
              ],
              Array [
                "complete",
                FinalResults {
                  "bailout": false,
                  "count": 2,
                  "fail": 0,
                  "failures": Array [],
                  "ok": true,
                  "pass": 2,
                  "plan": FinalPlan {
                    "comment": "",
                    "end": 2,
                    "skipAll": false,
                    "skipReason": "",
                    "start": 1,
                  },
                  "skip": 0,
                  "time": 8.987,
                  "todo": 0,
                },
              ],
            ],
          ],
          Array [
            "assert",
            Result {
              "fullname": "nesting",
              "id": 1,
              "name": "first",
              "ok": true,
              "time": 8.987,
            },
          ],
          Array [
            "child",
            Array [
              Array [
                "comment",
                "# Subtest\\n",
              ],
              Array [
                "assert",
                Result {
                  "fullname": "nesting",
                  "id": 1,
                  "name": "but that is ok",
                  "ok": true,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "nesting",
                  "id": 2,
                  "name": "this passes",
                  "ok": true,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "nesting",
                  "id": 3,
                  "name": "nested ok",
                  "ok": true,
                },
              ],
              Array [
                "plan",
                Object {
                  "end": 3,
                  "start": 1,
                },
              ],
              Array [
                "complete",
                FinalResults {
                  "bailout": false,
                  "count": 3,
                  "fail": 0,
                  "failures": Array [],
                  "ok": true,
                  "pass": 3,
                  "plan": FinalPlan {
                    "comment": "",
                    "end": 3,
                    "skipAll": false,
                    "skipReason": "",
                    "start": 1,
                  },
                  "skip": 0,
                  "time": 5.988,
                  "todo": 0,
                },
              ],
            ],
          ],
          Array [
            "assert",
            Result {
              "fullname": "nesting",
              "id": 2,
              "name": "second",
              "ok": true,
              "time": 5.988,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 2,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 2,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 2,
              "plan": FinalPlan {
                "comment": "",
                "end": 2,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": 28.647,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "",
          "id": 1,
          "name": "nesting",
          "ok": true,
          "time": 28.647,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "",
          "id": 2,
          "name": "this passes",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 2,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 2,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 2,
          "plan": FinalPlan {
            "comment": "",
            "end": 2,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": 205.826,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "../tap/test/test/ok.js",
      "ok": true,
      "time": 205.826,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP subtest-no-comment-mid-comment-indent.tap bail > stringified 1`] = `
TAP version 13
# Subtest
    # Subtest: nesting
        # Subtest
            1..2
            ok 1 - true is ok
            ok 2 - doag is also okay
        ok 1 - first # time=8.987ms
        # Subtest
            ok 1 - but that is ok
            ok 2 - this passes
            ok 3 - nested ok
            1..3
        ok 2 - second # time=5.988ms
        1..2
    ok 1 - nesting # time=28.647ms
    ok 2 - this passes
    1..2
ok 1 - ../tap/test/test/ok.js # time=205.826ms
1..1

`

exports[`test/parser-stringify.js TAP subtest-no-comment-mid-comment-indent.tap bail > stringified flat 1`] = `
TAP version 13
# Subtest
    # Subtest: nesting
        # Subtest
            1..2
            ok 1 - true is ok
            ok 2 - doag is also okay
        ok 1 - first # time=8.987ms
        # Subtest
            ok 1 - but that is ok
            ok 2 - this passes
            ok 3 - nested ok
            1..3
        ok 2 - second # time=5.988ms
        1..2
    ok 1 - nesting # time=28.647ms
    ok 2 - this passes
    1..2
ok 1 - ../tap/test/test/ok.js # time=205.826ms
1..1

`

exports[`test/parser-stringify.js TAP subtest-no-comment-mid-comment-indent.tap default settings > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest\\n",
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: nesting\\n",
          ],
          Array [
            "child",
            Array [
              Array [
                "comment",
                "# Subtest\\n",
              ],
              Array [
                "plan",
                Object {
                  "end": 2,
                  "start": 1,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "nesting",
                  "id": 1,
                  "name": "true is ok",
                  "ok": true,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "nesting",
                  "id": 2,
                  "name": "doag is also okay",
                  "ok": true,
                },
              ],
              Array [
                "complete",
                FinalResults {
                  "bailout": false,
                  "count": 2,
                  "fail": 0,
                  "failures": Array [],
                  "ok": true,
                  "pass": 2,
                  "plan": FinalPlan {
                    "comment": "",
                    "end": 2,
                    "skipAll": false,
                    "skipReason": "",
                    "start": 1,
                  },
                  "skip": 0,
                  "time": 8.987,
                  "todo": 0,
                },
              ],
            ],
          ],
          Array [
            "assert",
            Result {
              "fullname": "nesting",
              "id": 1,
              "name": "first",
              "ok": true,
              "time": 8.987,
            },
          ],
          Array [
            "child",
            Array [
              Array [
                "comment",
                "# Subtest\\n",
              ],
              Array [
                "assert",
                Result {
                  "fullname": "nesting",
                  "id": 1,
                  "name": "but that is ok",
                  "ok": true,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "nesting",
                  "id": 2,
                  "name": "this passes",
                  "ok": true,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "nesting",
                  "id": 3,
                  "name": "nested ok",
                  "ok": true,
                },
              ],
              Array [
                "plan",
                Object {
                  "end": 3,
                  "start": 1,
                },
              ],
              Array [
                "complete",
                FinalResults {
                  "bailout": false,
                  "count": 3,
                  "fail": 0,
                  "failures": Array [],
                  "ok": true,
                  "pass": 3,
                  "plan": FinalPlan {
                    "comment": "",
                    "end": 3,
                    "skipAll": false,
                    "skipReason": "",
                    "start": 1,
                  },
                  "skip": 0,
                  "time": 5.988,
                  "todo": 0,
                },
              ],
            ],
          ],
          Array [
            "assert",
            Result {
              "fullname": "nesting",
              "id": 2,
              "name": "second",
              "ok": true,
              "time": 5.988,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 2,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 2,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 2,
              "plan": FinalPlan {
                "comment": "",
                "end": 2,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": 28.647,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "",
          "id": 1,
          "name": "nesting",
          "ok": true,
          "time": 28.647,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "",
          "id": 2,
          "name": "this passes",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 2,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 2,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 2,
          "plan": FinalPlan {
            "comment": "",
            "end": 2,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": 205.826,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "../tap/test/test/ok.js",
      "ok": true,
      "time": 205.826,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP subtest-no-comment-mid-comment-indent.tap default settings > stringified 1`] = `
TAP version 13
# Subtest
    # Subtest: nesting
        # Subtest
            1..2
            ok 1 - true is ok
            ok 2 - doag is also okay
        ok 1 - first # time=8.987ms
        # Subtest
            ok 1 - but that is ok
            ok 2 - this passes
            ok 3 - nested ok
            1..3
        ok 2 - second # time=5.988ms
        1..2
    ok 1 - nesting # time=28.647ms
    ok 2 - this passes
    1..2
ok 1 - ../tap/test/test/ok.js # time=205.826ms
1..1

`

exports[`test/parser-stringify.js TAP subtest-no-comment-mid-comment-indent.tap default settings > stringified flat 1`] = `
TAP version 13
# Subtest
    # Subtest: nesting
        # Subtest
            1..2
            ok 1 - true is ok
            ok 2 - doag is also okay
        ok 1 - first # time=8.987ms
        # Subtest
            ok 1 - but that is ok
            ok 2 - this passes
            ok 3 - nested ok
            1..3
        ok 2 - second # time=5.988ms
        1..2
    ok 1 - nesting # time=28.647ms
    ok 2 - this passes
    1..2
ok 1 - ../tap/test/test/ok.js # time=205.826ms
1..1

`

exports[`test/parser-stringify.js TAP subtest-no-comment-mid-comment-indent.tap strict > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest\\n",
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: nesting\\n",
          ],
          Array [
            "child",
            Array [
              Array [
                "comment",
                "# Subtest\\n",
              ],
              Array [
                "plan",
                Object {
                  "end": 2,
                  "start": 1,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "nesting",
                  "id": 1,
                  "name": "true is ok",
                  "ok": true,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "nesting",
                  "id": 2,
                  "name": "doag is also okay",
                  "ok": true,
                },
              ],
              Array [
                "complete",
                FinalResults {
                  "bailout": false,
                  "count": 2,
                  "fail": 0,
                  "failures": Array [],
                  "ok": true,
                  "pass": 2,
                  "plan": FinalPlan {
                    "comment": "",
                    "end": 2,
                    "skipAll": false,
                    "skipReason": "",
                    "start": 1,
                  },
                  "skip": 0,
                  "time": 8.987,
                  "todo": 0,
                },
              ],
            ],
          ],
          Array [
            "assert",
            Result {
              "fullname": "nesting",
              "id": 1,
              "name": "first",
              "ok": true,
              "time": 8.987,
            },
          ],
          Array [
            "child",
            Array [
              Array [
                "comment",
                "# Subtest\\n",
              ],
              Array [
                "assert",
                Result {
                  "fullname": "nesting",
                  "id": 1,
                  "name": "but that is ok",
                  "ok": true,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "nesting",
                  "id": 2,
                  "name": "this passes",
                  "ok": true,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "nesting",
                  "id": 3,
                  "name": "nested ok",
                  "ok": true,
                },
              ],
              Array [
                "plan",
                Object {
                  "end": 3,
                  "start": 1,
                },
              ],
              Array [
                "complete",
                FinalResults {
                  "bailout": false,
                  "count": 3,
                  "fail": 0,
                  "failures": Array [],
                  "ok": true,
                  "pass": 3,
                  "plan": FinalPlan {
                    "comment": "",
                    "end": 3,
                    "skipAll": false,
                    "skipReason": "",
                    "start": 1,
                  },
                  "skip": 0,
                  "time": 5.988,
                  "todo": 0,
                },
              ],
            ],
          ],
          Array [
            "assert",
            Result {
              "fullname": "nesting",
              "id": 2,
              "name": "second",
              "ok": true,
              "time": 5.988,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 2,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 2,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 2,
              "plan": FinalPlan {
                "comment": "",
                "end": 2,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": 28.647,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "",
          "id": 1,
          "name": "nesting",
          "ok": true,
          "time": 28.647,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "",
          "id": 2,
          "name": "this passes",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 2,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 2,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 2,
          "plan": FinalPlan {
            "comment": "",
            "end": 2,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": 205.826,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "../tap/test/test/ok.js",
      "ok": true,
      "time": 205.826,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP subtest-no-comment-mid-comment-indent.tap strict > stringified 1`] = `
TAP version 13
# Subtest
    # Subtest: nesting
        # Subtest
            1..2
            ok 1 - true is ok
            ok 2 - doag is also okay
        ok 1 - first # time=8.987ms
        # Subtest
            ok 1 - but that is ok
            ok 2 - this passes
            ok 3 - nested ok
            1..3
        ok 2 - second # time=5.988ms
        1..2
    ok 1 - nesting # time=28.647ms
    ok 2 - this passes
    1..2
ok 1 - ../tap/test/test/ok.js # time=205.826ms
1..1

`

exports[`test/parser-stringify.js TAP subtest-no-comment-mid-comment-indent.tap strict > stringified flat 1`] = `
TAP version 13
# Subtest
    # Subtest: nesting
        # Subtest
            1..2
            ok 1 - true is ok
            ok 2 - doag is also okay
        ok 1 - first # time=8.987ms
        # Subtest
            ok 1 - but that is ok
            ok 2 - this passes
            ok 3 - nested ok
            1..3
        ok 2 - second # time=5.988ms
        1..2
    ok 1 - nesting # time=28.647ms
    ok 2 - this passes
    1..2
ok 1 - ../tap/test/test/ok.js # time=205.826ms
1..1

`

exports[`test/parser-stringify.js TAP subtest-no-comment-mid-comment-indent.tap strictBail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest\\n",
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: nesting\\n",
          ],
          Array [
            "child",
            Array [
              Array [
                "comment",
                "# Subtest\\n",
              ],
              Array [
                "plan",
                Object {
                  "end": 2,
                  "start": 1,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "nesting",
                  "id": 1,
                  "name": "true is ok",
                  "ok": true,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "nesting",
                  "id": 2,
                  "name": "doag is also okay",
                  "ok": true,
                },
              ],
              Array [
                "complete",
                FinalResults {
                  "bailout": false,
                  "count": 2,
                  "fail": 0,
                  "failures": Array [],
                  "ok": true,
                  "pass": 2,
                  "plan": FinalPlan {
                    "comment": "",
                    "end": 2,
                    "skipAll": false,
                    "skipReason": "",
                    "start": 1,
                  },
                  "skip": 0,
                  "time": 8.987,
                  "todo": 0,
                },
              ],
            ],
          ],
          Array [
            "assert",
            Result {
              "fullname": "nesting",
              "id": 1,
              "name": "first",
              "ok": true,
              "time": 8.987,
            },
          ],
          Array [
            "child",
            Array [
              Array [
                "comment",
                "# Subtest\\n",
              ],
              Array [
                "assert",
                Result {
                  "fullname": "nesting",
                  "id": 1,
                  "name": "but that is ok",
                  "ok": true,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "nesting",
                  "id": 2,
                  "name": "this passes",
                  "ok": true,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "nesting",
                  "id": 3,
                  "name": "nested ok",
                  "ok": true,
                },
              ],
              Array [
                "plan",
                Object {
                  "end": 3,
                  "start": 1,
                },
              ],
              Array [
                "complete",
                FinalResults {
                  "bailout": false,
                  "count": 3,
                  "fail": 0,
                  "failures": Array [],
                  "ok": true,
                  "pass": 3,
                  "plan": FinalPlan {
                    "comment": "",
                    "end": 3,
                    "skipAll": false,
                    "skipReason": "",
                    "start": 1,
                  },
                  "skip": 0,
                  "time": 5.988,
                  "todo": 0,
                },
              ],
            ],
          ],
          Array [
            "assert",
            Result {
              "fullname": "nesting",
              "id": 2,
              "name": "second",
              "ok": true,
              "time": 5.988,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 2,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 2,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 2,
              "plan": FinalPlan {
                "comment": "",
                "end": 2,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": 28.647,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "",
          "id": 1,
          "name": "nesting",
          "ok": true,
          "time": 28.647,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "",
          "id": 2,
          "name": "this passes",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 2,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 2,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 2,
          "plan": FinalPlan {
            "comment": "",
            "end": 2,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": 205.826,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "../tap/test/test/ok.js",
      "ok": true,
      "time": 205.826,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP subtest-no-comment-mid-comment-indent.tap strictBail > stringified 1`] = `
TAP version 13
# Subtest
    # Subtest: nesting
        # Subtest
            1..2
            ok 1 - true is ok
            ok 2 - doag is also okay
        ok 1 - first # time=8.987ms
        # Subtest
            ok 1 - but that is ok
            ok 2 - this passes
            ok 3 - nested ok
            1..3
        ok 2 - second # time=5.988ms
        1..2
    ok 1 - nesting # time=28.647ms
    ok 2 - this passes
    1..2
ok 1 - ../tap/test/test/ok.js # time=205.826ms
1..1

`

exports[`test/parser-stringify.js TAP subtest-no-comment-mid-comment-indent.tap strictBail > stringified flat 1`] = `
TAP version 13
# Subtest
    # Subtest: nesting
        # Subtest
            1..2
            ok 1 - true is ok
            ok 2 - doag is also okay
        ok 1 - first # time=8.987ms
        # Subtest
            ok 1 - but that is ok
            ok 2 - this passes
            ok 3 - nested ok
            1..3
        ok 2 - second # time=5.988ms
        1..2
    ok 1 - nesting # time=28.647ms
    ok 2 - this passes
    1..2
ok 1 - ../tap/test/test/ok.js # time=205.826ms
1..1

`

exports[`test/parser-stringify.js TAP subtest-no-comment-mid-comment.tap bail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest\\n",
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: first\\n",
          ],
          Array [
            "child",
            Array [
              Array [
                "comment",
                "# Subtest\\n",
              ],
              Array [
                "plan",
                Object {
                  "end": 2,
                  "start": 1,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "first",
                  "id": 1,
                  "name": "true is ok",
                  "ok": true,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "first",
                  "id": 2,
                  "name": "doag is also okay",
                  "ok": true,
                },
              ],
              Array [
                "complete",
                FinalResults {
                  "bailout": false,
                  "count": 2,
                  "fail": 0,
                  "failures": Array [],
                  "ok": true,
                  "pass": 2,
                  "plan": FinalPlan {
                    "comment": "",
                    "end": 2,
                    "skipAll": false,
                    "skipReason": "",
                    "start": 1,
                  },
                  "skip": 0,
                  "time": 8.987,
                  "todo": 0,
                },
              ],
            ],
          ],
          Array [
            "assert",
            Result {
              "fullname": "first",
              "id": 1,
              "name": "first",
              "ok": true,
              "time": 8.987,
            },
          ],
          Array [
            "child",
            Array [
              Array [
                "comment",
                "# Subtest\\n",
              ],
              Array [
                "assert",
                Result {
                  "fullname": "first",
                  "id": 1,
                  "name": "but that is ok",
                  "ok": true,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "first",
                  "id": 2,
                  "name": "this passes",
                  "ok": true,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "first",
                  "id": 3,
                  "name": "nested ok",
                  "ok": true,
                },
              ],
              Array [
                "plan",
                Object {
                  "end": 3,
                  "start": 1,
                },
              ],
              Array [
                "complete",
                FinalResults {
                  "bailout": false,
                  "count": 3,
                  "fail": 0,
                  "failures": Array [],
                  "ok": true,
                  "pass": 3,
                  "plan": FinalPlan {
                    "comment": "",
                    "end": 3,
                    "skipAll": false,
                    "skipReason": "",
                    "start": 1,
                  },
                  "skip": 0,
                  "time": 5.988,
                  "todo": 0,
                },
              ],
            ],
          ],
          Array [
            "assert",
            Result {
              "fullname": "first",
              "id": 2,
              "name": "second",
              "ok": true,
              "time": 5.988,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 2,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 2,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 2,
              "plan": FinalPlan {
                "comment": "",
                "end": 2,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": 28.647,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "",
          "id": 1,
          "name": "nesting",
          "ok": true,
          "time": 28.647,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "",
          "id": 2,
          "name": "this passes",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 2,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 2,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 2,
          "plan": FinalPlan {
            "comment": "",
            "end": 2,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": 205.826,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "../tap/test/test/ok.js",
      "ok": true,
      "time": 205.826,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP subtest-no-comment-mid-comment.tap bail > stringified 1`] = `
TAP version 13
# Subtest
    # Subtest: first
        # Subtest
            1..2
            ok 1 - true is ok
            ok 2 - doag is also okay
        ok 1 - first # time=8.987ms
        # Subtest
            ok 1 - but that is ok
            ok 2 - this passes
            ok 3 - nested ok
            1..3
        ok 2 - second # time=5.988ms
        1..2
    ok 1 - nesting # time=28.647ms
    ok 2 - this passes
    1..2
ok 1 - ../tap/test/test/ok.js # time=205.826ms
1..1

`

exports[`test/parser-stringify.js TAP subtest-no-comment-mid-comment.tap bail > stringified flat 1`] = `
TAP version 13
# Subtest
    # Subtest: first
        # Subtest
            1..2
            ok 1 - true is ok
            ok 2 - doag is also okay
        ok 1 - first # time=8.987ms
        # Subtest
            ok 1 - but that is ok
            ok 2 - this passes
            ok 3 - nested ok
            1..3
        ok 2 - second # time=5.988ms
        1..2
    ok 1 - nesting # time=28.647ms
    ok 2 - this passes
    1..2
ok 1 - ../tap/test/test/ok.js # time=205.826ms
1..1

`

exports[`test/parser-stringify.js TAP subtest-no-comment-mid-comment.tap default settings > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest\\n",
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: first\\n",
          ],
          Array [
            "child",
            Array [
              Array [
                "comment",
                "# Subtest\\n",
              ],
              Array [
                "plan",
                Object {
                  "end": 2,
                  "start": 1,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "first",
                  "id": 1,
                  "name": "true is ok",
                  "ok": true,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "first",
                  "id": 2,
                  "name": "doag is also okay",
                  "ok": true,
                },
              ],
              Array [
                "complete",
                FinalResults {
                  "bailout": false,
                  "count": 2,
                  "fail": 0,
                  "failures": Array [],
                  "ok": true,
                  "pass": 2,
                  "plan": FinalPlan {
                    "comment": "",
                    "end": 2,
                    "skipAll": false,
                    "skipReason": "",
                    "start": 1,
                  },
                  "skip": 0,
                  "time": 8.987,
                  "todo": 0,
                },
              ],
            ],
          ],
          Array [
            "assert",
            Result {
              "fullname": "first",
              "id": 1,
              "name": "first",
              "ok": true,
              "time": 8.987,
            },
          ],
          Array [
            "child",
            Array [
              Array [
                "comment",
                "# Subtest\\n",
              ],
              Array [
                "assert",
                Result {
                  "fullname": "first",
                  "id": 1,
                  "name": "but that is ok",
                  "ok": true,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "first",
                  "id": 2,
                  "name": "this passes",
                  "ok": true,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "first",
                  "id": 3,
                  "name": "nested ok",
                  "ok": true,
                },
              ],
              Array [
                "plan",
                Object {
                  "end": 3,
                  "start": 1,
                },
              ],
              Array [
                "complete",
                FinalResults {
                  "bailout": false,
                  "count": 3,
                  "fail": 0,
                  "failures": Array [],
                  "ok": true,
                  "pass": 3,
                  "plan": FinalPlan {
                    "comment": "",
                    "end": 3,
                    "skipAll": false,
                    "skipReason": "",
                    "start": 1,
                  },
                  "skip": 0,
                  "time": 5.988,
                  "todo": 0,
                },
              ],
            ],
          ],
          Array [
            "assert",
            Result {
              "fullname": "first",
              "id": 2,
              "name": "second",
              "ok": true,
              "time": 5.988,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 2,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 2,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 2,
              "plan": FinalPlan {
                "comment": "",
                "end": 2,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": 28.647,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "",
          "id": 1,
          "name": "nesting",
          "ok": true,
          "time": 28.647,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "",
          "id": 2,
          "name": "this passes",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 2,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 2,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 2,
          "plan": FinalPlan {
            "comment": "",
            "end": 2,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": 205.826,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "../tap/test/test/ok.js",
      "ok": true,
      "time": 205.826,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP subtest-no-comment-mid-comment.tap default settings > stringified 1`] = `
TAP version 13
# Subtest
    # Subtest: first
        # Subtest
            1..2
            ok 1 - true is ok
            ok 2 - doag is also okay
        ok 1 - first # time=8.987ms
        # Subtest
            ok 1 - but that is ok
            ok 2 - this passes
            ok 3 - nested ok
            1..3
        ok 2 - second # time=5.988ms
        1..2
    ok 1 - nesting # time=28.647ms
    ok 2 - this passes
    1..2
ok 1 - ../tap/test/test/ok.js # time=205.826ms
1..1

`

exports[`test/parser-stringify.js TAP subtest-no-comment-mid-comment.tap default settings > stringified flat 1`] = `
TAP version 13
# Subtest
    # Subtest: first
        # Subtest
            1..2
            ok 1 - true is ok
            ok 2 - doag is also okay
        ok 1 - first # time=8.987ms
        # Subtest
            ok 1 - but that is ok
            ok 2 - this passes
            ok 3 - nested ok
            1..3
        ok 2 - second # time=5.988ms
        1..2
    ok 1 - nesting # time=28.647ms
    ok 2 - this passes
    1..2
ok 1 - ../tap/test/test/ok.js # time=205.826ms
1..1

`

exports[`test/parser-stringify.js TAP subtest-no-comment-mid-comment.tap strict > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest\\n",
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: first\\n",
          ],
          Array [
            "child",
            Array [
              Array [
                "comment",
                "# Subtest\\n",
              ],
              Array [
                "plan",
                Object {
                  "end": 2,
                  "start": 1,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "first",
                  "id": 1,
                  "name": "true is ok",
                  "ok": true,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "first",
                  "id": 2,
                  "name": "doag is also okay",
                  "ok": true,
                },
              ],
              Array [
                "complete",
                FinalResults {
                  "bailout": false,
                  "count": 2,
                  "fail": 0,
                  "failures": Array [],
                  "ok": true,
                  "pass": 2,
                  "plan": FinalPlan {
                    "comment": "",
                    "end": 2,
                    "skipAll": false,
                    "skipReason": "",
                    "start": 1,
                  },
                  "skip": 0,
                  "time": 8.987,
                  "todo": 0,
                },
              ],
            ],
          ],
          Array [
            "assert",
            Result {
              "fullname": "first",
              "id": 1,
              "name": "first",
              "ok": true,
              "time": 8.987,
            },
          ],
          Array [
            "child",
            Array [
              Array [
                "comment",
                "# Subtest\\n",
              ],
              Array [
                "assert",
                Result {
                  "fullname": "first",
                  "id": 1,
                  "name": "but that is ok",
                  "ok": true,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "first",
                  "id": 2,
                  "name": "this passes",
                  "ok": true,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "first",
                  "id": 3,
                  "name": "nested ok",
                  "ok": true,
                },
              ],
              Array [
                "plan",
                Object {
                  "end": 3,
                  "start": 1,
                },
              ],
              Array [
                "complete",
                FinalResults {
                  "bailout": false,
                  "count": 3,
                  "fail": 0,
                  "failures": Array [],
                  "ok": true,
                  "pass": 3,
                  "plan": FinalPlan {
                    "comment": "",
                    "end": 3,
                    "skipAll": false,
                    "skipReason": "",
                    "start": 1,
                  },
                  "skip": 0,
                  "time": 5.988,
                  "todo": 0,
                },
              ],
            ],
          ],
          Array [
            "assert",
            Result {
              "fullname": "first",
              "id": 2,
              "name": "second",
              "ok": true,
              "time": 5.988,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 2,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 2,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 2,
              "plan": FinalPlan {
                "comment": "",
                "end": 2,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": 28.647,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "",
          "id": 1,
          "name": "nesting",
          "ok": true,
          "time": 28.647,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "",
          "id": 2,
          "name": "this passes",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 2,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 2,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 2,
          "plan": FinalPlan {
            "comment": "",
            "end": 2,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": 205.826,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "../tap/test/test/ok.js",
      "ok": true,
      "time": 205.826,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP subtest-no-comment-mid-comment.tap strict > stringified 1`] = `
TAP version 13
# Subtest
    # Subtest: first
        # Subtest
            1..2
            ok 1 - true is ok
            ok 2 - doag is also okay
        ok 1 - first # time=8.987ms
        # Subtest
            ok 1 - but that is ok
            ok 2 - this passes
            ok 3 - nested ok
            1..3
        ok 2 - second # time=5.988ms
        1..2
    ok 1 - nesting # time=28.647ms
    ok 2 - this passes
    1..2
ok 1 - ../tap/test/test/ok.js # time=205.826ms
1..1

`

exports[`test/parser-stringify.js TAP subtest-no-comment-mid-comment.tap strict > stringified flat 1`] = `
TAP version 13
# Subtest
    # Subtest: first
        # Subtest
            1..2
            ok 1 - true is ok
            ok 2 - doag is also okay
        ok 1 - first # time=8.987ms
        # Subtest
            ok 1 - but that is ok
            ok 2 - this passes
            ok 3 - nested ok
            1..3
        ok 2 - second # time=5.988ms
        1..2
    ok 1 - nesting # time=28.647ms
    ok 2 - this passes
    1..2
ok 1 - ../tap/test/test/ok.js # time=205.826ms
1..1

`

exports[`test/parser-stringify.js TAP subtest-no-comment-mid-comment.tap strictBail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest\\n",
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: first\\n",
          ],
          Array [
            "child",
            Array [
              Array [
                "comment",
                "# Subtest\\n",
              ],
              Array [
                "plan",
                Object {
                  "end": 2,
                  "start": 1,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "first",
                  "id": 1,
                  "name": "true is ok",
                  "ok": true,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "first",
                  "id": 2,
                  "name": "doag is also okay",
                  "ok": true,
                },
              ],
              Array [
                "complete",
                FinalResults {
                  "bailout": false,
                  "count": 2,
                  "fail": 0,
                  "failures": Array [],
                  "ok": true,
                  "pass": 2,
                  "plan": FinalPlan {
                    "comment": "",
                    "end": 2,
                    "skipAll": false,
                    "skipReason": "",
                    "start": 1,
                  },
                  "skip": 0,
                  "time": 8.987,
                  "todo": 0,
                },
              ],
            ],
          ],
          Array [
            "assert",
            Result {
              "fullname": "first",
              "id": 1,
              "name": "first",
              "ok": true,
              "time": 8.987,
            },
          ],
          Array [
            "child",
            Array [
              Array [
                "comment",
                "# Subtest\\n",
              ],
              Array [
                "assert",
                Result {
                  "fullname": "first",
                  "id": 1,
                  "name": "but that is ok",
                  "ok": true,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "first",
                  "id": 2,
                  "name": "this passes",
                  "ok": true,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "first",
                  "id": 3,
                  "name": "nested ok",
                  "ok": true,
                },
              ],
              Array [
                "plan",
                Object {
                  "end": 3,
                  "start": 1,
                },
              ],
              Array [
                "complete",
                FinalResults {
                  "bailout": false,
                  "count": 3,
                  "fail": 0,
                  "failures": Array [],
                  "ok": true,
                  "pass": 3,
                  "plan": FinalPlan {
                    "comment": "",
                    "end": 3,
                    "skipAll": false,
                    "skipReason": "",
                    "start": 1,
                  },
                  "skip": 0,
                  "time": 5.988,
                  "todo": 0,
                },
              ],
            ],
          ],
          Array [
            "assert",
            Result {
              "fullname": "first",
              "id": 2,
              "name": "second",
              "ok": true,
              "time": 5.988,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 2,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 2,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 2,
              "plan": FinalPlan {
                "comment": "",
                "end": 2,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": 28.647,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "",
          "id": 1,
          "name": "nesting",
          "ok": true,
          "time": 28.647,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "",
          "id": 2,
          "name": "this passes",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 2,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 2,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 2,
          "plan": FinalPlan {
            "comment": "",
            "end": 2,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": 205.826,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "../tap/test/test/ok.js",
      "ok": true,
      "time": 205.826,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP subtest-no-comment-mid-comment.tap strictBail > stringified 1`] = `
TAP version 13
# Subtest
    # Subtest: first
        # Subtest
            1..2
            ok 1 - true is ok
            ok 2 - doag is also okay
        ok 1 - first # time=8.987ms
        # Subtest
            ok 1 - but that is ok
            ok 2 - this passes
            ok 3 - nested ok
            1..3
        ok 2 - second # time=5.988ms
        1..2
    ok 1 - nesting # time=28.647ms
    ok 2 - this passes
    1..2
ok 1 - ../tap/test/test/ok.js # time=205.826ms
1..1

`

exports[`test/parser-stringify.js TAP subtest-no-comment-mid-comment.tap strictBail > stringified flat 1`] = `
TAP version 13
# Subtest
    # Subtest: first
        # Subtest
            1..2
            ok 1 - true is ok
            ok 2 - doag is also okay
        ok 1 - first # time=8.987ms
        # Subtest
            ok 1 - but that is ok
            ok 2 - this passes
            ok 3 - nested ok
            1..3
        ok 2 - second # time=5.988ms
        1..2
    ok 1 - nesting # time=28.647ms
    ok 2 - this passes
    1..2
ok 1 - ../tap/test/test/ok.js # time=205.826ms
1..1

`

exports[`test/parser-stringify.js TAP subtest-no-comment.tap bail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest\\n",
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest\\n",
          ],
          Array [
            "child",
            Array [
              Array [
                "comment",
                "# Subtest\\n",
              ],
              Array [
                "plan",
                Object {
                  "end": 2,
                  "start": 1,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "",
                  "id": 1,
                  "name": "true is ok",
                  "ok": true,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "",
                  "id": 2,
                  "name": "doag is also okay",
                  "ok": true,
                },
              ],
              Array [
                "complete",
                FinalResults {
                  "bailout": false,
                  "count": 2,
                  "fail": 0,
                  "failures": Array [],
                  "ok": true,
                  "pass": 2,
                  "plan": FinalPlan {
                    "comment": "",
                    "end": 2,
                    "skipAll": false,
                    "skipReason": "",
                    "start": 1,
                  },
                  "skip": 0,
                  "time": 8.987,
                  "todo": 0,
                },
              ],
            ],
          ],
          Array [
            "assert",
            Result {
              "fullname": "",
              "id": 1,
              "name": "first",
              "ok": true,
              "time": 8.987,
            },
          ],
          Array [
            "child",
            Array [
              Array [
                "comment",
                "# Subtest\\n",
              ],
              Array [
                "assert",
                Result {
                  "fullname": "",
                  "id": 1,
                  "name": "but that is ok",
                  "ok": true,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "",
                  "id": 2,
                  "name": "this passes",
                  "ok": true,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "",
                  "id": 3,
                  "name": "nested ok",
                  "ok": true,
                },
              ],
              Array [
                "plan",
                Object {
                  "end": 3,
                  "start": 1,
                },
              ],
              Array [
                "complete",
                FinalResults {
                  "bailout": false,
                  "count": 3,
                  "fail": 0,
                  "failures": Array [],
                  "ok": true,
                  "pass": 3,
                  "plan": FinalPlan {
                    "comment": "",
                    "end": 3,
                    "skipAll": false,
                    "skipReason": "",
                    "start": 1,
                  },
                  "skip": 0,
                  "time": 5.988,
                  "todo": 0,
                },
              ],
            ],
          ],
          Array [
            "assert",
            Result {
              "fullname": "",
              "id": 2,
              "name": "second",
              "ok": true,
              "time": 5.988,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 2,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 2,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 2,
              "plan": FinalPlan {
                "comment": "",
                "end": 2,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": 28.647,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "",
          "id": 1,
          "name": "nesting",
          "ok": true,
          "time": 28.647,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "",
          "id": 2,
          "name": "this passes",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 2,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 2,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 2,
          "plan": FinalPlan {
            "comment": "",
            "end": 2,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": 205.826,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "../tap/test/test/ok.js",
      "ok": true,
      "time": 205.826,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP subtest-no-comment.tap bail > stringified 1`] = `
TAP version 13
# Subtest
    # Subtest
        # Subtest
            1..2
            ok 1 - true is ok
            ok 2 - doag is also okay
        ok 1 - first # time=8.987ms
        # Subtest
            ok 1 - but that is ok
            ok 2 - this passes
            ok 3 - nested ok
            1..3
        ok 2 - second # time=5.988ms
        1..2
    ok 1 - nesting # time=28.647ms
    ok 2 - this passes
    1..2
ok 1 - ../tap/test/test/ok.js # time=205.826ms
1..1

`

exports[`test/parser-stringify.js TAP subtest-no-comment.tap bail > stringified flat 1`] = `
TAP version 13
# Subtest
    # Subtest
        # Subtest
            1..2
            ok 1 - true is ok
            ok 2 - doag is also okay
        ok 1 - first # time=8.987ms
        # Subtest
            ok 1 - but that is ok
            ok 2 - this passes
            ok 3 - nested ok
            1..3
        ok 2 - second # time=5.988ms
        1..2
    ok 1 - nesting # time=28.647ms
    ok 2 - this passes
    1..2
ok 1 - ../tap/test/test/ok.js # time=205.826ms
1..1

`

exports[`test/parser-stringify.js TAP subtest-no-comment.tap default settings > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest\\n",
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest\\n",
          ],
          Array [
            "child",
            Array [
              Array [
                "comment",
                "# Subtest\\n",
              ],
              Array [
                "plan",
                Object {
                  "end": 2,
                  "start": 1,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "",
                  "id": 1,
                  "name": "true is ok",
                  "ok": true,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "",
                  "id": 2,
                  "name": "doag is also okay",
                  "ok": true,
                },
              ],
              Array [
                "complete",
                FinalResults {
                  "bailout": false,
                  "count": 2,
                  "fail": 0,
                  "failures": Array [],
                  "ok": true,
                  "pass": 2,
                  "plan": FinalPlan {
                    "comment": "",
                    "end": 2,
                    "skipAll": false,
                    "skipReason": "",
                    "start": 1,
                  },
                  "skip": 0,
                  "time": 8.987,
                  "todo": 0,
                },
              ],
            ],
          ],
          Array [
            "assert",
            Result {
              "fullname": "",
              "id": 1,
              "name": "first",
              "ok": true,
              "time": 8.987,
            },
          ],
          Array [
            "child",
            Array [
              Array [
                "comment",
                "# Subtest\\n",
              ],
              Array [
                "assert",
                Result {
                  "fullname": "",
                  "id": 1,
                  "name": "but that is ok",
                  "ok": true,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "",
                  "id": 2,
                  "name": "this passes",
                  "ok": true,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "",
                  "id": 3,
                  "name": "nested ok",
                  "ok": true,
                },
              ],
              Array [
                "plan",
                Object {
                  "end": 3,
                  "start": 1,
                },
              ],
              Array [
                "complete",
                FinalResults {
                  "bailout": false,
                  "count": 3,
                  "fail": 0,
                  "failures": Array [],
                  "ok": true,
                  "pass": 3,
                  "plan": FinalPlan {
                    "comment": "",
                    "end": 3,
                    "skipAll": false,
                    "skipReason": "",
                    "start": 1,
                  },
                  "skip": 0,
                  "time": 5.988,
                  "todo": 0,
                },
              ],
            ],
          ],
          Array [
            "assert",
            Result {
              "fullname": "",
              "id": 2,
              "name": "second",
              "ok": true,
              "time": 5.988,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 2,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 2,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 2,
              "plan": FinalPlan {
                "comment": "",
                "end": 2,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": 28.647,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "",
          "id": 1,
          "name": "nesting",
          "ok": true,
          "time": 28.647,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "",
          "id": 2,
          "name": "this passes",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 2,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 2,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 2,
          "plan": FinalPlan {
            "comment": "",
            "end": 2,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": 205.826,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "../tap/test/test/ok.js",
      "ok": true,
      "time": 205.826,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP subtest-no-comment.tap default settings > stringified 1`] = `
TAP version 13
# Subtest
    # Subtest
        # Subtest
            1..2
            ok 1 - true is ok
            ok 2 - doag is also okay
        ok 1 - first # time=8.987ms
        # Subtest
            ok 1 - but that is ok
            ok 2 - this passes
            ok 3 - nested ok
            1..3
        ok 2 - second # time=5.988ms
        1..2
    ok 1 - nesting # time=28.647ms
    ok 2 - this passes
    1..2
ok 1 - ../tap/test/test/ok.js # time=205.826ms
1..1

`

exports[`test/parser-stringify.js TAP subtest-no-comment.tap default settings > stringified flat 1`] = `
TAP version 13
# Subtest
    # Subtest
        # Subtest
            1..2
            ok 1 - true is ok
            ok 2 - doag is also okay
        ok 1 - first # time=8.987ms
        # Subtest
            ok 1 - but that is ok
            ok 2 - this passes
            ok 3 - nested ok
            1..3
        ok 2 - second # time=5.988ms
        1..2
    ok 1 - nesting # time=28.647ms
    ok 2 - this passes
    1..2
ok 1 - ../tap/test/test/ok.js # time=205.826ms
1..1

`

exports[`test/parser-stringify.js TAP subtest-no-comment.tap strict > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest\\n",
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest\\n",
          ],
          Array [
            "child",
            Array [
              Array [
                "comment",
                "# Subtest\\n",
              ],
              Array [
                "plan",
                Object {
                  "end": 2,
                  "start": 1,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "",
                  "id": 1,
                  "name": "true is ok",
                  "ok": true,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "",
                  "id": 2,
                  "name": "doag is also okay",
                  "ok": true,
                },
              ],
              Array [
                "complete",
                FinalResults {
                  "bailout": false,
                  "count": 2,
                  "fail": 0,
                  "failures": Array [],
                  "ok": true,
                  "pass": 2,
                  "plan": FinalPlan {
                    "comment": "",
                    "end": 2,
                    "skipAll": false,
                    "skipReason": "",
                    "start": 1,
                  },
                  "skip": 0,
                  "time": 8.987,
                  "todo": 0,
                },
              ],
            ],
          ],
          Array [
            "assert",
            Result {
              "fullname": "",
              "id": 1,
              "name": "first",
              "ok": true,
              "time": 8.987,
            },
          ],
          Array [
            "child",
            Array [
              Array [
                "comment",
                "# Subtest\\n",
              ],
              Array [
                "assert",
                Result {
                  "fullname": "",
                  "id": 1,
                  "name": "but that is ok",
                  "ok": true,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "",
                  "id": 2,
                  "name": "this passes",
                  "ok": true,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "",
                  "id": 3,
                  "name": "nested ok",
                  "ok": true,
                },
              ],
              Array [
                "plan",
                Object {
                  "end": 3,
                  "start": 1,
                },
              ],
              Array [
                "complete",
                FinalResults {
                  "bailout": false,
                  "count": 3,
                  "fail": 0,
                  "failures": Array [],
                  "ok": true,
                  "pass": 3,
                  "plan": FinalPlan {
                    "comment": "",
                    "end": 3,
                    "skipAll": false,
                    "skipReason": "",
                    "start": 1,
                  },
                  "skip": 0,
                  "time": 5.988,
                  "todo": 0,
                },
              ],
            ],
          ],
          Array [
            "assert",
            Result {
              "fullname": "",
              "id": 2,
              "name": "second",
              "ok": true,
              "time": 5.988,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 2,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 2,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 2,
              "plan": FinalPlan {
                "comment": "",
                "end": 2,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": 28.647,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "",
          "id": 1,
          "name": "nesting",
          "ok": true,
          "time": 28.647,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "",
          "id": 2,
          "name": "this passes",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 2,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 2,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 2,
          "plan": FinalPlan {
            "comment": "",
            "end": 2,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": 205.826,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "../tap/test/test/ok.js",
      "ok": true,
      "time": 205.826,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP subtest-no-comment.tap strict > stringified 1`] = `
TAP version 13
# Subtest
    # Subtest
        # Subtest
            1..2
            ok 1 - true is ok
            ok 2 - doag is also okay
        ok 1 - first # time=8.987ms
        # Subtest
            ok 1 - but that is ok
            ok 2 - this passes
            ok 3 - nested ok
            1..3
        ok 2 - second # time=5.988ms
        1..2
    ok 1 - nesting # time=28.647ms
    ok 2 - this passes
    1..2
ok 1 - ../tap/test/test/ok.js # time=205.826ms
1..1

`

exports[`test/parser-stringify.js TAP subtest-no-comment.tap strict > stringified flat 1`] = `
TAP version 13
# Subtest
    # Subtest
        # Subtest
            1..2
            ok 1 - true is ok
            ok 2 - doag is also okay
        ok 1 - first # time=8.987ms
        # Subtest
            ok 1 - but that is ok
            ok 2 - this passes
            ok 3 - nested ok
            1..3
        ok 2 - second # time=5.988ms
        1..2
    ok 1 - nesting # time=28.647ms
    ok 2 - this passes
    1..2
ok 1 - ../tap/test/test/ok.js # time=205.826ms
1..1

`

exports[`test/parser-stringify.js TAP subtest-no-comment.tap strictBail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest\\n",
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest\\n",
          ],
          Array [
            "child",
            Array [
              Array [
                "comment",
                "# Subtest\\n",
              ],
              Array [
                "plan",
                Object {
                  "end": 2,
                  "start": 1,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "",
                  "id": 1,
                  "name": "true is ok",
                  "ok": true,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "",
                  "id": 2,
                  "name": "doag is also okay",
                  "ok": true,
                },
              ],
              Array [
                "complete",
                FinalResults {
                  "bailout": false,
                  "count": 2,
                  "fail": 0,
                  "failures": Array [],
                  "ok": true,
                  "pass": 2,
                  "plan": FinalPlan {
                    "comment": "",
                    "end": 2,
                    "skipAll": false,
                    "skipReason": "",
                    "start": 1,
                  },
                  "skip": 0,
                  "time": 8.987,
                  "todo": 0,
                },
              ],
            ],
          ],
          Array [
            "assert",
            Result {
              "fullname": "",
              "id": 1,
              "name": "first",
              "ok": true,
              "time": 8.987,
            },
          ],
          Array [
            "child",
            Array [
              Array [
                "comment",
                "# Subtest\\n",
              ],
              Array [
                "assert",
                Result {
                  "fullname": "",
                  "id": 1,
                  "name": "but that is ok",
                  "ok": true,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "",
                  "id": 2,
                  "name": "this passes",
                  "ok": true,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "",
                  "id": 3,
                  "name": "nested ok",
                  "ok": true,
                },
              ],
              Array [
                "plan",
                Object {
                  "end": 3,
                  "start": 1,
                },
              ],
              Array [
                "complete",
                FinalResults {
                  "bailout": false,
                  "count": 3,
                  "fail": 0,
                  "failures": Array [],
                  "ok": true,
                  "pass": 3,
                  "plan": FinalPlan {
                    "comment": "",
                    "end": 3,
                    "skipAll": false,
                    "skipReason": "",
                    "start": 1,
                  },
                  "skip": 0,
                  "time": 5.988,
                  "todo": 0,
                },
              ],
            ],
          ],
          Array [
            "assert",
            Result {
              "fullname": "",
              "id": 2,
              "name": "second",
              "ok": true,
              "time": 5.988,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 2,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 2,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 2,
              "plan": FinalPlan {
                "comment": "",
                "end": 2,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": 28.647,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "",
          "id": 1,
          "name": "nesting",
          "ok": true,
          "time": 28.647,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "",
          "id": 2,
          "name": "this passes",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 2,
          "start": 1,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 2,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 2,
          "plan": FinalPlan {
            "comment": "",
            "end": 2,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": 205.826,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "../tap/test/test/ok.js",
      "ok": true,
      "time": 205.826,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP subtest-no-comment.tap strictBail > stringified 1`] = `
TAP version 13
# Subtest
    # Subtest
        # Subtest
            1..2
            ok 1 - true is ok
            ok 2 - doag is also okay
        ok 1 - first # time=8.987ms
        # Subtest
            ok 1 - but that is ok
            ok 2 - this passes
            ok 3 - nested ok
            1..3
        ok 2 - second # time=5.988ms
        1..2
    ok 1 - nesting # time=28.647ms
    ok 2 - this passes
    1..2
ok 1 - ../tap/test/test/ok.js # time=205.826ms
1..1

`

exports[`test/parser-stringify.js TAP subtest-no-comment.tap strictBail > stringified flat 1`] = `
TAP version 13
# Subtest
    # Subtest
        # Subtest
            1..2
            ok 1 - true is ok
            ok 2 - doag is also okay
        ok 1 - first # time=8.987ms
        # Subtest
            ok 1 - but that is ok
            ok 2 - this passes
            ok 3 - nested ok
            1..3
        ok 2 - second # time=5.988ms
        1..2
    ok 1 - nesting # time=28.647ms
    ok 2 - this passes
    1..2
ok 1 - ../tap/test/test/ok.js # time=205.826ms
1..1

`

exports[`test/parser-stringify.js TAP subtest-stream-comment-indent.tap bail > parsed 1`] = `
Array [
  Array [
    "comment",
    "# Subtest: ok.js\\n",
  ],
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: nesting\\n",
      ],
      Array [
        "plan",
        Object {
          "end": 2,
          "start": 1,
        },
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: first\\n",
          ],
          Array [
            "plan",
            Object {
              "end": 2,
              "start": 1,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "nesting first",
              "id": 1,
              "name": "true is ok",
              "ok": true,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "nesting first",
              "id": 2,
              "name": "doag is also okay",
              "ok": true,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 2,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 2,
              "plan": FinalPlan {
                "comment": "",
                "end": 2,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": 11.345,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "nesting",
          "id": 1,
          "name": "first",
          "ok": true,
          "time": 11.345,
        },
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: second\\n",
          ],
          Array [
            "assert",
            Result {
              "fullname": "nesting second",
              "id": 1,
              "name": "but that is ok",
              "ok": true,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "nesting second",
              "id": 2,
              "name": "this passes",
              "ok": true,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "nesting second",
              "id": 3,
              "name": "nested ok",
              "ok": true,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 3,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 3,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 3,
              "plan": FinalPlan {
                "comment": "",
                "end": 3,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": 3.613,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "nesting",
          "id": 2,
          "name": "second",
          "ok": true,
          "time": 3.613,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 2,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 2,
          "plan": FinalPlan {
            "comment": "",
            "end": 2,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": 36.045,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "nesting",
      "ok": true,
      "time": 36.045,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "this passes",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 2,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# time=66.857ms\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 2,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 2,
      "plan": FinalPlan {
        "comment": "",
        "end": 2,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": 66.857,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP subtest-stream-comment-indent.tap bail > stringified 1`] = `
# Subtest: ok.js
TAP version 13
# Subtest: nesting
    1..2
    # Subtest: first
        1..2
        ok 1 - true is ok
        ok 2 - doag is also okay
    ok 1 - first # time=11.345ms
    # Subtest: second
        ok 1 - but that is ok
        ok 2 - this passes
        ok 3 - nested ok
        1..3
    ok 2 - second # time=3.613ms
ok 1 - nesting # time=36.045ms
ok 2 - this passes
1..2
# time=66.857ms

`

exports[`test/parser-stringify.js TAP subtest-stream-comment-indent.tap bail > stringified flat 1`] = `
# Subtest: ok.js
TAP version 13
# Subtest: nesting
    1..2
    # Subtest: first
        1..2
        ok 1 - true is ok
        ok 2 - doag is also okay
    ok 1 - first # time=11.345ms
    # Subtest: second
        ok 1 - but that is ok
        ok 2 - this passes
        ok 3 - nested ok
        1..3
    ok 2 - second # time=3.613ms
ok 1 - nesting # time=36.045ms
ok 2 - this passes
1..2
# time=66.857ms

`

exports[`test/parser-stringify.js TAP subtest-stream-comment-indent.tap default settings > parsed 1`] = `
Array [
  Array [
    "comment",
    "# Subtest: ok.js\\n",
  ],
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: nesting\\n",
      ],
      Array [
        "plan",
        Object {
          "end": 2,
          "start": 1,
        },
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: first\\n",
          ],
          Array [
            "plan",
            Object {
              "end": 2,
              "start": 1,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "nesting first",
              "id": 1,
              "name": "true is ok",
              "ok": true,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "nesting first",
              "id": 2,
              "name": "doag is also okay",
              "ok": true,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 2,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 2,
              "plan": FinalPlan {
                "comment": "",
                "end": 2,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": 11.345,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "nesting",
          "id": 1,
          "name": "first",
          "ok": true,
          "time": 11.345,
        },
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: second\\n",
          ],
          Array [
            "assert",
            Result {
              "fullname": "nesting second",
              "id": 1,
              "name": "but that is ok",
              "ok": true,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "nesting second",
              "id": 2,
              "name": "this passes",
              "ok": true,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "nesting second",
              "id": 3,
              "name": "nested ok",
              "ok": true,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 3,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 3,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 3,
              "plan": FinalPlan {
                "comment": "",
                "end": 3,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": 3.613,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "nesting",
          "id": 2,
          "name": "second",
          "ok": true,
          "time": 3.613,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 2,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 2,
          "plan": FinalPlan {
            "comment": "",
            "end": 2,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": 36.045,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "nesting",
      "ok": true,
      "time": 36.045,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "this passes",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 2,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# time=66.857ms\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 2,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 2,
      "plan": FinalPlan {
        "comment": "",
        "end": 2,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": 66.857,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP subtest-stream-comment-indent.tap default settings > stringified 1`] = `
# Subtest: ok.js
TAP version 13
# Subtest: nesting
    1..2
    # Subtest: first
        1..2
        ok 1 - true is ok
        ok 2 - doag is also okay
    ok 1 - first # time=11.345ms
    # Subtest: second
        ok 1 - but that is ok
        ok 2 - this passes
        ok 3 - nested ok
        1..3
    ok 2 - second # time=3.613ms
ok 1 - nesting # time=36.045ms
ok 2 - this passes
1..2
# time=66.857ms

`

exports[`test/parser-stringify.js TAP subtest-stream-comment-indent.tap default settings > stringified flat 1`] = `
# Subtest: ok.js
TAP version 13
# Subtest: nesting
    1..2
    # Subtest: first
        1..2
        ok 1 - true is ok
        ok 2 - doag is also okay
    ok 1 - first # time=11.345ms
    # Subtest: second
        ok 1 - but that is ok
        ok 2 - this passes
        ok 3 - nested ok
        1..3
    ok 2 - second # time=3.613ms
ok 1 - nesting # time=36.045ms
ok 2 - this passes
1..2
# time=66.857ms

`

exports[`test/parser-stringify.js TAP subtest-stream-comment-indent.tap strict > parsed 1`] = `
Array [
  Array [
    "comment",
    "# Subtest: ok.js\\n",
  ],
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: nesting\\n",
      ],
      Array [
        "plan",
        Object {
          "end": 2,
          "start": 1,
        },
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: first\\n",
          ],
          Array [
            "plan",
            Object {
              "end": 2,
              "start": 1,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "nesting first",
              "id": 1,
              "name": "true is ok",
              "ok": true,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "nesting first",
              "id": 2,
              "name": "doag is also okay",
              "ok": true,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 2,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 2,
              "plan": FinalPlan {
                "comment": "",
                "end": 2,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": 11.345,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "nesting",
          "id": 1,
          "name": "first",
          "ok": true,
          "time": 11.345,
        },
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: second\\n",
          ],
          Array [
            "assert",
            Result {
              "fullname": "nesting second",
              "id": 1,
              "name": "but that is ok",
              "ok": true,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "nesting second",
              "id": 2,
              "name": "this passes",
              "ok": true,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "nesting second",
              "id": 3,
              "name": "nested ok",
              "ok": true,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 3,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 3,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 3,
              "plan": FinalPlan {
                "comment": "",
                "end": 3,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": 3.613,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "nesting",
          "id": 2,
          "name": "second",
          "ok": true,
          "time": 3.613,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 2,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 2,
          "plan": FinalPlan {
            "comment": "",
            "end": 2,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": 36.045,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "nesting",
      "ok": true,
      "time": 36.045,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "this passes",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 2,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# time=66.857ms\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 2,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 2,
      "plan": FinalPlan {
        "comment": "",
        "end": 2,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": 66.857,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP subtest-stream-comment-indent.tap strict > stringified 1`] = `
# Subtest: ok.js
TAP version 13
# Subtest: nesting
    1..2
    # Subtest: first
        1..2
        ok 1 - true is ok
        ok 2 - doag is also okay
    ok 1 - first # time=11.345ms
    # Subtest: second
        ok 1 - but that is ok
        ok 2 - this passes
        ok 3 - nested ok
        1..3
    ok 2 - second # time=3.613ms
ok 1 - nesting # time=36.045ms
ok 2 - this passes
1..2
# time=66.857ms

`

exports[`test/parser-stringify.js TAP subtest-stream-comment-indent.tap strict > stringified flat 1`] = `
# Subtest: ok.js
TAP version 13
# Subtest: nesting
    1..2
    # Subtest: first
        1..2
        ok 1 - true is ok
        ok 2 - doag is also okay
    ok 1 - first # time=11.345ms
    # Subtest: second
        ok 1 - but that is ok
        ok 2 - this passes
        ok 3 - nested ok
        1..3
    ok 2 - second # time=3.613ms
ok 1 - nesting # time=36.045ms
ok 2 - this passes
1..2
# time=66.857ms

`

exports[`test/parser-stringify.js TAP subtest-stream-comment-indent.tap strictBail > parsed 1`] = `
Array [
  Array [
    "comment",
    "# Subtest: ok.js\\n",
  ],
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: nesting\\n",
      ],
      Array [
        "plan",
        Object {
          "end": 2,
          "start": 1,
        },
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: first\\n",
          ],
          Array [
            "plan",
            Object {
              "end": 2,
              "start": 1,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "nesting first",
              "id": 1,
              "name": "true is ok",
              "ok": true,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "nesting first",
              "id": 2,
              "name": "doag is also okay",
              "ok": true,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 2,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 2,
              "plan": FinalPlan {
                "comment": "",
                "end": 2,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": 11.345,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "nesting",
          "id": 1,
          "name": "first",
          "ok": true,
          "time": 11.345,
        },
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: second\\n",
          ],
          Array [
            "assert",
            Result {
              "fullname": "nesting second",
              "id": 1,
              "name": "but that is ok",
              "ok": true,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "nesting second",
              "id": 2,
              "name": "this passes",
              "ok": true,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "nesting second",
              "id": 3,
              "name": "nested ok",
              "ok": true,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 3,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 3,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 3,
              "plan": FinalPlan {
                "comment": "",
                "end": 3,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": 3.613,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "nesting",
          "id": 2,
          "name": "second",
          "ok": true,
          "time": 3.613,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 2,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 2,
          "plan": FinalPlan {
            "comment": "",
            "end": 2,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": 36.045,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "nesting",
      "ok": true,
      "time": 36.045,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "this passes",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 2,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# time=66.857ms\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 2,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 2,
      "plan": FinalPlan {
        "comment": "",
        "end": 2,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": 66.857,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP subtest-stream-comment-indent.tap strictBail > stringified 1`] = `
# Subtest: ok.js
TAP version 13
# Subtest: nesting
    1..2
    # Subtest: first
        1..2
        ok 1 - true is ok
        ok 2 - doag is also okay
    ok 1 - first # time=11.345ms
    # Subtest: second
        ok 1 - but that is ok
        ok 2 - this passes
        ok 3 - nested ok
        1..3
    ok 2 - second # time=3.613ms
ok 1 - nesting # time=36.045ms
ok 2 - this passes
1..2
# time=66.857ms

`

exports[`test/parser-stringify.js TAP subtest-stream-comment-indent.tap strictBail > stringified flat 1`] = `
# Subtest: ok.js
TAP version 13
# Subtest: nesting
    1..2
    # Subtest: first
        1..2
        ok 1 - true is ok
        ok 2 - doag is also okay
    ok 1 - first # time=11.345ms
    # Subtest: second
        ok 1 - but that is ok
        ok 2 - this passes
        ok 3 - nested ok
        1..3
    ok 2 - second # time=3.613ms
ok 1 - nesting # time=36.045ms
ok 2 - this passes
1..2
# time=66.857ms

`

exports[`test/parser-stringify.js TAP subtest-stream-comment.tap bail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: nesting\\n",
      ],
      Array [
        "plan",
        Object {
          "end": 2,
          "start": 1,
        },
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: first\\n",
          ],
          Array [
            "plan",
            Object {
              "end": 2,
              "start": 1,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "nesting first",
              "id": 1,
              "name": "true is ok",
              "ok": true,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "nesting first",
              "id": 2,
              "name": "doag is also okay",
              "ok": true,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 2,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 2,
              "plan": FinalPlan {
                "comment": "",
                "end": 2,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": 11.345,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "nesting",
          "id": 1,
          "name": "first",
          "ok": true,
          "time": 11.345,
        },
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: second\\n",
          ],
          Array [
            "assert",
            Result {
              "fullname": "nesting second",
              "id": 1,
              "name": "but that is ok",
              "ok": true,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "nesting second",
              "id": 2,
              "name": "this passes",
              "ok": true,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "nesting second",
              "id": 3,
              "name": "nested ok",
              "ok": true,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 3,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 3,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 3,
              "plan": FinalPlan {
                "comment": "",
                "end": 3,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": 3.613,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "nesting",
          "id": 2,
          "name": "second",
          "ok": true,
          "time": 3.613,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 2,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 2,
          "plan": FinalPlan {
            "comment": "",
            "end": 2,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": 36.045,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "nesting",
      "ok": true,
      "time": 36.045,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "this passes",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 2,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# time=66.857ms\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 2,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 2,
      "plan": FinalPlan {
        "comment": "",
        "end": 2,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": 66.857,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP subtest-stream-comment.tap bail > stringified 1`] = `
TAP version 13
# Subtest: nesting
    1..2
    # Subtest: first
        1..2
        ok 1 - true is ok
        ok 2 - doag is also okay
    ok 1 - first # time=11.345ms
    # Subtest: second
        ok 1 - but that is ok
        ok 2 - this passes
        ok 3 - nested ok
        1..3
    ok 2 - second # time=3.613ms
ok 1 - nesting # time=36.045ms
ok 2 - this passes
1..2
# time=66.857ms

`

exports[`test/parser-stringify.js TAP subtest-stream-comment.tap bail > stringified flat 1`] = `
TAP version 13
# Subtest: nesting
    1..2
    # Subtest: first
        1..2
        ok 1 - true is ok
        ok 2 - doag is also okay
    ok 1 - first # time=11.345ms
    # Subtest: second
        ok 1 - but that is ok
        ok 2 - this passes
        ok 3 - nested ok
        1..3
    ok 2 - second # time=3.613ms
ok 1 - nesting # time=36.045ms
ok 2 - this passes
1..2
# time=66.857ms

`

exports[`test/parser-stringify.js TAP subtest-stream-comment.tap default settings > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: nesting\\n",
      ],
      Array [
        "plan",
        Object {
          "end": 2,
          "start": 1,
        },
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: first\\n",
          ],
          Array [
            "plan",
            Object {
              "end": 2,
              "start": 1,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "nesting first",
              "id": 1,
              "name": "true is ok",
              "ok": true,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "nesting first",
              "id": 2,
              "name": "doag is also okay",
              "ok": true,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 2,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 2,
              "plan": FinalPlan {
                "comment": "",
                "end": 2,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": 11.345,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "nesting",
          "id": 1,
          "name": "first",
          "ok": true,
          "time": 11.345,
        },
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: second\\n",
          ],
          Array [
            "assert",
            Result {
              "fullname": "nesting second",
              "id": 1,
              "name": "but that is ok",
              "ok": true,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "nesting second",
              "id": 2,
              "name": "this passes",
              "ok": true,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "nesting second",
              "id": 3,
              "name": "nested ok",
              "ok": true,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 3,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 3,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 3,
              "plan": FinalPlan {
                "comment": "",
                "end": 3,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": 3.613,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "nesting",
          "id": 2,
          "name": "second",
          "ok": true,
          "time": 3.613,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 2,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 2,
          "plan": FinalPlan {
            "comment": "",
            "end": 2,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": 36.045,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "nesting",
      "ok": true,
      "time": 36.045,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "this passes",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 2,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# time=66.857ms\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 2,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 2,
      "plan": FinalPlan {
        "comment": "",
        "end": 2,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": 66.857,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP subtest-stream-comment.tap default settings > stringified 1`] = `
TAP version 13
# Subtest: nesting
    1..2
    # Subtest: first
        1..2
        ok 1 - true is ok
        ok 2 - doag is also okay
    ok 1 - first # time=11.345ms
    # Subtest: second
        ok 1 - but that is ok
        ok 2 - this passes
        ok 3 - nested ok
        1..3
    ok 2 - second # time=3.613ms
ok 1 - nesting # time=36.045ms
ok 2 - this passes
1..2
# time=66.857ms

`

exports[`test/parser-stringify.js TAP subtest-stream-comment.tap default settings > stringified flat 1`] = `
TAP version 13
# Subtest: nesting
    1..2
    # Subtest: first
        1..2
        ok 1 - true is ok
        ok 2 - doag is also okay
    ok 1 - first # time=11.345ms
    # Subtest: second
        ok 1 - but that is ok
        ok 2 - this passes
        ok 3 - nested ok
        1..3
    ok 2 - second # time=3.613ms
ok 1 - nesting # time=36.045ms
ok 2 - this passes
1..2
# time=66.857ms

`

exports[`test/parser-stringify.js TAP subtest-stream-comment.tap strict > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: nesting\\n",
      ],
      Array [
        "plan",
        Object {
          "end": 2,
          "start": 1,
        },
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: first\\n",
          ],
          Array [
            "plan",
            Object {
              "end": 2,
              "start": 1,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "nesting first",
              "id": 1,
              "name": "true is ok",
              "ok": true,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "nesting first",
              "id": 2,
              "name": "doag is also okay",
              "ok": true,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 2,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 2,
              "plan": FinalPlan {
                "comment": "",
                "end": 2,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": 11.345,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "nesting",
          "id": 1,
          "name": "first",
          "ok": true,
          "time": 11.345,
        },
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: second\\n",
          ],
          Array [
            "assert",
            Result {
              "fullname": "nesting second",
              "id": 1,
              "name": "but that is ok",
              "ok": true,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "nesting second",
              "id": 2,
              "name": "this passes",
              "ok": true,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "nesting second",
              "id": 3,
              "name": "nested ok",
              "ok": true,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 3,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 3,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 3,
              "plan": FinalPlan {
                "comment": "",
                "end": 3,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": 3.613,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "nesting",
          "id": 2,
          "name": "second",
          "ok": true,
          "time": 3.613,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 2,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 2,
          "plan": FinalPlan {
            "comment": "",
            "end": 2,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": 36.045,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "nesting",
      "ok": true,
      "time": 36.045,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "this passes",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 2,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# time=66.857ms\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 2,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 2,
      "plan": FinalPlan {
        "comment": "",
        "end": 2,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": 66.857,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP subtest-stream-comment.tap strict > stringified 1`] = `
TAP version 13
# Subtest: nesting
    1..2
    # Subtest: first
        1..2
        ok 1 - true is ok
        ok 2 - doag is also okay
    ok 1 - first # time=11.345ms
    # Subtest: second
        ok 1 - but that is ok
        ok 2 - this passes
        ok 3 - nested ok
        1..3
    ok 2 - second # time=3.613ms
ok 1 - nesting # time=36.045ms
ok 2 - this passes
1..2
# time=66.857ms

`

exports[`test/parser-stringify.js TAP subtest-stream-comment.tap strict > stringified flat 1`] = `
TAP version 13
# Subtest: nesting
    1..2
    # Subtest: first
        1..2
        ok 1 - true is ok
        ok 2 - doag is also okay
    ok 1 - first # time=11.345ms
    # Subtest: second
        ok 1 - but that is ok
        ok 2 - this passes
        ok 3 - nested ok
        1..3
    ok 2 - second # time=3.613ms
ok 1 - nesting # time=36.045ms
ok 2 - this passes
1..2
# time=66.857ms

`

exports[`test/parser-stringify.js TAP subtest-stream-comment.tap strictBail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: nesting\\n",
      ],
      Array [
        "plan",
        Object {
          "end": 2,
          "start": 1,
        },
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: first\\n",
          ],
          Array [
            "plan",
            Object {
              "end": 2,
              "start": 1,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "nesting first",
              "id": 1,
              "name": "true is ok",
              "ok": true,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "nesting first",
              "id": 2,
              "name": "doag is also okay",
              "ok": true,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 2,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 2,
              "plan": FinalPlan {
                "comment": "",
                "end": 2,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": 11.345,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "nesting",
          "id": 1,
          "name": "first",
          "ok": true,
          "time": 11.345,
        },
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: second\\n",
          ],
          Array [
            "assert",
            Result {
              "fullname": "nesting second",
              "id": 1,
              "name": "but that is ok",
              "ok": true,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "nesting second",
              "id": 2,
              "name": "this passes",
              "ok": true,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "nesting second",
              "id": 3,
              "name": "nested ok",
              "ok": true,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 3,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 3,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 3,
              "plan": FinalPlan {
                "comment": "",
                "end": 3,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": 3.613,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "nesting",
          "id": 2,
          "name": "second",
          "ok": true,
          "time": 3.613,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 2,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 2,
          "plan": FinalPlan {
            "comment": "",
            "end": 2,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": 36.045,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "nesting",
      "ok": true,
      "time": 36.045,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "this passes",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 2,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# time=66.857ms\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 2,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 2,
      "plan": FinalPlan {
        "comment": "",
        "end": 2,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": 66.857,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP subtest-stream-comment.tap strictBail > stringified 1`] = `
TAP version 13
# Subtest: nesting
    1..2
    # Subtest: first
        1..2
        ok 1 - true is ok
        ok 2 - doag is also okay
    ok 1 - first # time=11.345ms
    # Subtest: second
        ok 1 - but that is ok
        ok 2 - this passes
        ok 3 - nested ok
        1..3
    ok 2 - second # time=3.613ms
ok 1 - nesting # time=36.045ms
ok 2 - this passes
1..2
# time=66.857ms

`

exports[`test/parser-stringify.js TAP subtest-stream-comment.tap strictBail > stringified flat 1`] = `
TAP version 13
# Subtest: nesting
    1..2
    # Subtest: first
        1..2
        ok 1 - true is ok
        ok 2 - doag is also okay
    ok 1 - first # time=11.345ms
    # Subtest: second
        ok 1 - but that is ok
        ok 2 - this passes
        ok 3 - nested ok
        1..3
    ok 2 - second # time=3.613ms
ok 1 - nesting # time=36.045ms
ok 2 - this passes
1..2
# time=66.857ms

`

exports[`test/parser-stringify.js TAP subtest-stream-no-comment.tap bail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest\\n",
      ],
      Array [
        "plan",
        Object {
          "end": 2,
          "start": 1,
        },
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest\\n",
          ],
          Array [
            "plan",
            Object {
              "end": 2,
              "start": 1,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "",
              "id": 1,
              "name": "true is ok",
              "ok": true,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "",
              "id": 2,
              "name": "doag is also okay",
              "ok": true,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 2,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 2,
              "plan": FinalPlan {
                "comment": "",
                "end": 2,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": 11.345,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "",
          "id": 1,
          "name": "first",
          "ok": true,
          "time": 11.345,
        },
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest\\n",
          ],
          Array [
            "assert",
            Result {
              "fullname": "",
              "id": 1,
              "name": "but that is ok",
              "ok": true,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "",
              "id": 2,
              "name": "this passes",
              "ok": true,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "",
              "id": 3,
              "name": "nested ok",
              "ok": true,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 3,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 3,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 3,
              "plan": FinalPlan {
                "comment": "",
                "end": 3,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": 3.613,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "",
          "id": 2,
          "name": "second",
          "ok": true,
          "time": 3.613,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 2,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 2,
          "plan": FinalPlan {
            "comment": "",
            "end": 2,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": 36.045,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "nesting",
      "ok": true,
      "time": 36.045,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "this passes",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 2,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 2,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 2,
      "plan": FinalPlan {
        "comment": "",
        "end": 2,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP subtest-stream-no-comment.tap bail > stringified 1`] = `
TAP version 13
# Subtest
    1..2
    # Subtest
        1..2
        ok 1 - true is ok
        ok 2 - doag is also okay
    ok 1 - first # time=11.345ms
    # Subtest
        ok 1 - but that is ok
        ok 2 - this passes
        ok 3 - nested ok
        1..3
    ok 2 - second # time=3.613ms
ok 1 - nesting # time=36.045ms
ok 2 - this passes
1..2

`

exports[`test/parser-stringify.js TAP subtest-stream-no-comment.tap bail > stringified flat 1`] = `
TAP version 13
# Subtest
    1..2
    # Subtest
        1..2
        ok 1 - true is ok
        ok 2 - doag is also okay
    ok 1 - first # time=11.345ms
    # Subtest
        ok 1 - but that is ok
        ok 2 - this passes
        ok 3 - nested ok
        1..3
    ok 2 - second # time=3.613ms
ok 1 - nesting # time=36.045ms
ok 2 - this passes
1..2

`

exports[`test/parser-stringify.js TAP subtest-stream-no-comment.tap default settings > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest\\n",
      ],
      Array [
        "plan",
        Object {
          "end": 2,
          "start": 1,
        },
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest\\n",
          ],
          Array [
            "plan",
            Object {
              "end": 2,
              "start": 1,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "",
              "id": 1,
              "name": "true is ok",
              "ok": true,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "",
              "id": 2,
              "name": "doag is also okay",
              "ok": true,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 2,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 2,
              "plan": FinalPlan {
                "comment": "",
                "end": 2,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": 11.345,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "",
          "id": 1,
          "name": "first",
          "ok": true,
          "time": 11.345,
        },
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest\\n",
          ],
          Array [
            "assert",
            Result {
              "fullname": "",
              "id": 1,
              "name": "but that is ok",
              "ok": true,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "",
              "id": 2,
              "name": "this passes",
              "ok": true,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "",
              "id": 3,
              "name": "nested ok",
              "ok": true,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 3,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 3,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 3,
              "plan": FinalPlan {
                "comment": "",
                "end": 3,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": 3.613,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "",
          "id": 2,
          "name": "second",
          "ok": true,
          "time": 3.613,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 2,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 2,
          "plan": FinalPlan {
            "comment": "",
            "end": 2,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": 36.045,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "nesting",
      "ok": true,
      "time": 36.045,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "this passes",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 2,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 2,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 2,
      "plan": FinalPlan {
        "comment": "",
        "end": 2,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP subtest-stream-no-comment.tap default settings > stringified 1`] = `
TAP version 13
# Subtest
    1..2
    # Subtest
        1..2
        ok 1 - true is ok
        ok 2 - doag is also okay
    ok 1 - first # time=11.345ms
    # Subtest
        ok 1 - but that is ok
        ok 2 - this passes
        ok 3 - nested ok
        1..3
    ok 2 - second # time=3.613ms
ok 1 - nesting # time=36.045ms
ok 2 - this passes
1..2

`

exports[`test/parser-stringify.js TAP subtest-stream-no-comment.tap default settings > stringified flat 1`] = `
TAP version 13
# Subtest
    1..2
    # Subtest
        1..2
        ok 1 - true is ok
        ok 2 - doag is also okay
    ok 1 - first # time=11.345ms
    # Subtest
        ok 1 - but that is ok
        ok 2 - this passes
        ok 3 - nested ok
        1..3
    ok 2 - second # time=3.613ms
ok 1 - nesting # time=36.045ms
ok 2 - this passes
1..2

`

exports[`test/parser-stringify.js TAP subtest-stream-no-comment.tap strict > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest\\n",
      ],
      Array [
        "plan",
        Object {
          "end": 2,
          "start": 1,
        },
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest\\n",
          ],
          Array [
            "plan",
            Object {
              "end": 2,
              "start": 1,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "",
              "id": 1,
              "name": "true is ok",
              "ok": true,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "",
              "id": 2,
              "name": "doag is also okay",
              "ok": true,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 2,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 2,
              "plan": FinalPlan {
                "comment": "",
                "end": 2,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": 11.345,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "",
          "id": 1,
          "name": "first",
          "ok": true,
          "time": 11.345,
        },
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest\\n",
          ],
          Array [
            "assert",
            Result {
              "fullname": "",
              "id": 1,
              "name": "but that is ok",
              "ok": true,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "",
              "id": 2,
              "name": "this passes",
              "ok": true,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "",
              "id": 3,
              "name": "nested ok",
              "ok": true,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 3,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 3,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 3,
              "plan": FinalPlan {
                "comment": "",
                "end": 3,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": 3.613,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "",
          "id": 2,
          "name": "second",
          "ok": true,
          "time": 3.613,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 2,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 2,
          "plan": FinalPlan {
            "comment": "",
            "end": 2,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": 36.045,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "nesting",
      "ok": true,
      "time": 36.045,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "this passes",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 2,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 2,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 2,
      "plan": FinalPlan {
        "comment": "",
        "end": 2,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP subtest-stream-no-comment.tap strict > stringified 1`] = `
TAP version 13
# Subtest
    1..2
    # Subtest
        1..2
        ok 1 - true is ok
        ok 2 - doag is also okay
    ok 1 - first # time=11.345ms
    # Subtest
        ok 1 - but that is ok
        ok 2 - this passes
        ok 3 - nested ok
        1..3
    ok 2 - second # time=3.613ms
ok 1 - nesting # time=36.045ms
ok 2 - this passes
1..2

`

exports[`test/parser-stringify.js TAP subtest-stream-no-comment.tap strict > stringified flat 1`] = `
TAP version 13
# Subtest
    1..2
    # Subtest
        1..2
        ok 1 - true is ok
        ok 2 - doag is also okay
    ok 1 - first # time=11.345ms
    # Subtest
        ok 1 - but that is ok
        ok 2 - this passes
        ok 3 - nested ok
        1..3
    ok 2 - second # time=3.613ms
ok 1 - nesting # time=36.045ms
ok 2 - this passes
1..2

`

exports[`test/parser-stringify.js TAP subtest-stream-no-comment.tap strictBail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest\\n",
      ],
      Array [
        "plan",
        Object {
          "end": 2,
          "start": 1,
        },
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest\\n",
          ],
          Array [
            "plan",
            Object {
              "end": 2,
              "start": 1,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "",
              "id": 1,
              "name": "true is ok",
              "ok": true,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "",
              "id": 2,
              "name": "doag is also okay",
              "ok": true,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 2,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 2,
              "plan": FinalPlan {
                "comment": "",
                "end": 2,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": 11.345,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "",
          "id": 1,
          "name": "first",
          "ok": true,
          "time": 11.345,
        },
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest\\n",
          ],
          Array [
            "assert",
            Result {
              "fullname": "",
              "id": 1,
              "name": "but that is ok",
              "ok": true,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "",
              "id": 2,
              "name": "this passes",
              "ok": true,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "",
              "id": 3,
              "name": "nested ok",
              "ok": true,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 3,
              "start": 1,
            },
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 3,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 3,
              "plan": FinalPlan {
                "comment": "",
                "end": 3,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": 3.613,
              "todo": 0,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "",
          "id": 2,
          "name": "second",
          "ok": true,
          "time": 3.613,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 2,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 2,
          "plan": FinalPlan {
            "comment": "",
            "end": 2,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": 36.045,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "nesting",
      "ok": true,
      "time": 36.045,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "this passes",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 2,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 2,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 2,
      "plan": FinalPlan {
        "comment": "",
        "end": 2,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP subtest-stream-no-comment.tap strictBail > stringified 1`] = `
TAP version 13
# Subtest
    1..2
    # Subtest
        1..2
        ok 1 - true is ok
        ok 2 - doag is also okay
    ok 1 - first # time=11.345ms
    # Subtest
        ok 1 - but that is ok
        ok 2 - this passes
        ok 3 - nested ok
        1..3
    ok 2 - second # time=3.613ms
ok 1 - nesting # time=36.045ms
ok 2 - this passes
1..2

`

exports[`test/parser-stringify.js TAP subtest-stream-no-comment.tap strictBail > stringified flat 1`] = `
TAP version 13
# Subtest
    1..2
    # Subtest
        1..2
        ok 1 - true is ok
        ok 2 - doag is also okay
    ok 1 - first # time=11.345ms
    # Subtest
        ok 1 - but that is ok
        ok 2 - this passes
        ok 3 - nested ok
        1..3
    ok 2 - second # time=3.613ms
ok 1 - nesting # time=36.045ms
ok 2 - this passes
1..2

`

exports[`test/parser-stringify.js TAP subtest-unfinished.tap bail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: unfinished\\n",
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "unfinished",
          "ok": true,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP subtest-unfinished.tap bail > stringified 1`] = `
TAP version 13
1..1
ok
# Subtest: unfinished
    1..1
    ok

`

exports[`test/parser-stringify.js TAP subtest-unfinished.tap bail > stringified flat 1`] = `
TAP version 13
1..1
ok
# Subtest: unfinished
    1..1
    ok

`

exports[`test/parser-stringify.js TAP subtest-unfinished.tap default settings > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: unfinished\\n",
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "unfinished",
          "ok": true,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP subtest-unfinished.tap default settings > stringified 1`] = `
TAP version 13
1..1
ok
# Subtest: unfinished
    1..1
    ok

`

exports[`test/parser-stringify.js TAP subtest-unfinished.tap default settings > stringified flat 1`] = `
TAP version 13
1..1
ok
# Subtest: unfinished
    1..1
    ok

`

exports[`test/parser-stringify.js TAP subtest-unfinished.tap strict > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: unfinished\\n",
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "unfinished",
          "ok": true,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP subtest-unfinished.tap strict > stringified 1`] = `
TAP version 13
1..1
ok
# Subtest: unfinished
    1..1
    ok

`

exports[`test/parser-stringify.js TAP subtest-unfinished.tap strict > stringified flat 1`] = `
TAP version 13
1..1
ok
# Subtest: unfinished
    1..1
    ok

`

exports[`test/parser-stringify.js TAP subtest-unfinished.tap strictBail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "ok": true,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: unfinished\\n",
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "unfinished",
          "ok": true,
        },
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 1,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP subtest-unfinished.tap strictBail > stringified 1`] = `
TAP version 13
1..1
ok
# Subtest: unfinished
    1..1
    ok

`

exports[`test/parser-stringify.js TAP subtest-unfinished.tap strictBail > stringified flat 1`] = `
TAP version 13
1..1
ok
# Subtest: unfinished
    1..1
    ok

`

exports[`test/parser-stringify.js TAP switches.tap bail > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": false,
    },
  ],
  Array [
    "bailout",
    "",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": true,
      "count": 1,
      "fail": 1,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 1,
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP switches.tap bail > stringified 1`] = `
1..1
not ok 1
Bail out!

`

exports[`test/parser-stringify.js TAP switches.tap bail > stringified flat 1`] = `
1..1
not ok 1
Bail out!

`

exports[`test/parser-stringify.js TAP switches.tap default settings > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": false,
    },
  ],
  Array [
    "comment",
    "# failed 1 test\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 1,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 1,
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP switches.tap default settings > stringified 1`] = `
1..1
not ok 1
# failed 1 test

`

exports[`test/parser-stringify.js TAP switches.tap default settings > stringified flat 1`] = `
1..1
not ok 1
# failed 1 test

`

exports[`test/parser-stringify.js TAP switches.tap strict > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": false,
    },
  ],
  Array [
    "comment",
    "# failed 1 test\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 1,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 1,
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP switches.tap strict > stringified 1`] = `
1..1
not ok 1
# failed 1 test

`

exports[`test/parser-stringify.js TAP switches.tap strict > stringified flat 1`] = `
1..1
not ok 1
# failed 1 test

`

exports[`test/parser-stringify.js TAP switches.tap strictBail > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": false,
    },
  ],
  Array [
    "bailout",
    "",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": true,
      "count": 1,
      "fail": 1,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 1,
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP switches.tap strictBail > stringified 1`] = `
1..1
not ok 1
Bail out!

`

exports[`test/parser-stringify.js TAP switches.tap strictBail > stringified flat 1`] = `
1..1
not ok 1
Bail out!

`

exports[`test/parser-stringify.js TAP tap-tests-stdout.tap bail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "comment",
    "# buffer_compare.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# same buffers\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# not same buffers\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "should not be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 2\\n",
  ],
  Array [
    "comment",
    "# pass  2\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "test/buffer_compare.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# common.js\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "name": "just setup, nothing relevant",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "name": "test/common.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# consumer.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# basic.tap\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 6,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# indent.tap\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 7,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# missing.tap\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 8,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# skip-all.tap\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 9,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tap-tests.tap\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 10,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# yamlish.tap\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 11,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 6\\n",
  ],
  Array [
    "comment",
    "# pass  6\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 12,
      "name": "test/consumer.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# debug-test.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# debug test\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 13,
      "name": "Should output debugger message",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 1\\n",
  ],
  Array [
    "comment",
    "# pass  1\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 14,
      "name": "test/debug-test.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# deep-strict.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# strictDeepEquals shouldn't care about key order\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 15,
      "name": "should be strictly equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# strictDeepEquals shouldn't care about key order recursively\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 16,
      "name": "should be strictly equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# strictDeepEquals shoudn't care about key order (but still might)\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 17,
      "name": "should be strictly equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 3\\n",
  ],
  Array [
    "comment",
    "# pass  3\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 18,
      "name": "test/deep-strict.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# deep.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# deepEquals shouldn't care about key order and types\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 19,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# deepEquals shouldn't care about key order recursively and types\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 20,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# deepEquals shoudn't care about key order (but still might) and types\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 21,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 3\\n",
  ],
  Array [
    "comment",
    "# pass  3\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 22,
      "name": "test/deep.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# executed.sh\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 23,
      "name": "File with executable bit should be executed",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 24,
      "name": "test/executed.sh",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# exit-code.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# exit code 1 when tap results show failure\\n",
  ],
  Array [
    "comment",
    "# test exits 0, has failures\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 25,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 26,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test exits 1, has failures\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 27,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 28,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test exits 1, has no failures\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 29,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 30,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# successes exit 0\\n",
  ],
  Array [
    "comment",
    "# test that does nothing, but exits 0\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 31,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 32,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test that succeeds, and exits 0\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 33,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 34,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 10\\n",
  ],
  Array [
    "comment",
    "# pass  10\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 35,
      "name": "test/exit-code.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# expose-gc-test.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# gc test when the gc isn't there\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 36,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# gc test when the gc should be there\\n",
  ],
  Array [
    "comment",
    "# test for gc using --gc\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 37,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test for gc using --expose-gc\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 38,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# cleanup\\n",
  ],
  Array [
    "comment",
    "# tests 3\\n",
  ],
  Array [
    "comment",
    "# pass  3\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 39,
      "name": "test/expose-gc-test.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# global-harness-async.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# outer\\n",
  ],
  Array [
    "comment",
    "# inner 1\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 40,
      "name": "1-1",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# inner 2\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 41,
      "name": "2-1",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# inner 3\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 42,
      "name": "3-1",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 43,
      "name": "test/global-harness-async.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# independent-timeouts.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# finishes in time\\n",
  ],
  Array [
    "comment",
    "# finishes in time too\\n",
  ],
  Array [
    "comment",
    "# tests 0\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 44,
      "name": "test/independent-timeouts.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# isolated-conf-test.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# one\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 45,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 46,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# two\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 47,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 48,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 4\\n",
  ],
  Array [
    "comment",
    "# pass  4\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 49,
      "name": "test/isolated-conf-test.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# meta-test.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# meta test\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 50,
      "name": "sanity check",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 51,
      "name": "not ok",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 52,
      "name": "total test count",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 53,
      "name": "tests passed",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 54,
      "name": "tests failed",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 55,
      "name": "ok is boolean",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 56,
      "name": "skip is number",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 57,
      "name": "results isa Results",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 58,
      "name": "test isa Test",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 59,
      "name": "test isa Harness",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 10\\n",
  ],
  Array [
    "comment",
    "# pass  10\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 60,
      "name": "test/meta-test.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# nested-async.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# Harness async test support\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 61,
      "name": "sync child A",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# sync child B\\n",
  ],
  Array [
    "comment",
    "# async grandchild A\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 62,
      "name": "(unnamed assert)",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# async grandchild B\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 63,
      "name": "(unnamed assert)",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# async child\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 64,
      "name": "sync grandchild in async child A",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# sync grandchild in async child B\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 65,
      "name": "(unnamed assert)",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 5\\n",
  ],
  Array [
    "comment",
    "# pass  5\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 66,
      "name": "test/nested-async.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# nested-test.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# parent\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 67,
      "name": "p test",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# subtest\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 68,
      "name": "ch test",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# nested subtest\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 69,
      "name": "grch test",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# another subtest\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 70,
      "name": "ch test 2",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 4\\n",
  ],
  Array [
    "comment",
    "# pass  4\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 71,
      "name": "test/nested-test.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# non-tap-output.js\\n",
  ],
  Array [
    "comment",
    "# everything is fine\\n",
  ],
  Array [
    "comment",
    "# there are no errors\\n",
  ],
  Array [
    "comment",
    "# this output is not haiku.\\n",
  ],
  Array [
    "comment",
    "# is 8 ok?\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 72,
      "name": ", 8 can stay.",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# but: nevertheless, here we are\\n",
  ],
  Array [
    "comment",
    "# this: is indented\\n",
  ],
  Array [
    "comment",
    "# and: it\\n",
  ],
  Array [
    "comment",
    "# might: ~\\n",
  ],
  Array [
    "comment",
    "# be: yaml?\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 73,
      "name": "might be confusing",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 74,
      "name": "done now, exiting",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 75,
      "name": "test/non-tap-output.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# not-executed.sh\\n",
  ],
  Array [
    "comment",
    "# output-childtest-description.js\\n",
  ],
  Array [
    "comment",
    "# /Users/isaacs/dev/js/tap/test/nested-tests-fixture.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# nested tests, parent and child pass\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 76,
      "name": "outputs parent description",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 77,
      "name": "outputs child description",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 78,
      "name": "outputs parent description before parent result",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 79,
      "name": "outputs parent result before child description",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 80,
      "name": "outputs child description before child result",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 5\\n",
  ],
  Array [
    "comment",
    "# pass  5\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 81,
      "name": "test/output-childtest-description.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# result-trap.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# trap result\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 82,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 83,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 2\\n",
  ],
  Array [
    "comment",
    "# pass  2\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 84,
      "name": "test/result-trap.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# segv.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# setup\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 85,
      "name": "compiled seg faulter",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# segv\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 86,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 87,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 88,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 89,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 90,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 91,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# cleanup\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 92,
      "name": "cleaned up",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 8\\n",
  ],
  Array [
    "comment",
    "# pass  8\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 93,
      "name": "test/segv.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# simple-harness-test-with-plan.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# trivial success\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 94,
      "name": "it works",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# two tests\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 95,
      "name": "math should work",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 96,
      "name": "false should not be ok",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 3\\n",
  ],
  Array [
    "comment",
    "# pass  3\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 97,
      "name": "test/simple-harness-test-with-plan.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# simple-harness-test.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# trivial success\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 98,
      "name": "it works",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# two tests\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 99,
      "name": "math should work",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 100,
      "name": "false should not be ok",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 3\\n",
  ],
  Array [
    "comment",
    "# pass  3\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 101,
      "name": "test/simple-harness-test.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test-assert-todo-skip.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# not much\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 102,
      "name": "always passes",
      "ok": true,
      "skip": "skip it good",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 103,
      "name": "false",
      "ok": true,
      "skip": "always fails",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 104,
      "name": "bonus",
      "ok": true,
      "todo": "remove todo directive",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 105,
      "name": "expected",
      "ok": true,
      "todo": "implement a thing",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 106,
      "name": "always passes without explanation",
      "ok": true,
      "skip": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 107,
      "name": "false without explanation",
      "ok": true,
      "skip": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 108,
      "name": "bonus without explanation",
      "ok": true,
      "todo": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 109,
      "name": "expected without explanation",
      "ok": true,
      "todo": true,
    },
  ],
  Array [
    "comment",
    "# tests 8\\n",
  ],
  Array [
    "comment",
    "# skip  4\\n",
  ],
  Array [
    "comment",
    "# todo  4\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 110,
      "name": "test/test-assert-todo-skip.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test-descriptions.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# captures test descriptions\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 111,
      "name": "exit cleanly",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 112,
      "name": "captures SKIP description",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 113,
      "name": "skip summary is not from file",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 114,
      "name": "todo summary is not from file",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "diag": Object {
        "column": 7,
        "file": "child_process.js",
        "line": 707,
        "stack": Array [
          "getCaller (/Users/isaacs/dev/js/tap/lib/tap-assert.js:439:17)\\n",
          "Function.assert (/Users/isaacs/dev/js/tap/lib/tap-assert.js:21:16)\\n",
          "Test._testAssert (/Users/isaacs/dev/js/tap/lib/tap-test.js:87:16)\\n",
          "/Users/isaacs/dev/js/tap/test/test-descriptions.js:32:7\\n",
          "ChildProcess.exithandler (child_process.js:707:7)\\n",
          "emitTwo (events.js:87:13)\\n",
          "ChildProcess.emit (events.js:169:7)\\n",
          "maybeClose (child_process.js:984:16)\\n",
          "Socket.<anonymous> (child_process.js:1153:11)\\n",
          "emitOne (events.js:77:13)\\n",
        ],
      },
      "fullname": "",
      "id": 115,
      "name": "captures TODO description",
      "ok": false,
    },
  ],
  Array [
    "bailout",
    "captures TODO description",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": "captures TODO description",
      "count": 115,
      "fail": 1,
      "failures": Array [
        Result {
          "diag": Object {
            "column": 7,
            "file": "child_process.js",
            "line": 707,
            "stack": Array [
              "getCaller (/Users/isaacs/dev/js/tap/lib/tap-assert.js:439:17)\\n",
              "Function.assert (/Users/isaacs/dev/js/tap/lib/tap-assert.js:21:16)\\n",
              "Test._testAssert (/Users/isaacs/dev/js/tap/lib/tap-test.js:87:16)\\n",
              "/Users/isaacs/dev/js/tap/test/test-descriptions.js:32:7\\n",
              "ChildProcess.exithandler (child_process.js:707:7)\\n",
              "emitTwo (events.js:87:13)\\n",
              "ChildProcess.emit (events.js:169:7)\\n",
              "maybeClose (child_process.js:984:16)\\n",
              "Socket.<anonymous> (child_process.js:1153:11)\\n",
              "emitOne (events.js:77:13)\\n",
            ],
          },
          "fullname": "",
          "id": 115,
          "name": "captures TODO description",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 114,
      "plan": FinalPlan {
        "comment": "",
        "end": null,
        "skipAll": false,
        "skipReason": "",
        "start": null,
      },
      "skip": 4,
      "time": null,
      "todo": 4,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP tap-tests-stdout.tap bail > stringified 1`] = `
TAP version 13
# buffer_compare.js
# TAP version 13
# same buffers
ok 1 - should be equivalent
# not same buffers
ok 2 - should not be equivalent
# tests 2
# pass  2
# ok
ok 3 - test/buffer_compare.js
# common.js
ok 4 - just setup, nothing relevant
ok 5 - test/common.js
# consumer.js
# TAP version 13
# basic.tap
ok 6 - should be equivalent
# indent.tap
ok 7 - should be equivalent
# missing.tap
ok 8 - should be equivalent
# skip-all.tap
ok 9 - should be equivalent
# tap-tests.tap
ok 10 - should be equivalent
# yamlish.tap
ok 11 - should be equivalent
# tests 6
# pass  6
# ok
ok 12 - test/consumer.js
# debug-test.js
# TAP version 13
# debug test
ok 13 - Should output debugger message
# tests 1
# pass  1
# ok
ok 14 - test/debug-test.js
# deep-strict.js
# TAP version 13
# strictDeepEquals shouldn't care about key order
ok 15 - should be strictly equal
# strictDeepEquals shouldn't care about key order recursively
ok 16 - should be strictly equal
# strictDeepEquals shoudn't care about key order (but still might)
ok 17 - should be strictly equal
# tests 3
# pass  3
# ok
ok 18 - test/deep-strict.js
# deep.js
# TAP version 13
# deepEquals shouldn't care about key order and types
ok 19 - should be equivalent
# deepEquals shouldn't care about key order recursively and types
ok 20 - should be equivalent
# deepEquals shoudn't care about key order (but still might) and types
ok 21 - should be equivalent
# tests 3
# pass  3
# ok
ok 22 - test/deep.js
# executed.sh
ok 23 - File with executable bit should be executed
ok 24 - test/executed.sh
# exit-code.js
# TAP version 13
# exit code 1 when tap results show failure
# test exits 0, has failures
ok 25 - should be equal
ok 26 - should be equal
# test exits 1, has failures
ok 27 - should be equal
ok 28 - should be equal
# test exits 1, has no failures
ok 29 - should be equal
ok 30 - should be equal
# successes exit 0
# test that does nothing, but exits 0
ok 31 - should be equal
ok 32 - should be equal
# test that succeeds, and exits 0
ok 33 - should be equal
ok 34 - should be equal
# tests 10
# pass  10
# ok
ok 35 - test/exit-code.js
# expose-gc-test.js
# TAP version 13
# gc test when the gc isn't there
ok 36 - should be equal
# gc test when the gc should be there
# test for gc using --gc
ok 37 - should be equal
# test for gc using --expose-gc
ok 38 - should be equal
# cleanup
# tests 3
# pass  3
# ok
ok 39 - test/expose-gc-test.js
# global-harness-async.js
# TAP version 13
# outer
# inner 1
ok 40 - 1-1
# inner 2
ok 41 - 2-1
# inner 3
ok 42 - 3-1
ok 43 - test/global-harness-async.js
# independent-timeouts.js
# TAP version 13
# finishes in time
# finishes in time too
# tests 0
# ok
ok 44 - test/independent-timeouts.js
# isolated-conf-test.js
# TAP version 13
# one
ok 45 - should be equal
ok 46 - should be equal
# two
ok 47 - should be equal
ok 48 - should be equal
# tests 4
# pass  4
# ok
ok 49 - test/isolated-conf-test.js
# meta-test.js
# TAP version 13
# meta test
ok 50 - sanity check
ok 51 - not ok
ok 52 - total test count
ok 53 - tests passed
ok 54 - tests failed
ok 55 - ok is boolean
ok 56 - skip is number
ok 57 - results isa Results
ok 58 - test isa Test
ok 59 - test isa Harness
# tests 10
# pass  10
# ok
ok 60 - test/meta-test.js
# nested-async.js
# TAP version 13
# Harness async test support
ok 61 - sync child A
# sync child B
# async grandchild A
ok 62 - (unnamed assert)
# async grandchild B
ok 63 - (unnamed assert)
# async child
ok 64 - sync grandchild in async child A
# sync grandchild in async child B
ok 65 - (unnamed assert)
# tests 5
# pass  5
# ok
ok 66 - test/nested-async.js
# nested-test.js
# TAP version 13
# parent
ok 67 - p test
# subtest
ok 68 - ch test
# nested subtest
ok 69 - grch test
# another subtest
ok 70 - ch test 2
# tests 4
# pass  4
# ok
ok 71 - test/nested-test.js
# non-tap-output.js
# everything is fine
# there are no errors
# this output is not haiku.
# is 8 ok?
ok 72 - , 8 can stay.
# but: nevertheless, here we are
# this: is indented
# and: it
# might: ~
# be: yaml?
ok 73 - might be confusing
ok 74 - done now, exiting
ok 75 - test/non-tap-output.js
# not-executed.sh
# output-childtest-description.js
# /Users/isaacs/dev/js/tap/test/nested-tests-fixture.js
# TAP version 13
# nested tests, parent and child pass
ok 76 - outputs parent description
ok 77 - outputs child description
ok 78 - outputs parent description before parent result
ok 79 - outputs parent result before child description
ok 80 - outputs child description before child result
# tests 5
# pass  5
# ok
ok 81 - test/output-childtest-description.js
# result-trap.js
# TAP version 13
# trap result
ok 82 - should be equal
ok 83 - should be equal
# tests 2
# pass  2
# ok
ok 84 - test/result-trap.js
# segv.js
# TAP version 13
# setup
ok 85 - compiled seg faulter
# segv
ok 86 - should be equivalent
ok 87 - should be equivalent
ok 88 - should be equivalent
ok 89 - should be equivalent
ok 90 - should be equivalent
ok 91 - should be equal
# cleanup
ok 92 - cleaned up
# tests 8
# pass  8
# ok
ok 93 - test/segv.js
# simple-harness-test-with-plan.js
# TAP version 13
# trivial success
ok 94 - it works
# two tests
ok 95 - math should work
ok 96 - false should not be ok
# tests 3
# pass  3
# ok
ok 97 - test/simple-harness-test-with-plan.js
# simple-harness-test.js
# TAP version 13
# trivial success
ok 98 - it works
# two tests
ok 99 - math should work
ok 100 - false should not be ok
# tests 3
# pass  3
# ok
ok 101 - test/simple-harness-test.js
# test-assert-todo-skip.js
# TAP version 13
# not much
ok 102 - always passes # SKIP skip it good
ok 103 - false # SKIP always fails
ok 104 - bonus # TODO remove todo directive
ok 105 - expected # TODO implement a thing
ok 106 - always passes without explanation # SKIP
ok 107 - false without explanation # SKIP
ok 108 - bonus without explanation # TODO
ok 109 - expected without explanation # TODO
# tests 8
# skip  4
# todo  4
ok 110 - test/test-assert-todo-skip.js
# test-descriptions.js
# TAP version 13
# captures test descriptions
ok 111 - exit cleanly
ok 112 - captures SKIP description
ok 113 - skip summary is not from file
ok 114 - todo summary is not from file
not ok 115 - captures TODO description
  ---
  file: child_process.js
  line: 707
  column: 7
  stack:
    - |
      getCaller (/Users/isaacs/dev/js/tap/lib/tap-assert.js:439:17)
    - |
      Function.assert (/Users/isaacs/dev/js/tap/lib/tap-assert.js:21:16)
    - |
      Test._testAssert (/Users/isaacs/dev/js/tap/lib/tap-test.js:87:16)
    - |
      /Users/isaacs/dev/js/tap/test/test-descriptions.js:32:7
    - |
      ChildProcess.exithandler (child_process.js:707:7)
    - |
      emitTwo (events.js:87:13)
    - |
      ChildProcess.emit (events.js:169:7)
    - |
      maybeClose (child_process.js:984:16)
    - |
      Socket.<anonymous> (child_process.js:1153:11)
    - |
      emitOne (events.js:77:13)
  ...
Bail out! captures TODO description

`

exports[`test/parser-stringify.js TAP tap-tests-stdout.tap bail > stringified flat 1`] = `
TAP version 13
# buffer_compare.js
# TAP version 13
# same buffers
ok 1 - should be equivalent
# not same buffers
ok 2 - should not be equivalent
# tests 2
# pass  2
# ok
ok 3 - test/buffer_compare.js
# common.js
ok 4 - just setup, nothing relevant
ok 5 - test/common.js
# consumer.js
# TAP version 13
# basic.tap
ok 6 - should be equivalent
# indent.tap
ok 7 - should be equivalent
# missing.tap
ok 8 - should be equivalent
# skip-all.tap
ok 9 - should be equivalent
# tap-tests.tap
ok 10 - should be equivalent
# yamlish.tap
ok 11 - should be equivalent
# tests 6
# pass  6
# ok
ok 12 - test/consumer.js
# debug-test.js
# TAP version 13
# debug test
ok 13 - Should output debugger message
# tests 1
# pass  1
# ok
ok 14 - test/debug-test.js
# deep-strict.js
# TAP version 13
# strictDeepEquals shouldn't care about key order
ok 15 - should be strictly equal
# strictDeepEquals shouldn't care about key order recursively
ok 16 - should be strictly equal
# strictDeepEquals shoudn't care about key order (but still might)
ok 17 - should be strictly equal
# tests 3
# pass  3
# ok
ok 18 - test/deep-strict.js
# deep.js
# TAP version 13
# deepEquals shouldn't care about key order and types
ok 19 - should be equivalent
# deepEquals shouldn't care about key order recursively and types
ok 20 - should be equivalent
# deepEquals shoudn't care about key order (but still might) and types
ok 21 - should be equivalent
# tests 3
# pass  3
# ok
ok 22 - test/deep.js
# executed.sh
ok 23 - File with executable bit should be executed
ok 24 - test/executed.sh
# exit-code.js
# TAP version 13
# exit code 1 when tap results show failure
# test exits 0, has failures
ok 25 - should be equal
ok 26 - should be equal
# test exits 1, has failures
ok 27 - should be equal
ok 28 - should be equal
# test exits 1, has no failures
ok 29 - should be equal
ok 30 - should be equal
# successes exit 0
# test that does nothing, but exits 0
ok 31 - should be equal
ok 32 - should be equal
# test that succeeds, and exits 0
ok 33 - should be equal
ok 34 - should be equal
# tests 10
# pass  10
# ok
ok 35 - test/exit-code.js
# expose-gc-test.js
# TAP version 13
# gc test when the gc isn't there
ok 36 - should be equal
# gc test when the gc should be there
# test for gc using --gc
ok 37 - should be equal
# test for gc using --expose-gc
ok 38 - should be equal
# cleanup
# tests 3
# pass  3
# ok
ok 39 - test/expose-gc-test.js
# global-harness-async.js
# TAP version 13
# outer
# inner 1
ok 40 - 1-1
# inner 2
ok 41 - 2-1
# inner 3
ok 42 - 3-1
ok 43 - test/global-harness-async.js
# independent-timeouts.js
# TAP version 13
# finishes in time
# finishes in time too
# tests 0
# ok
ok 44 - test/independent-timeouts.js
# isolated-conf-test.js
# TAP version 13
# one
ok 45 - should be equal
ok 46 - should be equal
# two
ok 47 - should be equal
ok 48 - should be equal
# tests 4
# pass  4
# ok
ok 49 - test/isolated-conf-test.js
# meta-test.js
# TAP version 13
# meta test
ok 50 - sanity check
ok 51 - not ok
ok 52 - total test count
ok 53 - tests passed
ok 54 - tests failed
ok 55 - ok is boolean
ok 56 - skip is number
ok 57 - results isa Results
ok 58 - test isa Test
ok 59 - test isa Harness
# tests 10
# pass  10
# ok
ok 60 - test/meta-test.js
# nested-async.js
# TAP version 13
# Harness async test support
ok 61 - sync child A
# sync child B
# async grandchild A
ok 62 - (unnamed assert)
# async grandchild B
ok 63 - (unnamed assert)
# async child
ok 64 - sync grandchild in async child A
# sync grandchild in async child B
ok 65 - (unnamed assert)
# tests 5
# pass  5
# ok
ok 66 - test/nested-async.js
# nested-test.js
# TAP version 13
# parent
ok 67 - p test
# subtest
ok 68 - ch test
# nested subtest
ok 69 - grch test
# another subtest
ok 70 - ch test 2
# tests 4
# pass  4
# ok
ok 71 - test/nested-test.js
# non-tap-output.js
# everything is fine
# there are no errors
# this output is not haiku.
# is 8 ok?
ok 72 - , 8 can stay.
# but: nevertheless, here we are
# this: is indented
# and: it
# might: ~
# be: yaml?
ok 73 - might be confusing
ok 74 - done now, exiting
ok 75 - test/non-tap-output.js
# not-executed.sh
# output-childtest-description.js
# /Users/isaacs/dev/js/tap/test/nested-tests-fixture.js
# TAP version 13
# nested tests, parent and child pass
ok 76 - outputs parent description
ok 77 - outputs child description
ok 78 - outputs parent description before parent result
ok 79 - outputs parent result before child description
ok 80 - outputs child description before child result
# tests 5
# pass  5
# ok
ok 81 - test/output-childtest-description.js
# result-trap.js
# TAP version 13
# trap result
ok 82 - should be equal
ok 83 - should be equal
# tests 2
# pass  2
# ok
ok 84 - test/result-trap.js
# segv.js
# TAP version 13
# setup
ok 85 - compiled seg faulter
# segv
ok 86 - should be equivalent
ok 87 - should be equivalent
ok 88 - should be equivalent
ok 89 - should be equivalent
ok 90 - should be equivalent
ok 91 - should be equal
# cleanup
ok 92 - cleaned up
# tests 8
# pass  8
# ok
ok 93 - test/segv.js
# simple-harness-test-with-plan.js
# TAP version 13
# trivial success
ok 94 - it works
# two tests
ok 95 - math should work
ok 96 - false should not be ok
# tests 3
# pass  3
# ok
ok 97 - test/simple-harness-test-with-plan.js
# simple-harness-test.js
# TAP version 13
# trivial success
ok 98 - it works
# two tests
ok 99 - math should work
ok 100 - false should not be ok
# tests 3
# pass  3
# ok
ok 101 - test/simple-harness-test.js
# test-assert-todo-skip.js
# TAP version 13
# not much
ok 102 - always passes # SKIP skip it good
ok 103 - false # SKIP always fails
ok 104 - bonus # TODO remove todo directive
ok 105 - expected # TODO implement a thing
ok 106 - always passes without explanation # SKIP
ok 107 - false without explanation # SKIP
ok 108 - bonus without explanation # TODO
ok 109 - expected without explanation # TODO
# tests 8
# skip  4
# todo  4
ok 110 - test/test-assert-todo-skip.js
# test-descriptions.js
# TAP version 13
# captures test descriptions
ok 111 - exit cleanly
ok 112 - captures SKIP description
ok 113 - skip summary is not from file
ok 114 - todo summary is not from file
not ok 115 - captures TODO description
  ---
  file: child_process.js
  line: 707
  column: 7
  stack:
    - |
      getCaller (/Users/isaacs/dev/js/tap/lib/tap-assert.js:439:17)
    - |
      Function.assert (/Users/isaacs/dev/js/tap/lib/tap-assert.js:21:16)
    - |
      Test._testAssert (/Users/isaacs/dev/js/tap/lib/tap-test.js:87:16)
    - |
      /Users/isaacs/dev/js/tap/test/test-descriptions.js:32:7
    - |
      ChildProcess.exithandler (child_process.js:707:7)
    - |
      emitTwo (events.js:87:13)
    - |
      ChildProcess.emit (events.js:169:7)
    - |
      maybeClose (child_process.js:984:16)
    - |
      Socket.<anonymous> (child_process.js:1153:11)
    - |
      emitOne (events.js:77:13)
  ...
Bail out! captures TODO description

`

exports[`test/parser-stringify.js TAP tap-tests-stdout.tap default settings > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "comment",
    "# buffer_compare.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# same buffers\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# not same buffers\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "should not be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 2\\n",
  ],
  Array [
    "comment",
    "# pass  2\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "test/buffer_compare.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# common.js\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "name": "just setup, nothing relevant",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "name": "test/common.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# consumer.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# basic.tap\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 6,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# indent.tap\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 7,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# missing.tap\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 8,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# skip-all.tap\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 9,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tap-tests.tap\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 10,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# yamlish.tap\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 11,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 6\\n",
  ],
  Array [
    "comment",
    "# pass  6\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 12,
      "name": "test/consumer.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# debug-test.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# debug test\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 13,
      "name": "Should output debugger message",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 1\\n",
  ],
  Array [
    "comment",
    "# pass  1\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 14,
      "name": "test/debug-test.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# deep-strict.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# strictDeepEquals shouldn't care about key order\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 15,
      "name": "should be strictly equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# strictDeepEquals shouldn't care about key order recursively\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 16,
      "name": "should be strictly equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# strictDeepEquals shoudn't care about key order (but still might)\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 17,
      "name": "should be strictly equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 3\\n",
  ],
  Array [
    "comment",
    "# pass  3\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 18,
      "name": "test/deep-strict.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# deep.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# deepEquals shouldn't care about key order and types\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 19,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# deepEquals shouldn't care about key order recursively and types\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 20,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# deepEquals shoudn't care about key order (but still might) and types\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 21,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 3\\n",
  ],
  Array [
    "comment",
    "# pass  3\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 22,
      "name": "test/deep.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# executed.sh\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 23,
      "name": "File with executable bit should be executed",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 24,
      "name": "test/executed.sh",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# exit-code.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# exit code 1 when tap results show failure\\n",
  ],
  Array [
    "comment",
    "# test exits 0, has failures\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 25,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 26,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test exits 1, has failures\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 27,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 28,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test exits 1, has no failures\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 29,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 30,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# successes exit 0\\n",
  ],
  Array [
    "comment",
    "# test that does nothing, but exits 0\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 31,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 32,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test that succeeds, and exits 0\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 33,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 34,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 10\\n",
  ],
  Array [
    "comment",
    "# pass  10\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 35,
      "name": "test/exit-code.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# expose-gc-test.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# gc test when the gc isn't there\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 36,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# gc test when the gc should be there\\n",
  ],
  Array [
    "comment",
    "# test for gc using --gc\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 37,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test for gc using --expose-gc\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 38,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# cleanup\\n",
  ],
  Array [
    "comment",
    "# tests 3\\n",
  ],
  Array [
    "comment",
    "# pass  3\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 39,
      "name": "test/expose-gc-test.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# global-harness-async.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# outer\\n",
  ],
  Array [
    "comment",
    "# inner 1\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 40,
      "name": "1-1",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# inner 2\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 41,
      "name": "2-1",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# inner 3\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 42,
      "name": "3-1",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 43,
      "name": "test/global-harness-async.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# independent-timeouts.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# finishes in time\\n",
  ],
  Array [
    "comment",
    "# finishes in time too\\n",
  ],
  Array [
    "comment",
    "# tests 0\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 44,
      "name": "test/independent-timeouts.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# isolated-conf-test.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# one\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 45,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 46,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# two\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 47,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 48,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 4\\n",
  ],
  Array [
    "comment",
    "# pass  4\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 49,
      "name": "test/isolated-conf-test.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# meta-test.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# meta test\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 50,
      "name": "sanity check",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 51,
      "name": "not ok",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 52,
      "name": "total test count",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 53,
      "name": "tests passed",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 54,
      "name": "tests failed",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 55,
      "name": "ok is boolean",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 56,
      "name": "skip is number",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 57,
      "name": "results isa Results",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 58,
      "name": "test isa Test",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 59,
      "name": "test isa Harness",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 10\\n",
  ],
  Array [
    "comment",
    "# pass  10\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 60,
      "name": "test/meta-test.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# nested-async.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# Harness async test support\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 61,
      "name": "sync child A",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# sync child B\\n",
  ],
  Array [
    "comment",
    "# async grandchild A\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 62,
      "name": "(unnamed assert)",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# async grandchild B\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 63,
      "name": "(unnamed assert)",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# async child\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 64,
      "name": "sync grandchild in async child A",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# sync grandchild in async child B\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 65,
      "name": "(unnamed assert)",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 5\\n",
  ],
  Array [
    "comment",
    "# pass  5\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 66,
      "name": "test/nested-async.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# nested-test.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# parent\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 67,
      "name": "p test",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# subtest\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 68,
      "name": "ch test",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# nested subtest\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 69,
      "name": "grch test",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# another subtest\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 70,
      "name": "ch test 2",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 4\\n",
  ],
  Array [
    "comment",
    "# pass  4\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 71,
      "name": "test/nested-test.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# non-tap-output.js\\n",
  ],
  Array [
    "comment",
    "# everything is fine\\n",
  ],
  Array [
    "comment",
    "# there are no errors\\n",
  ],
  Array [
    "comment",
    "# this output is not haiku.\\n",
  ],
  Array [
    "comment",
    "# is 8 ok?\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 72,
      "name": ", 8 can stay.",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# but: nevertheless, here we are\\n",
  ],
  Array [
    "comment",
    "# this: is indented\\n",
  ],
  Array [
    "comment",
    "# and: it\\n",
  ],
  Array [
    "comment",
    "# might: ~\\n",
  ],
  Array [
    "comment",
    "# be: yaml?\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 73,
      "name": "might be confusing",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 74,
      "name": "done now, exiting",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 75,
      "name": "test/non-tap-output.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# not-executed.sh\\n",
  ],
  Array [
    "comment",
    "# output-childtest-description.js\\n",
  ],
  Array [
    "comment",
    "# /Users/isaacs/dev/js/tap/test/nested-tests-fixture.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# nested tests, parent and child pass\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 76,
      "name": "outputs parent description",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 77,
      "name": "outputs child description",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 78,
      "name": "outputs parent description before parent result",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 79,
      "name": "outputs parent result before child description",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 80,
      "name": "outputs child description before child result",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 5\\n",
  ],
  Array [
    "comment",
    "# pass  5\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 81,
      "name": "test/output-childtest-description.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# result-trap.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# trap result\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 82,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 83,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 2\\n",
  ],
  Array [
    "comment",
    "# pass  2\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 84,
      "name": "test/result-trap.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# segv.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# setup\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 85,
      "name": "compiled seg faulter",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# segv\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 86,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 87,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 88,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 89,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 90,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 91,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# cleanup\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 92,
      "name": "cleaned up",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 8\\n",
  ],
  Array [
    "comment",
    "# pass  8\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 93,
      "name": "test/segv.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# simple-harness-test-with-plan.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# trivial success\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 94,
      "name": "it works",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# two tests\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 95,
      "name": "math should work",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 96,
      "name": "false should not be ok",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 3\\n",
  ],
  Array [
    "comment",
    "# pass  3\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 97,
      "name": "test/simple-harness-test-with-plan.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# simple-harness-test.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# trivial success\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 98,
      "name": "it works",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# two tests\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 99,
      "name": "math should work",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 100,
      "name": "false should not be ok",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 3\\n",
  ],
  Array [
    "comment",
    "# pass  3\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 101,
      "name": "test/simple-harness-test.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test-assert-todo-skip.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# not much\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 102,
      "name": "always passes",
      "ok": true,
      "skip": "skip it good",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 103,
      "name": "false",
      "ok": true,
      "skip": "always fails",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 104,
      "name": "bonus",
      "ok": true,
      "todo": "remove todo directive",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 105,
      "name": "expected",
      "ok": true,
      "todo": "implement a thing",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 106,
      "name": "always passes without explanation",
      "ok": true,
      "skip": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 107,
      "name": "false without explanation",
      "ok": true,
      "skip": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 108,
      "name": "bonus without explanation",
      "ok": true,
      "todo": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 109,
      "name": "expected without explanation",
      "ok": true,
      "todo": true,
    },
  ],
  Array [
    "comment",
    "# tests 8\\n",
  ],
  Array [
    "comment",
    "# skip  4\\n",
  ],
  Array [
    "comment",
    "# todo  4\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 110,
      "name": "test/test-assert-todo-skip.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test-descriptions.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# captures test descriptions\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 111,
      "name": "exit cleanly",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 112,
      "name": "captures SKIP description",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 113,
      "name": "skip summary is not from file",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 114,
      "name": "todo summary is not from file",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "diag": Object {
        "column": 7,
        "file": "child_process.js",
        "line": 707,
        "stack": Array [
          "getCaller (/Users/isaacs/dev/js/tap/lib/tap-assert.js:439:17)\\n",
          "Function.assert (/Users/isaacs/dev/js/tap/lib/tap-assert.js:21:16)\\n",
          "Test._testAssert (/Users/isaacs/dev/js/tap/lib/tap-test.js:87:16)\\n",
          "/Users/isaacs/dev/js/tap/test/test-descriptions.js:32:7\\n",
          "ChildProcess.exithandler (child_process.js:707:7)\\n",
          "emitTwo (events.js:87:13)\\n",
          "ChildProcess.emit (events.js:169:7)\\n",
          "maybeClose (child_process.js:984:16)\\n",
          "Socket.<anonymous> (child_process.js:1153:11)\\n",
          "emitOne (events.js:77:13)\\n",
        ],
      },
      "fullname": "",
      "id": 115,
      "name": "captures TODO description",
      "ok": false,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 116,
      "name": "exit cleanly",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 117,
      "name": "captures SKIP description",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 118,
      "name": "skip summary is not in TAP output",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 119,
      "name": "todo summary is not in TAP output",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "diag": Object {
        "column": 7,
        "file": "child_process.js",
        "line": 707,
        "stack": Array [
          "getCaller (/Users/isaacs/dev/js/tap/lib/tap-assert.js:439:17)\\n",
          "Function.assert (/Users/isaacs/dev/js/tap/lib/tap-assert.js:21:16)\\n",
          "Test._testAssert (/Users/isaacs/dev/js/tap/lib/tap-test.js:87:16)\\n",
          "/Users/isaacs/dev/js/tap/test/test-descriptions.js:18:7\\n",
          "ChildProcess.exithandler (child_process.js:707:7)\\n",
          "emitTwo (events.js:87:13)\\n",
          "ChildProcess.emit (events.js:169:7)\\n",
          "maybeClose (child_process.js:984:16)\\n",
          "Process.ChildProcess._handle.onexit (child_process.js:1057:5)\\n",
        ],
      },
      "fullname": "",
      "id": 120,
      "name": "captures TODO description",
      "ok": false,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 121,
      "name": "exit cleanly",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "diag": Object {
        "column": 7,
        "file": "child_process.js",
        "line": 707,
        "stack": Array [
          "getCaller (/Users/isaacs/dev/js/tap/lib/tap-assert.js:439:17)\\n",
          "Function.assert (/Users/isaacs/dev/js/tap/lib/tap-assert.js:21:16)\\n",
          "Test._testAssert (/Users/isaacs/dev/js/tap/lib/tap-test.js:87:16)\\n",
          "/Users/isaacs/dev/js/tap/test/test-descriptions.js:23:7\\n",
          "ChildProcess.exithandler (child_process.js:707:7)\\n",
          "emitTwo (events.js:87:13)\\n",
          "ChildProcess.emit (events.js:169:7)\\n",
          "maybeClose (child_process.js:984:16)\\n",
          "Process.ChildProcess._handle.onexit (child_process.js:1057:5)\\n",
        ],
      },
      "fullname": "",
      "id": 122,
      "name": "summarizes skipped count",
      "ok": false,
    },
  ],
  Array [
    "assert",
    Result {
      "diag": Object {
        "column": 7,
        "file": "child_process.js",
        "line": 707,
        "stack": Array [
          "getCaller (/Users/isaacs/dev/js/tap/lib/tap-assert.js:439:17)\\n",
          "Function.assert (/Users/isaacs/dev/js/tap/lib/tap-assert.js:21:16)\\n",
          "Test._testAssert (/Users/isaacs/dev/js/tap/lib/tap-test.js:87:16)\\n",
          "/Users/isaacs/dev/js/tap/test/test-descriptions.js:24:7\\n",
          "ChildProcess.exithandler (child_process.js:707:7)\\n",
          "emitTwo (events.js:87:13)\\n",
          "ChildProcess.emit (events.js:169:7)\\n",
          "maybeClose (child_process.js:984:16)\\n",
          "Process.ChildProcess._handle.onexit (child_process.js:1057:5)\\n",
        ],
      },
      "fullname": "",
      "id": 123,
      "name": "summarizes todo count",
      "ok": false,
    },
  ],
  Array [
    "comment",
    "# tests 13\\n",
  ],
  Array [
    "comment",
    "# pass  9\\n",
  ],
  Array [
    "comment",
    "# fail  4\\n",
  ],
  Array [
    "assert",
    Result {
      "diag": Object {
        "command": "/usr/local/bin/iojs test-descriptions.js",
        "exit": 1,
      },
      "fullname": "",
      "id": 124,
      "name": "test/test-descriptions.js",
      "ok": false,
    },
  ],
  Array [
    "comment",
    "# test-directives.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# captures test descriptions\\n",
  ],
  Array [
    "comment",
    "# raw TAP > TAP consumer > TAP producer\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 125,
      "name": "overall result is PASS",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 126,
      "name": "captures ok SKIP",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 127,
      "name": "captures not ok SKIP",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 128,
      "name": "skip summary not in TAP output",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 129,
      "name": "captures ok TODO",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 130,
      "name": "captures not ok TODO",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 131,
      "name": "todo summary is not in TAP output",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 132,
      "name": "no ugly \\"undefined\\" in output",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# raw TAP > TAP consumer > summary\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 133,
      "name": "overall result is PASS",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 134,
      "name": "no SKIP in summary",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 135,
      "name": "skip summary is not in TAP output",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 136,
      "name": "no TODO in summary",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 137,
      "name": "todo summary is not in TAP output",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 138,
      "name": "no ugly \\"undefined\\" in output",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# TAP producer via require(\\"tap\\")\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 139,
      "name": "overall result is PASS",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 140,
      "name": "captures ok SKIP",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 141,
      "name": "captures not ok SKIP",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 142,
      "name": "skip summary not in TAP output",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 143,
      "name": "captures ok TODO",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 144,
      "name": "captures not ok TODO",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 145,
      "name": "todo summary is not in TAP output",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 146,
      "name": "no ugly \\"undefined\\" in output",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 22\\n",
  ],
  Array [
    "comment",
    "# pass  22\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 147,
      "name": "test/test-directives.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test-skip.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 148,
      "name": "does not count as failure",
      "ok": true,
      "skip": true,
    },
  ],
  Array [
    "comment",
    "# tests 1\\n",
  ],
  Array [
    "comment",
    "# skip  1\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 149,
      "name": "test/test-skip.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test-test.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# testing the test object\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 150,
      "name": "test object should be instanceof Test",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 151,
      "name": "test object should be instanceof Harness",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 152,
      "name": "test._Test should be the Test class",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 153,
      "name": "should have isNotDeepEqual method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 154,
      "name": "isNotDeepEqual method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 155,
      "name": "should have equals method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 156,
      "name": "equals method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 157,
      "name": "should have inequivalent method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 158,
      "name": "inequivalent method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 159,
      "name": "should have threw method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 160,
      "name": "threw method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 161,
      "name": "should have strictEqual method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 162,
      "name": "strictEqual method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 163,
      "name": "should have emit method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 164,
      "name": "emit method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 165,
      "name": "should have fail method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 166,
      "name": "fail method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 167,
      "name": "should have strictEquals method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 168,
      "name": "strictEquals method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 169,
      "name": "should have notLike method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 170,
      "name": "notLike method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 171,
      "name": "should have dissimilar method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 172,
      "name": "dissimilar method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 173,
      "name": "should have true method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 174,
      "name": "true method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 175,
      "name": "should have assert method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 176,
      "name": "assert method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 177,
      "name": "should have is method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 178,
      "name": "is method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 179,
      "name": "should have ok method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 180,
      "name": "ok method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 181,
      "name": "should have isEqual method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 182,
      "name": "isEqual method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 183,
      "name": "should have isDeeply method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 184,
      "name": "isDeeply method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 185,
      "name": "should have deepEqual method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 186,
      "name": "deepEqual method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 187,
      "name": "should have deepEquals method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 188,
      "name": "deepEquals method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 189,
      "name": "should have pass method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 190,
      "name": "pass method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 191,
      "name": "should have length method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 192,
      "name": "length method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 193,
      "name": "should have skip method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 194,
      "name": "skip method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 195,
      "name": "should have isNotEqual method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 196,
      "name": "isNotEqual method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 197,
      "name": "should have looseEquals method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 198,
      "name": "looseEquals method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 199,
      "name": "should have false method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 200,
      "name": "false method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 201,
      "name": "should have notDeeply method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 202,
      "name": "notDeeply method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 203,
      "name": "should have ifErr method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 204,
      "name": "ifErr method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 205,
      "name": "should have hasFields method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 206,
      "name": "hasFields method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 207,
      "name": "should have isNotDeeply method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 208,
      "name": "isNotDeeply method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 209,
      "name": "should have like method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 210,
      "name": "like method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 211,
      "name": "should have similar method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 212,
      "name": "similar method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 213,
      "name": "should have notOk method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 214,
      "name": "notOk method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 215,
      "name": "should have isDissimilar method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 216,
      "name": "isDissimilar method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 217,
      "name": "should have isEquivalent method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 218,
      "name": "isEquivalent method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 219,
      "name": "should have doesNotEqual method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 220,
      "name": "doesNotEqual method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 221,
      "name": "should have isSimilar method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 222,
      "name": "isSimilar method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 223,
      "name": "should have notDeepEqual method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 224,
      "name": "notDeepEqual method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 225,
      "name": "should have type method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 226,
      "name": "type method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 227,
      "name": "should have notok method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 228,
      "name": "notok method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 229,
      "name": "should have isInequivalent method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 230,
      "name": "isInequivalent method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 231,
      "name": "should have isNot method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 232,
      "name": "isNot method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 233,
      "name": "should have same method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 234,
      "name": "same method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 235,
      "name": "should have isInequal method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 236,
      "name": "isInequal method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 237,
      "name": "should have _endNice method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 238,
      "name": "_endNice method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 239,
      "name": "should have ifError method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 240,
      "name": "ifError method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 241,
      "name": "should have iferror method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 242,
      "name": "iferror method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 243,
      "name": "should have clear method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 244,
      "name": "clear method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 245,
      "name": "should have has method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 246,
      "name": "has method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 247,
      "name": "should have not method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 248,
      "name": "not method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 249,
      "name": "should have timeout method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 250,
      "name": "timeout method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 251,
      "name": "should have notSimilar method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 252,
      "name": "notSimilar method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 253,
      "name": "should have isUnlike method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 254,
      "name": "isUnlike method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 255,
      "name": "should have notEquals method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 256,
      "name": "notEquals method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 257,
      "name": "should have unsimilar method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 258,
      "name": "unsimilar method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 259,
      "name": "should have result method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 260,
      "name": "result method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 261,
      "name": "should have doesNotThrow method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 262,
      "name": "doesNotThrow method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 263,
      "name": "should have error method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 264,
      "name": "error method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 265,
      "name": "should have constructor method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 266,
      "name": "constructor method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 267,
      "name": "should have notEqual method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 268,
      "name": "notEqual method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 269,
      "name": "should have throws method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 270,
      "name": "throws method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 271,
      "name": "should have isLike method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 272,
      "name": "isLike method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 273,
      "name": "should have isNotSimilar method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 274,
      "name": "isNotSimilar method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 275,
      "name": "should have isNotEquivalent method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 276,
      "name": "isNotEquivalent method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 277,
      "name": "should have inequal method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 278,
      "name": "inequal method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 279,
      "name": "should have notEquivalent method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 280,
      "name": "notEquivalent method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 281,
      "name": "should have isNotLike method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 282,
      "name": "isNotLike method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 283,
      "name": "should have equivalent method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 284,
      "name": "equivalent method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 285,
      "name": "should have looseEqual method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 286,
      "name": "looseEqual method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 287,
      "name": "should have equal method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 288,
      "name": "equal method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 289,
      "name": "should have unlike method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 290,
      "name": "unlike method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 291,
      "name": "should have doesNotHave method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 292,
      "name": "doesNotHave method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 293,
      "name": "should have comment method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 294,
      "name": "comment method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 295,
      "name": "should have isa method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 296,
      "name": "isa method should be a function",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 147\\n",
  ],
  Array [
    "comment",
    "# pass  147\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 297,
      "name": "test/test-test.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# timeout.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# timeout test with plan only\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 298,
      "name": "a",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 299,
      "name": "b",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# timeout test with plan and end\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 300,
      "name": "a",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 301,
      "name": "b",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 4\\n",
  ],
  Array [
    "comment",
    "# pass  4\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 302,
      "name": "test/timeout.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# trivial-success.js\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 303,
      "name": "test/trivial-success.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# undefined_indented.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# consume yaml\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 304,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 1\\n",
  ],
  Array [
    "comment",
    "# pass  1\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 305,
      "name": "test/undefined_indented.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# valid-command.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# valid command\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 306,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 307,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 308,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 309,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 310,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 311,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 6\\n",
  ],
  Array [
    "comment",
    "# pass  6\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 312,
      "name": "test/valid-command.js",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 312,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# tests 312\\n",
  ],
  Array [
    "comment",
    "# pass  298\\n",
  ],
  Array [
    "comment",
    "# fail  5\\n",
  ],
  Array [
    "comment",
    "# skip  5\\n",
  ],
  Array [
    "comment",
    "# todo  4\\n",
  ],
  Array [
    "comment",
    "# failed 5 of 312 tests\\n",
  ],
  Array [
    "comment",
    "# todo: 4\\n",
  ],
  Array [
    "comment",
    "# skip: 5\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 312,
      "fail": 5,
      "failures": Array [
        Result {
          "diag": Object {
            "column": 7,
            "file": "child_process.js",
            "line": 707,
            "stack": Array [
              "getCaller (/Users/isaacs/dev/js/tap/lib/tap-assert.js:439:17)\\n",
              "Function.assert (/Users/isaacs/dev/js/tap/lib/tap-assert.js:21:16)\\n",
              "Test._testAssert (/Users/isaacs/dev/js/tap/lib/tap-test.js:87:16)\\n",
              "/Users/isaacs/dev/js/tap/test/test-descriptions.js:32:7\\n",
              "ChildProcess.exithandler (child_process.js:707:7)\\n",
              "emitTwo (events.js:87:13)\\n",
              "ChildProcess.emit (events.js:169:7)\\n",
              "maybeClose (child_process.js:984:16)\\n",
              "Socket.<anonymous> (child_process.js:1153:11)\\n",
              "emitOne (events.js:77:13)\\n",
            ],
          },
          "fullname": "",
          "id": 115,
          "name": "captures TODO description",
          "ok": false,
        },
        Result {
          "diag": Object {
            "column": 7,
            "file": "child_process.js",
            "line": 707,
            "stack": Array [
              "getCaller (/Users/isaacs/dev/js/tap/lib/tap-assert.js:439:17)\\n",
              "Function.assert (/Users/isaacs/dev/js/tap/lib/tap-assert.js:21:16)\\n",
              "Test._testAssert (/Users/isaacs/dev/js/tap/lib/tap-test.js:87:16)\\n",
              "/Users/isaacs/dev/js/tap/test/test-descriptions.js:18:7\\n",
              "ChildProcess.exithandler (child_process.js:707:7)\\n",
              "emitTwo (events.js:87:13)\\n",
              "ChildProcess.emit (events.js:169:7)\\n",
              "maybeClose (child_process.js:984:16)\\n",
              "Process.ChildProcess._handle.onexit (child_process.js:1057:5)\\n",
            ],
          },
          "fullname": "",
          "id": 120,
          "name": "captures TODO description",
          "ok": false,
        },
        Result {
          "diag": Object {
            "column": 7,
            "file": "child_process.js",
            "line": 707,
            "stack": Array [
              "getCaller (/Users/isaacs/dev/js/tap/lib/tap-assert.js:439:17)\\n",
              "Function.assert (/Users/isaacs/dev/js/tap/lib/tap-assert.js:21:16)\\n",
              "Test._testAssert (/Users/isaacs/dev/js/tap/lib/tap-test.js:87:16)\\n",
              "/Users/isaacs/dev/js/tap/test/test-descriptions.js:23:7\\n",
              "ChildProcess.exithandler (child_process.js:707:7)\\n",
              "emitTwo (events.js:87:13)\\n",
              "ChildProcess.emit (events.js:169:7)\\n",
              "maybeClose (child_process.js:984:16)\\n",
              "Process.ChildProcess._handle.onexit (child_process.js:1057:5)\\n",
            ],
          },
          "fullname": "",
          "id": 122,
          "name": "summarizes skipped count",
          "ok": false,
        },
        Result {
          "diag": Object {
            "column": 7,
            "file": "child_process.js",
            "line": 707,
            "stack": Array [
              "getCaller (/Users/isaacs/dev/js/tap/lib/tap-assert.js:439:17)\\n",
              "Function.assert (/Users/isaacs/dev/js/tap/lib/tap-assert.js:21:16)\\n",
              "Test._testAssert (/Users/isaacs/dev/js/tap/lib/tap-test.js:87:16)\\n",
              "/Users/isaacs/dev/js/tap/test/test-descriptions.js:24:7\\n",
              "ChildProcess.exithandler (child_process.js:707:7)\\n",
              "emitTwo (events.js:87:13)\\n",
              "ChildProcess.emit (events.js:169:7)\\n",
              "maybeClose (child_process.js:984:16)\\n",
              "Process.ChildProcess._handle.onexit (child_process.js:1057:5)\\n",
            ],
          },
          "fullname": "",
          "id": 123,
          "name": "summarizes todo count",
          "ok": false,
        },
        Result {
          "diag": Object {
            "command": "/usr/local/bin/iojs test-descriptions.js",
            "exit": 1,
          },
          "fullname": "",
          "id": 124,
          "name": "test/test-descriptions.js",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 307,
      "plan": FinalPlan {
        "comment": "",
        "end": 312,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 5,
      "time": null,
      "todo": 4,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP tap-tests-stdout.tap default settings > stringified 1`] = `
TAP version 13
# buffer_compare.js
# TAP version 13
# same buffers
ok 1 - should be equivalent
# not same buffers
ok 2 - should not be equivalent
# tests 2
# pass  2
# ok
ok 3 - test/buffer_compare.js
# common.js
ok 4 - just setup, nothing relevant
ok 5 - test/common.js
# consumer.js
# TAP version 13
# basic.tap
ok 6 - should be equivalent
# indent.tap
ok 7 - should be equivalent
# missing.tap
ok 8 - should be equivalent
# skip-all.tap
ok 9 - should be equivalent
# tap-tests.tap
ok 10 - should be equivalent
# yamlish.tap
ok 11 - should be equivalent
# tests 6
# pass  6
# ok
ok 12 - test/consumer.js
# debug-test.js
# TAP version 13
# debug test
ok 13 - Should output debugger message
# tests 1
# pass  1
# ok
ok 14 - test/debug-test.js
# deep-strict.js
# TAP version 13
# strictDeepEquals shouldn't care about key order
ok 15 - should be strictly equal
# strictDeepEquals shouldn't care about key order recursively
ok 16 - should be strictly equal
# strictDeepEquals shoudn't care about key order (but still might)
ok 17 - should be strictly equal
# tests 3
# pass  3
# ok
ok 18 - test/deep-strict.js
# deep.js
# TAP version 13
# deepEquals shouldn't care about key order and types
ok 19 - should be equivalent
# deepEquals shouldn't care about key order recursively and types
ok 20 - should be equivalent
# deepEquals shoudn't care about key order (but still might) and types
ok 21 - should be equivalent
# tests 3
# pass  3
# ok
ok 22 - test/deep.js
# executed.sh
ok 23 - File with executable bit should be executed
ok 24 - test/executed.sh
# exit-code.js
# TAP version 13
# exit code 1 when tap results show failure
# test exits 0, has failures
ok 25 - should be equal
ok 26 - should be equal
# test exits 1, has failures
ok 27 - should be equal
ok 28 - should be equal
# test exits 1, has no failures
ok 29 - should be equal
ok 30 - should be equal
# successes exit 0
# test that does nothing, but exits 0
ok 31 - should be equal
ok 32 - should be equal
# test that succeeds, and exits 0
ok 33 - should be equal
ok 34 - should be equal
# tests 10
# pass  10
# ok
ok 35 - test/exit-code.js
# expose-gc-test.js
# TAP version 13
# gc test when the gc isn't there
ok 36 - should be equal
# gc test when the gc should be there
# test for gc using --gc
ok 37 - should be equal
# test for gc using --expose-gc
ok 38 - should be equal
# cleanup
# tests 3
# pass  3
# ok
ok 39 - test/expose-gc-test.js
# global-harness-async.js
# TAP version 13
# outer
# inner 1
ok 40 - 1-1
# inner 2
ok 41 - 2-1
# inner 3
ok 42 - 3-1
ok 43 - test/global-harness-async.js
# independent-timeouts.js
# TAP version 13
# finishes in time
# finishes in time too
# tests 0
# ok
ok 44 - test/independent-timeouts.js
# isolated-conf-test.js
# TAP version 13
# one
ok 45 - should be equal
ok 46 - should be equal
# two
ok 47 - should be equal
ok 48 - should be equal
# tests 4
# pass  4
# ok
ok 49 - test/isolated-conf-test.js
# meta-test.js
# TAP version 13
# meta test
ok 50 - sanity check
ok 51 - not ok
ok 52 - total test count
ok 53 - tests passed
ok 54 - tests failed
ok 55 - ok is boolean
ok 56 - skip is number
ok 57 - results isa Results
ok 58 - test isa Test
ok 59 - test isa Harness
# tests 10
# pass  10
# ok
ok 60 - test/meta-test.js
# nested-async.js
# TAP version 13
# Harness async test support
ok 61 - sync child A
# sync child B
# async grandchild A
ok 62 - (unnamed assert)
# async grandchild B
ok 63 - (unnamed assert)
# async child
ok 64 - sync grandchild in async child A
# sync grandchild in async child B
ok 65 - (unnamed assert)
# tests 5
# pass  5
# ok
ok 66 - test/nested-async.js
# nested-test.js
# TAP version 13
# parent
ok 67 - p test
# subtest
ok 68 - ch test
# nested subtest
ok 69 - grch test
# another subtest
ok 70 - ch test 2
# tests 4
# pass  4
# ok
ok 71 - test/nested-test.js
# non-tap-output.js
# everything is fine
# there are no errors
# this output is not haiku.
# is 8 ok?
ok 72 - , 8 can stay.
# but: nevertheless, here we are
# this: is indented
# and: it
# might: ~
# be: yaml?
ok 73 - might be confusing
ok 74 - done now, exiting
ok 75 - test/non-tap-output.js
# not-executed.sh
# output-childtest-description.js
# /Users/isaacs/dev/js/tap/test/nested-tests-fixture.js
# TAP version 13
# nested tests, parent and child pass
ok 76 - outputs parent description
ok 77 - outputs child description
ok 78 - outputs parent description before parent result
ok 79 - outputs parent result before child description
ok 80 - outputs child description before child result
# tests 5
# pass  5
# ok
ok 81 - test/output-childtest-description.js
# result-trap.js
# TAP version 13
# trap result
ok 82 - should be equal
ok 83 - should be equal
# tests 2
# pass  2
# ok
ok 84 - test/result-trap.js
# segv.js
# TAP version 13
# setup
ok 85 - compiled seg faulter
# segv
ok 86 - should be equivalent
ok 87 - should be equivalent
ok 88 - should be equivalent
ok 89 - should be equivalent
ok 90 - should be equivalent
ok 91 - should be equal
# cleanup
ok 92 - cleaned up
# tests 8
# pass  8
# ok
ok 93 - test/segv.js
# simple-harness-test-with-plan.js
# TAP version 13
# trivial success
ok 94 - it works
# two tests
ok 95 - math should work
ok 96 - false should not be ok
# tests 3
# pass  3
# ok
ok 97 - test/simple-harness-test-with-plan.js
# simple-harness-test.js
# TAP version 13
# trivial success
ok 98 - it works
# two tests
ok 99 - math should work
ok 100 - false should not be ok
# tests 3
# pass  3
# ok
ok 101 - test/simple-harness-test.js
# test-assert-todo-skip.js
# TAP version 13
# not much
ok 102 - always passes # SKIP skip it good
ok 103 - false # SKIP always fails
ok 104 - bonus # TODO remove todo directive
ok 105 - expected # TODO implement a thing
ok 106 - always passes without explanation # SKIP
ok 107 - false without explanation # SKIP
ok 108 - bonus without explanation # TODO
ok 109 - expected without explanation # TODO
# tests 8
# skip  4
# todo  4
ok 110 - test/test-assert-todo-skip.js
# test-descriptions.js
# TAP version 13
# captures test descriptions
ok 111 - exit cleanly
ok 112 - captures SKIP description
ok 113 - skip summary is not from file
ok 114 - todo summary is not from file
not ok 115 - captures TODO description
  ---
  file: child_process.js
  line: 707
  column: 7
  stack:
    - |
      getCaller (/Users/isaacs/dev/js/tap/lib/tap-assert.js:439:17)
    - |
      Function.assert (/Users/isaacs/dev/js/tap/lib/tap-assert.js:21:16)
    - |
      Test._testAssert (/Users/isaacs/dev/js/tap/lib/tap-test.js:87:16)
    - |
      /Users/isaacs/dev/js/tap/test/test-descriptions.js:32:7
    - |
      ChildProcess.exithandler (child_process.js:707:7)
    - |
      emitTwo (events.js:87:13)
    - |
      ChildProcess.emit (events.js:169:7)
    - |
      maybeClose (child_process.js:984:16)
    - |
      Socket.<anonymous> (child_process.js:1153:11)
    - |
      emitOne (events.js:77:13)
  ...
ok 116 - exit cleanly
ok 117 - captures SKIP description
ok 118 - skip summary is not in TAP output
ok 119 - todo summary is not in TAP output
not ok 120 - captures TODO description
  ---
  file: child_process.js
  line: 707
  column: 7
  stack:
    - |
      getCaller (/Users/isaacs/dev/js/tap/lib/tap-assert.js:439:17)
    - |
      Function.assert (/Users/isaacs/dev/js/tap/lib/tap-assert.js:21:16)
    - |
      Test._testAssert (/Users/isaacs/dev/js/tap/lib/tap-test.js:87:16)
    - |
      /Users/isaacs/dev/js/tap/test/test-descriptions.js:18:7
    - |
      ChildProcess.exithandler (child_process.js:707:7)
    - |
      emitTwo (events.js:87:13)
    - |
      ChildProcess.emit (events.js:169:7)
    - |
      maybeClose (child_process.js:984:16)
    - |
      Process.ChildProcess._handle.onexit (child_process.js:1057:5)
  ...
ok 121 - exit cleanly
not ok 122 - summarizes skipped count
  ---
  file: child_process.js
  line: 707
  column: 7
  stack:
    - |
      getCaller (/Users/isaacs/dev/js/tap/lib/tap-assert.js:439:17)
    - |
      Function.assert (/Users/isaacs/dev/js/tap/lib/tap-assert.js:21:16)
    - |
      Test._testAssert (/Users/isaacs/dev/js/tap/lib/tap-test.js:87:16)
    - |
      /Users/isaacs/dev/js/tap/test/test-descriptions.js:23:7
    - |
      ChildProcess.exithandler (child_process.js:707:7)
    - |
      emitTwo (events.js:87:13)
    - |
      ChildProcess.emit (events.js:169:7)
    - |
      maybeClose (child_process.js:984:16)
    - |
      Process.ChildProcess._handle.onexit (child_process.js:1057:5)
  ...
not ok 123 - summarizes todo count
  ---
  file: child_process.js
  line: 707
  column: 7
  stack:
    - |
      getCaller (/Users/isaacs/dev/js/tap/lib/tap-assert.js:439:17)
    - |
      Function.assert (/Users/isaacs/dev/js/tap/lib/tap-assert.js:21:16)
    - |
      Test._testAssert (/Users/isaacs/dev/js/tap/lib/tap-test.js:87:16)
    - |
      /Users/isaacs/dev/js/tap/test/test-descriptions.js:24:7
    - |
      ChildProcess.exithandler (child_process.js:707:7)
    - |
      emitTwo (events.js:87:13)
    - |
      ChildProcess.emit (events.js:169:7)
    - |
      maybeClose (child_process.js:984:16)
    - |
      Process.ChildProcess._handle.onexit (child_process.js:1057:5)
  ...
# tests 13
# pass  9
# fail  4
not ok 124 - test/test-descriptions.js
  ---
  exit: 1
  command: /usr/local/bin/iojs test-descriptions.js
  ...
# test-directives.js
# TAP version 13
# captures test descriptions
# raw TAP > TAP consumer > TAP producer
ok 125 - overall result is PASS
ok 126 - captures ok SKIP
ok 127 - captures not ok SKIP
ok 128 - skip summary not in TAP output
ok 129 - captures ok TODO
ok 130 - captures not ok TODO
ok 131 - todo summary is not in TAP output
ok 132 - no ugly "undefined" in output
# raw TAP > TAP consumer > summary
ok 133 - overall result is PASS
ok 134 - no SKIP in summary
ok 135 - skip summary is not in TAP output
ok 136 - no TODO in summary
ok 137 - todo summary is not in TAP output
ok 138 - no ugly "undefined" in output
# TAP producer via require("tap")
ok 139 - overall result is PASS
ok 140 - captures ok SKIP
ok 141 - captures not ok SKIP
ok 142 - skip summary not in TAP output
ok 143 - captures ok TODO
ok 144 - captures not ok TODO
ok 145 - todo summary is not in TAP output
ok 146 - no ugly "undefined" in output
# tests 22
# pass  22
# ok
ok 147 - test/test-directives.js
# test-skip.js
# TAP version 13
ok 148 - does not count as failure # SKIP
# tests 1
# skip  1
ok 149 - test/test-skip.js
# test-test.js
# TAP version 13
# testing the test object
ok 150 - test object should be instanceof Test
ok 151 - test object should be instanceof Harness
ok 152 - test._Test should be the Test class
ok 153 - should have isNotDeepEqual method
ok 154 - isNotDeepEqual method should be a function
ok 155 - should have equals method
ok 156 - equals method should be a function
ok 157 - should have inequivalent method
ok 158 - inequivalent method should be a function
ok 159 - should have threw method
ok 160 - threw method should be a function
ok 161 - should have strictEqual method
ok 162 - strictEqual method should be a function
ok 163 - should have emit method
ok 164 - emit method should be a function
ok 165 - should have fail method
ok 166 - fail method should be a function
ok 167 - should have strictEquals method
ok 168 - strictEquals method should be a function
ok 169 - should have notLike method
ok 170 - notLike method should be a function
ok 171 - should have dissimilar method
ok 172 - dissimilar method should be a function
ok 173 - should have true method
ok 174 - true method should be a function
ok 175 - should have assert method
ok 176 - assert method should be a function
ok 177 - should have is method
ok 178 - is method should be a function
ok 179 - should have ok method
ok 180 - ok method should be a function
ok 181 - should have isEqual method
ok 182 - isEqual method should be a function
ok 183 - should have isDeeply method
ok 184 - isDeeply method should be a function
ok 185 - should have deepEqual method
ok 186 - deepEqual method should be a function
ok 187 - should have deepEquals method
ok 188 - deepEquals method should be a function
ok 189 - should have pass method
ok 190 - pass method should be a function
ok 191 - should have length method
ok 192 - length method should be a function
ok 193 - should have skip method
ok 194 - skip method should be a function
ok 195 - should have isNotEqual method
ok 196 - isNotEqual method should be a function
ok 197 - should have looseEquals method
ok 198 - looseEquals method should be a function
ok 199 - should have false method
ok 200 - false method should be a function
ok 201 - should have notDeeply method
ok 202 - notDeeply method should be a function
ok 203 - should have ifErr method
ok 204 - ifErr method should be a function
ok 205 - should have hasFields method
ok 206 - hasFields method should be a function
ok 207 - should have isNotDeeply method
ok 208 - isNotDeeply method should be a function
ok 209 - should have like method
ok 210 - like method should be a function
ok 211 - should have similar method
ok 212 - similar method should be a function
ok 213 - should have notOk method
ok 214 - notOk method should be a function
ok 215 - should have isDissimilar method
ok 216 - isDissimilar method should be a function
ok 217 - should have isEquivalent method
ok 218 - isEquivalent method should be a function
ok 219 - should have doesNotEqual method
ok 220 - doesNotEqual method should be a function
ok 221 - should have isSimilar method
ok 222 - isSimilar method should be a function
ok 223 - should have notDeepEqual method
ok 224 - notDeepEqual method should be a function
ok 225 - should have type method
ok 226 - type method should be a function
ok 227 - should have notok method
ok 228 - notok method should be a function
ok 229 - should have isInequivalent method
ok 230 - isInequivalent method should be a function
ok 231 - should have isNot method
ok 232 - isNot method should be a function
ok 233 - should have same method
ok 234 - same method should be a function
ok 235 - should have isInequal method
ok 236 - isInequal method should be a function
ok 237 - should have _endNice method
ok 238 - _endNice method should be a function
ok 239 - should have ifError method
ok 240 - ifError method should be a function
ok 241 - should have iferror method
ok 242 - iferror method should be a function
ok 243 - should have clear method
ok 244 - clear method should be a function
ok 245 - should have has method
ok 246 - has method should be a function
ok 247 - should have not method
ok 248 - not method should be a function
ok 249 - should have timeout method
ok 250 - timeout method should be a function
ok 251 - should have notSimilar method
ok 252 - notSimilar method should be a function
ok 253 - should have isUnlike method
ok 254 - isUnlike method should be a function
ok 255 - should have notEquals method
ok 256 - notEquals method should be a function
ok 257 - should have unsimilar method
ok 258 - unsimilar method should be a function
ok 259 - should have result method
ok 260 - result method should be a function
ok 261 - should have doesNotThrow method
ok 262 - doesNotThrow method should be a function
ok 263 - should have error method
ok 264 - error method should be a function
ok 265 - should have constructor method
ok 266 - constructor method should be a function
ok 267 - should have notEqual method
ok 268 - notEqual method should be a function
ok 269 - should have throws method
ok 270 - throws method should be a function
ok 271 - should have isLike method
ok 272 - isLike method should be a function
ok 273 - should have isNotSimilar method
ok 274 - isNotSimilar method should be a function
ok 275 - should have isNotEquivalent method
ok 276 - isNotEquivalent method should be a function
ok 277 - should have inequal method
ok 278 - inequal method should be a function
ok 279 - should have notEquivalent method
ok 280 - notEquivalent method should be a function
ok 281 - should have isNotLike method
ok 282 - isNotLike method should be a function
ok 283 - should have equivalent method
ok 284 - equivalent method should be a function
ok 285 - should have looseEqual method
ok 286 - looseEqual method should be a function
ok 287 - should have equal method
ok 288 - equal method should be a function
ok 289 - should have unlike method
ok 290 - unlike method should be a function
ok 291 - should have doesNotHave method
ok 292 - doesNotHave method should be a function
ok 293 - should have comment method
ok 294 - comment method should be a function
ok 295 - should have isa method
ok 296 - isa method should be a function
# tests 147
# pass  147
# ok
ok 297 - test/test-test.js
# timeout.js
# TAP version 13
# timeout test with plan only
ok 298 - a
ok 299 - b
# timeout test with plan and end
ok 300 - a
ok 301 - b
# tests 4
# pass  4
# ok
ok 302 - test/timeout.js
# trivial-success.js
ok 303 - test/trivial-success.js
# undefined_indented.js
# TAP version 13
# consume yaml
ok 304 - should be equivalent
# tests 1
# pass  1
# ok
ok 305 - test/undefined_indented.js
# valid-command.js
# TAP version 13
# valid command
ok 306 - should be equivalent
ok 307 - should be equivalent
ok 308 - should be equivalent
ok 309 - should be equivalent
ok 310 - should be equivalent
ok 311 - should be equal
# tests 6
# pass  6
# ok
ok 312 - test/valid-command.js
1..312
# tests 312
# pass  298
# fail  5
# skip  5
# todo  4
# failed 5 of 312 tests
# todo: 4
# skip: 5

`

exports[`test/parser-stringify.js TAP tap-tests-stdout.tap default settings > stringified flat 1`] = `
TAP version 13
# buffer_compare.js
# TAP version 13
# same buffers
ok 1 - should be equivalent
# not same buffers
ok 2 - should not be equivalent
# tests 2
# pass  2
# ok
ok 3 - test/buffer_compare.js
# common.js
ok 4 - just setup, nothing relevant
ok 5 - test/common.js
# consumer.js
# TAP version 13
# basic.tap
ok 6 - should be equivalent
# indent.tap
ok 7 - should be equivalent
# missing.tap
ok 8 - should be equivalent
# skip-all.tap
ok 9 - should be equivalent
# tap-tests.tap
ok 10 - should be equivalent
# yamlish.tap
ok 11 - should be equivalent
# tests 6
# pass  6
# ok
ok 12 - test/consumer.js
# debug-test.js
# TAP version 13
# debug test
ok 13 - Should output debugger message
# tests 1
# pass  1
# ok
ok 14 - test/debug-test.js
# deep-strict.js
# TAP version 13
# strictDeepEquals shouldn't care about key order
ok 15 - should be strictly equal
# strictDeepEquals shouldn't care about key order recursively
ok 16 - should be strictly equal
# strictDeepEquals shoudn't care about key order (but still might)
ok 17 - should be strictly equal
# tests 3
# pass  3
# ok
ok 18 - test/deep-strict.js
# deep.js
# TAP version 13
# deepEquals shouldn't care about key order and types
ok 19 - should be equivalent
# deepEquals shouldn't care about key order recursively and types
ok 20 - should be equivalent
# deepEquals shoudn't care about key order (but still might) and types
ok 21 - should be equivalent
# tests 3
# pass  3
# ok
ok 22 - test/deep.js
# executed.sh
ok 23 - File with executable bit should be executed
ok 24 - test/executed.sh
# exit-code.js
# TAP version 13
# exit code 1 when tap results show failure
# test exits 0, has failures
ok 25 - should be equal
ok 26 - should be equal
# test exits 1, has failures
ok 27 - should be equal
ok 28 - should be equal
# test exits 1, has no failures
ok 29 - should be equal
ok 30 - should be equal
# successes exit 0
# test that does nothing, but exits 0
ok 31 - should be equal
ok 32 - should be equal
# test that succeeds, and exits 0
ok 33 - should be equal
ok 34 - should be equal
# tests 10
# pass  10
# ok
ok 35 - test/exit-code.js
# expose-gc-test.js
# TAP version 13
# gc test when the gc isn't there
ok 36 - should be equal
# gc test when the gc should be there
# test for gc using --gc
ok 37 - should be equal
# test for gc using --expose-gc
ok 38 - should be equal
# cleanup
# tests 3
# pass  3
# ok
ok 39 - test/expose-gc-test.js
# global-harness-async.js
# TAP version 13
# outer
# inner 1
ok 40 - 1-1
# inner 2
ok 41 - 2-1
# inner 3
ok 42 - 3-1
ok 43 - test/global-harness-async.js
# independent-timeouts.js
# TAP version 13
# finishes in time
# finishes in time too
# tests 0
# ok
ok 44 - test/independent-timeouts.js
# isolated-conf-test.js
# TAP version 13
# one
ok 45 - should be equal
ok 46 - should be equal
# two
ok 47 - should be equal
ok 48 - should be equal
# tests 4
# pass  4
# ok
ok 49 - test/isolated-conf-test.js
# meta-test.js
# TAP version 13
# meta test
ok 50 - sanity check
ok 51 - not ok
ok 52 - total test count
ok 53 - tests passed
ok 54 - tests failed
ok 55 - ok is boolean
ok 56 - skip is number
ok 57 - results isa Results
ok 58 - test isa Test
ok 59 - test isa Harness
# tests 10
# pass  10
# ok
ok 60 - test/meta-test.js
# nested-async.js
# TAP version 13
# Harness async test support
ok 61 - sync child A
# sync child B
# async grandchild A
ok 62 - (unnamed assert)
# async grandchild B
ok 63 - (unnamed assert)
# async child
ok 64 - sync grandchild in async child A
# sync grandchild in async child B
ok 65 - (unnamed assert)
# tests 5
# pass  5
# ok
ok 66 - test/nested-async.js
# nested-test.js
# TAP version 13
# parent
ok 67 - p test
# subtest
ok 68 - ch test
# nested subtest
ok 69 - grch test
# another subtest
ok 70 - ch test 2
# tests 4
# pass  4
# ok
ok 71 - test/nested-test.js
# non-tap-output.js
# everything is fine
# there are no errors
# this output is not haiku.
# is 8 ok?
ok 72 - , 8 can stay.
# but: nevertheless, here we are
# this: is indented
# and: it
# might: ~
# be: yaml?
ok 73 - might be confusing
ok 74 - done now, exiting
ok 75 - test/non-tap-output.js
# not-executed.sh
# output-childtest-description.js
# /Users/isaacs/dev/js/tap/test/nested-tests-fixture.js
# TAP version 13
# nested tests, parent and child pass
ok 76 - outputs parent description
ok 77 - outputs child description
ok 78 - outputs parent description before parent result
ok 79 - outputs parent result before child description
ok 80 - outputs child description before child result
# tests 5
# pass  5
# ok
ok 81 - test/output-childtest-description.js
# result-trap.js
# TAP version 13
# trap result
ok 82 - should be equal
ok 83 - should be equal
# tests 2
# pass  2
# ok
ok 84 - test/result-trap.js
# segv.js
# TAP version 13
# setup
ok 85 - compiled seg faulter
# segv
ok 86 - should be equivalent
ok 87 - should be equivalent
ok 88 - should be equivalent
ok 89 - should be equivalent
ok 90 - should be equivalent
ok 91 - should be equal
# cleanup
ok 92 - cleaned up
# tests 8
# pass  8
# ok
ok 93 - test/segv.js
# simple-harness-test-with-plan.js
# TAP version 13
# trivial success
ok 94 - it works
# two tests
ok 95 - math should work
ok 96 - false should not be ok
# tests 3
# pass  3
# ok
ok 97 - test/simple-harness-test-with-plan.js
# simple-harness-test.js
# TAP version 13
# trivial success
ok 98 - it works
# two tests
ok 99 - math should work
ok 100 - false should not be ok
# tests 3
# pass  3
# ok
ok 101 - test/simple-harness-test.js
# test-assert-todo-skip.js
# TAP version 13
# not much
ok 102 - always passes # SKIP skip it good
ok 103 - false # SKIP always fails
ok 104 - bonus # TODO remove todo directive
ok 105 - expected # TODO implement a thing
ok 106 - always passes without explanation # SKIP
ok 107 - false without explanation # SKIP
ok 108 - bonus without explanation # TODO
ok 109 - expected without explanation # TODO
# tests 8
# skip  4
# todo  4
ok 110 - test/test-assert-todo-skip.js
# test-descriptions.js
# TAP version 13
# captures test descriptions
ok 111 - exit cleanly
ok 112 - captures SKIP description
ok 113 - skip summary is not from file
ok 114 - todo summary is not from file
not ok 115 - captures TODO description
  ---
  file: child_process.js
  line: 707
  column: 7
  stack:
    - |
      getCaller (/Users/isaacs/dev/js/tap/lib/tap-assert.js:439:17)
    - |
      Function.assert (/Users/isaacs/dev/js/tap/lib/tap-assert.js:21:16)
    - |
      Test._testAssert (/Users/isaacs/dev/js/tap/lib/tap-test.js:87:16)
    - |
      /Users/isaacs/dev/js/tap/test/test-descriptions.js:32:7
    - |
      ChildProcess.exithandler (child_process.js:707:7)
    - |
      emitTwo (events.js:87:13)
    - |
      ChildProcess.emit (events.js:169:7)
    - |
      maybeClose (child_process.js:984:16)
    - |
      Socket.<anonymous> (child_process.js:1153:11)
    - |
      emitOne (events.js:77:13)
  ...
ok 116 - exit cleanly
ok 117 - captures SKIP description
ok 118 - skip summary is not in TAP output
ok 119 - todo summary is not in TAP output
not ok 120 - captures TODO description
  ---
  file: child_process.js
  line: 707
  column: 7
  stack:
    - |
      getCaller (/Users/isaacs/dev/js/tap/lib/tap-assert.js:439:17)
    - |
      Function.assert (/Users/isaacs/dev/js/tap/lib/tap-assert.js:21:16)
    - |
      Test._testAssert (/Users/isaacs/dev/js/tap/lib/tap-test.js:87:16)
    - |
      /Users/isaacs/dev/js/tap/test/test-descriptions.js:18:7
    - |
      ChildProcess.exithandler (child_process.js:707:7)
    - |
      emitTwo (events.js:87:13)
    - |
      ChildProcess.emit (events.js:169:7)
    - |
      maybeClose (child_process.js:984:16)
    - |
      Process.ChildProcess._handle.onexit (child_process.js:1057:5)
  ...
ok 121 - exit cleanly
not ok 122 - summarizes skipped count
  ---
  file: child_process.js
  line: 707
  column: 7
  stack:
    - |
      getCaller (/Users/isaacs/dev/js/tap/lib/tap-assert.js:439:17)
    - |
      Function.assert (/Users/isaacs/dev/js/tap/lib/tap-assert.js:21:16)
    - |
      Test._testAssert (/Users/isaacs/dev/js/tap/lib/tap-test.js:87:16)
    - |
      /Users/isaacs/dev/js/tap/test/test-descriptions.js:23:7
    - |
      ChildProcess.exithandler (child_process.js:707:7)
    - |
      emitTwo (events.js:87:13)
    - |
      ChildProcess.emit (events.js:169:7)
    - |
      maybeClose (child_process.js:984:16)
    - |
      Process.ChildProcess._handle.onexit (child_process.js:1057:5)
  ...
not ok 123 - summarizes todo count
  ---
  file: child_process.js
  line: 707
  column: 7
  stack:
    - |
      getCaller (/Users/isaacs/dev/js/tap/lib/tap-assert.js:439:17)
    - |
      Function.assert (/Users/isaacs/dev/js/tap/lib/tap-assert.js:21:16)
    - |
      Test._testAssert (/Users/isaacs/dev/js/tap/lib/tap-test.js:87:16)
    - |
      /Users/isaacs/dev/js/tap/test/test-descriptions.js:24:7
    - |
      ChildProcess.exithandler (child_process.js:707:7)
    - |
      emitTwo (events.js:87:13)
    - |
      ChildProcess.emit (events.js:169:7)
    - |
      maybeClose (child_process.js:984:16)
    - |
      Process.ChildProcess._handle.onexit (child_process.js:1057:5)
  ...
# tests 13
# pass  9
# fail  4
not ok 124 - test/test-descriptions.js
  ---
  exit: 1
  command: /usr/local/bin/iojs test-descriptions.js
  ...
# test-directives.js
# TAP version 13
# captures test descriptions
# raw TAP > TAP consumer > TAP producer
ok 125 - overall result is PASS
ok 126 - captures ok SKIP
ok 127 - captures not ok SKIP
ok 128 - skip summary not in TAP output
ok 129 - captures ok TODO
ok 130 - captures not ok TODO
ok 131 - todo summary is not in TAP output
ok 132 - no ugly "undefined" in output
# raw TAP > TAP consumer > summary
ok 133 - overall result is PASS
ok 134 - no SKIP in summary
ok 135 - skip summary is not in TAP output
ok 136 - no TODO in summary
ok 137 - todo summary is not in TAP output
ok 138 - no ugly "undefined" in output
# TAP producer via require("tap")
ok 139 - overall result is PASS
ok 140 - captures ok SKIP
ok 141 - captures not ok SKIP
ok 142 - skip summary not in TAP output
ok 143 - captures ok TODO
ok 144 - captures not ok TODO
ok 145 - todo summary is not in TAP output
ok 146 - no ugly "undefined" in output
# tests 22
# pass  22
# ok
ok 147 - test/test-directives.js
# test-skip.js
# TAP version 13
ok 148 - does not count as failure # SKIP
# tests 1
# skip  1
ok 149 - test/test-skip.js
# test-test.js
# TAP version 13
# testing the test object
ok 150 - test object should be instanceof Test
ok 151 - test object should be instanceof Harness
ok 152 - test._Test should be the Test class
ok 153 - should have isNotDeepEqual method
ok 154 - isNotDeepEqual method should be a function
ok 155 - should have equals method
ok 156 - equals method should be a function
ok 157 - should have inequivalent method
ok 158 - inequivalent method should be a function
ok 159 - should have threw method
ok 160 - threw method should be a function
ok 161 - should have strictEqual method
ok 162 - strictEqual method should be a function
ok 163 - should have emit method
ok 164 - emit method should be a function
ok 165 - should have fail method
ok 166 - fail method should be a function
ok 167 - should have strictEquals method
ok 168 - strictEquals method should be a function
ok 169 - should have notLike method
ok 170 - notLike method should be a function
ok 171 - should have dissimilar method
ok 172 - dissimilar method should be a function
ok 173 - should have true method
ok 174 - true method should be a function
ok 175 - should have assert method
ok 176 - assert method should be a function
ok 177 - should have is method
ok 178 - is method should be a function
ok 179 - should have ok method
ok 180 - ok method should be a function
ok 181 - should have isEqual method
ok 182 - isEqual method should be a function
ok 183 - should have isDeeply method
ok 184 - isDeeply method should be a function
ok 185 - should have deepEqual method
ok 186 - deepEqual method should be a function
ok 187 - should have deepEquals method
ok 188 - deepEquals method should be a function
ok 189 - should have pass method
ok 190 - pass method should be a function
ok 191 - should have length method
ok 192 - length method should be a function
ok 193 - should have skip method
ok 194 - skip method should be a function
ok 195 - should have isNotEqual method
ok 196 - isNotEqual method should be a function
ok 197 - should have looseEquals method
ok 198 - looseEquals method should be a function
ok 199 - should have false method
ok 200 - false method should be a function
ok 201 - should have notDeeply method
ok 202 - notDeeply method should be a function
ok 203 - should have ifErr method
ok 204 - ifErr method should be a function
ok 205 - should have hasFields method
ok 206 - hasFields method should be a function
ok 207 - should have isNotDeeply method
ok 208 - isNotDeeply method should be a function
ok 209 - should have like method
ok 210 - like method should be a function
ok 211 - should have similar method
ok 212 - similar method should be a function
ok 213 - should have notOk method
ok 214 - notOk method should be a function
ok 215 - should have isDissimilar method
ok 216 - isDissimilar method should be a function
ok 217 - should have isEquivalent method
ok 218 - isEquivalent method should be a function
ok 219 - should have doesNotEqual method
ok 220 - doesNotEqual method should be a function
ok 221 - should have isSimilar method
ok 222 - isSimilar method should be a function
ok 223 - should have notDeepEqual method
ok 224 - notDeepEqual method should be a function
ok 225 - should have type method
ok 226 - type method should be a function
ok 227 - should have notok method
ok 228 - notok method should be a function
ok 229 - should have isInequivalent method
ok 230 - isInequivalent method should be a function
ok 231 - should have isNot method
ok 232 - isNot method should be a function
ok 233 - should have same method
ok 234 - same method should be a function
ok 235 - should have isInequal method
ok 236 - isInequal method should be a function
ok 237 - should have _endNice method
ok 238 - _endNice method should be a function
ok 239 - should have ifError method
ok 240 - ifError method should be a function
ok 241 - should have iferror method
ok 242 - iferror method should be a function
ok 243 - should have clear method
ok 244 - clear method should be a function
ok 245 - should have has method
ok 246 - has method should be a function
ok 247 - should have not method
ok 248 - not method should be a function
ok 249 - should have timeout method
ok 250 - timeout method should be a function
ok 251 - should have notSimilar method
ok 252 - notSimilar method should be a function
ok 253 - should have isUnlike method
ok 254 - isUnlike method should be a function
ok 255 - should have notEquals method
ok 256 - notEquals method should be a function
ok 257 - should have unsimilar method
ok 258 - unsimilar method should be a function
ok 259 - should have result method
ok 260 - result method should be a function
ok 261 - should have doesNotThrow method
ok 262 - doesNotThrow method should be a function
ok 263 - should have error method
ok 264 - error method should be a function
ok 265 - should have constructor method
ok 266 - constructor method should be a function
ok 267 - should have notEqual method
ok 268 - notEqual method should be a function
ok 269 - should have throws method
ok 270 - throws method should be a function
ok 271 - should have isLike method
ok 272 - isLike method should be a function
ok 273 - should have isNotSimilar method
ok 274 - isNotSimilar method should be a function
ok 275 - should have isNotEquivalent method
ok 276 - isNotEquivalent method should be a function
ok 277 - should have inequal method
ok 278 - inequal method should be a function
ok 279 - should have notEquivalent method
ok 280 - notEquivalent method should be a function
ok 281 - should have isNotLike method
ok 282 - isNotLike method should be a function
ok 283 - should have equivalent method
ok 284 - equivalent method should be a function
ok 285 - should have looseEqual method
ok 286 - looseEqual method should be a function
ok 287 - should have equal method
ok 288 - equal method should be a function
ok 289 - should have unlike method
ok 290 - unlike method should be a function
ok 291 - should have doesNotHave method
ok 292 - doesNotHave method should be a function
ok 293 - should have comment method
ok 294 - comment method should be a function
ok 295 - should have isa method
ok 296 - isa method should be a function
# tests 147
# pass  147
# ok
ok 297 - test/test-test.js
# timeout.js
# TAP version 13
# timeout test with plan only
ok 298 - a
ok 299 - b
# timeout test with plan and end
ok 300 - a
ok 301 - b
# tests 4
# pass  4
# ok
ok 302 - test/timeout.js
# trivial-success.js
ok 303 - test/trivial-success.js
# undefined_indented.js
# TAP version 13
# consume yaml
ok 304 - should be equivalent
# tests 1
# pass  1
# ok
ok 305 - test/undefined_indented.js
# valid-command.js
# TAP version 13
# valid command
ok 306 - should be equivalent
ok 307 - should be equivalent
ok 308 - should be equivalent
ok 309 - should be equivalent
ok 310 - should be equivalent
ok 311 - should be equal
# tests 6
# pass  6
# ok
ok 312 - test/valid-command.js
1..312
# tests 312
# pass  298
# fail  5
# skip  5
# todo  4
# failed 5 of 312 tests
# todo: 4
# skip: 5

`

exports[`test/parser-stringify.js TAP tap-tests-stdout.tap strict > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "comment",
    "# buffer_compare.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# same buffers\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# not same buffers\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "should not be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 2\\n",
  ],
  Array [
    "comment",
    "# pass  2\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "test/buffer_compare.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# common.js\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "name": "just setup, nothing relevant",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "name": "test/common.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# consumer.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# basic.tap\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 6,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# indent.tap\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 7,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# missing.tap\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 8,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# skip-all.tap\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 9,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tap-tests.tap\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 10,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# yamlish.tap\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 11,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 6\\n",
  ],
  Array [
    "comment",
    "# pass  6\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 12,
      "name": "test/consumer.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# debug-test.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# debug test\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 13,
      "name": "Should output debugger message",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 1\\n",
  ],
  Array [
    "comment",
    "# pass  1\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 14,
      "name": "test/debug-test.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# deep-strict.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# strictDeepEquals shouldn't care about key order\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 15,
      "name": "should be strictly equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# strictDeepEquals shouldn't care about key order recursively\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 16,
      "name": "should be strictly equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# strictDeepEquals shoudn't care about key order (but still might)\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 17,
      "name": "should be strictly equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 3\\n",
  ],
  Array [
    "comment",
    "# pass  3\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 18,
      "name": "test/deep-strict.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# deep.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# deepEquals shouldn't care about key order and types\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 19,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# deepEquals shouldn't care about key order recursively and types\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 20,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# deepEquals shoudn't care about key order (but still might) and types\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 21,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 3\\n",
  ],
  Array [
    "comment",
    "# pass  3\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 22,
      "name": "test/deep.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# executed.sh\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 23,
      "name": "File with executable bit should be executed",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 24,
      "name": "test/executed.sh",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# exit-code.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# exit code 1 when tap results show failure\\n",
  ],
  Array [
    "comment",
    "# test exits 0, has failures\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 25,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 26,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test exits 1, has failures\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 27,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 28,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test exits 1, has no failures\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 29,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 30,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# successes exit 0\\n",
  ],
  Array [
    "comment",
    "# test that does nothing, but exits 0\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 31,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 32,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test that succeeds, and exits 0\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 33,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 34,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 10\\n",
  ],
  Array [
    "comment",
    "# pass  10\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 35,
      "name": "test/exit-code.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# expose-gc-test.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# gc test when the gc isn't there\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 36,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# gc test when the gc should be there\\n",
  ],
  Array [
    "comment",
    "# test for gc using --gc\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 37,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test for gc using --expose-gc\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 38,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# cleanup\\n",
  ],
  Array [
    "comment",
    "# tests 3\\n",
  ],
  Array [
    "comment",
    "# pass  3\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 39,
      "name": "test/expose-gc-test.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# global-harness-async.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# outer\\n",
  ],
  Array [
    "comment",
    "# inner 1\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 40,
      "name": "1-1",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# inner 2\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 41,
      "name": "2-1",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# inner 3\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 42,
      "name": "3-1",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 43,
      "name": "test/global-harness-async.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# independent-timeouts.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# finishes in time\\n",
  ],
  Array [
    "comment",
    "# finishes in time too\\n",
  ],
  Array [
    "comment",
    "# tests 0\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 44,
      "name": "test/independent-timeouts.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# isolated-conf-test.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# one\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 45,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 46,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# two\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 47,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 48,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 4\\n",
  ],
  Array [
    "comment",
    "# pass  4\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 49,
      "name": "test/isolated-conf-test.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# meta-test.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# meta test\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 50,
      "name": "sanity check",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 51,
      "name": "not ok",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 52,
      "name": "total test count",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 53,
      "name": "tests passed",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 54,
      "name": "tests failed",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 55,
      "name": "ok is boolean",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 56,
      "name": "skip is number",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 57,
      "name": "results isa Results",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 58,
      "name": "test isa Test",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 59,
      "name": "test isa Harness",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 10\\n",
  ],
  Array [
    "comment",
    "# pass  10\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 60,
      "name": "test/meta-test.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# nested-async.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# Harness async test support\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 61,
      "name": "sync child A",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# sync child B\\n",
  ],
  Array [
    "comment",
    "# async grandchild A\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 62,
      "name": "(unnamed assert)",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# async grandchild B\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 63,
      "name": "(unnamed assert)",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# async child\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 64,
      "name": "sync grandchild in async child A",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# sync grandchild in async child B\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 65,
      "name": "(unnamed assert)",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 5\\n",
  ],
  Array [
    "comment",
    "# pass  5\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 66,
      "name": "test/nested-async.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# nested-test.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# parent\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 67,
      "name": "p test",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# subtest\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 68,
      "name": "ch test",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# nested subtest\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 69,
      "name": "grch test",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# another subtest\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 70,
      "name": "ch test 2",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 4\\n",
  ],
  Array [
    "comment",
    "# pass  4\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 71,
      "name": "test/nested-test.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# non-tap-output.js\\n",
  ],
  Array [
    "comment",
    "# everything is fine\\n",
  ],
  Array [
    "comment",
    "# there are no errors\\n",
  ],
  Array [
    "comment",
    "# this output is not haiku.\\n",
  ],
  Array [
    "comment",
    "# is 8 ok?\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 72,
      "name": ", 8 can stay.",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# but: nevertheless, here we are\\n",
  ],
  Array [
    "comment",
    "# this: is indented\\n",
  ],
  Array [
    "comment",
    "# and: it\\n",
  ],
  Array [
    "comment",
    "# might: ~\\n",
  ],
  Array [
    "comment",
    "# be: yaml?\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 73,
      "name": "might be confusing",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 74,
      "name": "done now, exiting",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 75,
      "name": "test/non-tap-output.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# not-executed.sh\\n",
  ],
  Array [
    "comment",
    "# output-childtest-description.js\\n",
  ],
  Array [
    "comment",
    "# /Users/isaacs/dev/js/tap/test/nested-tests-fixture.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# nested tests, parent and child pass\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 76,
      "name": "outputs parent description",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 77,
      "name": "outputs child description",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 78,
      "name": "outputs parent description before parent result",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 79,
      "name": "outputs parent result before child description",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 80,
      "name": "outputs child description before child result",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 5\\n",
  ],
  Array [
    "comment",
    "# pass  5\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 81,
      "name": "test/output-childtest-description.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# result-trap.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# trap result\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 82,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 83,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 2\\n",
  ],
  Array [
    "comment",
    "# pass  2\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 84,
      "name": "test/result-trap.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# segv.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# setup\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 85,
      "name": "compiled seg faulter",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# segv\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 86,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 87,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 88,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 89,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 90,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 91,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# cleanup\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 92,
      "name": "cleaned up",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 8\\n",
  ],
  Array [
    "comment",
    "# pass  8\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 93,
      "name": "test/segv.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# simple-harness-test-with-plan.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# trivial success\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 94,
      "name": "it works",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# two tests\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 95,
      "name": "math should work",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 96,
      "name": "false should not be ok",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 3\\n",
  ],
  Array [
    "comment",
    "# pass  3\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 97,
      "name": "test/simple-harness-test-with-plan.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# simple-harness-test.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# trivial success\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 98,
      "name": "it works",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# two tests\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 99,
      "name": "math should work",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 100,
      "name": "false should not be ok",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 3\\n",
  ],
  Array [
    "comment",
    "# pass  3\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 101,
      "name": "test/simple-harness-test.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test-assert-todo-skip.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# not much\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 102,
      "name": "always passes",
      "ok": true,
      "skip": "skip it good",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 103,
      "name": "false",
      "ok": true,
      "skip": "always fails",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 104,
      "name": "bonus",
      "ok": true,
      "todo": "remove todo directive",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 105,
      "name": "expected",
      "ok": true,
      "todo": "implement a thing",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 106,
      "name": "always passes without explanation",
      "ok": true,
      "skip": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 107,
      "name": "false without explanation",
      "ok": true,
      "skip": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 108,
      "name": "bonus without explanation",
      "ok": true,
      "todo": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 109,
      "name": "expected without explanation",
      "ok": true,
      "todo": true,
    },
  ],
  Array [
    "comment",
    "# tests 8\\n",
  ],
  Array [
    "comment",
    "# skip  4\\n",
  ],
  Array [
    "comment",
    "# todo  4\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 110,
      "name": "test/test-assert-todo-skip.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test-descriptions.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# captures test descriptions\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 111,
      "name": "exit cleanly",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 112,
      "name": "captures SKIP description",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 113,
      "name": "skip summary is not from file",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 114,
      "name": "todo summary is not from file",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "diag": Object {
        "column": 7,
        "file": "child_process.js",
        "line": 707,
        "stack": Array [
          "getCaller (/Users/isaacs/dev/js/tap/lib/tap-assert.js:439:17)\\n",
          "Function.assert (/Users/isaacs/dev/js/tap/lib/tap-assert.js:21:16)\\n",
          "Test._testAssert (/Users/isaacs/dev/js/tap/lib/tap-test.js:87:16)\\n",
          "/Users/isaacs/dev/js/tap/test/test-descriptions.js:32:7\\n",
          "ChildProcess.exithandler (child_process.js:707:7)\\n",
          "emitTwo (events.js:87:13)\\n",
          "ChildProcess.emit (events.js:169:7)\\n",
          "maybeClose (child_process.js:984:16)\\n",
          "Socket.<anonymous> (child_process.js:1153:11)\\n",
          "emitOne (events.js:77:13)\\n",
        ],
      },
      "fullname": "",
      "id": 115,
      "name": "captures TODO description",
      "ok": false,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 116,
      "name": "exit cleanly",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 117,
      "name": "captures SKIP description",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 118,
      "name": "skip summary is not in TAP output",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 119,
      "name": "todo summary is not in TAP output",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "diag": Object {
        "column": 7,
        "file": "child_process.js",
        "line": 707,
        "stack": Array [
          "getCaller (/Users/isaacs/dev/js/tap/lib/tap-assert.js:439:17)\\n",
          "Function.assert (/Users/isaacs/dev/js/tap/lib/tap-assert.js:21:16)\\n",
          "Test._testAssert (/Users/isaacs/dev/js/tap/lib/tap-test.js:87:16)\\n",
          "/Users/isaacs/dev/js/tap/test/test-descriptions.js:18:7\\n",
          "ChildProcess.exithandler (child_process.js:707:7)\\n",
          "emitTwo (events.js:87:13)\\n",
          "ChildProcess.emit (events.js:169:7)\\n",
          "maybeClose (child_process.js:984:16)\\n",
          "Process.ChildProcess._handle.onexit (child_process.js:1057:5)\\n",
        ],
      },
      "fullname": "",
      "id": 120,
      "name": "captures TODO description",
      "ok": false,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 121,
      "name": "exit cleanly",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "diag": Object {
        "column": 7,
        "file": "child_process.js",
        "line": 707,
        "stack": Array [
          "getCaller (/Users/isaacs/dev/js/tap/lib/tap-assert.js:439:17)\\n",
          "Function.assert (/Users/isaacs/dev/js/tap/lib/tap-assert.js:21:16)\\n",
          "Test._testAssert (/Users/isaacs/dev/js/tap/lib/tap-test.js:87:16)\\n",
          "/Users/isaacs/dev/js/tap/test/test-descriptions.js:23:7\\n",
          "ChildProcess.exithandler (child_process.js:707:7)\\n",
          "emitTwo (events.js:87:13)\\n",
          "ChildProcess.emit (events.js:169:7)\\n",
          "maybeClose (child_process.js:984:16)\\n",
          "Process.ChildProcess._handle.onexit (child_process.js:1057:5)\\n",
        ],
      },
      "fullname": "",
      "id": 122,
      "name": "summarizes skipped count",
      "ok": false,
    },
  ],
  Array [
    "assert",
    Result {
      "diag": Object {
        "column": 7,
        "file": "child_process.js",
        "line": 707,
        "stack": Array [
          "getCaller (/Users/isaacs/dev/js/tap/lib/tap-assert.js:439:17)\\n",
          "Function.assert (/Users/isaacs/dev/js/tap/lib/tap-assert.js:21:16)\\n",
          "Test._testAssert (/Users/isaacs/dev/js/tap/lib/tap-test.js:87:16)\\n",
          "/Users/isaacs/dev/js/tap/test/test-descriptions.js:24:7\\n",
          "ChildProcess.exithandler (child_process.js:707:7)\\n",
          "emitTwo (events.js:87:13)\\n",
          "ChildProcess.emit (events.js:169:7)\\n",
          "maybeClose (child_process.js:984:16)\\n",
          "Process.ChildProcess._handle.onexit (child_process.js:1057:5)\\n",
        ],
      },
      "fullname": "",
      "id": 123,
      "name": "summarizes todo count",
      "ok": false,
    },
  ],
  Array [
    "comment",
    "# tests 13\\n",
  ],
  Array [
    "comment",
    "# pass  9\\n",
  ],
  Array [
    "comment",
    "# fail  4\\n",
  ],
  Array [
    "assert",
    Result {
      "diag": Object {
        "command": "/usr/local/bin/iojs test-descriptions.js",
        "exit": 1,
      },
      "fullname": "",
      "id": 124,
      "name": "test/test-descriptions.js",
      "ok": false,
    },
  ],
  Array [
    "comment",
    "# test-directives.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# captures test descriptions\\n",
  ],
  Array [
    "comment",
    "# raw TAP > TAP consumer > TAP producer\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 125,
      "name": "overall result is PASS",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 126,
      "name": "captures ok SKIP",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 127,
      "name": "captures not ok SKIP",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 128,
      "name": "skip summary not in TAP output",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 129,
      "name": "captures ok TODO",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 130,
      "name": "captures not ok TODO",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 131,
      "name": "todo summary is not in TAP output",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 132,
      "name": "no ugly \\"undefined\\" in output",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# raw TAP > TAP consumer > summary\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 133,
      "name": "overall result is PASS",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 134,
      "name": "no SKIP in summary",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 135,
      "name": "skip summary is not in TAP output",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 136,
      "name": "no TODO in summary",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 137,
      "name": "todo summary is not in TAP output",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 138,
      "name": "no ugly \\"undefined\\" in output",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# TAP producer via require(\\"tap\\")\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 139,
      "name": "overall result is PASS",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 140,
      "name": "captures ok SKIP",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 141,
      "name": "captures not ok SKIP",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 142,
      "name": "skip summary not in TAP output",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 143,
      "name": "captures ok TODO",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 144,
      "name": "captures not ok TODO",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 145,
      "name": "todo summary is not in TAP output",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 146,
      "name": "no ugly \\"undefined\\" in output",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 22\\n",
  ],
  Array [
    "comment",
    "# pass  22\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 147,
      "name": "test/test-directives.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test-skip.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 148,
      "name": "does not count as failure",
      "ok": true,
      "skip": true,
    },
  ],
  Array [
    "comment",
    "# tests 1\\n",
  ],
  Array [
    "comment",
    "# skip  1\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 149,
      "name": "test/test-skip.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test-test.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# testing the test object\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 150,
      "name": "test object should be instanceof Test",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 151,
      "name": "test object should be instanceof Harness",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 152,
      "name": "test._Test should be the Test class",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 153,
      "name": "should have isNotDeepEqual method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 154,
      "name": "isNotDeepEqual method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 155,
      "name": "should have equals method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 156,
      "name": "equals method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 157,
      "name": "should have inequivalent method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 158,
      "name": "inequivalent method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 159,
      "name": "should have threw method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 160,
      "name": "threw method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 161,
      "name": "should have strictEqual method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 162,
      "name": "strictEqual method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 163,
      "name": "should have emit method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 164,
      "name": "emit method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 165,
      "name": "should have fail method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 166,
      "name": "fail method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 167,
      "name": "should have strictEquals method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 168,
      "name": "strictEquals method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 169,
      "name": "should have notLike method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 170,
      "name": "notLike method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 171,
      "name": "should have dissimilar method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 172,
      "name": "dissimilar method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 173,
      "name": "should have true method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 174,
      "name": "true method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 175,
      "name": "should have assert method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 176,
      "name": "assert method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 177,
      "name": "should have is method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 178,
      "name": "is method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 179,
      "name": "should have ok method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 180,
      "name": "ok method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 181,
      "name": "should have isEqual method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 182,
      "name": "isEqual method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 183,
      "name": "should have isDeeply method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 184,
      "name": "isDeeply method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 185,
      "name": "should have deepEqual method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 186,
      "name": "deepEqual method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 187,
      "name": "should have deepEquals method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 188,
      "name": "deepEquals method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 189,
      "name": "should have pass method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 190,
      "name": "pass method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 191,
      "name": "should have length method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 192,
      "name": "length method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 193,
      "name": "should have skip method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 194,
      "name": "skip method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 195,
      "name": "should have isNotEqual method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 196,
      "name": "isNotEqual method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 197,
      "name": "should have looseEquals method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 198,
      "name": "looseEquals method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 199,
      "name": "should have false method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 200,
      "name": "false method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 201,
      "name": "should have notDeeply method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 202,
      "name": "notDeeply method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 203,
      "name": "should have ifErr method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 204,
      "name": "ifErr method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 205,
      "name": "should have hasFields method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 206,
      "name": "hasFields method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 207,
      "name": "should have isNotDeeply method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 208,
      "name": "isNotDeeply method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 209,
      "name": "should have like method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 210,
      "name": "like method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 211,
      "name": "should have similar method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 212,
      "name": "similar method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 213,
      "name": "should have notOk method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 214,
      "name": "notOk method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 215,
      "name": "should have isDissimilar method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 216,
      "name": "isDissimilar method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 217,
      "name": "should have isEquivalent method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 218,
      "name": "isEquivalent method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 219,
      "name": "should have doesNotEqual method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 220,
      "name": "doesNotEqual method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 221,
      "name": "should have isSimilar method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 222,
      "name": "isSimilar method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 223,
      "name": "should have notDeepEqual method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 224,
      "name": "notDeepEqual method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 225,
      "name": "should have type method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 226,
      "name": "type method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 227,
      "name": "should have notok method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 228,
      "name": "notok method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 229,
      "name": "should have isInequivalent method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 230,
      "name": "isInequivalent method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 231,
      "name": "should have isNot method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 232,
      "name": "isNot method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 233,
      "name": "should have same method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 234,
      "name": "same method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 235,
      "name": "should have isInequal method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 236,
      "name": "isInequal method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 237,
      "name": "should have _endNice method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 238,
      "name": "_endNice method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 239,
      "name": "should have ifError method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 240,
      "name": "ifError method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 241,
      "name": "should have iferror method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 242,
      "name": "iferror method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 243,
      "name": "should have clear method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 244,
      "name": "clear method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 245,
      "name": "should have has method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 246,
      "name": "has method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 247,
      "name": "should have not method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 248,
      "name": "not method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 249,
      "name": "should have timeout method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 250,
      "name": "timeout method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 251,
      "name": "should have notSimilar method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 252,
      "name": "notSimilar method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 253,
      "name": "should have isUnlike method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 254,
      "name": "isUnlike method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 255,
      "name": "should have notEquals method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 256,
      "name": "notEquals method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 257,
      "name": "should have unsimilar method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 258,
      "name": "unsimilar method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 259,
      "name": "should have result method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 260,
      "name": "result method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 261,
      "name": "should have doesNotThrow method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 262,
      "name": "doesNotThrow method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 263,
      "name": "should have error method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 264,
      "name": "error method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 265,
      "name": "should have constructor method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 266,
      "name": "constructor method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 267,
      "name": "should have notEqual method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 268,
      "name": "notEqual method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 269,
      "name": "should have throws method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 270,
      "name": "throws method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 271,
      "name": "should have isLike method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 272,
      "name": "isLike method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 273,
      "name": "should have isNotSimilar method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 274,
      "name": "isNotSimilar method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 275,
      "name": "should have isNotEquivalent method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 276,
      "name": "isNotEquivalent method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 277,
      "name": "should have inequal method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 278,
      "name": "inequal method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 279,
      "name": "should have notEquivalent method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 280,
      "name": "notEquivalent method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 281,
      "name": "should have isNotLike method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 282,
      "name": "isNotLike method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 283,
      "name": "should have equivalent method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 284,
      "name": "equivalent method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 285,
      "name": "should have looseEqual method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 286,
      "name": "looseEqual method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 287,
      "name": "should have equal method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 288,
      "name": "equal method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 289,
      "name": "should have unlike method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 290,
      "name": "unlike method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 291,
      "name": "should have doesNotHave method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 292,
      "name": "doesNotHave method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 293,
      "name": "should have comment method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 294,
      "name": "comment method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 295,
      "name": "should have isa method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 296,
      "name": "isa method should be a function",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 147\\n",
  ],
  Array [
    "comment",
    "# pass  147\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 297,
      "name": "test/test-test.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# timeout.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# timeout test with plan only\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 298,
      "name": "a",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 299,
      "name": "b",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# timeout test with plan and end\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 300,
      "name": "a",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 301,
      "name": "b",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 4\\n",
  ],
  Array [
    "comment",
    "# pass  4\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 302,
      "name": "test/timeout.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# trivial-success.js\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 303,
      "name": "test/trivial-success.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# undefined_indented.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# consume yaml\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 304,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 1\\n",
  ],
  Array [
    "comment",
    "# pass  1\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 305,
      "name": "test/undefined_indented.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# valid-command.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# valid command\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 306,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 307,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 308,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 309,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 310,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 311,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 6\\n",
  ],
  Array [
    "comment",
    "# pass  6\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 312,
      "name": "test/valid-command.js",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 312,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# tests 312\\n",
  ],
  Array [
    "comment",
    "# pass  298\\n",
  ],
  Array [
    "comment",
    "# fail  5\\n",
  ],
  Array [
    "comment",
    "# skip  5\\n",
  ],
  Array [
    "comment",
    "# todo  4\\n",
  ],
  Array [
    "comment",
    "# failed 5 of 312 tests\\n",
  ],
  Array [
    "comment",
    "# todo: 4\\n",
  ],
  Array [
    "comment",
    "# skip: 5\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 312,
      "fail": 5,
      "failures": Array [
        Result {
          "diag": Object {
            "column": 7,
            "file": "child_process.js",
            "line": 707,
            "stack": Array [
              "getCaller (/Users/isaacs/dev/js/tap/lib/tap-assert.js:439:17)\\n",
              "Function.assert (/Users/isaacs/dev/js/tap/lib/tap-assert.js:21:16)\\n",
              "Test._testAssert (/Users/isaacs/dev/js/tap/lib/tap-test.js:87:16)\\n",
              "/Users/isaacs/dev/js/tap/test/test-descriptions.js:32:7\\n",
              "ChildProcess.exithandler (child_process.js:707:7)\\n",
              "emitTwo (events.js:87:13)\\n",
              "ChildProcess.emit (events.js:169:7)\\n",
              "maybeClose (child_process.js:984:16)\\n",
              "Socket.<anonymous> (child_process.js:1153:11)\\n",
              "emitOne (events.js:77:13)\\n",
            ],
          },
          "fullname": "",
          "id": 115,
          "name": "captures TODO description",
          "ok": false,
        },
        Result {
          "diag": Object {
            "column": 7,
            "file": "child_process.js",
            "line": 707,
            "stack": Array [
              "getCaller (/Users/isaacs/dev/js/tap/lib/tap-assert.js:439:17)\\n",
              "Function.assert (/Users/isaacs/dev/js/tap/lib/tap-assert.js:21:16)\\n",
              "Test._testAssert (/Users/isaacs/dev/js/tap/lib/tap-test.js:87:16)\\n",
              "/Users/isaacs/dev/js/tap/test/test-descriptions.js:18:7\\n",
              "ChildProcess.exithandler (child_process.js:707:7)\\n",
              "emitTwo (events.js:87:13)\\n",
              "ChildProcess.emit (events.js:169:7)\\n",
              "maybeClose (child_process.js:984:16)\\n",
              "Process.ChildProcess._handle.onexit (child_process.js:1057:5)\\n",
            ],
          },
          "fullname": "",
          "id": 120,
          "name": "captures TODO description",
          "ok": false,
        },
        Result {
          "diag": Object {
            "column": 7,
            "file": "child_process.js",
            "line": 707,
            "stack": Array [
              "getCaller (/Users/isaacs/dev/js/tap/lib/tap-assert.js:439:17)\\n",
              "Function.assert (/Users/isaacs/dev/js/tap/lib/tap-assert.js:21:16)\\n",
              "Test._testAssert (/Users/isaacs/dev/js/tap/lib/tap-test.js:87:16)\\n",
              "/Users/isaacs/dev/js/tap/test/test-descriptions.js:23:7\\n",
              "ChildProcess.exithandler (child_process.js:707:7)\\n",
              "emitTwo (events.js:87:13)\\n",
              "ChildProcess.emit (events.js:169:7)\\n",
              "maybeClose (child_process.js:984:16)\\n",
              "Process.ChildProcess._handle.onexit (child_process.js:1057:5)\\n",
            ],
          },
          "fullname": "",
          "id": 122,
          "name": "summarizes skipped count",
          "ok": false,
        },
        Result {
          "diag": Object {
            "column": 7,
            "file": "child_process.js",
            "line": 707,
            "stack": Array [
              "getCaller (/Users/isaacs/dev/js/tap/lib/tap-assert.js:439:17)\\n",
              "Function.assert (/Users/isaacs/dev/js/tap/lib/tap-assert.js:21:16)\\n",
              "Test._testAssert (/Users/isaacs/dev/js/tap/lib/tap-test.js:87:16)\\n",
              "/Users/isaacs/dev/js/tap/test/test-descriptions.js:24:7\\n",
              "ChildProcess.exithandler (child_process.js:707:7)\\n",
              "emitTwo (events.js:87:13)\\n",
              "ChildProcess.emit (events.js:169:7)\\n",
              "maybeClose (child_process.js:984:16)\\n",
              "Process.ChildProcess._handle.onexit (child_process.js:1057:5)\\n",
            ],
          },
          "fullname": "",
          "id": 123,
          "name": "summarizes todo count",
          "ok": false,
        },
        Result {
          "diag": Object {
            "command": "/usr/local/bin/iojs test-descriptions.js",
            "exit": 1,
          },
          "fullname": "",
          "id": 124,
          "name": "test/test-descriptions.js",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 307,
      "plan": FinalPlan {
        "comment": "",
        "end": 312,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 5,
      "time": null,
      "todo": 4,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP tap-tests-stdout.tap strict > stringified 1`] = `
TAP version 13
# buffer_compare.js
# TAP version 13
# same buffers
ok 1 - should be equivalent
# not same buffers
ok 2 - should not be equivalent
# tests 2
# pass  2
# ok
ok 3 - test/buffer_compare.js
# common.js
ok 4 - just setup, nothing relevant
ok 5 - test/common.js
# consumer.js
# TAP version 13
# basic.tap
ok 6 - should be equivalent
# indent.tap
ok 7 - should be equivalent
# missing.tap
ok 8 - should be equivalent
# skip-all.tap
ok 9 - should be equivalent
# tap-tests.tap
ok 10 - should be equivalent
# yamlish.tap
ok 11 - should be equivalent
# tests 6
# pass  6
# ok
ok 12 - test/consumer.js
# debug-test.js
# TAP version 13
# debug test
ok 13 - Should output debugger message
# tests 1
# pass  1
# ok
ok 14 - test/debug-test.js
# deep-strict.js
# TAP version 13
# strictDeepEquals shouldn't care about key order
ok 15 - should be strictly equal
# strictDeepEquals shouldn't care about key order recursively
ok 16 - should be strictly equal
# strictDeepEquals shoudn't care about key order (but still might)
ok 17 - should be strictly equal
# tests 3
# pass  3
# ok
ok 18 - test/deep-strict.js
# deep.js
# TAP version 13
# deepEquals shouldn't care about key order and types
ok 19 - should be equivalent
# deepEquals shouldn't care about key order recursively and types
ok 20 - should be equivalent
# deepEquals shoudn't care about key order (but still might) and types
ok 21 - should be equivalent
# tests 3
# pass  3
# ok
ok 22 - test/deep.js
# executed.sh
ok 23 - File with executable bit should be executed
ok 24 - test/executed.sh
# exit-code.js
# TAP version 13
# exit code 1 when tap results show failure
# test exits 0, has failures
ok 25 - should be equal
ok 26 - should be equal
# test exits 1, has failures
ok 27 - should be equal
ok 28 - should be equal
# test exits 1, has no failures
ok 29 - should be equal
ok 30 - should be equal
# successes exit 0
# test that does nothing, but exits 0
ok 31 - should be equal
ok 32 - should be equal
# test that succeeds, and exits 0
ok 33 - should be equal
ok 34 - should be equal
# tests 10
# pass  10
# ok
ok 35 - test/exit-code.js
# expose-gc-test.js
# TAP version 13
# gc test when the gc isn't there
ok 36 - should be equal
# gc test when the gc should be there
# test for gc using --gc
ok 37 - should be equal
# test for gc using --expose-gc
ok 38 - should be equal
# cleanup
# tests 3
# pass  3
# ok
ok 39 - test/expose-gc-test.js
# global-harness-async.js
# TAP version 13
# outer
# inner 1
ok 40 - 1-1
# inner 2
ok 41 - 2-1
# inner 3
ok 42 - 3-1
ok 43 - test/global-harness-async.js
# independent-timeouts.js
# TAP version 13
# finishes in time
# finishes in time too
# tests 0
# ok
ok 44 - test/independent-timeouts.js
# isolated-conf-test.js
# TAP version 13
# one
ok 45 - should be equal
ok 46 - should be equal
# two
ok 47 - should be equal
ok 48 - should be equal
# tests 4
# pass  4
# ok
ok 49 - test/isolated-conf-test.js
# meta-test.js
# TAP version 13
# meta test
ok 50 - sanity check
ok 51 - not ok
ok 52 - total test count
ok 53 - tests passed
ok 54 - tests failed
ok 55 - ok is boolean
ok 56 - skip is number
ok 57 - results isa Results
ok 58 - test isa Test
ok 59 - test isa Harness
# tests 10
# pass  10
# ok
ok 60 - test/meta-test.js
# nested-async.js
# TAP version 13
# Harness async test support
ok 61 - sync child A
# sync child B
# async grandchild A
ok 62 - (unnamed assert)
# async grandchild B
ok 63 - (unnamed assert)
# async child
ok 64 - sync grandchild in async child A
# sync grandchild in async child B
ok 65 - (unnamed assert)
# tests 5
# pass  5
# ok
ok 66 - test/nested-async.js
# nested-test.js
# TAP version 13
# parent
ok 67 - p test
# subtest
ok 68 - ch test
# nested subtest
ok 69 - grch test
# another subtest
ok 70 - ch test 2
# tests 4
# pass  4
# ok
ok 71 - test/nested-test.js
# non-tap-output.js
# everything is fine
# there are no errors
# this output is not haiku.
# is 8 ok?
ok 72 - , 8 can stay.
# but: nevertheless, here we are
# this: is indented
# and: it
# might: ~
# be: yaml?
ok 73 - might be confusing
ok 74 - done now, exiting
ok 75 - test/non-tap-output.js
# not-executed.sh
# output-childtest-description.js
# /Users/isaacs/dev/js/tap/test/nested-tests-fixture.js
# TAP version 13
# nested tests, parent and child pass
ok 76 - outputs parent description
ok 77 - outputs child description
ok 78 - outputs parent description before parent result
ok 79 - outputs parent result before child description
ok 80 - outputs child description before child result
# tests 5
# pass  5
# ok
ok 81 - test/output-childtest-description.js
# result-trap.js
# TAP version 13
# trap result
ok 82 - should be equal
ok 83 - should be equal
# tests 2
# pass  2
# ok
ok 84 - test/result-trap.js
# segv.js
# TAP version 13
# setup
ok 85 - compiled seg faulter
# segv
ok 86 - should be equivalent
ok 87 - should be equivalent
ok 88 - should be equivalent
ok 89 - should be equivalent
ok 90 - should be equivalent
ok 91 - should be equal
# cleanup
ok 92 - cleaned up
# tests 8
# pass  8
# ok
ok 93 - test/segv.js
# simple-harness-test-with-plan.js
# TAP version 13
# trivial success
ok 94 - it works
# two tests
ok 95 - math should work
ok 96 - false should not be ok
# tests 3
# pass  3
# ok
ok 97 - test/simple-harness-test-with-plan.js
# simple-harness-test.js
# TAP version 13
# trivial success
ok 98 - it works
# two tests
ok 99 - math should work
ok 100 - false should not be ok
# tests 3
# pass  3
# ok
ok 101 - test/simple-harness-test.js
# test-assert-todo-skip.js
# TAP version 13
# not much
ok 102 - always passes # SKIP skip it good
ok 103 - false # SKIP always fails
ok 104 - bonus # TODO remove todo directive
ok 105 - expected # TODO implement a thing
ok 106 - always passes without explanation # SKIP
ok 107 - false without explanation # SKIP
ok 108 - bonus without explanation # TODO
ok 109 - expected without explanation # TODO
# tests 8
# skip  4
# todo  4
ok 110 - test/test-assert-todo-skip.js
# test-descriptions.js
# TAP version 13
# captures test descriptions
ok 111 - exit cleanly
ok 112 - captures SKIP description
ok 113 - skip summary is not from file
ok 114 - todo summary is not from file
not ok 115 - captures TODO description
  ---
  file: child_process.js
  line: 707
  column: 7
  stack:
    - |
      getCaller (/Users/isaacs/dev/js/tap/lib/tap-assert.js:439:17)
    - |
      Function.assert (/Users/isaacs/dev/js/tap/lib/tap-assert.js:21:16)
    - |
      Test._testAssert (/Users/isaacs/dev/js/tap/lib/tap-test.js:87:16)
    - |
      /Users/isaacs/dev/js/tap/test/test-descriptions.js:32:7
    - |
      ChildProcess.exithandler (child_process.js:707:7)
    - |
      emitTwo (events.js:87:13)
    - |
      ChildProcess.emit (events.js:169:7)
    - |
      maybeClose (child_process.js:984:16)
    - |
      Socket.<anonymous> (child_process.js:1153:11)
    - |
      emitOne (events.js:77:13)
  ...
ok 116 - exit cleanly
ok 117 - captures SKIP description
ok 118 - skip summary is not in TAP output
ok 119 - todo summary is not in TAP output
not ok 120 - captures TODO description
  ---
  file: child_process.js
  line: 707
  column: 7
  stack:
    - |
      getCaller (/Users/isaacs/dev/js/tap/lib/tap-assert.js:439:17)
    - |
      Function.assert (/Users/isaacs/dev/js/tap/lib/tap-assert.js:21:16)
    - |
      Test._testAssert (/Users/isaacs/dev/js/tap/lib/tap-test.js:87:16)
    - |
      /Users/isaacs/dev/js/tap/test/test-descriptions.js:18:7
    - |
      ChildProcess.exithandler (child_process.js:707:7)
    - |
      emitTwo (events.js:87:13)
    - |
      ChildProcess.emit (events.js:169:7)
    - |
      maybeClose (child_process.js:984:16)
    - |
      Process.ChildProcess._handle.onexit (child_process.js:1057:5)
  ...
ok 121 - exit cleanly
not ok 122 - summarizes skipped count
  ---
  file: child_process.js
  line: 707
  column: 7
  stack:
    - |
      getCaller (/Users/isaacs/dev/js/tap/lib/tap-assert.js:439:17)
    - |
      Function.assert (/Users/isaacs/dev/js/tap/lib/tap-assert.js:21:16)
    - |
      Test._testAssert (/Users/isaacs/dev/js/tap/lib/tap-test.js:87:16)
    - |
      /Users/isaacs/dev/js/tap/test/test-descriptions.js:23:7
    - |
      ChildProcess.exithandler (child_process.js:707:7)
    - |
      emitTwo (events.js:87:13)
    - |
      ChildProcess.emit (events.js:169:7)
    - |
      maybeClose (child_process.js:984:16)
    - |
      Process.ChildProcess._handle.onexit (child_process.js:1057:5)
  ...
not ok 123 - summarizes todo count
  ---
  file: child_process.js
  line: 707
  column: 7
  stack:
    - |
      getCaller (/Users/isaacs/dev/js/tap/lib/tap-assert.js:439:17)
    - |
      Function.assert (/Users/isaacs/dev/js/tap/lib/tap-assert.js:21:16)
    - |
      Test._testAssert (/Users/isaacs/dev/js/tap/lib/tap-test.js:87:16)
    - |
      /Users/isaacs/dev/js/tap/test/test-descriptions.js:24:7
    - |
      ChildProcess.exithandler (child_process.js:707:7)
    - |
      emitTwo (events.js:87:13)
    - |
      ChildProcess.emit (events.js:169:7)
    - |
      maybeClose (child_process.js:984:16)
    - |
      Process.ChildProcess._handle.onexit (child_process.js:1057:5)
  ...
# tests 13
# pass  9
# fail  4
not ok 124 - test/test-descriptions.js
  ---
  exit: 1
  command: /usr/local/bin/iojs test-descriptions.js
  ...
# test-directives.js
# TAP version 13
# captures test descriptions
# raw TAP > TAP consumer > TAP producer
ok 125 - overall result is PASS
ok 126 - captures ok SKIP
ok 127 - captures not ok SKIP
ok 128 - skip summary not in TAP output
ok 129 - captures ok TODO
ok 130 - captures not ok TODO
ok 131 - todo summary is not in TAP output
ok 132 - no ugly "undefined" in output
# raw TAP > TAP consumer > summary
ok 133 - overall result is PASS
ok 134 - no SKIP in summary
ok 135 - skip summary is not in TAP output
ok 136 - no TODO in summary
ok 137 - todo summary is not in TAP output
ok 138 - no ugly "undefined" in output
# TAP producer via require("tap")
ok 139 - overall result is PASS
ok 140 - captures ok SKIP
ok 141 - captures not ok SKIP
ok 142 - skip summary not in TAP output
ok 143 - captures ok TODO
ok 144 - captures not ok TODO
ok 145 - todo summary is not in TAP output
ok 146 - no ugly "undefined" in output
# tests 22
# pass  22
# ok
ok 147 - test/test-directives.js
# test-skip.js
# TAP version 13
ok 148 - does not count as failure # SKIP
# tests 1
# skip  1
ok 149 - test/test-skip.js
# test-test.js
# TAP version 13
# testing the test object
ok 150 - test object should be instanceof Test
ok 151 - test object should be instanceof Harness
ok 152 - test._Test should be the Test class
ok 153 - should have isNotDeepEqual method
ok 154 - isNotDeepEqual method should be a function
ok 155 - should have equals method
ok 156 - equals method should be a function
ok 157 - should have inequivalent method
ok 158 - inequivalent method should be a function
ok 159 - should have threw method
ok 160 - threw method should be a function
ok 161 - should have strictEqual method
ok 162 - strictEqual method should be a function
ok 163 - should have emit method
ok 164 - emit method should be a function
ok 165 - should have fail method
ok 166 - fail method should be a function
ok 167 - should have strictEquals method
ok 168 - strictEquals method should be a function
ok 169 - should have notLike method
ok 170 - notLike method should be a function
ok 171 - should have dissimilar method
ok 172 - dissimilar method should be a function
ok 173 - should have true method
ok 174 - true method should be a function
ok 175 - should have assert method
ok 176 - assert method should be a function
ok 177 - should have is method
ok 178 - is method should be a function
ok 179 - should have ok method
ok 180 - ok method should be a function
ok 181 - should have isEqual method
ok 182 - isEqual method should be a function
ok 183 - should have isDeeply method
ok 184 - isDeeply method should be a function
ok 185 - should have deepEqual method
ok 186 - deepEqual method should be a function
ok 187 - should have deepEquals method
ok 188 - deepEquals method should be a function
ok 189 - should have pass method
ok 190 - pass method should be a function
ok 191 - should have length method
ok 192 - length method should be a function
ok 193 - should have skip method
ok 194 - skip method should be a function
ok 195 - should have isNotEqual method
ok 196 - isNotEqual method should be a function
ok 197 - should have looseEquals method
ok 198 - looseEquals method should be a function
ok 199 - should have false method
ok 200 - false method should be a function
ok 201 - should have notDeeply method
ok 202 - notDeeply method should be a function
ok 203 - should have ifErr method
ok 204 - ifErr method should be a function
ok 205 - should have hasFields method
ok 206 - hasFields method should be a function
ok 207 - should have isNotDeeply method
ok 208 - isNotDeeply method should be a function
ok 209 - should have like method
ok 210 - like method should be a function
ok 211 - should have similar method
ok 212 - similar method should be a function
ok 213 - should have notOk method
ok 214 - notOk method should be a function
ok 215 - should have isDissimilar method
ok 216 - isDissimilar method should be a function
ok 217 - should have isEquivalent method
ok 218 - isEquivalent method should be a function
ok 219 - should have doesNotEqual method
ok 220 - doesNotEqual method should be a function
ok 221 - should have isSimilar method
ok 222 - isSimilar method should be a function
ok 223 - should have notDeepEqual method
ok 224 - notDeepEqual method should be a function
ok 225 - should have type method
ok 226 - type method should be a function
ok 227 - should have notok method
ok 228 - notok method should be a function
ok 229 - should have isInequivalent method
ok 230 - isInequivalent method should be a function
ok 231 - should have isNot method
ok 232 - isNot method should be a function
ok 233 - should have same method
ok 234 - same method should be a function
ok 235 - should have isInequal method
ok 236 - isInequal method should be a function
ok 237 - should have _endNice method
ok 238 - _endNice method should be a function
ok 239 - should have ifError method
ok 240 - ifError method should be a function
ok 241 - should have iferror method
ok 242 - iferror method should be a function
ok 243 - should have clear method
ok 244 - clear method should be a function
ok 245 - should have has method
ok 246 - has method should be a function
ok 247 - should have not method
ok 248 - not method should be a function
ok 249 - should have timeout method
ok 250 - timeout method should be a function
ok 251 - should have notSimilar method
ok 252 - notSimilar method should be a function
ok 253 - should have isUnlike method
ok 254 - isUnlike method should be a function
ok 255 - should have notEquals method
ok 256 - notEquals method should be a function
ok 257 - should have unsimilar method
ok 258 - unsimilar method should be a function
ok 259 - should have result method
ok 260 - result method should be a function
ok 261 - should have doesNotThrow method
ok 262 - doesNotThrow method should be a function
ok 263 - should have error method
ok 264 - error method should be a function
ok 265 - should have constructor method
ok 266 - constructor method should be a function
ok 267 - should have notEqual method
ok 268 - notEqual method should be a function
ok 269 - should have throws method
ok 270 - throws method should be a function
ok 271 - should have isLike method
ok 272 - isLike method should be a function
ok 273 - should have isNotSimilar method
ok 274 - isNotSimilar method should be a function
ok 275 - should have isNotEquivalent method
ok 276 - isNotEquivalent method should be a function
ok 277 - should have inequal method
ok 278 - inequal method should be a function
ok 279 - should have notEquivalent method
ok 280 - notEquivalent method should be a function
ok 281 - should have isNotLike method
ok 282 - isNotLike method should be a function
ok 283 - should have equivalent method
ok 284 - equivalent method should be a function
ok 285 - should have looseEqual method
ok 286 - looseEqual method should be a function
ok 287 - should have equal method
ok 288 - equal method should be a function
ok 289 - should have unlike method
ok 290 - unlike method should be a function
ok 291 - should have doesNotHave method
ok 292 - doesNotHave method should be a function
ok 293 - should have comment method
ok 294 - comment method should be a function
ok 295 - should have isa method
ok 296 - isa method should be a function
# tests 147
# pass  147
# ok
ok 297 - test/test-test.js
# timeout.js
# TAP version 13
# timeout test with plan only
ok 298 - a
ok 299 - b
# timeout test with plan and end
ok 300 - a
ok 301 - b
# tests 4
# pass  4
# ok
ok 302 - test/timeout.js
# trivial-success.js
ok 303 - test/trivial-success.js
# undefined_indented.js
# TAP version 13
# consume yaml
ok 304 - should be equivalent
# tests 1
# pass  1
# ok
ok 305 - test/undefined_indented.js
# valid-command.js
# TAP version 13
# valid command
ok 306 - should be equivalent
ok 307 - should be equivalent
ok 308 - should be equivalent
ok 309 - should be equivalent
ok 310 - should be equivalent
ok 311 - should be equal
# tests 6
# pass  6
# ok
ok 312 - test/valid-command.js
1..312
# tests 312
# pass  298
# fail  5
# skip  5
# todo  4
# failed 5 of 312 tests
# todo: 4
# skip: 5

`

exports[`test/parser-stringify.js TAP tap-tests-stdout.tap strict > stringified flat 1`] = `
TAP version 13
# buffer_compare.js
# TAP version 13
# same buffers
ok 1 - should be equivalent
# not same buffers
ok 2 - should not be equivalent
# tests 2
# pass  2
# ok
ok 3 - test/buffer_compare.js
# common.js
ok 4 - just setup, nothing relevant
ok 5 - test/common.js
# consumer.js
# TAP version 13
# basic.tap
ok 6 - should be equivalent
# indent.tap
ok 7 - should be equivalent
# missing.tap
ok 8 - should be equivalent
# skip-all.tap
ok 9 - should be equivalent
# tap-tests.tap
ok 10 - should be equivalent
# yamlish.tap
ok 11 - should be equivalent
# tests 6
# pass  6
# ok
ok 12 - test/consumer.js
# debug-test.js
# TAP version 13
# debug test
ok 13 - Should output debugger message
# tests 1
# pass  1
# ok
ok 14 - test/debug-test.js
# deep-strict.js
# TAP version 13
# strictDeepEquals shouldn't care about key order
ok 15 - should be strictly equal
# strictDeepEquals shouldn't care about key order recursively
ok 16 - should be strictly equal
# strictDeepEquals shoudn't care about key order (but still might)
ok 17 - should be strictly equal
# tests 3
# pass  3
# ok
ok 18 - test/deep-strict.js
# deep.js
# TAP version 13
# deepEquals shouldn't care about key order and types
ok 19 - should be equivalent
# deepEquals shouldn't care about key order recursively and types
ok 20 - should be equivalent
# deepEquals shoudn't care about key order (but still might) and types
ok 21 - should be equivalent
# tests 3
# pass  3
# ok
ok 22 - test/deep.js
# executed.sh
ok 23 - File with executable bit should be executed
ok 24 - test/executed.sh
# exit-code.js
# TAP version 13
# exit code 1 when tap results show failure
# test exits 0, has failures
ok 25 - should be equal
ok 26 - should be equal
# test exits 1, has failures
ok 27 - should be equal
ok 28 - should be equal
# test exits 1, has no failures
ok 29 - should be equal
ok 30 - should be equal
# successes exit 0
# test that does nothing, but exits 0
ok 31 - should be equal
ok 32 - should be equal
# test that succeeds, and exits 0
ok 33 - should be equal
ok 34 - should be equal
# tests 10
# pass  10
# ok
ok 35 - test/exit-code.js
# expose-gc-test.js
# TAP version 13
# gc test when the gc isn't there
ok 36 - should be equal
# gc test when the gc should be there
# test for gc using --gc
ok 37 - should be equal
# test for gc using --expose-gc
ok 38 - should be equal
# cleanup
# tests 3
# pass  3
# ok
ok 39 - test/expose-gc-test.js
# global-harness-async.js
# TAP version 13
# outer
# inner 1
ok 40 - 1-1
# inner 2
ok 41 - 2-1
# inner 3
ok 42 - 3-1
ok 43 - test/global-harness-async.js
# independent-timeouts.js
# TAP version 13
# finishes in time
# finishes in time too
# tests 0
# ok
ok 44 - test/independent-timeouts.js
# isolated-conf-test.js
# TAP version 13
# one
ok 45 - should be equal
ok 46 - should be equal
# two
ok 47 - should be equal
ok 48 - should be equal
# tests 4
# pass  4
# ok
ok 49 - test/isolated-conf-test.js
# meta-test.js
# TAP version 13
# meta test
ok 50 - sanity check
ok 51 - not ok
ok 52 - total test count
ok 53 - tests passed
ok 54 - tests failed
ok 55 - ok is boolean
ok 56 - skip is number
ok 57 - results isa Results
ok 58 - test isa Test
ok 59 - test isa Harness
# tests 10
# pass  10
# ok
ok 60 - test/meta-test.js
# nested-async.js
# TAP version 13
# Harness async test support
ok 61 - sync child A
# sync child B
# async grandchild A
ok 62 - (unnamed assert)
# async grandchild B
ok 63 - (unnamed assert)
# async child
ok 64 - sync grandchild in async child A
# sync grandchild in async child B
ok 65 - (unnamed assert)
# tests 5
# pass  5
# ok
ok 66 - test/nested-async.js
# nested-test.js
# TAP version 13
# parent
ok 67 - p test
# subtest
ok 68 - ch test
# nested subtest
ok 69 - grch test
# another subtest
ok 70 - ch test 2
# tests 4
# pass  4
# ok
ok 71 - test/nested-test.js
# non-tap-output.js
# everything is fine
# there are no errors
# this output is not haiku.
# is 8 ok?
ok 72 - , 8 can stay.
# but: nevertheless, here we are
# this: is indented
# and: it
# might: ~
# be: yaml?
ok 73 - might be confusing
ok 74 - done now, exiting
ok 75 - test/non-tap-output.js
# not-executed.sh
# output-childtest-description.js
# /Users/isaacs/dev/js/tap/test/nested-tests-fixture.js
# TAP version 13
# nested tests, parent and child pass
ok 76 - outputs parent description
ok 77 - outputs child description
ok 78 - outputs parent description before parent result
ok 79 - outputs parent result before child description
ok 80 - outputs child description before child result
# tests 5
# pass  5
# ok
ok 81 - test/output-childtest-description.js
# result-trap.js
# TAP version 13
# trap result
ok 82 - should be equal
ok 83 - should be equal
# tests 2
# pass  2
# ok
ok 84 - test/result-trap.js
# segv.js
# TAP version 13
# setup
ok 85 - compiled seg faulter
# segv
ok 86 - should be equivalent
ok 87 - should be equivalent
ok 88 - should be equivalent
ok 89 - should be equivalent
ok 90 - should be equivalent
ok 91 - should be equal
# cleanup
ok 92 - cleaned up
# tests 8
# pass  8
# ok
ok 93 - test/segv.js
# simple-harness-test-with-plan.js
# TAP version 13
# trivial success
ok 94 - it works
# two tests
ok 95 - math should work
ok 96 - false should not be ok
# tests 3
# pass  3
# ok
ok 97 - test/simple-harness-test-with-plan.js
# simple-harness-test.js
# TAP version 13
# trivial success
ok 98 - it works
# two tests
ok 99 - math should work
ok 100 - false should not be ok
# tests 3
# pass  3
# ok
ok 101 - test/simple-harness-test.js
# test-assert-todo-skip.js
# TAP version 13
# not much
ok 102 - always passes # SKIP skip it good
ok 103 - false # SKIP always fails
ok 104 - bonus # TODO remove todo directive
ok 105 - expected # TODO implement a thing
ok 106 - always passes without explanation # SKIP
ok 107 - false without explanation # SKIP
ok 108 - bonus without explanation # TODO
ok 109 - expected without explanation # TODO
# tests 8
# skip  4
# todo  4
ok 110 - test/test-assert-todo-skip.js
# test-descriptions.js
# TAP version 13
# captures test descriptions
ok 111 - exit cleanly
ok 112 - captures SKIP description
ok 113 - skip summary is not from file
ok 114 - todo summary is not from file
not ok 115 - captures TODO description
  ---
  file: child_process.js
  line: 707
  column: 7
  stack:
    - |
      getCaller (/Users/isaacs/dev/js/tap/lib/tap-assert.js:439:17)
    - |
      Function.assert (/Users/isaacs/dev/js/tap/lib/tap-assert.js:21:16)
    - |
      Test._testAssert (/Users/isaacs/dev/js/tap/lib/tap-test.js:87:16)
    - |
      /Users/isaacs/dev/js/tap/test/test-descriptions.js:32:7
    - |
      ChildProcess.exithandler (child_process.js:707:7)
    - |
      emitTwo (events.js:87:13)
    - |
      ChildProcess.emit (events.js:169:7)
    - |
      maybeClose (child_process.js:984:16)
    - |
      Socket.<anonymous> (child_process.js:1153:11)
    - |
      emitOne (events.js:77:13)
  ...
ok 116 - exit cleanly
ok 117 - captures SKIP description
ok 118 - skip summary is not in TAP output
ok 119 - todo summary is not in TAP output
not ok 120 - captures TODO description
  ---
  file: child_process.js
  line: 707
  column: 7
  stack:
    - |
      getCaller (/Users/isaacs/dev/js/tap/lib/tap-assert.js:439:17)
    - |
      Function.assert (/Users/isaacs/dev/js/tap/lib/tap-assert.js:21:16)
    - |
      Test._testAssert (/Users/isaacs/dev/js/tap/lib/tap-test.js:87:16)
    - |
      /Users/isaacs/dev/js/tap/test/test-descriptions.js:18:7
    - |
      ChildProcess.exithandler (child_process.js:707:7)
    - |
      emitTwo (events.js:87:13)
    - |
      ChildProcess.emit (events.js:169:7)
    - |
      maybeClose (child_process.js:984:16)
    - |
      Process.ChildProcess._handle.onexit (child_process.js:1057:5)
  ...
ok 121 - exit cleanly
not ok 122 - summarizes skipped count
  ---
  file: child_process.js
  line: 707
  column: 7
  stack:
    - |
      getCaller (/Users/isaacs/dev/js/tap/lib/tap-assert.js:439:17)
    - |
      Function.assert (/Users/isaacs/dev/js/tap/lib/tap-assert.js:21:16)
    - |
      Test._testAssert (/Users/isaacs/dev/js/tap/lib/tap-test.js:87:16)
    - |
      /Users/isaacs/dev/js/tap/test/test-descriptions.js:23:7
    - |
      ChildProcess.exithandler (child_process.js:707:7)
    - |
      emitTwo (events.js:87:13)
    - |
      ChildProcess.emit (events.js:169:7)
    - |
      maybeClose (child_process.js:984:16)
    - |
      Process.ChildProcess._handle.onexit (child_process.js:1057:5)
  ...
not ok 123 - summarizes todo count
  ---
  file: child_process.js
  line: 707
  column: 7
  stack:
    - |
      getCaller (/Users/isaacs/dev/js/tap/lib/tap-assert.js:439:17)
    - |
      Function.assert (/Users/isaacs/dev/js/tap/lib/tap-assert.js:21:16)
    - |
      Test._testAssert (/Users/isaacs/dev/js/tap/lib/tap-test.js:87:16)
    - |
      /Users/isaacs/dev/js/tap/test/test-descriptions.js:24:7
    - |
      ChildProcess.exithandler (child_process.js:707:7)
    - |
      emitTwo (events.js:87:13)
    - |
      ChildProcess.emit (events.js:169:7)
    - |
      maybeClose (child_process.js:984:16)
    - |
      Process.ChildProcess._handle.onexit (child_process.js:1057:5)
  ...
# tests 13
# pass  9
# fail  4
not ok 124 - test/test-descriptions.js
  ---
  exit: 1
  command: /usr/local/bin/iojs test-descriptions.js
  ...
# test-directives.js
# TAP version 13
# captures test descriptions
# raw TAP > TAP consumer > TAP producer
ok 125 - overall result is PASS
ok 126 - captures ok SKIP
ok 127 - captures not ok SKIP
ok 128 - skip summary not in TAP output
ok 129 - captures ok TODO
ok 130 - captures not ok TODO
ok 131 - todo summary is not in TAP output
ok 132 - no ugly "undefined" in output
# raw TAP > TAP consumer > summary
ok 133 - overall result is PASS
ok 134 - no SKIP in summary
ok 135 - skip summary is not in TAP output
ok 136 - no TODO in summary
ok 137 - todo summary is not in TAP output
ok 138 - no ugly "undefined" in output
# TAP producer via require("tap")
ok 139 - overall result is PASS
ok 140 - captures ok SKIP
ok 141 - captures not ok SKIP
ok 142 - skip summary not in TAP output
ok 143 - captures ok TODO
ok 144 - captures not ok TODO
ok 145 - todo summary is not in TAP output
ok 146 - no ugly "undefined" in output
# tests 22
# pass  22
# ok
ok 147 - test/test-directives.js
# test-skip.js
# TAP version 13
ok 148 - does not count as failure # SKIP
# tests 1
# skip  1
ok 149 - test/test-skip.js
# test-test.js
# TAP version 13
# testing the test object
ok 150 - test object should be instanceof Test
ok 151 - test object should be instanceof Harness
ok 152 - test._Test should be the Test class
ok 153 - should have isNotDeepEqual method
ok 154 - isNotDeepEqual method should be a function
ok 155 - should have equals method
ok 156 - equals method should be a function
ok 157 - should have inequivalent method
ok 158 - inequivalent method should be a function
ok 159 - should have threw method
ok 160 - threw method should be a function
ok 161 - should have strictEqual method
ok 162 - strictEqual method should be a function
ok 163 - should have emit method
ok 164 - emit method should be a function
ok 165 - should have fail method
ok 166 - fail method should be a function
ok 167 - should have strictEquals method
ok 168 - strictEquals method should be a function
ok 169 - should have notLike method
ok 170 - notLike method should be a function
ok 171 - should have dissimilar method
ok 172 - dissimilar method should be a function
ok 173 - should have true method
ok 174 - true method should be a function
ok 175 - should have assert method
ok 176 - assert method should be a function
ok 177 - should have is method
ok 178 - is method should be a function
ok 179 - should have ok method
ok 180 - ok method should be a function
ok 181 - should have isEqual method
ok 182 - isEqual method should be a function
ok 183 - should have isDeeply method
ok 184 - isDeeply method should be a function
ok 185 - should have deepEqual method
ok 186 - deepEqual method should be a function
ok 187 - should have deepEquals method
ok 188 - deepEquals method should be a function
ok 189 - should have pass method
ok 190 - pass method should be a function
ok 191 - should have length method
ok 192 - length method should be a function
ok 193 - should have skip method
ok 194 - skip method should be a function
ok 195 - should have isNotEqual method
ok 196 - isNotEqual method should be a function
ok 197 - should have looseEquals method
ok 198 - looseEquals method should be a function
ok 199 - should have false method
ok 200 - false method should be a function
ok 201 - should have notDeeply method
ok 202 - notDeeply method should be a function
ok 203 - should have ifErr method
ok 204 - ifErr method should be a function
ok 205 - should have hasFields method
ok 206 - hasFields method should be a function
ok 207 - should have isNotDeeply method
ok 208 - isNotDeeply method should be a function
ok 209 - should have like method
ok 210 - like method should be a function
ok 211 - should have similar method
ok 212 - similar method should be a function
ok 213 - should have notOk method
ok 214 - notOk method should be a function
ok 215 - should have isDissimilar method
ok 216 - isDissimilar method should be a function
ok 217 - should have isEquivalent method
ok 218 - isEquivalent method should be a function
ok 219 - should have doesNotEqual method
ok 220 - doesNotEqual method should be a function
ok 221 - should have isSimilar method
ok 222 - isSimilar method should be a function
ok 223 - should have notDeepEqual method
ok 224 - notDeepEqual method should be a function
ok 225 - should have type method
ok 226 - type method should be a function
ok 227 - should have notok method
ok 228 - notok method should be a function
ok 229 - should have isInequivalent method
ok 230 - isInequivalent method should be a function
ok 231 - should have isNot method
ok 232 - isNot method should be a function
ok 233 - should have same method
ok 234 - same method should be a function
ok 235 - should have isInequal method
ok 236 - isInequal method should be a function
ok 237 - should have _endNice method
ok 238 - _endNice method should be a function
ok 239 - should have ifError method
ok 240 - ifError method should be a function
ok 241 - should have iferror method
ok 242 - iferror method should be a function
ok 243 - should have clear method
ok 244 - clear method should be a function
ok 245 - should have has method
ok 246 - has method should be a function
ok 247 - should have not method
ok 248 - not method should be a function
ok 249 - should have timeout method
ok 250 - timeout method should be a function
ok 251 - should have notSimilar method
ok 252 - notSimilar method should be a function
ok 253 - should have isUnlike method
ok 254 - isUnlike method should be a function
ok 255 - should have notEquals method
ok 256 - notEquals method should be a function
ok 257 - should have unsimilar method
ok 258 - unsimilar method should be a function
ok 259 - should have result method
ok 260 - result method should be a function
ok 261 - should have doesNotThrow method
ok 262 - doesNotThrow method should be a function
ok 263 - should have error method
ok 264 - error method should be a function
ok 265 - should have constructor method
ok 266 - constructor method should be a function
ok 267 - should have notEqual method
ok 268 - notEqual method should be a function
ok 269 - should have throws method
ok 270 - throws method should be a function
ok 271 - should have isLike method
ok 272 - isLike method should be a function
ok 273 - should have isNotSimilar method
ok 274 - isNotSimilar method should be a function
ok 275 - should have isNotEquivalent method
ok 276 - isNotEquivalent method should be a function
ok 277 - should have inequal method
ok 278 - inequal method should be a function
ok 279 - should have notEquivalent method
ok 280 - notEquivalent method should be a function
ok 281 - should have isNotLike method
ok 282 - isNotLike method should be a function
ok 283 - should have equivalent method
ok 284 - equivalent method should be a function
ok 285 - should have looseEqual method
ok 286 - looseEqual method should be a function
ok 287 - should have equal method
ok 288 - equal method should be a function
ok 289 - should have unlike method
ok 290 - unlike method should be a function
ok 291 - should have doesNotHave method
ok 292 - doesNotHave method should be a function
ok 293 - should have comment method
ok 294 - comment method should be a function
ok 295 - should have isa method
ok 296 - isa method should be a function
# tests 147
# pass  147
# ok
ok 297 - test/test-test.js
# timeout.js
# TAP version 13
# timeout test with plan only
ok 298 - a
ok 299 - b
# timeout test with plan and end
ok 300 - a
ok 301 - b
# tests 4
# pass  4
# ok
ok 302 - test/timeout.js
# trivial-success.js
ok 303 - test/trivial-success.js
# undefined_indented.js
# TAP version 13
# consume yaml
ok 304 - should be equivalent
# tests 1
# pass  1
# ok
ok 305 - test/undefined_indented.js
# valid-command.js
# TAP version 13
# valid command
ok 306 - should be equivalent
ok 307 - should be equivalent
ok 308 - should be equivalent
ok 309 - should be equivalent
ok 310 - should be equivalent
ok 311 - should be equal
# tests 6
# pass  6
# ok
ok 312 - test/valid-command.js
1..312
# tests 312
# pass  298
# fail  5
# skip  5
# todo  4
# failed 5 of 312 tests
# todo: 4
# skip: 5

`

exports[`test/parser-stringify.js TAP tap-tests-stdout.tap strictBail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "comment",
    "# buffer_compare.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# same buffers\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# not same buffers\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "should not be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 2\\n",
  ],
  Array [
    "comment",
    "# pass  2\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "test/buffer_compare.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# common.js\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "name": "just setup, nothing relevant",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "name": "test/common.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# consumer.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# basic.tap\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 6,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# indent.tap\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 7,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# missing.tap\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 8,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# skip-all.tap\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 9,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tap-tests.tap\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 10,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# yamlish.tap\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 11,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 6\\n",
  ],
  Array [
    "comment",
    "# pass  6\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 12,
      "name": "test/consumer.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# debug-test.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# debug test\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 13,
      "name": "Should output debugger message",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 1\\n",
  ],
  Array [
    "comment",
    "# pass  1\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 14,
      "name": "test/debug-test.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# deep-strict.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# strictDeepEquals shouldn't care about key order\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 15,
      "name": "should be strictly equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# strictDeepEquals shouldn't care about key order recursively\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 16,
      "name": "should be strictly equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# strictDeepEquals shoudn't care about key order (but still might)\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 17,
      "name": "should be strictly equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 3\\n",
  ],
  Array [
    "comment",
    "# pass  3\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 18,
      "name": "test/deep-strict.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# deep.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# deepEquals shouldn't care about key order and types\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 19,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# deepEquals shouldn't care about key order recursively and types\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 20,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# deepEquals shoudn't care about key order (but still might) and types\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 21,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 3\\n",
  ],
  Array [
    "comment",
    "# pass  3\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 22,
      "name": "test/deep.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# executed.sh\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 23,
      "name": "File with executable bit should be executed",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 24,
      "name": "test/executed.sh",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# exit-code.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# exit code 1 when tap results show failure\\n",
  ],
  Array [
    "comment",
    "# test exits 0, has failures\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 25,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 26,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test exits 1, has failures\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 27,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 28,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test exits 1, has no failures\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 29,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 30,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# successes exit 0\\n",
  ],
  Array [
    "comment",
    "# test that does nothing, but exits 0\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 31,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 32,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test that succeeds, and exits 0\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 33,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 34,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 10\\n",
  ],
  Array [
    "comment",
    "# pass  10\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 35,
      "name": "test/exit-code.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# expose-gc-test.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# gc test when the gc isn't there\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 36,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# gc test when the gc should be there\\n",
  ],
  Array [
    "comment",
    "# test for gc using --gc\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 37,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test for gc using --expose-gc\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 38,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# cleanup\\n",
  ],
  Array [
    "comment",
    "# tests 3\\n",
  ],
  Array [
    "comment",
    "# pass  3\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 39,
      "name": "test/expose-gc-test.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# global-harness-async.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# outer\\n",
  ],
  Array [
    "comment",
    "# inner 1\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 40,
      "name": "1-1",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# inner 2\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 41,
      "name": "2-1",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# inner 3\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 42,
      "name": "3-1",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 43,
      "name": "test/global-harness-async.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# independent-timeouts.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# finishes in time\\n",
  ],
  Array [
    "comment",
    "# finishes in time too\\n",
  ],
  Array [
    "comment",
    "# tests 0\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 44,
      "name": "test/independent-timeouts.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# isolated-conf-test.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# one\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 45,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 46,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# two\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 47,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 48,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 4\\n",
  ],
  Array [
    "comment",
    "# pass  4\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 49,
      "name": "test/isolated-conf-test.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# meta-test.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# meta test\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 50,
      "name": "sanity check",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 51,
      "name": "not ok",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 52,
      "name": "total test count",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 53,
      "name": "tests passed",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 54,
      "name": "tests failed",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 55,
      "name": "ok is boolean",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 56,
      "name": "skip is number",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 57,
      "name": "results isa Results",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 58,
      "name": "test isa Test",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 59,
      "name": "test isa Harness",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 10\\n",
  ],
  Array [
    "comment",
    "# pass  10\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 60,
      "name": "test/meta-test.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# nested-async.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# Harness async test support\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 61,
      "name": "sync child A",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# sync child B\\n",
  ],
  Array [
    "comment",
    "# async grandchild A\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 62,
      "name": "(unnamed assert)",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# async grandchild B\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 63,
      "name": "(unnamed assert)",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# async child\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 64,
      "name": "sync grandchild in async child A",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# sync grandchild in async child B\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 65,
      "name": "(unnamed assert)",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 5\\n",
  ],
  Array [
    "comment",
    "# pass  5\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 66,
      "name": "test/nested-async.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# nested-test.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# parent\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 67,
      "name": "p test",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# subtest\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 68,
      "name": "ch test",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# nested subtest\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 69,
      "name": "grch test",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# another subtest\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 70,
      "name": "ch test 2",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 4\\n",
  ],
  Array [
    "comment",
    "# pass  4\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 71,
      "name": "test/nested-test.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# non-tap-output.js\\n",
  ],
  Array [
    "comment",
    "# everything is fine\\n",
  ],
  Array [
    "comment",
    "# there are no errors\\n",
  ],
  Array [
    "comment",
    "# this output is not haiku.\\n",
  ],
  Array [
    "comment",
    "# is 8 ok?\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 72,
      "name": ", 8 can stay.",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# but: nevertheless, here we are\\n",
  ],
  Array [
    "comment",
    "# this: is indented\\n",
  ],
  Array [
    "comment",
    "# and: it\\n",
  ],
  Array [
    "comment",
    "# might: ~\\n",
  ],
  Array [
    "comment",
    "# be: yaml?\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 73,
      "name": "might be confusing",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 74,
      "name": "done now, exiting",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 75,
      "name": "test/non-tap-output.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# not-executed.sh\\n",
  ],
  Array [
    "comment",
    "# output-childtest-description.js\\n",
  ],
  Array [
    "comment",
    "# /Users/isaacs/dev/js/tap/test/nested-tests-fixture.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# nested tests, parent and child pass\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 76,
      "name": "outputs parent description",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 77,
      "name": "outputs child description",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 78,
      "name": "outputs parent description before parent result",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 79,
      "name": "outputs parent result before child description",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 80,
      "name": "outputs child description before child result",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 5\\n",
  ],
  Array [
    "comment",
    "# pass  5\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 81,
      "name": "test/output-childtest-description.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# result-trap.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# trap result\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 82,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 83,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 2\\n",
  ],
  Array [
    "comment",
    "# pass  2\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 84,
      "name": "test/result-trap.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# segv.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# setup\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 85,
      "name": "compiled seg faulter",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# segv\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 86,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 87,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 88,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 89,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 90,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 91,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# cleanup\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 92,
      "name": "cleaned up",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 8\\n",
  ],
  Array [
    "comment",
    "# pass  8\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 93,
      "name": "test/segv.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# simple-harness-test-with-plan.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# trivial success\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 94,
      "name": "it works",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# two tests\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 95,
      "name": "math should work",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 96,
      "name": "false should not be ok",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 3\\n",
  ],
  Array [
    "comment",
    "# pass  3\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 97,
      "name": "test/simple-harness-test-with-plan.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# simple-harness-test.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# trivial success\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 98,
      "name": "it works",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# two tests\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 99,
      "name": "math should work",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 100,
      "name": "false should not be ok",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 3\\n",
  ],
  Array [
    "comment",
    "# pass  3\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 101,
      "name": "test/simple-harness-test.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test-assert-todo-skip.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# not much\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 102,
      "name": "always passes",
      "ok": true,
      "skip": "skip it good",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 103,
      "name": "false",
      "ok": true,
      "skip": "always fails",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 104,
      "name": "bonus",
      "ok": true,
      "todo": "remove todo directive",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 105,
      "name": "expected",
      "ok": true,
      "todo": "implement a thing",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 106,
      "name": "always passes without explanation",
      "ok": true,
      "skip": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 107,
      "name": "false without explanation",
      "ok": true,
      "skip": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 108,
      "name": "bonus without explanation",
      "ok": true,
      "todo": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 109,
      "name": "expected without explanation",
      "ok": true,
      "todo": true,
    },
  ],
  Array [
    "comment",
    "# tests 8\\n",
  ],
  Array [
    "comment",
    "# skip  4\\n",
  ],
  Array [
    "comment",
    "# todo  4\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 110,
      "name": "test/test-assert-todo-skip.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test-descriptions.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# captures test descriptions\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 111,
      "name": "exit cleanly",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 112,
      "name": "captures SKIP description",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 113,
      "name": "skip summary is not from file",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 114,
      "name": "todo summary is not from file",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "diag": Object {
        "column": 7,
        "file": "child_process.js",
        "line": 707,
        "stack": Array [
          "getCaller (/Users/isaacs/dev/js/tap/lib/tap-assert.js:439:17)\\n",
          "Function.assert (/Users/isaacs/dev/js/tap/lib/tap-assert.js:21:16)\\n",
          "Test._testAssert (/Users/isaacs/dev/js/tap/lib/tap-test.js:87:16)\\n",
          "/Users/isaacs/dev/js/tap/test/test-descriptions.js:32:7\\n",
          "ChildProcess.exithandler (child_process.js:707:7)\\n",
          "emitTwo (events.js:87:13)\\n",
          "ChildProcess.emit (events.js:169:7)\\n",
          "maybeClose (child_process.js:984:16)\\n",
          "Socket.<anonymous> (child_process.js:1153:11)\\n",
          "emitOne (events.js:77:13)\\n",
        ],
      },
      "fullname": "",
      "id": 115,
      "name": "captures TODO description",
      "ok": false,
    },
  ],
  Array [
    "bailout",
    "captures TODO description",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": "captures TODO description",
      "count": 115,
      "fail": 1,
      "failures": Array [
        Result {
          "diag": Object {
            "column": 7,
            "file": "child_process.js",
            "line": 707,
            "stack": Array [
              "getCaller (/Users/isaacs/dev/js/tap/lib/tap-assert.js:439:17)\\n",
              "Function.assert (/Users/isaacs/dev/js/tap/lib/tap-assert.js:21:16)\\n",
              "Test._testAssert (/Users/isaacs/dev/js/tap/lib/tap-test.js:87:16)\\n",
              "/Users/isaacs/dev/js/tap/test/test-descriptions.js:32:7\\n",
              "ChildProcess.exithandler (child_process.js:707:7)\\n",
              "emitTwo (events.js:87:13)\\n",
              "ChildProcess.emit (events.js:169:7)\\n",
              "maybeClose (child_process.js:984:16)\\n",
              "Socket.<anonymous> (child_process.js:1153:11)\\n",
              "emitOne (events.js:77:13)\\n",
            ],
          },
          "fullname": "",
          "id": 115,
          "name": "captures TODO description",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 114,
      "plan": FinalPlan {
        "comment": "",
        "end": null,
        "skipAll": false,
        "skipReason": "",
        "start": null,
      },
      "skip": 4,
      "time": null,
      "todo": 4,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP tap-tests-stdout.tap strictBail > stringified 1`] = `
TAP version 13
# buffer_compare.js
# TAP version 13
# same buffers
ok 1 - should be equivalent
# not same buffers
ok 2 - should not be equivalent
# tests 2
# pass  2
# ok
ok 3 - test/buffer_compare.js
# common.js
ok 4 - just setup, nothing relevant
ok 5 - test/common.js
# consumer.js
# TAP version 13
# basic.tap
ok 6 - should be equivalent
# indent.tap
ok 7 - should be equivalent
# missing.tap
ok 8 - should be equivalent
# skip-all.tap
ok 9 - should be equivalent
# tap-tests.tap
ok 10 - should be equivalent
# yamlish.tap
ok 11 - should be equivalent
# tests 6
# pass  6
# ok
ok 12 - test/consumer.js
# debug-test.js
# TAP version 13
# debug test
ok 13 - Should output debugger message
# tests 1
# pass  1
# ok
ok 14 - test/debug-test.js
# deep-strict.js
# TAP version 13
# strictDeepEquals shouldn't care about key order
ok 15 - should be strictly equal
# strictDeepEquals shouldn't care about key order recursively
ok 16 - should be strictly equal
# strictDeepEquals shoudn't care about key order (but still might)
ok 17 - should be strictly equal
# tests 3
# pass  3
# ok
ok 18 - test/deep-strict.js
# deep.js
# TAP version 13
# deepEquals shouldn't care about key order and types
ok 19 - should be equivalent
# deepEquals shouldn't care about key order recursively and types
ok 20 - should be equivalent
# deepEquals shoudn't care about key order (but still might) and types
ok 21 - should be equivalent
# tests 3
# pass  3
# ok
ok 22 - test/deep.js
# executed.sh
ok 23 - File with executable bit should be executed
ok 24 - test/executed.sh
# exit-code.js
# TAP version 13
# exit code 1 when tap results show failure
# test exits 0, has failures
ok 25 - should be equal
ok 26 - should be equal
# test exits 1, has failures
ok 27 - should be equal
ok 28 - should be equal
# test exits 1, has no failures
ok 29 - should be equal
ok 30 - should be equal
# successes exit 0
# test that does nothing, but exits 0
ok 31 - should be equal
ok 32 - should be equal
# test that succeeds, and exits 0
ok 33 - should be equal
ok 34 - should be equal
# tests 10
# pass  10
# ok
ok 35 - test/exit-code.js
# expose-gc-test.js
# TAP version 13
# gc test when the gc isn't there
ok 36 - should be equal
# gc test when the gc should be there
# test for gc using --gc
ok 37 - should be equal
# test for gc using --expose-gc
ok 38 - should be equal
# cleanup
# tests 3
# pass  3
# ok
ok 39 - test/expose-gc-test.js
# global-harness-async.js
# TAP version 13
# outer
# inner 1
ok 40 - 1-1
# inner 2
ok 41 - 2-1
# inner 3
ok 42 - 3-1
ok 43 - test/global-harness-async.js
# independent-timeouts.js
# TAP version 13
# finishes in time
# finishes in time too
# tests 0
# ok
ok 44 - test/independent-timeouts.js
# isolated-conf-test.js
# TAP version 13
# one
ok 45 - should be equal
ok 46 - should be equal
# two
ok 47 - should be equal
ok 48 - should be equal
# tests 4
# pass  4
# ok
ok 49 - test/isolated-conf-test.js
# meta-test.js
# TAP version 13
# meta test
ok 50 - sanity check
ok 51 - not ok
ok 52 - total test count
ok 53 - tests passed
ok 54 - tests failed
ok 55 - ok is boolean
ok 56 - skip is number
ok 57 - results isa Results
ok 58 - test isa Test
ok 59 - test isa Harness
# tests 10
# pass  10
# ok
ok 60 - test/meta-test.js
# nested-async.js
# TAP version 13
# Harness async test support
ok 61 - sync child A
# sync child B
# async grandchild A
ok 62 - (unnamed assert)
# async grandchild B
ok 63 - (unnamed assert)
# async child
ok 64 - sync grandchild in async child A
# sync grandchild in async child B
ok 65 - (unnamed assert)
# tests 5
# pass  5
# ok
ok 66 - test/nested-async.js
# nested-test.js
# TAP version 13
# parent
ok 67 - p test
# subtest
ok 68 - ch test
# nested subtest
ok 69 - grch test
# another subtest
ok 70 - ch test 2
# tests 4
# pass  4
# ok
ok 71 - test/nested-test.js
# non-tap-output.js
# everything is fine
# there are no errors
# this output is not haiku.
# is 8 ok?
ok 72 - , 8 can stay.
# but: nevertheless, here we are
# this: is indented
# and: it
# might: ~
# be: yaml?
ok 73 - might be confusing
ok 74 - done now, exiting
ok 75 - test/non-tap-output.js
# not-executed.sh
# output-childtest-description.js
# /Users/isaacs/dev/js/tap/test/nested-tests-fixture.js
# TAP version 13
# nested tests, parent and child pass
ok 76 - outputs parent description
ok 77 - outputs child description
ok 78 - outputs parent description before parent result
ok 79 - outputs parent result before child description
ok 80 - outputs child description before child result
# tests 5
# pass  5
# ok
ok 81 - test/output-childtest-description.js
# result-trap.js
# TAP version 13
# trap result
ok 82 - should be equal
ok 83 - should be equal
# tests 2
# pass  2
# ok
ok 84 - test/result-trap.js
# segv.js
# TAP version 13
# setup
ok 85 - compiled seg faulter
# segv
ok 86 - should be equivalent
ok 87 - should be equivalent
ok 88 - should be equivalent
ok 89 - should be equivalent
ok 90 - should be equivalent
ok 91 - should be equal
# cleanup
ok 92 - cleaned up
# tests 8
# pass  8
# ok
ok 93 - test/segv.js
# simple-harness-test-with-plan.js
# TAP version 13
# trivial success
ok 94 - it works
# two tests
ok 95 - math should work
ok 96 - false should not be ok
# tests 3
# pass  3
# ok
ok 97 - test/simple-harness-test-with-plan.js
# simple-harness-test.js
# TAP version 13
# trivial success
ok 98 - it works
# two tests
ok 99 - math should work
ok 100 - false should not be ok
# tests 3
# pass  3
# ok
ok 101 - test/simple-harness-test.js
# test-assert-todo-skip.js
# TAP version 13
# not much
ok 102 - always passes # SKIP skip it good
ok 103 - false # SKIP always fails
ok 104 - bonus # TODO remove todo directive
ok 105 - expected # TODO implement a thing
ok 106 - always passes without explanation # SKIP
ok 107 - false without explanation # SKIP
ok 108 - bonus without explanation # TODO
ok 109 - expected without explanation # TODO
# tests 8
# skip  4
# todo  4
ok 110 - test/test-assert-todo-skip.js
# test-descriptions.js
# TAP version 13
# captures test descriptions
ok 111 - exit cleanly
ok 112 - captures SKIP description
ok 113 - skip summary is not from file
ok 114 - todo summary is not from file
not ok 115 - captures TODO description
  ---
  file: child_process.js
  line: 707
  column: 7
  stack:
    - |
      getCaller (/Users/isaacs/dev/js/tap/lib/tap-assert.js:439:17)
    - |
      Function.assert (/Users/isaacs/dev/js/tap/lib/tap-assert.js:21:16)
    - |
      Test._testAssert (/Users/isaacs/dev/js/tap/lib/tap-test.js:87:16)
    - |
      /Users/isaacs/dev/js/tap/test/test-descriptions.js:32:7
    - |
      ChildProcess.exithandler (child_process.js:707:7)
    - |
      emitTwo (events.js:87:13)
    - |
      ChildProcess.emit (events.js:169:7)
    - |
      maybeClose (child_process.js:984:16)
    - |
      Socket.<anonymous> (child_process.js:1153:11)
    - |
      emitOne (events.js:77:13)
  ...
Bail out! captures TODO description

`

exports[`test/parser-stringify.js TAP tap-tests-stdout.tap strictBail > stringified flat 1`] = `
TAP version 13
# buffer_compare.js
# TAP version 13
# same buffers
ok 1 - should be equivalent
# not same buffers
ok 2 - should not be equivalent
# tests 2
# pass  2
# ok
ok 3 - test/buffer_compare.js
# common.js
ok 4 - just setup, nothing relevant
ok 5 - test/common.js
# consumer.js
# TAP version 13
# basic.tap
ok 6 - should be equivalent
# indent.tap
ok 7 - should be equivalent
# missing.tap
ok 8 - should be equivalent
# skip-all.tap
ok 9 - should be equivalent
# tap-tests.tap
ok 10 - should be equivalent
# yamlish.tap
ok 11 - should be equivalent
# tests 6
# pass  6
# ok
ok 12 - test/consumer.js
# debug-test.js
# TAP version 13
# debug test
ok 13 - Should output debugger message
# tests 1
# pass  1
# ok
ok 14 - test/debug-test.js
# deep-strict.js
# TAP version 13
# strictDeepEquals shouldn't care about key order
ok 15 - should be strictly equal
# strictDeepEquals shouldn't care about key order recursively
ok 16 - should be strictly equal
# strictDeepEquals shoudn't care about key order (but still might)
ok 17 - should be strictly equal
# tests 3
# pass  3
# ok
ok 18 - test/deep-strict.js
# deep.js
# TAP version 13
# deepEquals shouldn't care about key order and types
ok 19 - should be equivalent
# deepEquals shouldn't care about key order recursively and types
ok 20 - should be equivalent
# deepEquals shoudn't care about key order (but still might) and types
ok 21 - should be equivalent
# tests 3
# pass  3
# ok
ok 22 - test/deep.js
# executed.sh
ok 23 - File with executable bit should be executed
ok 24 - test/executed.sh
# exit-code.js
# TAP version 13
# exit code 1 when tap results show failure
# test exits 0, has failures
ok 25 - should be equal
ok 26 - should be equal
# test exits 1, has failures
ok 27 - should be equal
ok 28 - should be equal
# test exits 1, has no failures
ok 29 - should be equal
ok 30 - should be equal
# successes exit 0
# test that does nothing, but exits 0
ok 31 - should be equal
ok 32 - should be equal
# test that succeeds, and exits 0
ok 33 - should be equal
ok 34 - should be equal
# tests 10
# pass  10
# ok
ok 35 - test/exit-code.js
# expose-gc-test.js
# TAP version 13
# gc test when the gc isn't there
ok 36 - should be equal
# gc test when the gc should be there
# test for gc using --gc
ok 37 - should be equal
# test for gc using --expose-gc
ok 38 - should be equal
# cleanup
# tests 3
# pass  3
# ok
ok 39 - test/expose-gc-test.js
# global-harness-async.js
# TAP version 13
# outer
# inner 1
ok 40 - 1-1
# inner 2
ok 41 - 2-1
# inner 3
ok 42 - 3-1
ok 43 - test/global-harness-async.js
# independent-timeouts.js
# TAP version 13
# finishes in time
# finishes in time too
# tests 0
# ok
ok 44 - test/independent-timeouts.js
# isolated-conf-test.js
# TAP version 13
# one
ok 45 - should be equal
ok 46 - should be equal
# two
ok 47 - should be equal
ok 48 - should be equal
# tests 4
# pass  4
# ok
ok 49 - test/isolated-conf-test.js
# meta-test.js
# TAP version 13
# meta test
ok 50 - sanity check
ok 51 - not ok
ok 52 - total test count
ok 53 - tests passed
ok 54 - tests failed
ok 55 - ok is boolean
ok 56 - skip is number
ok 57 - results isa Results
ok 58 - test isa Test
ok 59 - test isa Harness
# tests 10
# pass  10
# ok
ok 60 - test/meta-test.js
# nested-async.js
# TAP version 13
# Harness async test support
ok 61 - sync child A
# sync child B
# async grandchild A
ok 62 - (unnamed assert)
# async grandchild B
ok 63 - (unnamed assert)
# async child
ok 64 - sync grandchild in async child A
# sync grandchild in async child B
ok 65 - (unnamed assert)
# tests 5
# pass  5
# ok
ok 66 - test/nested-async.js
# nested-test.js
# TAP version 13
# parent
ok 67 - p test
# subtest
ok 68 - ch test
# nested subtest
ok 69 - grch test
# another subtest
ok 70 - ch test 2
# tests 4
# pass  4
# ok
ok 71 - test/nested-test.js
# non-tap-output.js
# everything is fine
# there are no errors
# this output is not haiku.
# is 8 ok?
ok 72 - , 8 can stay.
# but: nevertheless, here we are
# this: is indented
# and: it
# might: ~
# be: yaml?
ok 73 - might be confusing
ok 74 - done now, exiting
ok 75 - test/non-tap-output.js
# not-executed.sh
# output-childtest-description.js
# /Users/isaacs/dev/js/tap/test/nested-tests-fixture.js
# TAP version 13
# nested tests, parent and child pass
ok 76 - outputs parent description
ok 77 - outputs child description
ok 78 - outputs parent description before parent result
ok 79 - outputs parent result before child description
ok 80 - outputs child description before child result
# tests 5
# pass  5
# ok
ok 81 - test/output-childtest-description.js
# result-trap.js
# TAP version 13
# trap result
ok 82 - should be equal
ok 83 - should be equal
# tests 2
# pass  2
# ok
ok 84 - test/result-trap.js
# segv.js
# TAP version 13
# setup
ok 85 - compiled seg faulter
# segv
ok 86 - should be equivalent
ok 87 - should be equivalent
ok 88 - should be equivalent
ok 89 - should be equivalent
ok 90 - should be equivalent
ok 91 - should be equal
# cleanup
ok 92 - cleaned up
# tests 8
# pass  8
# ok
ok 93 - test/segv.js
# simple-harness-test-with-plan.js
# TAP version 13
# trivial success
ok 94 - it works
# two tests
ok 95 - math should work
ok 96 - false should not be ok
# tests 3
# pass  3
# ok
ok 97 - test/simple-harness-test-with-plan.js
# simple-harness-test.js
# TAP version 13
# trivial success
ok 98 - it works
# two tests
ok 99 - math should work
ok 100 - false should not be ok
# tests 3
# pass  3
# ok
ok 101 - test/simple-harness-test.js
# test-assert-todo-skip.js
# TAP version 13
# not much
ok 102 - always passes # SKIP skip it good
ok 103 - false # SKIP always fails
ok 104 - bonus # TODO remove todo directive
ok 105 - expected # TODO implement a thing
ok 106 - always passes without explanation # SKIP
ok 107 - false without explanation # SKIP
ok 108 - bonus without explanation # TODO
ok 109 - expected without explanation # TODO
# tests 8
# skip  4
# todo  4
ok 110 - test/test-assert-todo-skip.js
# test-descriptions.js
# TAP version 13
# captures test descriptions
ok 111 - exit cleanly
ok 112 - captures SKIP description
ok 113 - skip summary is not from file
ok 114 - todo summary is not from file
not ok 115 - captures TODO description
  ---
  file: child_process.js
  line: 707
  column: 7
  stack:
    - |
      getCaller (/Users/isaacs/dev/js/tap/lib/tap-assert.js:439:17)
    - |
      Function.assert (/Users/isaacs/dev/js/tap/lib/tap-assert.js:21:16)
    - |
      Test._testAssert (/Users/isaacs/dev/js/tap/lib/tap-test.js:87:16)
    - |
      /Users/isaacs/dev/js/tap/test/test-descriptions.js:32:7
    - |
      ChildProcess.exithandler (child_process.js:707:7)
    - |
      emitTwo (events.js:87:13)
    - |
      ChildProcess.emit (events.js:169:7)
    - |
      maybeClose (child_process.js:984:16)
    - |
      Socket.<anonymous> (child_process.js:1153:11)
    - |
      emitOne (events.js:77:13)
  ...
Bail out! captures TODO description

`

exports[`test/parser-stringify.js TAP tap-tests.tap bail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "comment",
    "# buffer_compare.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# same buffers\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# not same buffers\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "should not be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 2\\n",
  ],
  Array [
    "comment",
    "# pass  2\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "test/buffer_compare.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# common.js\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "name": "just setup, nothing relevant",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "name": "test/common.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# consumer.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# basic.tap\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 6,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# indent.tap\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 7,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# missing.tap\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 8,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# skip-all.tap\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 9,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# yamlish.tap\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 10,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 5\\n",
  ],
  Array [
    "comment",
    "# pass  5\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 11,
      "name": "test/consumer.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# debug-test.js\\n",
  ],
  Array [
    "extra",
    "debug test\\n",
  ],
  Array [
    "extra",
    "t.plan=1\\n",
  ],
  Array [
    "extra",
    "'Debugger listening on port 5858\\\\n'\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# debug test\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 12,
      "name": "Should output debugger message",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 1\\n",
  ],
  Array [
    "comment",
    "# pass  1\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 13,
      "name": "test/debug-test.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# deep-strict.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# strictDeepEquals shouldn't care about key order\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 14,
      "name": "should be strictly equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# strictDeepEquals shouldn't care about key order recursively\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 15,
      "name": "should be strictly equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# strictDeepEquals shoudn't care about key order (but still might)\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 16,
      "name": "should be strictly equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 3\\n",
  ],
  Array [
    "comment",
    "# pass  3\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 17,
      "name": "test/deep-strict.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# deep.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# deepEquals shouldn't care about key order and types\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 18,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# deepEquals shouldn't care about key order recursively and types\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 19,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# deepEquals shoudn't care about key order (but still might) and types\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 20,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 3\\n",
  ],
  Array [
    "comment",
    "# pass  3\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 21,
      "name": "test/deep.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# executed.sh\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 22,
      "name": "File with executable bit should be executed",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 23,
      "name": "test/executed.sh",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# exit-code.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# exit code 1 when tap results show failure\\n",
  ],
  Array [
    "comment",
    "# test exits 0, has failures\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 24,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 25,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test exits 1, has failures\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 26,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 27,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test exits 1, has no failures\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 28,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 29,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# successes exit 0\\n",
  ],
  Array [
    "comment",
    "# test that does nothing, but exits 0\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 30,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 31,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test that succeeds, and exits 0\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 32,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 33,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 10\\n",
  ],
  Array [
    "comment",
    "# pass  10\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 34,
      "name": "test/exit-code.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# expose-gc-test.js\\n",
  ],
  Array [
    "extra",
    "gc test\\n",
  ],
  Array [
    "extra",
    "t.plan=1\\n",
  ],
  Array [
    "extra",
    "assert gc does not exist\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# gc test when the gc isn't there\\n",
  ],
  Array [
    "extra",
    "gc test\\n",
  ],
  Array [
    "extra",
    "t.plan=2\\n",
  ],
  Array [
    "extra",
    "gc test using --gc\\n",
  ],
  Array [
    "extra",
    "t.plan=1\\n",
  ],
  Array [
    "extra",
    "assert gc exists\\n",
  ],
  Array [
    "extra",
    "gc test using --expose-gc\\n",
  ],
  Array [
    "extra",
    "t.plan=1\\n",
  ],
  Array [
    "extra",
    "assert gc exists\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 35,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# gc test when the gc should be there\\n",
  ],
  Array [
    "comment",
    "# test for gc using --gc\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 36,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test for gc using --expose-gc\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 37,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# cleanup\\n",
  ],
  Array [
    "comment",
    "# tests 3\\n",
  ],
  Array [
    "comment",
    "# pass  3\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 38,
      "name": "test/expose-gc-test.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# global-harness-async.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# outer\\n",
  ],
  Array [
    "comment",
    "# inner 1\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 39,
      "name": "1-1",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# inner 2\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 40,
      "name": "2-1",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# inner 3\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 41,
      "name": "3-1",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 42,
      "name": "test/global-harness-async.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# independent-timeouts.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# finishes in time\\n",
  ],
  Array [
    "comment",
    "# finishes in time too\\n",
  ],
  Array [
    "comment",
    "# tests 0\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 43,
      "name": "test/independent-timeouts.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# isolated-conf-test.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# one\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 44,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 45,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# two\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 46,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 47,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 4\\n",
  ],
  Array [
    "comment",
    "# pass  4\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 48,
      "name": "test/isolated-conf-test.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# meta-test.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# meta test\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 49,
      "name": "sanity check",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 50,
      "name": "not ok",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 51,
      "name": "total test count",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 52,
      "name": "tests passed",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 53,
      "name": "tests failed",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 54,
      "name": "ok is boolean",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 55,
      "name": "skip is number",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 56,
      "name": "results isa Results",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 57,
      "name": "test isa Test",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 58,
      "name": "test isa Harness",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 10\\n",
  ],
  Array [
    "comment",
    "# pass  10\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 59,
      "name": "test/meta-test.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# nested-async.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# Harness async test support\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 60,
      "name": "sync child A",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# sync child B\\n",
  ],
  Array [
    "comment",
    "# async grandchild A\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 61,
      "name": "(unnamed assert)",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# async grandchild B\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 62,
      "name": "(unnamed assert)",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# async child\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 63,
      "name": "sync grandchild in async child A",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# sync grandchild in async child B\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 64,
      "name": "(unnamed assert)",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 5\\n",
  ],
  Array [
    "comment",
    "# pass  5\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 65,
      "name": "test/nested-async.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# nested-test.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# parent\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 66,
      "name": "p test",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# subtest\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 67,
      "name": "ch test",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# nested subtest\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 68,
      "name": "grch test",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# another subtest\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 69,
      "name": "ch test 2",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 4\\n",
  ],
  Array [
    "comment",
    "# pass  4\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 70,
      "name": "test/nested-test.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# non-tap-output.js\\n",
  ],
  Array [
    "comment",
    "# everything is fine\\n",
  ],
  Array [
    "comment",
    "# there are no errors\\n",
  ],
  Array [
    "comment",
    "# this output is not haiku.\\n",
  ],
  Array [
    "comment",
    "# is 8 ok?\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 71,
      "name": ", 8 can stay.",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# but: nevertheless, here we are\\n",
  ],
  Array [
    "comment",
    "# this: is indented\\n",
  ],
  Array [
    "comment",
    "# and: it\\n",
  ],
  Array [
    "comment",
    "# might: ~\\n",
  ],
  Array [
    "comment",
    "# be: yaml?\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 72,
      "name": "might be confusing",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 73,
      "name": "done now, exiting",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 74,
      "name": "test/non-tap-output.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# not-executed.sh\\n",
  ],
  Array [
    "comment",
    "# output-childtest-description.js\\n",
  ],
  Array [
    "comment",
    "# /Users/isaacs/dev/js/tap/test/nested-tests-fixture.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# nested tests, parent and child pass\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 75,
      "name": "outputs parent description",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 76,
      "name": "outputs child description",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 77,
      "name": "outputs parent description before parent result",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 78,
      "name": "outputs parent result before child description",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 79,
      "name": "outputs child description before child result",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 5\\n",
  ],
  Array [
    "comment",
    "# pass  5\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 80,
      "name": "test/output-childtest-description.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# result-trap.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# trap result\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 81,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 82,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 2\\n",
  ],
  Array [
    "comment",
    "# pass  2\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 83,
      "name": "test/result-trap.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# segv.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# setup\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 84,
      "name": "compiled seg faulter",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# segv\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 85,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 86,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 87,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 88,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 89,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 90,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# cleanup\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 91,
      "name": "cleaned up",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 8\\n",
  ],
  Array [
    "comment",
    "# pass  8\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 92,
      "name": "test/segv.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# simple-harness-test-with-plan.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# trivial success\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 93,
      "name": "it works",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# two tests\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 94,
      "name": "math should work",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 95,
      "name": "false should not be ok",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 3\\n",
  ],
  Array [
    "comment",
    "# pass  3\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 96,
      "name": "test/simple-harness-test-with-plan.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# simple-harness-test.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# trivial success\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 97,
      "name": "it works",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# two tests\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 98,
      "name": "math should work",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 99,
      "name": "false should not be ok",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 3\\n",
  ],
  Array [
    "comment",
    "# pass  3\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 100,
      "name": "test/simple-harness-test.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test-assert-todo-skip.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# not much\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 101,
      "name": "always passes",
      "ok": true,
      "skip": "skip it good",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 102,
      "name": "false",
      "ok": true,
      "skip": "always fails",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 103,
      "name": "bonus",
      "ok": true,
      "todo": "remove todo directive",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 104,
      "name": "expected",
      "ok": true,
      "todo": "implement a thing",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 105,
      "name": "always passes without explanation",
      "ok": true,
      "skip": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 106,
      "name": "false without explanation",
      "ok": true,
      "skip": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 107,
      "name": "bonus without explanation",
      "ok": true,
      "todo": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 108,
      "name": "expected without explanation",
      "ok": true,
      "todo": true,
    },
  ],
  Array [
    "comment",
    "# tests 8\\n",
  ],
  Array [
    "comment",
    "# skip  4\\n",
  ],
  Array [
    "comment",
    "# todo  4\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 109,
      "name": "test/test-assert-todo-skip.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test-descriptions.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# captures test descriptions\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 110,
      "name": "exit cleanly",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 111,
      "name": "captures SKIP description",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 112,
      "name": "skip summary is not from file",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 113,
      "name": "todo summary is not from file",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "diag": Object {
        "column": 7,
        "file": "child_process.js",
        "line": 707,
        "stack": Array [
          "getCaller (/Users/isaacs/dev/js/tap/lib/tap-assert.js:439:17)\\n",
          "Function.assert (/Users/isaacs/dev/js/tap/lib/tap-assert.js:21:16)\\n",
          "Test._testAssert (/Users/isaacs/dev/js/tap/lib/tap-test.js:87:16)\\n",
          "/Users/isaacs/dev/js/tap/test/test-descriptions.js:32:7\\n",
          "ChildProcess.exithandler (child_process.js:707:7)\\n",
          "emitTwo (events.js:87:13)\\n",
          "ChildProcess.emit (events.js:169:7)\\n",
          "maybeClose (child_process.js:984:16)\\n",
          "Socket.<anonymous> (child_process.js:1153:11)\\n",
          "emitOne (events.js:77:13)\\n",
        ],
      },
      "fullname": "",
      "id": 114,
      "name": "captures TODO description",
      "ok": false,
    },
  ],
  Array [
    "bailout",
    "captures TODO description",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": "captures TODO description",
      "count": 114,
      "fail": 1,
      "failures": Array [
        Result {
          "diag": Object {
            "column": 7,
            "file": "child_process.js",
            "line": 707,
            "stack": Array [
              "getCaller (/Users/isaacs/dev/js/tap/lib/tap-assert.js:439:17)\\n",
              "Function.assert (/Users/isaacs/dev/js/tap/lib/tap-assert.js:21:16)\\n",
              "Test._testAssert (/Users/isaacs/dev/js/tap/lib/tap-test.js:87:16)\\n",
              "/Users/isaacs/dev/js/tap/test/test-descriptions.js:32:7\\n",
              "ChildProcess.exithandler (child_process.js:707:7)\\n",
              "emitTwo (events.js:87:13)\\n",
              "ChildProcess.emit (events.js:169:7)\\n",
              "maybeClose (child_process.js:984:16)\\n",
              "Socket.<anonymous> (child_process.js:1153:11)\\n",
              "emitOne (events.js:77:13)\\n",
            ],
          },
          "fullname": "",
          "id": 114,
          "name": "captures TODO description",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 113,
      "plan": FinalPlan {
        "comment": "",
        "end": null,
        "skipAll": false,
        "skipReason": "",
        "start": null,
      },
      "skip": 4,
      "time": null,
      "todo": 4,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP tap-tests.tap bail > stringified 1`] = `
TAP version 13
# buffer_compare.js
# TAP version 13
# same buffers
ok 1 - should be equivalent
# not same buffers
ok 2 - should not be equivalent
# tests 2
# pass  2
# ok
ok 3 - test/buffer_compare.js
# common.js
ok 4 - just setup, nothing relevant
ok 5 - test/common.js
# consumer.js
# TAP version 13
# basic.tap
ok 6 - should be equivalent
# indent.tap
ok 7 - should be equivalent
# missing.tap
ok 8 - should be equivalent
# skip-all.tap
ok 9 - should be equivalent
# yamlish.tap
ok 10 - should be equivalent
# tests 5
# pass  5
# ok
ok 11 - test/consumer.js
# debug-test.js
debug test
t.plan=1
'Debugger listening on port 5858\\n'
# TAP version 13
# debug test
ok 12 - Should output debugger message
# tests 1
# pass  1
# ok
ok 13 - test/debug-test.js
# deep-strict.js
# TAP version 13
# strictDeepEquals shouldn't care about key order
ok 14 - should be strictly equal
# strictDeepEquals shouldn't care about key order recursively
ok 15 - should be strictly equal
# strictDeepEquals shoudn't care about key order (but still might)
ok 16 - should be strictly equal
# tests 3
# pass  3
# ok
ok 17 - test/deep-strict.js
# deep.js
# TAP version 13
# deepEquals shouldn't care about key order and types
ok 18 - should be equivalent
# deepEquals shouldn't care about key order recursively and types
ok 19 - should be equivalent
# deepEquals shoudn't care about key order (but still might) and types
ok 20 - should be equivalent
# tests 3
# pass  3
# ok
ok 21 - test/deep.js
# executed.sh
ok 22 - File with executable bit should be executed
ok 23 - test/executed.sh
# exit-code.js
# TAP version 13
# exit code 1 when tap results show failure
# test exits 0, has failures
ok 24 - should be equal
ok 25 - should be equal
# test exits 1, has failures
ok 26 - should be equal
ok 27 - should be equal
# test exits 1, has no failures
ok 28 - should be equal
ok 29 - should be equal
# successes exit 0
# test that does nothing, but exits 0
ok 30 - should be equal
ok 31 - should be equal
# test that succeeds, and exits 0
ok 32 - should be equal
ok 33 - should be equal
# tests 10
# pass  10
# ok
ok 34 - test/exit-code.js
# expose-gc-test.js
gc test
t.plan=1
assert gc does not exist
# TAP version 13
# gc test when the gc isn't there
gc test
t.plan=2
gc test using --gc
t.plan=1
assert gc exists
gc test using --expose-gc
t.plan=1
assert gc exists
ok 35 - should be equal
# gc test when the gc should be there
# test for gc using --gc
ok 36 - should be equal
# test for gc using --expose-gc
ok 37 - should be equal
# cleanup
# tests 3
# pass  3
# ok
ok 38 - test/expose-gc-test.js
# global-harness-async.js
# TAP version 13
# outer
# inner 1
ok 39 - 1-1
# inner 2
ok 40 - 2-1
# inner 3
ok 41 - 3-1
ok 42 - test/global-harness-async.js
# independent-timeouts.js
# TAP version 13
# finishes in time
# finishes in time too
# tests 0
# ok
ok 43 - test/independent-timeouts.js
# isolated-conf-test.js
# TAP version 13
# one
ok 44 - should be equal
ok 45 - should be equal
# two
ok 46 - should be equal
ok 47 - should be equal
# tests 4
# pass  4
# ok
ok 48 - test/isolated-conf-test.js
# meta-test.js
# TAP version 13
# meta test
ok 49 - sanity check
ok 50 - not ok
ok 51 - total test count
ok 52 - tests passed
ok 53 - tests failed
ok 54 - ok is boolean
ok 55 - skip is number
ok 56 - results isa Results
ok 57 - test isa Test
ok 58 - test isa Harness
# tests 10
# pass  10
# ok
ok 59 - test/meta-test.js
# nested-async.js
# TAP version 13
# Harness async test support
ok 60 - sync child A
# sync child B
# async grandchild A
ok 61 - (unnamed assert)
# async grandchild B
ok 62 - (unnamed assert)
# async child
ok 63 - sync grandchild in async child A
# sync grandchild in async child B
ok 64 - (unnamed assert)
# tests 5
# pass  5
# ok
ok 65 - test/nested-async.js
# nested-test.js
# TAP version 13
# parent
ok 66 - p test
# subtest
ok 67 - ch test
# nested subtest
ok 68 - grch test
# another subtest
ok 69 - ch test 2
# tests 4
# pass  4
# ok
ok 70 - test/nested-test.js
# non-tap-output.js
# everything is fine
# there are no errors
# this output is not haiku.
# is 8 ok?
ok 71 - , 8 can stay.
# but: nevertheless, here we are
# this: is indented
# and: it
# might: ~
# be: yaml?
ok 72 - might be confusing
ok 73 - done now, exiting
ok 74 - test/non-tap-output.js
# not-executed.sh
# output-childtest-description.js
# /Users/isaacs/dev/js/tap/test/nested-tests-fixture.js
# TAP version 13
# nested tests, parent and child pass
ok 75 - outputs parent description
ok 76 - outputs child description
ok 77 - outputs parent description before parent result
ok 78 - outputs parent result before child description
ok 79 - outputs child description before child result
# tests 5
# pass  5
# ok
ok 80 - test/output-childtest-description.js
# result-trap.js
# TAP version 13
# trap result
ok 81 - should be equal
ok 82 - should be equal
# tests 2
# pass  2
# ok
ok 83 - test/result-trap.js
# segv.js
# TAP version 13
# setup
ok 84 - compiled seg faulter
# segv
ok 85 - should be equivalent
ok 86 - should be equivalent
ok 87 - should be equivalent
ok 88 - should be equivalent
ok 89 - should be equivalent
ok 90 - should be equal
# cleanup
ok 91 - cleaned up
# tests 8
# pass  8
# ok
ok 92 - test/segv.js
# simple-harness-test-with-plan.js
# TAP version 13
# trivial success
ok 93 - it works
# two tests
ok 94 - math should work
ok 95 - false should not be ok
# tests 3
# pass  3
# ok
ok 96 - test/simple-harness-test-with-plan.js
# simple-harness-test.js
# TAP version 13
# trivial success
ok 97 - it works
# two tests
ok 98 - math should work
ok 99 - false should not be ok
# tests 3
# pass  3
# ok
ok 100 - test/simple-harness-test.js
# test-assert-todo-skip.js
# TAP version 13
# not much
ok 101 - always passes # SKIP skip it good
ok 102 - false # SKIP always fails
ok 103 - bonus # TODO remove todo directive
ok 104 - expected # TODO implement a thing
ok 105 - always passes without explanation # SKIP
ok 106 - false without explanation # SKIP
ok 107 - bonus without explanation # TODO
ok 108 - expected without explanation # TODO
# tests 8
# skip  4
# todo  4
ok 109 - test/test-assert-todo-skip.js
# test-descriptions.js
# TAP version 13
# captures test descriptions
ok 110 - exit cleanly
ok 111 - captures SKIP description
ok 112 - skip summary is not from file
ok 113 - todo summary is not from file
not ok 114 - captures TODO description
  ---
  file: child_process.js
  line: 707
  column: 7
  stack:
    - |
      getCaller (/Users/isaacs/dev/js/tap/lib/tap-assert.js:439:17)
    - |
      Function.assert (/Users/isaacs/dev/js/tap/lib/tap-assert.js:21:16)
    - |
      Test._testAssert (/Users/isaacs/dev/js/tap/lib/tap-test.js:87:16)
    - |
      /Users/isaacs/dev/js/tap/test/test-descriptions.js:32:7
    - |
      ChildProcess.exithandler (child_process.js:707:7)
    - |
      emitTwo (events.js:87:13)
    - |
      ChildProcess.emit (events.js:169:7)
    - |
      maybeClose (child_process.js:984:16)
    - |
      Socket.<anonymous> (child_process.js:1153:11)
    - |
      emitOne (events.js:77:13)
  ...
Bail out! captures TODO description

`

exports[`test/parser-stringify.js TAP tap-tests.tap bail > stringified flat 1`] = `
TAP version 13
# buffer_compare.js
# TAP version 13
# same buffers
ok 1 - should be equivalent
# not same buffers
ok 2 - should not be equivalent
# tests 2
# pass  2
# ok
ok 3 - test/buffer_compare.js
# common.js
ok 4 - just setup, nothing relevant
ok 5 - test/common.js
# consumer.js
# TAP version 13
# basic.tap
ok 6 - should be equivalent
# indent.tap
ok 7 - should be equivalent
# missing.tap
ok 8 - should be equivalent
# skip-all.tap
ok 9 - should be equivalent
# yamlish.tap
ok 10 - should be equivalent
# tests 5
# pass  5
# ok
ok 11 - test/consumer.js
# debug-test.js
debug test
t.plan=1
'Debugger listening on port 5858\\n'
# TAP version 13
# debug test
ok 12 - Should output debugger message
# tests 1
# pass  1
# ok
ok 13 - test/debug-test.js
# deep-strict.js
# TAP version 13
# strictDeepEquals shouldn't care about key order
ok 14 - should be strictly equal
# strictDeepEquals shouldn't care about key order recursively
ok 15 - should be strictly equal
# strictDeepEquals shoudn't care about key order (but still might)
ok 16 - should be strictly equal
# tests 3
# pass  3
# ok
ok 17 - test/deep-strict.js
# deep.js
# TAP version 13
# deepEquals shouldn't care about key order and types
ok 18 - should be equivalent
# deepEquals shouldn't care about key order recursively and types
ok 19 - should be equivalent
# deepEquals shoudn't care about key order (but still might) and types
ok 20 - should be equivalent
# tests 3
# pass  3
# ok
ok 21 - test/deep.js
# executed.sh
ok 22 - File with executable bit should be executed
ok 23 - test/executed.sh
# exit-code.js
# TAP version 13
# exit code 1 when tap results show failure
# test exits 0, has failures
ok 24 - should be equal
ok 25 - should be equal
# test exits 1, has failures
ok 26 - should be equal
ok 27 - should be equal
# test exits 1, has no failures
ok 28 - should be equal
ok 29 - should be equal
# successes exit 0
# test that does nothing, but exits 0
ok 30 - should be equal
ok 31 - should be equal
# test that succeeds, and exits 0
ok 32 - should be equal
ok 33 - should be equal
# tests 10
# pass  10
# ok
ok 34 - test/exit-code.js
# expose-gc-test.js
gc test
t.plan=1
assert gc does not exist
# TAP version 13
# gc test when the gc isn't there
gc test
t.plan=2
gc test using --gc
t.plan=1
assert gc exists
gc test using --expose-gc
t.plan=1
assert gc exists
ok 35 - should be equal
# gc test when the gc should be there
# test for gc using --gc
ok 36 - should be equal
# test for gc using --expose-gc
ok 37 - should be equal
# cleanup
# tests 3
# pass  3
# ok
ok 38 - test/expose-gc-test.js
# global-harness-async.js
# TAP version 13
# outer
# inner 1
ok 39 - 1-1
# inner 2
ok 40 - 2-1
# inner 3
ok 41 - 3-1
ok 42 - test/global-harness-async.js
# independent-timeouts.js
# TAP version 13
# finishes in time
# finishes in time too
# tests 0
# ok
ok 43 - test/independent-timeouts.js
# isolated-conf-test.js
# TAP version 13
# one
ok 44 - should be equal
ok 45 - should be equal
# two
ok 46 - should be equal
ok 47 - should be equal
# tests 4
# pass  4
# ok
ok 48 - test/isolated-conf-test.js
# meta-test.js
# TAP version 13
# meta test
ok 49 - sanity check
ok 50 - not ok
ok 51 - total test count
ok 52 - tests passed
ok 53 - tests failed
ok 54 - ok is boolean
ok 55 - skip is number
ok 56 - results isa Results
ok 57 - test isa Test
ok 58 - test isa Harness
# tests 10
# pass  10
# ok
ok 59 - test/meta-test.js
# nested-async.js
# TAP version 13
# Harness async test support
ok 60 - sync child A
# sync child B
# async grandchild A
ok 61 - (unnamed assert)
# async grandchild B
ok 62 - (unnamed assert)
# async child
ok 63 - sync grandchild in async child A
# sync grandchild in async child B
ok 64 - (unnamed assert)
# tests 5
# pass  5
# ok
ok 65 - test/nested-async.js
# nested-test.js
# TAP version 13
# parent
ok 66 - p test
# subtest
ok 67 - ch test
# nested subtest
ok 68 - grch test
# another subtest
ok 69 - ch test 2
# tests 4
# pass  4
# ok
ok 70 - test/nested-test.js
# non-tap-output.js
# everything is fine
# there are no errors
# this output is not haiku.
# is 8 ok?
ok 71 - , 8 can stay.
# but: nevertheless, here we are
# this: is indented
# and: it
# might: ~
# be: yaml?
ok 72 - might be confusing
ok 73 - done now, exiting
ok 74 - test/non-tap-output.js
# not-executed.sh
# output-childtest-description.js
# /Users/isaacs/dev/js/tap/test/nested-tests-fixture.js
# TAP version 13
# nested tests, parent and child pass
ok 75 - outputs parent description
ok 76 - outputs child description
ok 77 - outputs parent description before parent result
ok 78 - outputs parent result before child description
ok 79 - outputs child description before child result
# tests 5
# pass  5
# ok
ok 80 - test/output-childtest-description.js
# result-trap.js
# TAP version 13
# trap result
ok 81 - should be equal
ok 82 - should be equal
# tests 2
# pass  2
# ok
ok 83 - test/result-trap.js
# segv.js
# TAP version 13
# setup
ok 84 - compiled seg faulter
# segv
ok 85 - should be equivalent
ok 86 - should be equivalent
ok 87 - should be equivalent
ok 88 - should be equivalent
ok 89 - should be equivalent
ok 90 - should be equal
# cleanup
ok 91 - cleaned up
# tests 8
# pass  8
# ok
ok 92 - test/segv.js
# simple-harness-test-with-plan.js
# TAP version 13
# trivial success
ok 93 - it works
# two tests
ok 94 - math should work
ok 95 - false should not be ok
# tests 3
# pass  3
# ok
ok 96 - test/simple-harness-test-with-plan.js
# simple-harness-test.js
# TAP version 13
# trivial success
ok 97 - it works
# two tests
ok 98 - math should work
ok 99 - false should not be ok
# tests 3
# pass  3
# ok
ok 100 - test/simple-harness-test.js
# test-assert-todo-skip.js
# TAP version 13
# not much
ok 101 - always passes # SKIP skip it good
ok 102 - false # SKIP always fails
ok 103 - bonus # TODO remove todo directive
ok 104 - expected # TODO implement a thing
ok 105 - always passes without explanation # SKIP
ok 106 - false without explanation # SKIP
ok 107 - bonus without explanation # TODO
ok 108 - expected without explanation # TODO
# tests 8
# skip  4
# todo  4
ok 109 - test/test-assert-todo-skip.js
# test-descriptions.js
# TAP version 13
# captures test descriptions
ok 110 - exit cleanly
ok 111 - captures SKIP description
ok 112 - skip summary is not from file
ok 113 - todo summary is not from file
not ok 114 - captures TODO description
  ---
  file: child_process.js
  line: 707
  column: 7
  stack:
    - |
      getCaller (/Users/isaacs/dev/js/tap/lib/tap-assert.js:439:17)
    - |
      Function.assert (/Users/isaacs/dev/js/tap/lib/tap-assert.js:21:16)
    - |
      Test._testAssert (/Users/isaacs/dev/js/tap/lib/tap-test.js:87:16)
    - |
      /Users/isaacs/dev/js/tap/test/test-descriptions.js:32:7
    - |
      ChildProcess.exithandler (child_process.js:707:7)
    - |
      emitTwo (events.js:87:13)
    - |
      ChildProcess.emit (events.js:169:7)
    - |
      maybeClose (child_process.js:984:16)
    - |
      Socket.<anonymous> (child_process.js:1153:11)
    - |
      emitOne (events.js:77:13)
  ...
Bail out! captures TODO description

`

exports[`test/parser-stringify.js TAP tap-tests.tap default settings > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "comment",
    "# buffer_compare.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# same buffers\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# not same buffers\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "should not be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 2\\n",
  ],
  Array [
    "comment",
    "# pass  2\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "test/buffer_compare.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# common.js\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "name": "just setup, nothing relevant",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "name": "test/common.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# consumer.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# basic.tap\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 6,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# indent.tap\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 7,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# missing.tap\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 8,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# skip-all.tap\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 9,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# yamlish.tap\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 10,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 5\\n",
  ],
  Array [
    "comment",
    "# pass  5\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 11,
      "name": "test/consumer.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# debug-test.js\\n",
  ],
  Array [
    "extra",
    "debug test\\n",
  ],
  Array [
    "extra",
    "t.plan=1\\n",
  ],
  Array [
    "extra",
    "'Debugger listening on port 5858\\\\n'\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# debug test\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 12,
      "name": "Should output debugger message",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 1\\n",
  ],
  Array [
    "comment",
    "# pass  1\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 13,
      "name": "test/debug-test.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# deep-strict.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# strictDeepEquals shouldn't care about key order\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 14,
      "name": "should be strictly equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# strictDeepEquals shouldn't care about key order recursively\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 15,
      "name": "should be strictly equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# strictDeepEquals shoudn't care about key order (but still might)\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 16,
      "name": "should be strictly equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 3\\n",
  ],
  Array [
    "comment",
    "# pass  3\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 17,
      "name": "test/deep-strict.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# deep.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# deepEquals shouldn't care about key order and types\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 18,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# deepEquals shouldn't care about key order recursively and types\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 19,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# deepEquals shoudn't care about key order (but still might) and types\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 20,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 3\\n",
  ],
  Array [
    "comment",
    "# pass  3\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 21,
      "name": "test/deep.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# executed.sh\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 22,
      "name": "File with executable bit should be executed",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 23,
      "name": "test/executed.sh",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# exit-code.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# exit code 1 when tap results show failure\\n",
  ],
  Array [
    "comment",
    "# test exits 0, has failures\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 24,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 25,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test exits 1, has failures\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 26,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 27,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test exits 1, has no failures\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 28,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 29,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# successes exit 0\\n",
  ],
  Array [
    "comment",
    "# test that does nothing, but exits 0\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 30,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 31,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test that succeeds, and exits 0\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 32,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 33,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 10\\n",
  ],
  Array [
    "comment",
    "# pass  10\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 34,
      "name": "test/exit-code.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# expose-gc-test.js\\n",
  ],
  Array [
    "extra",
    "gc test\\n",
  ],
  Array [
    "extra",
    "t.plan=1\\n",
  ],
  Array [
    "extra",
    "assert gc does not exist\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# gc test when the gc isn't there\\n",
  ],
  Array [
    "extra",
    "gc test\\n",
  ],
  Array [
    "extra",
    "t.plan=2\\n",
  ],
  Array [
    "extra",
    "gc test using --gc\\n",
  ],
  Array [
    "extra",
    "t.plan=1\\n",
  ],
  Array [
    "extra",
    "assert gc exists\\n",
  ],
  Array [
    "extra",
    "gc test using --expose-gc\\n",
  ],
  Array [
    "extra",
    "t.plan=1\\n",
  ],
  Array [
    "extra",
    "assert gc exists\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 35,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# gc test when the gc should be there\\n",
  ],
  Array [
    "comment",
    "# test for gc using --gc\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 36,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test for gc using --expose-gc\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 37,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# cleanup\\n",
  ],
  Array [
    "comment",
    "# tests 3\\n",
  ],
  Array [
    "comment",
    "# pass  3\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 38,
      "name": "test/expose-gc-test.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# global-harness-async.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# outer\\n",
  ],
  Array [
    "comment",
    "# inner 1\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 39,
      "name": "1-1",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# inner 2\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 40,
      "name": "2-1",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# inner 3\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 41,
      "name": "3-1",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 42,
      "name": "test/global-harness-async.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# independent-timeouts.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# finishes in time\\n",
  ],
  Array [
    "comment",
    "# finishes in time too\\n",
  ],
  Array [
    "comment",
    "# tests 0\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 43,
      "name": "test/independent-timeouts.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# isolated-conf-test.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# one\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 44,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 45,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# two\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 46,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 47,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 4\\n",
  ],
  Array [
    "comment",
    "# pass  4\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 48,
      "name": "test/isolated-conf-test.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# meta-test.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# meta test\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 49,
      "name": "sanity check",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 50,
      "name": "not ok",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 51,
      "name": "total test count",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 52,
      "name": "tests passed",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 53,
      "name": "tests failed",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 54,
      "name": "ok is boolean",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 55,
      "name": "skip is number",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 56,
      "name": "results isa Results",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 57,
      "name": "test isa Test",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 58,
      "name": "test isa Harness",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 10\\n",
  ],
  Array [
    "comment",
    "# pass  10\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 59,
      "name": "test/meta-test.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# nested-async.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# Harness async test support\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 60,
      "name": "sync child A",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# sync child B\\n",
  ],
  Array [
    "comment",
    "# async grandchild A\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 61,
      "name": "(unnamed assert)",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# async grandchild B\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 62,
      "name": "(unnamed assert)",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# async child\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 63,
      "name": "sync grandchild in async child A",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# sync grandchild in async child B\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 64,
      "name": "(unnamed assert)",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 5\\n",
  ],
  Array [
    "comment",
    "# pass  5\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 65,
      "name": "test/nested-async.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# nested-test.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# parent\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 66,
      "name": "p test",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# subtest\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 67,
      "name": "ch test",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# nested subtest\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 68,
      "name": "grch test",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# another subtest\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 69,
      "name": "ch test 2",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 4\\n",
  ],
  Array [
    "comment",
    "# pass  4\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 70,
      "name": "test/nested-test.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# non-tap-output.js\\n",
  ],
  Array [
    "comment",
    "# everything is fine\\n",
  ],
  Array [
    "comment",
    "# there are no errors\\n",
  ],
  Array [
    "comment",
    "# this output is not haiku.\\n",
  ],
  Array [
    "comment",
    "# is 8 ok?\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 71,
      "name": ", 8 can stay.",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# but: nevertheless, here we are\\n",
  ],
  Array [
    "comment",
    "# this: is indented\\n",
  ],
  Array [
    "comment",
    "# and: it\\n",
  ],
  Array [
    "comment",
    "# might: ~\\n",
  ],
  Array [
    "comment",
    "# be: yaml?\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 72,
      "name": "might be confusing",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 73,
      "name": "done now, exiting",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 74,
      "name": "test/non-tap-output.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# not-executed.sh\\n",
  ],
  Array [
    "comment",
    "# output-childtest-description.js\\n",
  ],
  Array [
    "comment",
    "# /Users/isaacs/dev/js/tap/test/nested-tests-fixture.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# nested tests, parent and child pass\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 75,
      "name": "outputs parent description",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 76,
      "name": "outputs child description",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 77,
      "name": "outputs parent description before parent result",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 78,
      "name": "outputs parent result before child description",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 79,
      "name": "outputs child description before child result",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 5\\n",
  ],
  Array [
    "comment",
    "# pass  5\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 80,
      "name": "test/output-childtest-description.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# result-trap.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# trap result\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 81,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 82,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 2\\n",
  ],
  Array [
    "comment",
    "# pass  2\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 83,
      "name": "test/result-trap.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# segv.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# setup\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 84,
      "name": "compiled seg faulter",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# segv\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 85,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 86,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 87,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 88,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 89,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 90,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# cleanup\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 91,
      "name": "cleaned up",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 8\\n",
  ],
  Array [
    "comment",
    "# pass  8\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 92,
      "name": "test/segv.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# simple-harness-test-with-plan.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# trivial success\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 93,
      "name": "it works",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# two tests\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 94,
      "name": "math should work",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 95,
      "name": "false should not be ok",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 3\\n",
  ],
  Array [
    "comment",
    "# pass  3\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 96,
      "name": "test/simple-harness-test-with-plan.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# simple-harness-test.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# trivial success\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 97,
      "name": "it works",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# two tests\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 98,
      "name": "math should work",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 99,
      "name": "false should not be ok",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 3\\n",
  ],
  Array [
    "comment",
    "# pass  3\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 100,
      "name": "test/simple-harness-test.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test-assert-todo-skip.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# not much\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 101,
      "name": "always passes",
      "ok": true,
      "skip": "skip it good",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 102,
      "name": "false",
      "ok": true,
      "skip": "always fails",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 103,
      "name": "bonus",
      "ok": true,
      "todo": "remove todo directive",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 104,
      "name": "expected",
      "ok": true,
      "todo": "implement a thing",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 105,
      "name": "always passes without explanation",
      "ok": true,
      "skip": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 106,
      "name": "false without explanation",
      "ok": true,
      "skip": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 107,
      "name": "bonus without explanation",
      "ok": true,
      "todo": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 108,
      "name": "expected without explanation",
      "ok": true,
      "todo": true,
    },
  ],
  Array [
    "comment",
    "# tests 8\\n",
  ],
  Array [
    "comment",
    "# skip  4\\n",
  ],
  Array [
    "comment",
    "# todo  4\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 109,
      "name": "test/test-assert-todo-skip.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test-descriptions.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# captures test descriptions\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 110,
      "name": "exit cleanly",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 111,
      "name": "captures SKIP description",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 112,
      "name": "skip summary is not from file",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 113,
      "name": "todo summary is not from file",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "diag": Object {
        "column": 7,
        "file": "child_process.js",
        "line": 707,
        "stack": Array [
          "getCaller (/Users/isaacs/dev/js/tap/lib/tap-assert.js:439:17)\\n",
          "Function.assert (/Users/isaacs/dev/js/tap/lib/tap-assert.js:21:16)\\n",
          "Test._testAssert (/Users/isaacs/dev/js/tap/lib/tap-test.js:87:16)\\n",
          "/Users/isaacs/dev/js/tap/test/test-descriptions.js:32:7\\n",
          "ChildProcess.exithandler (child_process.js:707:7)\\n",
          "emitTwo (events.js:87:13)\\n",
          "ChildProcess.emit (events.js:169:7)\\n",
          "maybeClose (child_process.js:984:16)\\n",
          "Socket.<anonymous> (child_process.js:1153:11)\\n",
          "emitOne (events.js:77:13)\\n",
        ],
      },
      "fullname": "",
      "id": 114,
      "name": "captures TODO description",
      "ok": false,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 115,
      "name": "exit cleanly",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 116,
      "name": "captures SKIP description",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 117,
      "name": "skip summary is not in TAP output",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 118,
      "name": "todo summary is not in TAP output",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "diag": Object {
        "column": 7,
        "file": "child_process.js",
        "line": 707,
        "stack": Array [
          "getCaller (/Users/isaacs/dev/js/tap/lib/tap-assert.js:439:17)\\n",
          "Function.assert (/Users/isaacs/dev/js/tap/lib/tap-assert.js:21:16)\\n",
          "Test._testAssert (/Users/isaacs/dev/js/tap/lib/tap-test.js:87:16)\\n",
          "/Users/isaacs/dev/js/tap/test/test-descriptions.js:18:7\\n",
          "ChildProcess.exithandler (child_process.js:707:7)\\n",
          "emitTwo (events.js:87:13)\\n",
          "ChildProcess.emit (events.js:169:7)\\n",
          "maybeClose (child_process.js:984:16)\\n",
          "Process.ChildProcess._handle.onexit (child_process.js:1057:5)\\n",
        ],
      },
      "fullname": "",
      "id": 119,
      "name": "captures TODO description",
      "ok": false,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 120,
      "name": "exit cleanly",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "diag": Object {
        "column": 7,
        "file": "child_process.js",
        "line": 707,
        "stack": Array [
          "getCaller (/Users/isaacs/dev/js/tap/lib/tap-assert.js:439:17)\\n",
          "Function.assert (/Users/isaacs/dev/js/tap/lib/tap-assert.js:21:16)\\n",
          "Test._testAssert (/Users/isaacs/dev/js/tap/lib/tap-test.js:87:16)\\n",
          "/Users/isaacs/dev/js/tap/test/test-descriptions.js:23:7\\n",
          "ChildProcess.exithandler (child_process.js:707:7)\\n",
          "emitTwo (events.js:87:13)\\n",
          "ChildProcess.emit (events.js:169:7)\\n",
          "maybeClose (child_process.js:984:16)\\n",
          "Process.ChildProcess._handle.onexit (child_process.js:1057:5)\\n",
        ],
      },
      "fullname": "",
      "id": 121,
      "name": "summarizes skipped count",
      "ok": false,
    },
  ],
  Array [
    "assert",
    Result {
      "diag": Object {
        "column": 7,
        "file": "child_process.js",
        "line": 707,
        "stack": Array [
          "getCaller (/Users/isaacs/dev/js/tap/lib/tap-assert.js:439:17)\\n",
          "Function.assert (/Users/isaacs/dev/js/tap/lib/tap-assert.js:21:16)\\n",
          "Test._testAssert (/Users/isaacs/dev/js/tap/lib/tap-test.js:87:16)\\n",
          "/Users/isaacs/dev/js/tap/test/test-descriptions.js:24:7\\n",
          "ChildProcess.exithandler (child_process.js:707:7)\\n",
          "emitTwo (events.js:87:13)\\n",
          "ChildProcess.emit (events.js:169:7)\\n",
          "maybeClose (child_process.js:984:16)\\n",
          "Process.ChildProcess._handle.onexit (child_process.js:1057:5)\\n",
        ],
      },
      "fullname": "",
      "id": 122,
      "name": "summarizes todo count",
      "ok": false,
    },
  ],
  Array [
    "comment",
    "# tests 13\\n",
  ],
  Array [
    "comment",
    "# pass  9\\n",
  ],
  Array [
    "comment",
    "# fail  4\\n",
  ],
  Array [
    "assert",
    Result {
      "diag": Object {
        "command": "/usr/local/bin/iojs test-descriptions.js",
        "exit": 1,
      },
      "fullname": "",
      "id": 123,
      "name": "test/test-descriptions.js",
      "ok": false,
    },
  ],
  Array [
    "comment",
    "# test-directives.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# captures test descriptions\\n",
  ],
  Array [
    "comment",
    "# raw TAP > TAP consumer > TAP producer\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 124,
      "name": "overall result is PASS",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 125,
      "name": "captures ok SKIP",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 126,
      "name": "captures not ok SKIP",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 127,
      "name": "skip summary not in TAP output",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 128,
      "name": "captures ok TODO",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 129,
      "name": "captures not ok TODO",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 130,
      "name": "todo summary is not in TAP output",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 131,
      "name": "no ugly \\"undefined\\" in output",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# raw TAP > TAP consumer > summary\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 132,
      "name": "overall result is PASS",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 133,
      "name": "no SKIP in summary",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 134,
      "name": "skip summary is not in TAP output",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 135,
      "name": "no TODO in summary",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 136,
      "name": "todo summary is not in TAP output",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 137,
      "name": "no ugly \\"undefined\\" in output",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# TAP producer via require(\\"tap\\")\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 138,
      "name": "overall result is PASS",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 139,
      "name": "captures ok SKIP",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 140,
      "name": "captures not ok SKIP",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 141,
      "name": "skip summary not in TAP output",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 142,
      "name": "captures ok TODO",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 143,
      "name": "captures not ok TODO",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 144,
      "name": "todo summary is not in TAP output",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 145,
      "name": "no ugly \\"undefined\\" in output",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 22\\n",
  ],
  Array [
    "comment",
    "# pass  22\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 146,
      "name": "test/test-directives.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test-skip.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 147,
      "name": "does not count as failure",
      "ok": true,
      "skip": true,
    },
  ],
  Array [
    "comment",
    "# tests 1\\n",
  ],
  Array [
    "comment",
    "# skip  1\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 148,
      "name": "test/test-skip.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test-test.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# testing the test object\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 149,
      "name": "test object should be instanceof Test",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 150,
      "name": "test object should be instanceof Harness",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 151,
      "name": "test._Test should be the Test class",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 152,
      "name": "should have isNotDeepEqual method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 153,
      "name": "isNotDeepEqual method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 154,
      "name": "should have equals method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 155,
      "name": "equals method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 156,
      "name": "should have inequivalent method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 157,
      "name": "inequivalent method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 158,
      "name": "should have threw method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 159,
      "name": "threw method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 160,
      "name": "should have strictEqual method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 161,
      "name": "strictEqual method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 162,
      "name": "should have emit method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 163,
      "name": "emit method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 164,
      "name": "should have fail method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 165,
      "name": "fail method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 166,
      "name": "should have strictEquals method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 167,
      "name": "strictEquals method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 168,
      "name": "should have notLike method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 169,
      "name": "notLike method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 170,
      "name": "should have dissimilar method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 171,
      "name": "dissimilar method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 172,
      "name": "should have true method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 173,
      "name": "true method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 174,
      "name": "should have assert method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 175,
      "name": "assert method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 176,
      "name": "should have is method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 177,
      "name": "is method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 178,
      "name": "should have ok method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 179,
      "name": "ok method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 180,
      "name": "should have isEqual method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 181,
      "name": "isEqual method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 182,
      "name": "should have isDeeply method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 183,
      "name": "isDeeply method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 184,
      "name": "should have deepEqual method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 185,
      "name": "deepEqual method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 186,
      "name": "should have deepEquals method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 187,
      "name": "deepEquals method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 188,
      "name": "should have pass method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 189,
      "name": "pass method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 190,
      "name": "should have length method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 191,
      "name": "length method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 192,
      "name": "should have skip method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 193,
      "name": "skip method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 194,
      "name": "should have isNotEqual method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 195,
      "name": "isNotEqual method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 196,
      "name": "should have looseEquals method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 197,
      "name": "looseEquals method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 198,
      "name": "should have false method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 199,
      "name": "false method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 200,
      "name": "should have notDeeply method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 201,
      "name": "notDeeply method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 202,
      "name": "should have ifErr method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 203,
      "name": "ifErr method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 204,
      "name": "should have hasFields method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 205,
      "name": "hasFields method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 206,
      "name": "should have isNotDeeply method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 207,
      "name": "isNotDeeply method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 208,
      "name": "should have like method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 209,
      "name": "like method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 210,
      "name": "should have similar method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 211,
      "name": "similar method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 212,
      "name": "should have notOk method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 213,
      "name": "notOk method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 214,
      "name": "should have isDissimilar method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 215,
      "name": "isDissimilar method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 216,
      "name": "should have isEquivalent method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 217,
      "name": "isEquivalent method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 218,
      "name": "should have doesNotEqual method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 219,
      "name": "doesNotEqual method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 220,
      "name": "should have isSimilar method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 221,
      "name": "isSimilar method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 222,
      "name": "should have notDeepEqual method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 223,
      "name": "notDeepEqual method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 224,
      "name": "should have type method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 225,
      "name": "type method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 226,
      "name": "should have notok method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 227,
      "name": "notok method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 228,
      "name": "should have isInequivalent method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 229,
      "name": "isInequivalent method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 230,
      "name": "should have isNot method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 231,
      "name": "isNot method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 232,
      "name": "should have same method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 233,
      "name": "same method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 234,
      "name": "should have isInequal method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 235,
      "name": "isInequal method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 236,
      "name": "should have _endNice method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 237,
      "name": "_endNice method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 238,
      "name": "should have ifError method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 239,
      "name": "ifError method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 240,
      "name": "should have iferror method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 241,
      "name": "iferror method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 242,
      "name": "should have clear method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 243,
      "name": "clear method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 244,
      "name": "should have has method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 245,
      "name": "has method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 246,
      "name": "should have not method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 247,
      "name": "not method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 248,
      "name": "should have timeout method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 249,
      "name": "timeout method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 250,
      "name": "should have notSimilar method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 251,
      "name": "notSimilar method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 252,
      "name": "should have isUnlike method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 253,
      "name": "isUnlike method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 254,
      "name": "should have notEquals method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 255,
      "name": "notEquals method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 256,
      "name": "should have unsimilar method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 257,
      "name": "unsimilar method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 258,
      "name": "should have result method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 259,
      "name": "result method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 260,
      "name": "should have doesNotThrow method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 261,
      "name": "doesNotThrow method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 262,
      "name": "should have error method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 263,
      "name": "error method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 264,
      "name": "should have constructor method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 265,
      "name": "constructor method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 266,
      "name": "should have notEqual method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 267,
      "name": "notEqual method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 268,
      "name": "should have throws method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 269,
      "name": "throws method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 270,
      "name": "should have isLike method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 271,
      "name": "isLike method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 272,
      "name": "should have isNotSimilar method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 273,
      "name": "isNotSimilar method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 274,
      "name": "should have isNotEquivalent method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 275,
      "name": "isNotEquivalent method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 276,
      "name": "should have inequal method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 277,
      "name": "inequal method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 278,
      "name": "should have notEquivalent method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 279,
      "name": "notEquivalent method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 280,
      "name": "should have isNotLike method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 281,
      "name": "isNotLike method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 282,
      "name": "should have equivalent method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 283,
      "name": "equivalent method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 284,
      "name": "should have looseEqual method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 285,
      "name": "looseEqual method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 286,
      "name": "should have equal method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 287,
      "name": "equal method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 288,
      "name": "should have unlike method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 289,
      "name": "unlike method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 290,
      "name": "should have doesNotHave method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 291,
      "name": "doesNotHave method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 292,
      "name": "should have comment method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 293,
      "name": "comment method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 294,
      "name": "should have isa method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 295,
      "name": "isa method should be a function",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 147\\n",
  ],
  Array [
    "comment",
    "# pass  147\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 296,
      "name": "test/test-test.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# timeout.js\\n",
  ],
  Array [
    "extra",
    "timeout test\\n",
  ],
  Array [
    "extra",
    "t.plan=2\\n",
  ],
  Array [
    "extra",
    "a assert\\n",
  ],
  Array [
    "extra",
    "b assert\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# timeout test with plan only\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 297,
      "name": "a",
      "ok": true,
    },
  ],
  Array [
    "extra",
    "timeout test\\n",
  ],
  Array [
    "extra",
    "t.plan=2\\n",
  ],
  Array [
    "extra",
    "a assert\\n",
  ],
  Array [
    "extra",
    "b assert\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 298,
      "name": "b",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# timeout test with plan and end\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 299,
      "name": "a",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 300,
      "name": "b",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 4\\n",
  ],
  Array [
    "comment",
    "# pass  4\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 301,
      "name": "test/timeout.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# trivial-success.js\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 302,
      "name": "test/trivial-success.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# undefined_indented.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# consume yaml\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 303,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 1\\n",
  ],
  Array [
    "comment",
    "# pass  1\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 304,
      "name": "test/undefined_indented.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# valid-command.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# valid command\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 305,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 306,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 307,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 308,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 309,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 310,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 6\\n",
  ],
  Array [
    "comment",
    "# pass  6\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 311,
      "name": "test/valid-command.js",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 311,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# tests 311\\n",
  ],
  Array [
    "comment",
    "# pass  297\\n",
  ],
  Array [
    "comment",
    "# fail  5\\n",
  ],
  Array [
    "comment",
    "# skip  5\\n",
  ],
  Array [
    "comment",
    "# todo  4\\n",
  ],
  Array [
    "comment",
    "# failed 5 of 311 tests\\n",
  ],
  Array [
    "comment",
    "# todo: 4\\n",
  ],
  Array [
    "comment",
    "# skip: 5\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 311,
      "fail": 5,
      "failures": Array [
        Result {
          "diag": Object {
            "column": 7,
            "file": "child_process.js",
            "line": 707,
            "stack": Array [
              "getCaller (/Users/isaacs/dev/js/tap/lib/tap-assert.js:439:17)\\n",
              "Function.assert (/Users/isaacs/dev/js/tap/lib/tap-assert.js:21:16)\\n",
              "Test._testAssert (/Users/isaacs/dev/js/tap/lib/tap-test.js:87:16)\\n",
              "/Users/isaacs/dev/js/tap/test/test-descriptions.js:32:7\\n",
              "ChildProcess.exithandler (child_process.js:707:7)\\n",
              "emitTwo (events.js:87:13)\\n",
              "ChildProcess.emit (events.js:169:7)\\n",
              "maybeClose (child_process.js:984:16)\\n",
              "Socket.<anonymous> (child_process.js:1153:11)\\n",
              "emitOne (events.js:77:13)\\n",
            ],
          },
          "fullname": "",
          "id": 114,
          "name": "captures TODO description",
          "ok": false,
        },
        Result {
          "diag": Object {
            "column": 7,
            "file": "child_process.js",
            "line": 707,
            "stack": Array [
              "getCaller (/Users/isaacs/dev/js/tap/lib/tap-assert.js:439:17)\\n",
              "Function.assert (/Users/isaacs/dev/js/tap/lib/tap-assert.js:21:16)\\n",
              "Test._testAssert (/Users/isaacs/dev/js/tap/lib/tap-test.js:87:16)\\n",
              "/Users/isaacs/dev/js/tap/test/test-descriptions.js:18:7\\n",
              "ChildProcess.exithandler (child_process.js:707:7)\\n",
              "emitTwo (events.js:87:13)\\n",
              "ChildProcess.emit (events.js:169:7)\\n",
              "maybeClose (child_process.js:984:16)\\n",
              "Process.ChildProcess._handle.onexit (child_process.js:1057:5)\\n",
            ],
          },
          "fullname": "",
          "id": 119,
          "name": "captures TODO description",
          "ok": false,
        },
        Result {
          "diag": Object {
            "column": 7,
            "file": "child_process.js",
            "line": 707,
            "stack": Array [
              "getCaller (/Users/isaacs/dev/js/tap/lib/tap-assert.js:439:17)\\n",
              "Function.assert (/Users/isaacs/dev/js/tap/lib/tap-assert.js:21:16)\\n",
              "Test._testAssert (/Users/isaacs/dev/js/tap/lib/tap-test.js:87:16)\\n",
              "/Users/isaacs/dev/js/tap/test/test-descriptions.js:23:7\\n",
              "ChildProcess.exithandler (child_process.js:707:7)\\n",
              "emitTwo (events.js:87:13)\\n",
              "ChildProcess.emit (events.js:169:7)\\n",
              "maybeClose (child_process.js:984:16)\\n",
              "Process.ChildProcess._handle.onexit (child_process.js:1057:5)\\n",
            ],
          },
          "fullname": "",
          "id": 121,
          "name": "summarizes skipped count",
          "ok": false,
        },
        Result {
          "diag": Object {
            "column": 7,
            "file": "child_process.js",
            "line": 707,
            "stack": Array [
              "getCaller (/Users/isaacs/dev/js/tap/lib/tap-assert.js:439:17)\\n",
              "Function.assert (/Users/isaacs/dev/js/tap/lib/tap-assert.js:21:16)\\n",
              "Test._testAssert (/Users/isaacs/dev/js/tap/lib/tap-test.js:87:16)\\n",
              "/Users/isaacs/dev/js/tap/test/test-descriptions.js:24:7\\n",
              "ChildProcess.exithandler (child_process.js:707:7)\\n",
              "emitTwo (events.js:87:13)\\n",
              "ChildProcess.emit (events.js:169:7)\\n",
              "maybeClose (child_process.js:984:16)\\n",
              "Process.ChildProcess._handle.onexit (child_process.js:1057:5)\\n",
            ],
          },
          "fullname": "",
          "id": 122,
          "name": "summarizes todo count",
          "ok": false,
        },
        Result {
          "diag": Object {
            "command": "/usr/local/bin/iojs test-descriptions.js",
            "exit": 1,
          },
          "fullname": "",
          "id": 123,
          "name": "test/test-descriptions.js",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 306,
      "plan": FinalPlan {
        "comment": "",
        "end": 311,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 5,
      "time": null,
      "todo": 4,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP tap-tests.tap default settings > stringified 1`] = `
TAP version 13
# buffer_compare.js
# TAP version 13
# same buffers
ok 1 - should be equivalent
# not same buffers
ok 2 - should not be equivalent
# tests 2
# pass  2
# ok
ok 3 - test/buffer_compare.js
# common.js
ok 4 - just setup, nothing relevant
ok 5 - test/common.js
# consumer.js
# TAP version 13
# basic.tap
ok 6 - should be equivalent
# indent.tap
ok 7 - should be equivalent
# missing.tap
ok 8 - should be equivalent
# skip-all.tap
ok 9 - should be equivalent
# yamlish.tap
ok 10 - should be equivalent
# tests 5
# pass  5
# ok
ok 11 - test/consumer.js
# debug-test.js
debug test
t.plan=1
'Debugger listening on port 5858\\n'
# TAP version 13
# debug test
ok 12 - Should output debugger message
# tests 1
# pass  1
# ok
ok 13 - test/debug-test.js
# deep-strict.js
# TAP version 13
# strictDeepEquals shouldn't care about key order
ok 14 - should be strictly equal
# strictDeepEquals shouldn't care about key order recursively
ok 15 - should be strictly equal
# strictDeepEquals shoudn't care about key order (but still might)
ok 16 - should be strictly equal
# tests 3
# pass  3
# ok
ok 17 - test/deep-strict.js
# deep.js
# TAP version 13
# deepEquals shouldn't care about key order and types
ok 18 - should be equivalent
# deepEquals shouldn't care about key order recursively and types
ok 19 - should be equivalent
# deepEquals shoudn't care about key order (but still might) and types
ok 20 - should be equivalent
# tests 3
# pass  3
# ok
ok 21 - test/deep.js
# executed.sh
ok 22 - File with executable bit should be executed
ok 23 - test/executed.sh
# exit-code.js
# TAP version 13
# exit code 1 when tap results show failure
# test exits 0, has failures
ok 24 - should be equal
ok 25 - should be equal
# test exits 1, has failures
ok 26 - should be equal
ok 27 - should be equal
# test exits 1, has no failures
ok 28 - should be equal
ok 29 - should be equal
# successes exit 0
# test that does nothing, but exits 0
ok 30 - should be equal
ok 31 - should be equal
# test that succeeds, and exits 0
ok 32 - should be equal
ok 33 - should be equal
# tests 10
# pass  10
# ok
ok 34 - test/exit-code.js
# expose-gc-test.js
gc test
t.plan=1
assert gc does not exist
# TAP version 13
# gc test when the gc isn't there
gc test
t.plan=2
gc test using --gc
t.plan=1
assert gc exists
gc test using --expose-gc
t.plan=1
assert gc exists
ok 35 - should be equal
# gc test when the gc should be there
# test for gc using --gc
ok 36 - should be equal
# test for gc using --expose-gc
ok 37 - should be equal
# cleanup
# tests 3
# pass  3
# ok
ok 38 - test/expose-gc-test.js
# global-harness-async.js
# TAP version 13
# outer
# inner 1
ok 39 - 1-1
# inner 2
ok 40 - 2-1
# inner 3
ok 41 - 3-1
ok 42 - test/global-harness-async.js
# independent-timeouts.js
# TAP version 13
# finishes in time
# finishes in time too
# tests 0
# ok
ok 43 - test/independent-timeouts.js
# isolated-conf-test.js
# TAP version 13
# one
ok 44 - should be equal
ok 45 - should be equal
# two
ok 46 - should be equal
ok 47 - should be equal
# tests 4
# pass  4
# ok
ok 48 - test/isolated-conf-test.js
# meta-test.js
# TAP version 13
# meta test
ok 49 - sanity check
ok 50 - not ok
ok 51 - total test count
ok 52 - tests passed
ok 53 - tests failed
ok 54 - ok is boolean
ok 55 - skip is number
ok 56 - results isa Results
ok 57 - test isa Test
ok 58 - test isa Harness
# tests 10
# pass  10
# ok
ok 59 - test/meta-test.js
# nested-async.js
# TAP version 13
# Harness async test support
ok 60 - sync child A
# sync child B
# async grandchild A
ok 61 - (unnamed assert)
# async grandchild B
ok 62 - (unnamed assert)
# async child
ok 63 - sync grandchild in async child A
# sync grandchild in async child B
ok 64 - (unnamed assert)
# tests 5
# pass  5
# ok
ok 65 - test/nested-async.js
# nested-test.js
# TAP version 13
# parent
ok 66 - p test
# subtest
ok 67 - ch test
# nested subtest
ok 68 - grch test
# another subtest
ok 69 - ch test 2
# tests 4
# pass  4
# ok
ok 70 - test/nested-test.js
# non-tap-output.js
# everything is fine
# there are no errors
# this output is not haiku.
# is 8 ok?
ok 71 - , 8 can stay.
# but: nevertheless, here we are
# this: is indented
# and: it
# might: ~
# be: yaml?
ok 72 - might be confusing
ok 73 - done now, exiting
ok 74 - test/non-tap-output.js
# not-executed.sh
# output-childtest-description.js
# /Users/isaacs/dev/js/tap/test/nested-tests-fixture.js
# TAP version 13
# nested tests, parent and child pass
ok 75 - outputs parent description
ok 76 - outputs child description
ok 77 - outputs parent description before parent result
ok 78 - outputs parent result before child description
ok 79 - outputs child description before child result
# tests 5
# pass  5
# ok
ok 80 - test/output-childtest-description.js
# result-trap.js
# TAP version 13
# trap result
ok 81 - should be equal
ok 82 - should be equal
# tests 2
# pass  2
# ok
ok 83 - test/result-trap.js
# segv.js
# TAP version 13
# setup
ok 84 - compiled seg faulter
# segv
ok 85 - should be equivalent
ok 86 - should be equivalent
ok 87 - should be equivalent
ok 88 - should be equivalent
ok 89 - should be equivalent
ok 90 - should be equal
# cleanup
ok 91 - cleaned up
# tests 8
# pass  8
# ok
ok 92 - test/segv.js
# simple-harness-test-with-plan.js
# TAP version 13
# trivial success
ok 93 - it works
# two tests
ok 94 - math should work
ok 95 - false should not be ok
# tests 3
# pass  3
# ok
ok 96 - test/simple-harness-test-with-plan.js
# simple-harness-test.js
# TAP version 13
# trivial success
ok 97 - it works
# two tests
ok 98 - math should work
ok 99 - false should not be ok
# tests 3
# pass  3
# ok
ok 100 - test/simple-harness-test.js
# test-assert-todo-skip.js
# TAP version 13
# not much
ok 101 - always passes # SKIP skip it good
ok 102 - false # SKIP always fails
ok 103 - bonus # TODO remove todo directive
ok 104 - expected # TODO implement a thing
ok 105 - always passes without explanation # SKIP
ok 106 - false without explanation # SKIP
ok 107 - bonus without explanation # TODO
ok 108 - expected without explanation # TODO
# tests 8
# skip  4
# todo  4
ok 109 - test/test-assert-todo-skip.js
# test-descriptions.js
# TAP version 13
# captures test descriptions
ok 110 - exit cleanly
ok 111 - captures SKIP description
ok 112 - skip summary is not from file
ok 113 - todo summary is not from file
not ok 114 - captures TODO description
  ---
  file: child_process.js
  line: 707
  column: 7
  stack:
    - |
      getCaller (/Users/isaacs/dev/js/tap/lib/tap-assert.js:439:17)
    - |
      Function.assert (/Users/isaacs/dev/js/tap/lib/tap-assert.js:21:16)
    - |
      Test._testAssert (/Users/isaacs/dev/js/tap/lib/tap-test.js:87:16)
    - |
      /Users/isaacs/dev/js/tap/test/test-descriptions.js:32:7
    - |
      ChildProcess.exithandler (child_process.js:707:7)
    - |
      emitTwo (events.js:87:13)
    - |
      ChildProcess.emit (events.js:169:7)
    - |
      maybeClose (child_process.js:984:16)
    - |
      Socket.<anonymous> (child_process.js:1153:11)
    - |
      emitOne (events.js:77:13)
  ...
ok 115 - exit cleanly
ok 116 - captures SKIP description
ok 117 - skip summary is not in TAP output
ok 118 - todo summary is not in TAP output
not ok 119 - captures TODO description
  ---
  file: child_process.js
  line: 707
  column: 7
  stack:
    - |
      getCaller (/Users/isaacs/dev/js/tap/lib/tap-assert.js:439:17)
    - |
      Function.assert (/Users/isaacs/dev/js/tap/lib/tap-assert.js:21:16)
    - |
      Test._testAssert (/Users/isaacs/dev/js/tap/lib/tap-test.js:87:16)
    - |
      /Users/isaacs/dev/js/tap/test/test-descriptions.js:18:7
    - |
      ChildProcess.exithandler (child_process.js:707:7)
    - |
      emitTwo (events.js:87:13)
    - |
      ChildProcess.emit (events.js:169:7)
    - |
      maybeClose (child_process.js:984:16)
    - |
      Process.ChildProcess._handle.onexit (child_process.js:1057:5)
  ...
ok 120 - exit cleanly
not ok 121 - summarizes skipped count
  ---
  file: child_process.js
  line: 707
  column: 7
  stack:
    - |
      getCaller (/Users/isaacs/dev/js/tap/lib/tap-assert.js:439:17)
    - |
      Function.assert (/Users/isaacs/dev/js/tap/lib/tap-assert.js:21:16)
    - |
      Test._testAssert (/Users/isaacs/dev/js/tap/lib/tap-test.js:87:16)
    - |
      /Users/isaacs/dev/js/tap/test/test-descriptions.js:23:7
    - |
      ChildProcess.exithandler (child_process.js:707:7)
    - |
      emitTwo (events.js:87:13)
    - |
      ChildProcess.emit (events.js:169:7)
    - |
      maybeClose (child_process.js:984:16)
    - |
      Process.ChildProcess._handle.onexit (child_process.js:1057:5)
  ...
not ok 122 - summarizes todo count
  ---
  file: child_process.js
  line: 707
  column: 7
  stack:
    - |
      getCaller (/Users/isaacs/dev/js/tap/lib/tap-assert.js:439:17)
    - |
      Function.assert (/Users/isaacs/dev/js/tap/lib/tap-assert.js:21:16)
    - |
      Test._testAssert (/Users/isaacs/dev/js/tap/lib/tap-test.js:87:16)
    - |
      /Users/isaacs/dev/js/tap/test/test-descriptions.js:24:7
    - |
      ChildProcess.exithandler (child_process.js:707:7)
    - |
      emitTwo (events.js:87:13)
    - |
      ChildProcess.emit (events.js:169:7)
    - |
      maybeClose (child_process.js:984:16)
    - |
      Process.ChildProcess._handle.onexit (child_process.js:1057:5)
  ...
# tests 13
# pass  9
# fail  4
not ok 123 - test/test-descriptions.js
  ---
  exit: 1
  command: /usr/local/bin/iojs test-descriptions.js
  ...
# test-directives.js
# TAP version 13
# captures test descriptions
# raw TAP > TAP consumer > TAP producer
ok 124 - overall result is PASS
ok 125 - captures ok SKIP
ok 126 - captures not ok SKIP
ok 127 - skip summary not in TAP output
ok 128 - captures ok TODO
ok 129 - captures not ok TODO
ok 130 - todo summary is not in TAP output
ok 131 - no ugly "undefined" in output
# raw TAP > TAP consumer > summary
ok 132 - overall result is PASS
ok 133 - no SKIP in summary
ok 134 - skip summary is not in TAP output
ok 135 - no TODO in summary
ok 136 - todo summary is not in TAP output
ok 137 - no ugly "undefined" in output
# TAP producer via require("tap")
ok 138 - overall result is PASS
ok 139 - captures ok SKIP
ok 140 - captures not ok SKIP
ok 141 - skip summary not in TAP output
ok 142 - captures ok TODO
ok 143 - captures not ok TODO
ok 144 - todo summary is not in TAP output
ok 145 - no ugly "undefined" in output
# tests 22
# pass  22
# ok
ok 146 - test/test-directives.js
# test-skip.js
# TAP version 13
ok 147 - does not count as failure # SKIP
# tests 1
# skip  1
ok 148 - test/test-skip.js
# test-test.js
# TAP version 13
# testing the test object
ok 149 - test object should be instanceof Test
ok 150 - test object should be instanceof Harness
ok 151 - test._Test should be the Test class
ok 152 - should have isNotDeepEqual method
ok 153 - isNotDeepEqual method should be a function
ok 154 - should have equals method
ok 155 - equals method should be a function
ok 156 - should have inequivalent method
ok 157 - inequivalent method should be a function
ok 158 - should have threw method
ok 159 - threw method should be a function
ok 160 - should have strictEqual method
ok 161 - strictEqual method should be a function
ok 162 - should have emit method
ok 163 - emit method should be a function
ok 164 - should have fail method
ok 165 - fail method should be a function
ok 166 - should have strictEquals method
ok 167 - strictEquals method should be a function
ok 168 - should have notLike method
ok 169 - notLike method should be a function
ok 170 - should have dissimilar method
ok 171 - dissimilar method should be a function
ok 172 - should have true method
ok 173 - true method should be a function
ok 174 - should have assert method
ok 175 - assert method should be a function
ok 176 - should have is method
ok 177 - is method should be a function
ok 178 - should have ok method
ok 179 - ok method should be a function
ok 180 - should have isEqual method
ok 181 - isEqual method should be a function
ok 182 - should have isDeeply method
ok 183 - isDeeply method should be a function
ok 184 - should have deepEqual method
ok 185 - deepEqual method should be a function
ok 186 - should have deepEquals method
ok 187 - deepEquals method should be a function
ok 188 - should have pass method
ok 189 - pass method should be a function
ok 190 - should have length method
ok 191 - length method should be a function
ok 192 - should have skip method
ok 193 - skip method should be a function
ok 194 - should have isNotEqual method
ok 195 - isNotEqual method should be a function
ok 196 - should have looseEquals method
ok 197 - looseEquals method should be a function
ok 198 - should have false method
ok 199 - false method should be a function
ok 200 - should have notDeeply method
ok 201 - notDeeply method should be a function
ok 202 - should have ifErr method
ok 203 - ifErr method should be a function
ok 204 - should have hasFields method
ok 205 - hasFields method should be a function
ok 206 - should have isNotDeeply method
ok 207 - isNotDeeply method should be a function
ok 208 - should have like method
ok 209 - like method should be a function
ok 210 - should have similar method
ok 211 - similar method should be a function
ok 212 - should have notOk method
ok 213 - notOk method should be a function
ok 214 - should have isDissimilar method
ok 215 - isDissimilar method should be a function
ok 216 - should have isEquivalent method
ok 217 - isEquivalent method should be a function
ok 218 - should have doesNotEqual method
ok 219 - doesNotEqual method should be a function
ok 220 - should have isSimilar method
ok 221 - isSimilar method should be a function
ok 222 - should have notDeepEqual method
ok 223 - notDeepEqual method should be a function
ok 224 - should have type method
ok 225 - type method should be a function
ok 226 - should have notok method
ok 227 - notok method should be a function
ok 228 - should have isInequivalent method
ok 229 - isInequivalent method should be a function
ok 230 - should have isNot method
ok 231 - isNot method should be a function
ok 232 - should have same method
ok 233 - same method should be a function
ok 234 - should have isInequal method
ok 235 - isInequal method should be a function
ok 236 - should have _endNice method
ok 237 - _endNice method should be a function
ok 238 - should have ifError method
ok 239 - ifError method should be a function
ok 240 - should have iferror method
ok 241 - iferror method should be a function
ok 242 - should have clear method
ok 243 - clear method should be a function
ok 244 - should have has method
ok 245 - has method should be a function
ok 246 - should have not method
ok 247 - not method should be a function
ok 248 - should have timeout method
ok 249 - timeout method should be a function
ok 250 - should have notSimilar method
ok 251 - notSimilar method should be a function
ok 252 - should have isUnlike method
ok 253 - isUnlike method should be a function
ok 254 - should have notEquals method
ok 255 - notEquals method should be a function
ok 256 - should have unsimilar method
ok 257 - unsimilar method should be a function
ok 258 - should have result method
ok 259 - result method should be a function
ok 260 - should have doesNotThrow method
ok 261 - doesNotThrow method should be a function
ok 262 - should have error method
ok 263 - error method should be a function
ok 264 - should have constructor method
ok 265 - constructor method should be a function
ok 266 - should have notEqual method
ok 267 - notEqual method should be a function
ok 268 - should have throws method
ok 269 - throws method should be a function
ok 270 - should have isLike method
ok 271 - isLike method should be a function
ok 272 - should have isNotSimilar method
ok 273 - isNotSimilar method should be a function
ok 274 - should have isNotEquivalent method
ok 275 - isNotEquivalent method should be a function
ok 276 - should have inequal method
ok 277 - inequal method should be a function
ok 278 - should have notEquivalent method
ok 279 - notEquivalent method should be a function
ok 280 - should have isNotLike method
ok 281 - isNotLike method should be a function
ok 282 - should have equivalent method
ok 283 - equivalent method should be a function
ok 284 - should have looseEqual method
ok 285 - looseEqual method should be a function
ok 286 - should have equal method
ok 287 - equal method should be a function
ok 288 - should have unlike method
ok 289 - unlike method should be a function
ok 290 - should have doesNotHave method
ok 291 - doesNotHave method should be a function
ok 292 - should have comment method
ok 293 - comment method should be a function
ok 294 - should have isa method
ok 295 - isa method should be a function
# tests 147
# pass  147
# ok
ok 296 - test/test-test.js
# timeout.js
timeout test
t.plan=2
a assert
b assert
# TAP version 13
# timeout test with plan only
ok 297 - a
timeout test
t.plan=2
a assert
b assert
ok 298 - b
# timeout test with plan and end
ok 299 - a
ok 300 - b
# tests 4
# pass  4
# ok
ok 301 - test/timeout.js
# trivial-success.js
ok 302 - test/trivial-success.js
# undefined_indented.js
# TAP version 13
# consume yaml
ok 303 - should be equivalent
# tests 1
# pass  1
# ok
ok 304 - test/undefined_indented.js
# valid-command.js
# TAP version 13
# valid command
ok 305 - should be equivalent
ok 306 - should be equivalent
ok 307 - should be equivalent
ok 308 - should be equivalent
ok 309 - should be equivalent
ok 310 - should be equal
# tests 6
# pass  6
# ok
ok 311 - test/valid-command.js
1..311
# tests 311
# pass  297
# fail  5
# skip  5
# todo  4
# failed 5 of 311 tests
# todo: 4
# skip: 5

`

exports[`test/parser-stringify.js TAP tap-tests.tap default settings > stringified flat 1`] = `
TAP version 13
# buffer_compare.js
# TAP version 13
# same buffers
ok 1 - should be equivalent
# not same buffers
ok 2 - should not be equivalent
# tests 2
# pass  2
# ok
ok 3 - test/buffer_compare.js
# common.js
ok 4 - just setup, nothing relevant
ok 5 - test/common.js
# consumer.js
# TAP version 13
# basic.tap
ok 6 - should be equivalent
# indent.tap
ok 7 - should be equivalent
# missing.tap
ok 8 - should be equivalent
# skip-all.tap
ok 9 - should be equivalent
# yamlish.tap
ok 10 - should be equivalent
# tests 5
# pass  5
# ok
ok 11 - test/consumer.js
# debug-test.js
debug test
t.plan=1
'Debugger listening on port 5858\\n'
# TAP version 13
# debug test
ok 12 - Should output debugger message
# tests 1
# pass  1
# ok
ok 13 - test/debug-test.js
# deep-strict.js
# TAP version 13
# strictDeepEquals shouldn't care about key order
ok 14 - should be strictly equal
# strictDeepEquals shouldn't care about key order recursively
ok 15 - should be strictly equal
# strictDeepEquals shoudn't care about key order (but still might)
ok 16 - should be strictly equal
# tests 3
# pass  3
# ok
ok 17 - test/deep-strict.js
# deep.js
# TAP version 13
# deepEquals shouldn't care about key order and types
ok 18 - should be equivalent
# deepEquals shouldn't care about key order recursively and types
ok 19 - should be equivalent
# deepEquals shoudn't care about key order (but still might) and types
ok 20 - should be equivalent
# tests 3
# pass  3
# ok
ok 21 - test/deep.js
# executed.sh
ok 22 - File with executable bit should be executed
ok 23 - test/executed.sh
# exit-code.js
# TAP version 13
# exit code 1 when tap results show failure
# test exits 0, has failures
ok 24 - should be equal
ok 25 - should be equal
# test exits 1, has failures
ok 26 - should be equal
ok 27 - should be equal
# test exits 1, has no failures
ok 28 - should be equal
ok 29 - should be equal
# successes exit 0
# test that does nothing, but exits 0
ok 30 - should be equal
ok 31 - should be equal
# test that succeeds, and exits 0
ok 32 - should be equal
ok 33 - should be equal
# tests 10
# pass  10
# ok
ok 34 - test/exit-code.js
# expose-gc-test.js
gc test
t.plan=1
assert gc does not exist
# TAP version 13
# gc test when the gc isn't there
gc test
t.plan=2
gc test using --gc
t.plan=1
assert gc exists
gc test using --expose-gc
t.plan=1
assert gc exists
ok 35 - should be equal
# gc test when the gc should be there
# test for gc using --gc
ok 36 - should be equal
# test for gc using --expose-gc
ok 37 - should be equal
# cleanup
# tests 3
# pass  3
# ok
ok 38 - test/expose-gc-test.js
# global-harness-async.js
# TAP version 13
# outer
# inner 1
ok 39 - 1-1
# inner 2
ok 40 - 2-1
# inner 3
ok 41 - 3-1
ok 42 - test/global-harness-async.js
# independent-timeouts.js
# TAP version 13
# finishes in time
# finishes in time too
# tests 0
# ok
ok 43 - test/independent-timeouts.js
# isolated-conf-test.js
# TAP version 13
# one
ok 44 - should be equal
ok 45 - should be equal
# two
ok 46 - should be equal
ok 47 - should be equal
# tests 4
# pass  4
# ok
ok 48 - test/isolated-conf-test.js
# meta-test.js
# TAP version 13
# meta test
ok 49 - sanity check
ok 50 - not ok
ok 51 - total test count
ok 52 - tests passed
ok 53 - tests failed
ok 54 - ok is boolean
ok 55 - skip is number
ok 56 - results isa Results
ok 57 - test isa Test
ok 58 - test isa Harness
# tests 10
# pass  10
# ok
ok 59 - test/meta-test.js
# nested-async.js
# TAP version 13
# Harness async test support
ok 60 - sync child A
# sync child B
# async grandchild A
ok 61 - (unnamed assert)
# async grandchild B
ok 62 - (unnamed assert)
# async child
ok 63 - sync grandchild in async child A
# sync grandchild in async child B
ok 64 - (unnamed assert)
# tests 5
# pass  5
# ok
ok 65 - test/nested-async.js
# nested-test.js
# TAP version 13
# parent
ok 66 - p test
# subtest
ok 67 - ch test
# nested subtest
ok 68 - grch test
# another subtest
ok 69 - ch test 2
# tests 4
# pass  4
# ok
ok 70 - test/nested-test.js
# non-tap-output.js
# everything is fine
# there are no errors
# this output is not haiku.
# is 8 ok?
ok 71 - , 8 can stay.
# but: nevertheless, here we are
# this: is indented
# and: it
# might: ~
# be: yaml?
ok 72 - might be confusing
ok 73 - done now, exiting
ok 74 - test/non-tap-output.js
# not-executed.sh
# output-childtest-description.js
# /Users/isaacs/dev/js/tap/test/nested-tests-fixture.js
# TAP version 13
# nested tests, parent and child pass
ok 75 - outputs parent description
ok 76 - outputs child description
ok 77 - outputs parent description before parent result
ok 78 - outputs parent result before child description
ok 79 - outputs child description before child result
# tests 5
# pass  5
# ok
ok 80 - test/output-childtest-description.js
# result-trap.js
# TAP version 13
# trap result
ok 81 - should be equal
ok 82 - should be equal
# tests 2
# pass  2
# ok
ok 83 - test/result-trap.js
# segv.js
# TAP version 13
# setup
ok 84 - compiled seg faulter
# segv
ok 85 - should be equivalent
ok 86 - should be equivalent
ok 87 - should be equivalent
ok 88 - should be equivalent
ok 89 - should be equivalent
ok 90 - should be equal
# cleanup
ok 91 - cleaned up
# tests 8
# pass  8
# ok
ok 92 - test/segv.js
# simple-harness-test-with-plan.js
# TAP version 13
# trivial success
ok 93 - it works
# two tests
ok 94 - math should work
ok 95 - false should not be ok
# tests 3
# pass  3
# ok
ok 96 - test/simple-harness-test-with-plan.js
# simple-harness-test.js
# TAP version 13
# trivial success
ok 97 - it works
# two tests
ok 98 - math should work
ok 99 - false should not be ok
# tests 3
# pass  3
# ok
ok 100 - test/simple-harness-test.js
# test-assert-todo-skip.js
# TAP version 13
# not much
ok 101 - always passes # SKIP skip it good
ok 102 - false # SKIP always fails
ok 103 - bonus # TODO remove todo directive
ok 104 - expected # TODO implement a thing
ok 105 - always passes without explanation # SKIP
ok 106 - false without explanation # SKIP
ok 107 - bonus without explanation # TODO
ok 108 - expected without explanation # TODO
# tests 8
# skip  4
# todo  4
ok 109 - test/test-assert-todo-skip.js
# test-descriptions.js
# TAP version 13
# captures test descriptions
ok 110 - exit cleanly
ok 111 - captures SKIP description
ok 112 - skip summary is not from file
ok 113 - todo summary is not from file
not ok 114 - captures TODO description
  ---
  file: child_process.js
  line: 707
  column: 7
  stack:
    - |
      getCaller (/Users/isaacs/dev/js/tap/lib/tap-assert.js:439:17)
    - |
      Function.assert (/Users/isaacs/dev/js/tap/lib/tap-assert.js:21:16)
    - |
      Test._testAssert (/Users/isaacs/dev/js/tap/lib/tap-test.js:87:16)
    - |
      /Users/isaacs/dev/js/tap/test/test-descriptions.js:32:7
    - |
      ChildProcess.exithandler (child_process.js:707:7)
    - |
      emitTwo (events.js:87:13)
    - |
      ChildProcess.emit (events.js:169:7)
    - |
      maybeClose (child_process.js:984:16)
    - |
      Socket.<anonymous> (child_process.js:1153:11)
    - |
      emitOne (events.js:77:13)
  ...
ok 115 - exit cleanly
ok 116 - captures SKIP description
ok 117 - skip summary is not in TAP output
ok 118 - todo summary is not in TAP output
not ok 119 - captures TODO description
  ---
  file: child_process.js
  line: 707
  column: 7
  stack:
    - |
      getCaller (/Users/isaacs/dev/js/tap/lib/tap-assert.js:439:17)
    - |
      Function.assert (/Users/isaacs/dev/js/tap/lib/tap-assert.js:21:16)
    - |
      Test._testAssert (/Users/isaacs/dev/js/tap/lib/tap-test.js:87:16)
    - |
      /Users/isaacs/dev/js/tap/test/test-descriptions.js:18:7
    - |
      ChildProcess.exithandler (child_process.js:707:7)
    - |
      emitTwo (events.js:87:13)
    - |
      ChildProcess.emit (events.js:169:7)
    - |
      maybeClose (child_process.js:984:16)
    - |
      Process.ChildProcess._handle.onexit (child_process.js:1057:5)
  ...
ok 120 - exit cleanly
not ok 121 - summarizes skipped count
  ---
  file: child_process.js
  line: 707
  column: 7
  stack:
    - |
      getCaller (/Users/isaacs/dev/js/tap/lib/tap-assert.js:439:17)
    - |
      Function.assert (/Users/isaacs/dev/js/tap/lib/tap-assert.js:21:16)
    - |
      Test._testAssert (/Users/isaacs/dev/js/tap/lib/tap-test.js:87:16)
    - |
      /Users/isaacs/dev/js/tap/test/test-descriptions.js:23:7
    - |
      ChildProcess.exithandler (child_process.js:707:7)
    - |
      emitTwo (events.js:87:13)
    - |
      ChildProcess.emit (events.js:169:7)
    - |
      maybeClose (child_process.js:984:16)
    - |
      Process.ChildProcess._handle.onexit (child_process.js:1057:5)
  ...
not ok 122 - summarizes todo count
  ---
  file: child_process.js
  line: 707
  column: 7
  stack:
    - |
      getCaller (/Users/isaacs/dev/js/tap/lib/tap-assert.js:439:17)
    - |
      Function.assert (/Users/isaacs/dev/js/tap/lib/tap-assert.js:21:16)
    - |
      Test._testAssert (/Users/isaacs/dev/js/tap/lib/tap-test.js:87:16)
    - |
      /Users/isaacs/dev/js/tap/test/test-descriptions.js:24:7
    - |
      ChildProcess.exithandler (child_process.js:707:7)
    - |
      emitTwo (events.js:87:13)
    - |
      ChildProcess.emit (events.js:169:7)
    - |
      maybeClose (child_process.js:984:16)
    - |
      Process.ChildProcess._handle.onexit (child_process.js:1057:5)
  ...
# tests 13
# pass  9
# fail  4
not ok 123 - test/test-descriptions.js
  ---
  exit: 1
  command: /usr/local/bin/iojs test-descriptions.js
  ...
# test-directives.js
# TAP version 13
# captures test descriptions
# raw TAP > TAP consumer > TAP producer
ok 124 - overall result is PASS
ok 125 - captures ok SKIP
ok 126 - captures not ok SKIP
ok 127 - skip summary not in TAP output
ok 128 - captures ok TODO
ok 129 - captures not ok TODO
ok 130 - todo summary is not in TAP output
ok 131 - no ugly "undefined" in output
# raw TAP > TAP consumer > summary
ok 132 - overall result is PASS
ok 133 - no SKIP in summary
ok 134 - skip summary is not in TAP output
ok 135 - no TODO in summary
ok 136 - todo summary is not in TAP output
ok 137 - no ugly "undefined" in output
# TAP producer via require("tap")
ok 138 - overall result is PASS
ok 139 - captures ok SKIP
ok 140 - captures not ok SKIP
ok 141 - skip summary not in TAP output
ok 142 - captures ok TODO
ok 143 - captures not ok TODO
ok 144 - todo summary is not in TAP output
ok 145 - no ugly "undefined" in output
# tests 22
# pass  22
# ok
ok 146 - test/test-directives.js
# test-skip.js
# TAP version 13
ok 147 - does not count as failure # SKIP
# tests 1
# skip  1
ok 148 - test/test-skip.js
# test-test.js
# TAP version 13
# testing the test object
ok 149 - test object should be instanceof Test
ok 150 - test object should be instanceof Harness
ok 151 - test._Test should be the Test class
ok 152 - should have isNotDeepEqual method
ok 153 - isNotDeepEqual method should be a function
ok 154 - should have equals method
ok 155 - equals method should be a function
ok 156 - should have inequivalent method
ok 157 - inequivalent method should be a function
ok 158 - should have threw method
ok 159 - threw method should be a function
ok 160 - should have strictEqual method
ok 161 - strictEqual method should be a function
ok 162 - should have emit method
ok 163 - emit method should be a function
ok 164 - should have fail method
ok 165 - fail method should be a function
ok 166 - should have strictEquals method
ok 167 - strictEquals method should be a function
ok 168 - should have notLike method
ok 169 - notLike method should be a function
ok 170 - should have dissimilar method
ok 171 - dissimilar method should be a function
ok 172 - should have true method
ok 173 - true method should be a function
ok 174 - should have assert method
ok 175 - assert method should be a function
ok 176 - should have is method
ok 177 - is method should be a function
ok 178 - should have ok method
ok 179 - ok method should be a function
ok 180 - should have isEqual method
ok 181 - isEqual method should be a function
ok 182 - should have isDeeply method
ok 183 - isDeeply method should be a function
ok 184 - should have deepEqual method
ok 185 - deepEqual method should be a function
ok 186 - should have deepEquals method
ok 187 - deepEquals method should be a function
ok 188 - should have pass method
ok 189 - pass method should be a function
ok 190 - should have length method
ok 191 - length method should be a function
ok 192 - should have skip method
ok 193 - skip method should be a function
ok 194 - should have isNotEqual method
ok 195 - isNotEqual method should be a function
ok 196 - should have looseEquals method
ok 197 - looseEquals method should be a function
ok 198 - should have false method
ok 199 - false method should be a function
ok 200 - should have notDeeply method
ok 201 - notDeeply method should be a function
ok 202 - should have ifErr method
ok 203 - ifErr method should be a function
ok 204 - should have hasFields method
ok 205 - hasFields method should be a function
ok 206 - should have isNotDeeply method
ok 207 - isNotDeeply method should be a function
ok 208 - should have like method
ok 209 - like method should be a function
ok 210 - should have similar method
ok 211 - similar method should be a function
ok 212 - should have notOk method
ok 213 - notOk method should be a function
ok 214 - should have isDissimilar method
ok 215 - isDissimilar method should be a function
ok 216 - should have isEquivalent method
ok 217 - isEquivalent method should be a function
ok 218 - should have doesNotEqual method
ok 219 - doesNotEqual method should be a function
ok 220 - should have isSimilar method
ok 221 - isSimilar method should be a function
ok 222 - should have notDeepEqual method
ok 223 - notDeepEqual method should be a function
ok 224 - should have type method
ok 225 - type method should be a function
ok 226 - should have notok method
ok 227 - notok method should be a function
ok 228 - should have isInequivalent method
ok 229 - isInequivalent method should be a function
ok 230 - should have isNot method
ok 231 - isNot method should be a function
ok 232 - should have same method
ok 233 - same method should be a function
ok 234 - should have isInequal method
ok 235 - isInequal method should be a function
ok 236 - should have _endNice method
ok 237 - _endNice method should be a function
ok 238 - should have ifError method
ok 239 - ifError method should be a function
ok 240 - should have iferror method
ok 241 - iferror method should be a function
ok 242 - should have clear method
ok 243 - clear method should be a function
ok 244 - should have has method
ok 245 - has method should be a function
ok 246 - should have not method
ok 247 - not method should be a function
ok 248 - should have timeout method
ok 249 - timeout method should be a function
ok 250 - should have notSimilar method
ok 251 - notSimilar method should be a function
ok 252 - should have isUnlike method
ok 253 - isUnlike method should be a function
ok 254 - should have notEquals method
ok 255 - notEquals method should be a function
ok 256 - should have unsimilar method
ok 257 - unsimilar method should be a function
ok 258 - should have result method
ok 259 - result method should be a function
ok 260 - should have doesNotThrow method
ok 261 - doesNotThrow method should be a function
ok 262 - should have error method
ok 263 - error method should be a function
ok 264 - should have constructor method
ok 265 - constructor method should be a function
ok 266 - should have notEqual method
ok 267 - notEqual method should be a function
ok 268 - should have throws method
ok 269 - throws method should be a function
ok 270 - should have isLike method
ok 271 - isLike method should be a function
ok 272 - should have isNotSimilar method
ok 273 - isNotSimilar method should be a function
ok 274 - should have isNotEquivalent method
ok 275 - isNotEquivalent method should be a function
ok 276 - should have inequal method
ok 277 - inequal method should be a function
ok 278 - should have notEquivalent method
ok 279 - notEquivalent method should be a function
ok 280 - should have isNotLike method
ok 281 - isNotLike method should be a function
ok 282 - should have equivalent method
ok 283 - equivalent method should be a function
ok 284 - should have looseEqual method
ok 285 - looseEqual method should be a function
ok 286 - should have equal method
ok 287 - equal method should be a function
ok 288 - should have unlike method
ok 289 - unlike method should be a function
ok 290 - should have doesNotHave method
ok 291 - doesNotHave method should be a function
ok 292 - should have comment method
ok 293 - comment method should be a function
ok 294 - should have isa method
ok 295 - isa method should be a function
# tests 147
# pass  147
# ok
ok 296 - test/test-test.js
# timeout.js
timeout test
t.plan=2
a assert
b assert
# TAP version 13
# timeout test with plan only
ok 297 - a
timeout test
t.plan=2
a assert
b assert
ok 298 - b
# timeout test with plan and end
ok 299 - a
ok 300 - b
# tests 4
# pass  4
# ok
ok 301 - test/timeout.js
# trivial-success.js
ok 302 - test/trivial-success.js
# undefined_indented.js
# TAP version 13
# consume yaml
ok 303 - should be equivalent
# tests 1
# pass  1
# ok
ok 304 - test/undefined_indented.js
# valid-command.js
# TAP version 13
# valid command
ok 305 - should be equivalent
ok 306 - should be equivalent
ok 307 - should be equivalent
ok 308 - should be equivalent
ok 309 - should be equivalent
ok 310 - should be equal
# tests 6
# pass  6
# ok
ok 311 - test/valid-command.js
1..311
# tests 311
# pass  297
# fail  5
# skip  5
# todo  4
# failed 5 of 311 tests
# todo: 4
# skip: 5

`

exports[`test/parser-stringify.js TAP tap-tests.tap strict > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "comment",
    "# buffer_compare.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# same buffers\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# not same buffers\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "should not be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 2\\n",
  ],
  Array [
    "comment",
    "# pass  2\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "test/buffer_compare.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# common.js\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "name": "just setup, nothing relevant",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "name": "test/common.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# consumer.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# basic.tap\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 6,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# indent.tap\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 7,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# missing.tap\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 8,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# skip-all.tap\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 9,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# yamlish.tap\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 10,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 5\\n",
  ],
  Array [
    "comment",
    "# pass  5\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 11,
      "name": "test/consumer.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# debug-test.js\\n",
  ],
  Array [
    "extra",
    "debug test\\n",
  ],
  Array [
    "extra",
    "t.plan=1\\n",
  ],
  Array [
    "extra",
    "'Debugger listening on port 5858\\\\n'\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# debug test\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 12,
      "name": "Should output debugger message",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 1\\n",
  ],
  Array [
    "comment",
    "# pass  1\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 13,
      "name": "test/debug-test.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# deep-strict.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# strictDeepEquals shouldn't care about key order\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 14,
      "name": "should be strictly equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# strictDeepEquals shouldn't care about key order recursively\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 15,
      "name": "should be strictly equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# strictDeepEquals shoudn't care about key order (but still might)\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 16,
      "name": "should be strictly equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 3\\n",
  ],
  Array [
    "comment",
    "# pass  3\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 17,
      "name": "test/deep-strict.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# deep.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# deepEquals shouldn't care about key order and types\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 18,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# deepEquals shouldn't care about key order recursively and types\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 19,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# deepEquals shoudn't care about key order (but still might) and types\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 20,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 3\\n",
  ],
  Array [
    "comment",
    "# pass  3\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 21,
      "name": "test/deep.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# executed.sh\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 22,
      "name": "File with executable bit should be executed",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 23,
      "name": "test/executed.sh",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# exit-code.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# exit code 1 when tap results show failure\\n",
  ],
  Array [
    "comment",
    "# test exits 0, has failures\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 24,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 25,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test exits 1, has failures\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 26,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 27,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test exits 1, has no failures\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 28,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 29,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# successes exit 0\\n",
  ],
  Array [
    "comment",
    "# test that does nothing, but exits 0\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 30,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 31,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test that succeeds, and exits 0\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 32,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 33,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 10\\n",
  ],
  Array [
    "comment",
    "# pass  10\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 34,
      "name": "test/exit-code.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# expose-gc-test.js\\n",
  ],
  Array [
    "extra",
    "gc test\\n",
  ],
  Array [
    "extra",
    "t.plan=1\\n",
  ],
  Array [
    "extra",
    "assert gc does not exist\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# gc test when the gc isn't there\\n",
  ],
  Array [
    "extra",
    "gc test\\n",
  ],
  Array [
    "extra",
    "t.plan=2\\n",
  ],
  Array [
    "extra",
    "gc test using --gc\\n",
  ],
  Array [
    "extra",
    "t.plan=1\\n",
  ],
  Array [
    "extra",
    "assert gc exists\\n",
  ],
  Array [
    "extra",
    "gc test using --expose-gc\\n",
  ],
  Array [
    "extra",
    "t.plan=1\\n",
  ],
  Array [
    "extra",
    "assert gc exists\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 35,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# gc test when the gc should be there\\n",
  ],
  Array [
    "comment",
    "# test for gc using --gc\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 36,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test for gc using --expose-gc\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 37,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# cleanup\\n",
  ],
  Array [
    "comment",
    "# tests 3\\n",
  ],
  Array [
    "comment",
    "# pass  3\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 38,
      "name": "test/expose-gc-test.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# global-harness-async.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# outer\\n",
  ],
  Array [
    "comment",
    "# inner 1\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 39,
      "name": "1-1",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# inner 2\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 40,
      "name": "2-1",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# inner 3\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 41,
      "name": "3-1",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 42,
      "name": "test/global-harness-async.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# independent-timeouts.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# finishes in time\\n",
  ],
  Array [
    "comment",
    "# finishes in time too\\n",
  ],
  Array [
    "comment",
    "# tests 0\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 43,
      "name": "test/independent-timeouts.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# isolated-conf-test.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# one\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 44,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 45,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# two\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 46,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 47,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 4\\n",
  ],
  Array [
    "comment",
    "# pass  4\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 48,
      "name": "test/isolated-conf-test.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# meta-test.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# meta test\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 49,
      "name": "sanity check",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 50,
      "name": "not ok",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 51,
      "name": "total test count",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 52,
      "name": "tests passed",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 53,
      "name": "tests failed",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 54,
      "name": "ok is boolean",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 55,
      "name": "skip is number",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 56,
      "name": "results isa Results",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 57,
      "name": "test isa Test",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 58,
      "name": "test isa Harness",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 10\\n",
  ],
  Array [
    "comment",
    "# pass  10\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 59,
      "name": "test/meta-test.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# nested-async.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# Harness async test support\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 60,
      "name": "sync child A",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# sync child B\\n",
  ],
  Array [
    "comment",
    "# async grandchild A\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 61,
      "name": "(unnamed assert)",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# async grandchild B\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 62,
      "name": "(unnamed assert)",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# async child\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 63,
      "name": "sync grandchild in async child A",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# sync grandchild in async child B\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 64,
      "name": "(unnamed assert)",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 5\\n",
  ],
  Array [
    "comment",
    "# pass  5\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 65,
      "name": "test/nested-async.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# nested-test.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# parent\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 66,
      "name": "p test",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# subtest\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 67,
      "name": "ch test",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# nested subtest\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 68,
      "name": "grch test",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# another subtest\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 69,
      "name": "ch test 2",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 4\\n",
  ],
  Array [
    "comment",
    "# pass  4\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 70,
      "name": "test/nested-test.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# non-tap-output.js\\n",
  ],
  Array [
    "comment",
    "# everything is fine\\n",
  ],
  Array [
    "comment",
    "# there are no errors\\n",
  ],
  Array [
    "comment",
    "# this output is not haiku.\\n",
  ],
  Array [
    "comment",
    "# is 8 ok?\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 71,
      "name": ", 8 can stay.",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# but: nevertheless, here we are\\n",
  ],
  Array [
    "comment",
    "# this: is indented\\n",
  ],
  Array [
    "comment",
    "# and: it\\n",
  ],
  Array [
    "comment",
    "# might: ~\\n",
  ],
  Array [
    "comment",
    "# be: yaml?\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 72,
      "name": "might be confusing",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 73,
      "name": "done now, exiting",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 74,
      "name": "test/non-tap-output.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# not-executed.sh\\n",
  ],
  Array [
    "comment",
    "# output-childtest-description.js\\n",
  ],
  Array [
    "comment",
    "# /Users/isaacs/dev/js/tap/test/nested-tests-fixture.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# nested tests, parent and child pass\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 75,
      "name": "outputs parent description",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 76,
      "name": "outputs child description",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 77,
      "name": "outputs parent description before parent result",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 78,
      "name": "outputs parent result before child description",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 79,
      "name": "outputs child description before child result",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 5\\n",
  ],
  Array [
    "comment",
    "# pass  5\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 80,
      "name": "test/output-childtest-description.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# result-trap.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# trap result\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 81,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 82,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 2\\n",
  ],
  Array [
    "comment",
    "# pass  2\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 83,
      "name": "test/result-trap.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# segv.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# setup\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 84,
      "name": "compiled seg faulter",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# segv\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 85,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 86,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 87,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 88,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 89,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 90,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# cleanup\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 91,
      "name": "cleaned up",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 8\\n",
  ],
  Array [
    "comment",
    "# pass  8\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 92,
      "name": "test/segv.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# simple-harness-test-with-plan.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# trivial success\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 93,
      "name": "it works",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# two tests\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 94,
      "name": "math should work",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 95,
      "name": "false should not be ok",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 3\\n",
  ],
  Array [
    "comment",
    "# pass  3\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 96,
      "name": "test/simple-harness-test-with-plan.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# simple-harness-test.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# trivial success\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 97,
      "name": "it works",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# two tests\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 98,
      "name": "math should work",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 99,
      "name": "false should not be ok",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 3\\n",
  ],
  Array [
    "comment",
    "# pass  3\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 100,
      "name": "test/simple-harness-test.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test-assert-todo-skip.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# not much\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 101,
      "name": "always passes",
      "ok": true,
      "skip": "skip it good",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 102,
      "name": "false",
      "ok": true,
      "skip": "always fails",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 103,
      "name": "bonus",
      "ok": true,
      "todo": "remove todo directive",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 104,
      "name": "expected",
      "ok": true,
      "todo": "implement a thing",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 105,
      "name": "always passes without explanation",
      "ok": true,
      "skip": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 106,
      "name": "false without explanation",
      "ok": true,
      "skip": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 107,
      "name": "bonus without explanation",
      "ok": true,
      "todo": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 108,
      "name": "expected without explanation",
      "ok": true,
      "todo": true,
    },
  ],
  Array [
    "comment",
    "# tests 8\\n",
  ],
  Array [
    "comment",
    "# skip  4\\n",
  ],
  Array [
    "comment",
    "# todo  4\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 109,
      "name": "test/test-assert-todo-skip.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test-descriptions.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# captures test descriptions\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 110,
      "name": "exit cleanly",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 111,
      "name": "captures SKIP description",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 112,
      "name": "skip summary is not from file",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 113,
      "name": "todo summary is not from file",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "diag": Object {
        "column": 7,
        "file": "child_process.js",
        "line": 707,
        "stack": Array [
          "getCaller (/Users/isaacs/dev/js/tap/lib/tap-assert.js:439:17)\\n",
          "Function.assert (/Users/isaacs/dev/js/tap/lib/tap-assert.js:21:16)\\n",
          "Test._testAssert (/Users/isaacs/dev/js/tap/lib/tap-test.js:87:16)\\n",
          "/Users/isaacs/dev/js/tap/test/test-descriptions.js:32:7\\n",
          "ChildProcess.exithandler (child_process.js:707:7)\\n",
          "emitTwo (events.js:87:13)\\n",
          "ChildProcess.emit (events.js:169:7)\\n",
          "maybeClose (child_process.js:984:16)\\n",
          "Socket.<anonymous> (child_process.js:1153:11)\\n",
          "emitOne (events.js:77:13)\\n",
        ],
      },
      "fullname": "",
      "id": 114,
      "name": "captures TODO description",
      "ok": false,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 115,
      "name": "exit cleanly",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 116,
      "name": "captures SKIP description",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 117,
      "name": "skip summary is not in TAP output",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 118,
      "name": "todo summary is not in TAP output",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "diag": Object {
        "column": 7,
        "file": "child_process.js",
        "line": 707,
        "stack": Array [
          "getCaller (/Users/isaacs/dev/js/tap/lib/tap-assert.js:439:17)\\n",
          "Function.assert (/Users/isaacs/dev/js/tap/lib/tap-assert.js:21:16)\\n",
          "Test._testAssert (/Users/isaacs/dev/js/tap/lib/tap-test.js:87:16)\\n",
          "/Users/isaacs/dev/js/tap/test/test-descriptions.js:18:7\\n",
          "ChildProcess.exithandler (child_process.js:707:7)\\n",
          "emitTwo (events.js:87:13)\\n",
          "ChildProcess.emit (events.js:169:7)\\n",
          "maybeClose (child_process.js:984:16)\\n",
          "Process.ChildProcess._handle.onexit (child_process.js:1057:5)\\n",
        ],
      },
      "fullname": "",
      "id": 119,
      "name": "captures TODO description",
      "ok": false,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 120,
      "name": "exit cleanly",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "diag": Object {
        "column": 7,
        "file": "child_process.js",
        "line": 707,
        "stack": Array [
          "getCaller (/Users/isaacs/dev/js/tap/lib/tap-assert.js:439:17)\\n",
          "Function.assert (/Users/isaacs/dev/js/tap/lib/tap-assert.js:21:16)\\n",
          "Test._testAssert (/Users/isaacs/dev/js/tap/lib/tap-test.js:87:16)\\n",
          "/Users/isaacs/dev/js/tap/test/test-descriptions.js:23:7\\n",
          "ChildProcess.exithandler (child_process.js:707:7)\\n",
          "emitTwo (events.js:87:13)\\n",
          "ChildProcess.emit (events.js:169:7)\\n",
          "maybeClose (child_process.js:984:16)\\n",
          "Process.ChildProcess._handle.onexit (child_process.js:1057:5)\\n",
        ],
      },
      "fullname": "",
      "id": 121,
      "name": "summarizes skipped count",
      "ok": false,
    },
  ],
  Array [
    "assert",
    Result {
      "diag": Object {
        "column": 7,
        "file": "child_process.js",
        "line": 707,
        "stack": Array [
          "getCaller (/Users/isaacs/dev/js/tap/lib/tap-assert.js:439:17)\\n",
          "Function.assert (/Users/isaacs/dev/js/tap/lib/tap-assert.js:21:16)\\n",
          "Test._testAssert (/Users/isaacs/dev/js/tap/lib/tap-test.js:87:16)\\n",
          "/Users/isaacs/dev/js/tap/test/test-descriptions.js:24:7\\n",
          "ChildProcess.exithandler (child_process.js:707:7)\\n",
          "emitTwo (events.js:87:13)\\n",
          "ChildProcess.emit (events.js:169:7)\\n",
          "maybeClose (child_process.js:984:16)\\n",
          "Process.ChildProcess._handle.onexit (child_process.js:1057:5)\\n",
        ],
      },
      "fullname": "",
      "id": 122,
      "name": "summarizes todo count",
      "ok": false,
    },
  ],
  Array [
    "comment",
    "# tests 13\\n",
  ],
  Array [
    "comment",
    "# pass  9\\n",
  ],
  Array [
    "comment",
    "# fail  4\\n",
  ],
  Array [
    "assert",
    Result {
      "diag": Object {
        "command": "/usr/local/bin/iojs test-descriptions.js",
        "exit": 1,
      },
      "fullname": "",
      "id": 123,
      "name": "test/test-descriptions.js",
      "ok": false,
    },
  ],
  Array [
    "comment",
    "# test-directives.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# captures test descriptions\\n",
  ],
  Array [
    "comment",
    "# raw TAP > TAP consumer > TAP producer\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 124,
      "name": "overall result is PASS",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 125,
      "name": "captures ok SKIP",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 126,
      "name": "captures not ok SKIP",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 127,
      "name": "skip summary not in TAP output",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 128,
      "name": "captures ok TODO",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 129,
      "name": "captures not ok TODO",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 130,
      "name": "todo summary is not in TAP output",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 131,
      "name": "no ugly \\"undefined\\" in output",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# raw TAP > TAP consumer > summary\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 132,
      "name": "overall result is PASS",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 133,
      "name": "no SKIP in summary",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 134,
      "name": "skip summary is not in TAP output",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 135,
      "name": "no TODO in summary",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 136,
      "name": "todo summary is not in TAP output",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 137,
      "name": "no ugly \\"undefined\\" in output",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# TAP producer via require(\\"tap\\")\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 138,
      "name": "overall result is PASS",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 139,
      "name": "captures ok SKIP",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 140,
      "name": "captures not ok SKIP",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 141,
      "name": "skip summary not in TAP output",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 142,
      "name": "captures ok TODO",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 143,
      "name": "captures not ok TODO",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 144,
      "name": "todo summary is not in TAP output",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 145,
      "name": "no ugly \\"undefined\\" in output",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 22\\n",
  ],
  Array [
    "comment",
    "# pass  22\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 146,
      "name": "test/test-directives.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test-skip.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 147,
      "name": "does not count as failure",
      "ok": true,
      "skip": true,
    },
  ],
  Array [
    "comment",
    "# tests 1\\n",
  ],
  Array [
    "comment",
    "# skip  1\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 148,
      "name": "test/test-skip.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test-test.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# testing the test object\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 149,
      "name": "test object should be instanceof Test",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 150,
      "name": "test object should be instanceof Harness",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 151,
      "name": "test._Test should be the Test class",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 152,
      "name": "should have isNotDeepEqual method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 153,
      "name": "isNotDeepEqual method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 154,
      "name": "should have equals method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 155,
      "name": "equals method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 156,
      "name": "should have inequivalent method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 157,
      "name": "inequivalent method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 158,
      "name": "should have threw method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 159,
      "name": "threw method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 160,
      "name": "should have strictEqual method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 161,
      "name": "strictEqual method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 162,
      "name": "should have emit method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 163,
      "name": "emit method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 164,
      "name": "should have fail method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 165,
      "name": "fail method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 166,
      "name": "should have strictEquals method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 167,
      "name": "strictEquals method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 168,
      "name": "should have notLike method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 169,
      "name": "notLike method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 170,
      "name": "should have dissimilar method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 171,
      "name": "dissimilar method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 172,
      "name": "should have true method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 173,
      "name": "true method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 174,
      "name": "should have assert method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 175,
      "name": "assert method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 176,
      "name": "should have is method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 177,
      "name": "is method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 178,
      "name": "should have ok method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 179,
      "name": "ok method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 180,
      "name": "should have isEqual method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 181,
      "name": "isEqual method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 182,
      "name": "should have isDeeply method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 183,
      "name": "isDeeply method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 184,
      "name": "should have deepEqual method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 185,
      "name": "deepEqual method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 186,
      "name": "should have deepEquals method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 187,
      "name": "deepEquals method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 188,
      "name": "should have pass method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 189,
      "name": "pass method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 190,
      "name": "should have length method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 191,
      "name": "length method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 192,
      "name": "should have skip method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 193,
      "name": "skip method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 194,
      "name": "should have isNotEqual method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 195,
      "name": "isNotEqual method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 196,
      "name": "should have looseEquals method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 197,
      "name": "looseEquals method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 198,
      "name": "should have false method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 199,
      "name": "false method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 200,
      "name": "should have notDeeply method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 201,
      "name": "notDeeply method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 202,
      "name": "should have ifErr method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 203,
      "name": "ifErr method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 204,
      "name": "should have hasFields method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 205,
      "name": "hasFields method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 206,
      "name": "should have isNotDeeply method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 207,
      "name": "isNotDeeply method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 208,
      "name": "should have like method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 209,
      "name": "like method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 210,
      "name": "should have similar method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 211,
      "name": "similar method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 212,
      "name": "should have notOk method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 213,
      "name": "notOk method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 214,
      "name": "should have isDissimilar method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 215,
      "name": "isDissimilar method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 216,
      "name": "should have isEquivalent method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 217,
      "name": "isEquivalent method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 218,
      "name": "should have doesNotEqual method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 219,
      "name": "doesNotEqual method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 220,
      "name": "should have isSimilar method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 221,
      "name": "isSimilar method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 222,
      "name": "should have notDeepEqual method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 223,
      "name": "notDeepEqual method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 224,
      "name": "should have type method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 225,
      "name": "type method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 226,
      "name": "should have notok method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 227,
      "name": "notok method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 228,
      "name": "should have isInequivalent method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 229,
      "name": "isInequivalent method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 230,
      "name": "should have isNot method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 231,
      "name": "isNot method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 232,
      "name": "should have same method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 233,
      "name": "same method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 234,
      "name": "should have isInequal method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 235,
      "name": "isInequal method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 236,
      "name": "should have _endNice method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 237,
      "name": "_endNice method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 238,
      "name": "should have ifError method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 239,
      "name": "ifError method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 240,
      "name": "should have iferror method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 241,
      "name": "iferror method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 242,
      "name": "should have clear method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 243,
      "name": "clear method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 244,
      "name": "should have has method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 245,
      "name": "has method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 246,
      "name": "should have not method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 247,
      "name": "not method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 248,
      "name": "should have timeout method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 249,
      "name": "timeout method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 250,
      "name": "should have notSimilar method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 251,
      "name": "notSimilar method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 252,
      "name": "should have isUnlike method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 253,
      "name": "isUnlike method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 254,
      "name": "should have notEquals method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 255,
      "name": "notEquals method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 256,
      "name": "should have unsimilar method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 257,
      "name": "unsimilar method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 258,
      "name": "should have result method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 259,
      "name": "result method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 260,
      "name": "should have doesNotThrow method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 261,
      "name": "doesNotThrow method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 262,
      "name": "should have error method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 263,
      "name": "error method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 264,
      "name": "should have constructor method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 265,
      "name": "constructor method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 266,
      "name": "should have notEqual method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 267,
      "name": "notEqual method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 268,
      "name": "should have throws method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 269,
      "name": "throws method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 270,
      "name": "should have isLike method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 271,
      "name": "isLike method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 272,
      "name": "should have isNotSimilar method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 273,
      "name": "isNotSimilar method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 274,
      "name": "should have isNotEquivalent method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 275,
      "name": "isNotEquivalent method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 276,
      "name": "should have inequal method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 277,
      "name": "inequal method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 278,
      "name": "should have notEquivalent method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 279,
      "name": "notEquivalent method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 280,
      "name": "should have isNotLike method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 281,
      "name": "isNotLike method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 282,
      "name": "should have equivalent method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 283,
      "name": "equivalent method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 284,
      "name": "should have looseEqual method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 285,
      "name": "looseEqual method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 286,
      "name": "should have equal method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 287,
      "name": "equal method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 288,
      "name": "should have unlike method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 289,
      "name": "unlike method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 290,
      "name": "should have doesNotHave method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 291,
      "name": "doesNotHave method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 292,
      "name": "should have comment method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 293,
      "name": "comment method should be a function",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 294,
      "name": "should have isa method",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 295,
      "name": "isa method should be a function",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 147\\n",
  ],
  Array [
    "comment",
    "# pass  147\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 296,
      "name": "test/test-test.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# timeout.js\\n",
  ],
  Array [
    "extra",
    "timeout test\\n",
  ],
  Array [
    "extra",
    "t.plan=2\\n",
  ],
  Array [
    "extra",
    "a assert\\n",
  ],
  Array [
    "extra",
    "b assert\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# timeout test with plan only\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 297,
      "name": "a",
      "ok": true,
    },
  ],
  Array [
    "extra",
    "timeout test\\n",
  ],
  Array [
    "extra",
    "t.plan=2\\n",
  ],
  Array [
    "extra",
    "a assert\\n",
  ],
  Array [
    "extra",
    "b assert\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 298,
      "name": "b",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# timeout test with plan and end\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 299,
      "name": "a",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 300,
      "name": "b",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 4\\n",
  ],
  Array [
    "comment",
    "# pass  4\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 301,
      "name": "test/timeout.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# trivial-success.js\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 302,
      "name": "test/trivial-success.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# undefined_indented.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# consume yaml\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 303,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 1\\n",
  ],
  Array [
    "comment",
    "# pass  1\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 304,
      "name": "test/undefined_indented.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# valid-command.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# valid command\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 305,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 306,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 307,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 308,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 309,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 310,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 6\\n",
  ],
  Array [
    "comment",
    "# pass  6\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 311,
      "name": "test/valid-command.js",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 311,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# tests 311\\n",
  ],
  Array [
    "comment",
    "# pass  297\\n",
  ],
  Array [
    "comment",
    "# fail  5\\n",
  ],
  Array [
    "comment",
    "# skip  5\\n",
  ],
  Array [
    "comment",
    "# todo  4\\n",
  ],
  Array [
    "comment",
    "# failed 27 of 311 tests\\n",
  ],
  Array [
    "comment",
    "# todo: 4\\n",
  ],
  Array [
    "comment",
    "# skip: 5\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 311,
      "fail": 27,
      "failures": Array [
        Object {
          "data": "debug test\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "t.plan=1\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "'Debugger listening on port 5858\\\\n'\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "gc test\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "t.plan=1\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "assert gc does not exist\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "gc test\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "t.plan=2\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "gc test using --gc\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "t.plan=1\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "assert gc exists\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "gc test using --expose-gc\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "t.plan=1\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "assert gc exists\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Result {
          "diag": Object {
            "column": 7,
            "file": "child_process.js",
            "line": 707,
            "stack": Array [
              "getCaller (/Users/isaacs/dev/js/tap/lib/tap-assert.js:439:17)\\n",
              "Function.assert (/Users/isaacs/dev/js/tap/lib/tap-assert.js:21:16)\\n",
              "Test._testAssert (/Users/isaacs/dev/js/tap/lib/tap-test.js:87:16)\\n",
              "/Users/isaacs/dev/js/tap/test/test-descriptions.js:32:7\\n",
              "ChildProcess.exithandler (child_process.js:707:7)\\n",
              "emitTwo (events.js:87:13)\\n",
              "ChildProcess.emit (events.js:169:7)\\n",
              "maybeClose (child_process.js:984:16)\\n",
              "Socket.<anonymous> (child_process.js:1153:11)\\n",
              "emitOne (events.js:77:13)\\n",
            ],
          },
          "fullname": "",
          "id": 114,
          "name": "captures TODO description",
          "ok": false,
        },
        Result {
          "diag": Object {
            "column": 7,
            "file": "child_process.js",
            "line": 707,
            "stack": Array [
              "getCaller (/Users/isaacs/dev/js/tap/lib/tap-assert.js:439:17)\\n",
              "Function.assert (/Users/isaacs/dev/js/tap/lib/tap-assert.js:21:16)\\n",
              "Test._testAssert (/Users/isaacs/dev/js/tap/lib/tap-test.js:87:16)\\n",
              "/Users/isaacs/dev/js/tap/test/test-descriptions.js:18:7\\n",
              "ChildProcess.exithandler (child_process.js:707:7)\\n",
              "emitTwo (events.js:87:13)\\n",
              "ChildProcess.emit (events.js:169:7)\\n",
              "maybeClose (child_process.js:984:16)\\n",
              "Process.ChildProcess._handle.onexit (child_process.js:1057:5)\\n",
            ],
          },
          "fullname": "",
          "id": 119,
          "name": "captures TODO description",
          "ok": false,
        },
        Result {
          "diag": Object {
            "column": 7,
            "file": "child_process.js",
            "line": 707,
            "stack": Array [
              "getCaller (/Users/isaacs/dev/js/tap/lib/tap-assert.js:439:17)\\n",
              "Function.assert (/Users/isaacs/dev/js/tap/lib/tap-assert.js:21:16)\\n",
              "Test._testAssert (/Users/isaacs/dev/js/tap/lib/tap-test.js:87:16)\\n",
              "/Users/isaacs/dev/js/tap/test/test-descriptions.js:23:7\\n",
              "ChildProcess.exithandler (child_process.js:707:7)\\n",
              "emitTwo (events.js:87:13)\\n",
              "ChildProcess.emit (events.js:169:7)\\n",
              "maybeClose (child_process.js:984:16)\\n",
              "Process.ChildProcess._handle.onexit (child_process.js:1057:5)\\n",
            ],
          },
          "fullname": "",
          "id": 121,
          "name": "summarizes skipped count",
          "ok": false,
        },
        Result {
          "diag": Object {
            "column": 7,
            "file": "child_process.js",
            "line": 707,
            "stack": Array [
              "getCaller (/Users/isaacs/dev/js/tap/lib/tap-assert.js:439:17)\\n",
              "Function.assert (/Users/isaacs/dev/js/tap/lib/tap-assert.js:21:16)\\n",
              "Test._testAssert (/Users/isaacs/dev/js/tap/lib/tap-test.js:87:16)\\n",
              "/Users/isaacs/dev/js/tap/test/test-descriptions.js:24:7\\n",
              "ChildProcess.exithandler (child_process.js:707:7)\\n",
              "emitTwo (events.js:87:13)\\n",
              "ChildProcess.emit (events.js:169:7)\\n",
              "maybeClose (child_process.js:984:16)\\n",
              "Process.ChildProcess._handle.onexit (child_process.js:1057:5)\\n",
            ],
          },
          "fullname": "",
          "id": 122,
          "name": "summarizes todo count",
          "ok": false,
        },
        Result {
          "diag": Object {
            "command": "/usr/local/bin/iojs test-descriptions.js",
            "exit": 1,
          },
          "fullname": "",
          "id": 123,
          "name": "test/test-descriptions.js",
          "ok": false,
        },
        Object {
          "data": "timeout test\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "t.plan=2\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "a assert\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "b assert\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "timeout test\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "t.plan=2\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "a assert\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "b assert\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
      ],
      "ok": false,
      "pass": 306,
      "plan": FinalPlan {
        "comment": "",
        "end": 311,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 5,
      "time": null,
      "todo": 4,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP tap-tests.tap strict > stringified 1`] = `
TAP version 13
# buffer_compare.js
# TAP version 13
# same buffers
ok 1 - should be equivalent
# not same buffers
ok 2 - should not be equivalent
# tests 2
# pass  2
# ok
ok 3 - test/buffer_compare.js
# common.js
ok 4 - just setup, nothing relevant
ok 5 - test/common.js
# consumer.js
# TAP version 13
# basic.tap
ok 6 - should be equivalent
# indent.tap
ok 7 - should be equivalent
# missing.tap
ok 8 - should be equivalent
# skip-all.tap
ok 9 - should be equivalent
# yamlish.tap
ok 10 - should be equivalent
# tests 5
# pass  5
# ok
ok 11 - test/consumer.js
# debug-test.js
debug test
t.plan=1
'Debugger listening on port 5858\\n'
# TAP version 13
# debug test
ok 12 - Should output debugger message
# tests 1
# pass  1
# ok
ok 13 - test/debug-test.js
# deep-strict.js
# TAP version 13
# strictDeepEquals shouldn't care about key order
ok 14 - should be strictly equal
# strictDeepEquals shouldn't care about key order recursively
ok 15 - should be strictly equal
# strictDeepEquals shoudn't care about key order (but still might)
ok 16 - should be strictly equal
# tests 3
# pass  3
# ok
ok 17 - test/deep-strict.js
# deep.js
# TAP version 13
# deepEquals shouldn't care about key order and types
ok 18 - should be equivalent
# deepEquals shouldn't care about key order recursively and types
ok 19 - should be equivalent
# deepEquals shoudn't care about key order (but still might) and types
ok 20 - should be equivalent
# tests 3
# pass  3
# ok
ok 21 - test/deep.js
# executed.sh
ok 22 - File with executable bit should be executed
ok 23 - test/executed.sh
# exit-code.js
# TAP version 13
# exit code 1 when tap results show failure
# test exits 0, has failures
ok 24 - should be equal
ok 25 - should be equal
# test exits 1, has failures
ok 26 - should be equal
ok 27 - should be equal
# test exits 1, has no failures
ok 28 - should be equal
ok 29 - should be equal
# successes exit 0
# test that does nothing, but exits 0
ok 30 - should be equal
ok 31 - should be equal
# test that succeeds, and exits 0
ok 32 - should be equal
ok 33 - should be equal
# tests 10
# pass  10
# ok
ok 34 - test/exit-code.js
# expose-gc-test.js
gc test
t.plan=1
assert gc does not exist
# TAP version 13
# gc test when the gc isn't there
gc test
t.plan=2
gc test using --gc
t.plan=1
assert gc exists
gc test using --expose-gc
t.plan=1
assert gc exists
ok 35 - should be equal
# gc test when the gc should be there
# test for gc using --gc
ok 36 - should be equal
# test for gc using --expose-gc
ok 37 - should be equal
# cleanup
# tests 3
# pass  3
# ok
ok 38 - test/expose-gc-test.js
# global-harness-async.js
# TAP version 13
# outer
# inner 1
ok 39 - 1-1
# inner 2
ok 40 - 2-1
# inner 3
ok 41 - 3-1
ok 42 - test/global-harness-async.js
# independent-timeouts.js
# TAP version 13
# finishes in time
# finishes in time too
# tests 0
# ok
ok 43 - test/independent-timeouts.js
# isolated-conf-test.js
# TAP version 13
# one
ok 44 - should be equal
ok 45 - should be equal
# two
ok 46 - should be equal
ok 47 - should be equal
# tests 4
# pass  4
# ok
ok 48 - test/isolated-conf-test.js
# meta-test.js
# TAP version 13
# meta test
ok 49 - sanity check
ok 50 - not ok
ok 51 - total test count
ok 52 - tests passed
ok 53 - tests failed
ok 54 - ok is boolean
ok 55 - skip is number
ok 56 - results isa Results
ok 57 - test isa Test
ok 58 - test isa Harness
# tests 10
# pass  10
# ok
ok 59 - test/meta-test.js
# nested-async.js
# TAP version 13
# Harness async test support
ok 60 - sync child A
# sync child B
# async grandchild A
ok 61 - (unnamed assert)
# async grandchild B
ok 62 - (unnamed assert)
# async child
ok 63 - sync grandchild in async child A
# sync grandchild in async child B
ok 64 - (unnamed assert)
# tests 5
# pass  5
# ok
ok 65 - test/nested-async.js
# nested-test.js
# TAP version 13
# parent
ok 66 - p test
# subtest
ok 67 - ch test
# nested subtest
ok 68 - grch test
# another subtest
ok 69 - ch test 2
# tests 4
# pass  4
# ok
ok 70 - test/nested-test.js
# non-tap-output.js
# everything is fine
# there are no errors
# this output is not haiku.
# is 8 ok?
ok 71 - , 8 can stay.
# but: nevertheless, here we are
# this: is indented
# and: it
# might: ~
# be: yaml?
ok 72 - might be confusing
ok 73 - done now, exiting
ok 74 - test/non-tap-output.js
# not-executed.sh
# output-childtest-description.js
# /Users/isaacs/dev/js/tap/test/nested-tests-fixture.js
# TAP version 13
# nested tests, parent and child pass
ok 75 - outputs parent description
ok 76 - outputs child description
ok 77 - outputs parent description before parent result
ok 78 - outputs parent result before child description
ok 79 - outputs child description before child result
# tests 5
# pass  5
# ok
ok 80 - test/output-childtest-description.js
# result-trap.js
# TAP version 13
# trap result
ok 81 - should be equal
ok 82 - should be equal
# tests 2
# pass  2
# ok
ok 83 - test/result-trap.js
# segv.js
# TAP version 13
# setup
ok 84 - compiled seg faulter
# segv
ok 85 - should be equivalent
ok 86 - should be equivalent
ok 87 - should be equivalent
ok 88 - should be equivalent
ok 89 - should be equivalent
ok 90 - should be equal
# cleanup
ok 91 - cleaned up
# tests 8
# pass  8
# ok
ok 92 - test/segv.js
# simple-harness-test-with-plan.js
# TAP version 13
# trivial success
ok 93 - it works
# two tests
ok 94 - math should work
ok 95 - false should not be ok
# tests 3
# pass  3
# ok
ok 96 - test/simple-harness-test-with-plan.js
# simple-harness-test.js
# TAP version 13
# trivial success
ok 97 - it works
# two tests
ok 98 - math should work
ok 99 - false should not be ok
# tests 3
# pass  3
# ok
ok 100 - test/simple-harness-test.js
# test-assert-todo-skip.js
# TAP version 13
# not much
ok 101 - always passes # SKIP skip it good
ok 102 - false # SKIP always fails
ok 103 - bonus # TODO remove todo directive
ok 104 - expected # TODO implement a thing
ok 105 - always passes without explanation # SKIP
ok 106 - false without explanation # SKIP
ok 107 - bonus without explanation # TODO
ok 108 - expected without explanation # TODO
# tests 8
# skip  4
# todo  4
ok 109 - test/test-assert-todo-skip.js
# test-descriptions.js
# TAP version 13
# captures test descriptions
ok 110 - exit cleanly
ok 111 - captures SKIP description
ok 112 - skip summary is not from file
ok 113 - todo summary is not from file
not ok 114 - captures TODO description
  ---
  file: child_process.js
  line: 707
  column: 7
  stack:
    - |
      getCaller (/Users/isaacs/dev/js/tap/lib/tap-assert.js:439:17)
    - |
      Function.assert (/Users/isaacs/dev/js/tap/lib/tap-assert.js:21:16)
    - |
      Test._testAssert (/Users/isaacs/dev/js/tap/lib/tap-test.js:87:16)
    - |
      /Users/isaacs/dev/js/tap/test/test-descriptions.js:32:7
    - |
      ChildProcess.exithandler (child_process.js:707:7)
    - |
      emitTwo (events.js:87:13)
    - |
      ChildProcess.emit (events.js:169:7)
    - |
      maybeClose (child_process.js:984:16)
    - |
      Socket.<anonymous> (child_process.js:1153:11)
    - |
      emitOne (events.js:77:13)
  ...
ok 115 - exit cleanly
ok 116 - captures SKIP description
ok 117 - skip summary is not in TAP output
ok 118 - todo summary is not in TAP output
not ok 119 - captures TODO description
  ---
  file: child_process.js
  line: 707
  column: 7
  stack:
    - |
      getCaller (/Users/isaacs/dev/js/tap/lib/tap-assert.js:439:17)
    - |
      Function.assert (/Users/isaacs/dev/js/tap/lib/tap-assert.js:21:16)
    - |
      Test._testAssert (/Users/isaacs/dev/js/tap/lib/tap-test.js:87:16)
    - |
      /Users/isaacs/dev/js/tap/test/test-descriptions.js:18:7
    - |
      ChildProcess.exithandler (child_process.js:707:7)
    - |
      emitTwo (events.js:87:13)
    - |
      ChildProcess.emit (events.js:169:7)
    - |
      maybeClose (child_process.js:984:16)
    - |
      Process.ChildProcess._handle.onexit (child_process.js:1057:5)
  ...
ok 120 - exit cleanly
not ok 121 - summarizes skipped count
  ---
  file: child_process.js
  line: 707
  column: 7
  stack:
    - |
      getCaller (/Users/isaacs/dev/js/tap/lib/tap-assert.js:439:17)
    - |
      Function.assert (/Users/isaacs/dev/js/tap/lib/tap-assert.js:21:16)
    - |
      Test._testAssert (/Users/isaacs/dev/js/tap/lib/tap-test.js:87:16)
    - |
      /Users/isaacs/dev/js/tap/test/test-descriptions.js:23:7
    - |
      ChildProcess.exithandler (child_process.js:707:7)
    - |
      emitTwo (events.js:87:13)
    - |
      ChildProcess.emit (events.js:169:7)
    - |
      maybeClose (child_process.js:984:16)
    - |
      Process.ChildProcess._handle.onexit (child_process.js:1057:5)
  ...
not ok 122 - summarizes todo count
  ---
  file: child_process.js
  line: 707
  column: 7
  stack:
    - |
      getCaller (/Users/isaacs/dev/js/tap/lib/tap-assert.js:439:17)
    - |
      Function.assert (/Users/isaacs/dev/js/tap/lib/tap-assert.js:21:16)
    - |
      Test._testAssert (/Users/isaacs/dev/js/tap/lib/tap-test.js:87:16)
    - |
      /Users/isaacs/dev/js/tap/test/test-descriptions.js:24:7
    - |
      ChildProcess.exithandler (child_process.js:707:7)
    - |
      emitTwo (events.js:87:13)
    - |
      ChildProcess.emit (events.js:169:7)
    - |
      maybeClose (child_process.js:984:16)
    - |
      Process.ChildProcess._handle.onexit (child_process.js:1057:5)
  ...
# tests 13
# pass  9
# fail  4
not ok 123 - test/test-descriptions.js
  ---
  exit: 1
  command: /usr/local/bin/iojs test-descriptions.js
  ...
# test-directives.js
# TAP version 13
# captures test descriptions
# raw TAP > TAP consumer > TAP producer
ok 124 - overall result is PASS
ok 125 - captures ok SKIP
ok 126 - captures not ok SKIP
ok 127 - skip summary not in TAP output
ok 128 - captures ok TODO
ok 129 - captures not ok TODO
ok 130 - todo summary is not in TAP output
ok 131 - no ugly "undefined" in output
# raw TAP > TAP consumer > summary
ok 132 - overall result is PASS
ok 133 - no SKIP in summary
ok 134 - skip summary is not in TAP output
ok 135 - no TODO in summary
ok 136 - todo summary is not in TAP output
ok 137 - no ugly "undefined" in output
# TAP producer via require("tap")
ok 138 - overall result is PASS
ok 139 - captures ok SKIP
ok 140 - captures not ok SKIP
ok 141 - skip summary not in TAP output
ok 142 - captures ok TODO
ok 143 - captures not ok TODO
ok 144 - todo summary is not in TAP output
ok 145 - no ugly "undefined" in output
# tests 22
# pass  22
# ok
ok 146 - test/test-directives.js
# test-skip.js
# TAP version 13
ok 147 - does not count as failure # SKIP
# tests 1
# skip  1
ok 148 - test/test-skip.js
# test-test.js
# TAP version 13
# testing the test object
ok 149 - test object should be instanceof Test
ok 150 - test object should be instanceof Harness
ok 151 - test._Test should be the Test class
ok 152 - should have isNotDeepEqual method
ok 153 - isNotDeepEqual method should be a function
ok 154 - should have equals method
ok 155 - equals method should be a function
ok 156 - should have inequivalent method
ok 157 - inequivalent method should be a function
ok 158 - should have threw method
ok 159 - threw method should be a function
ok 160 - should have strictEqual method
ok 161 - strictEqual method should be a function
ok 162 - should have emit method
ok 163 - emit method should be a function
ok 164 - should have fail method
ok 165 - fail method should be a function
ok 166 - should have strictEquals method
ok 167 - strictEquals method should be a function
ok 168 - should have notLike method
ok 169 - notLike method should be a function
ok 170 - should have dissimilar method
ok 171 - dissimilar method should be a function
ok 172 - should have true method
ok 173 - true method should be a function
ok 174 - should have assert method
ok 175 - assert method should be a function
ok 176 - should have is method
ok 177 - is method should be a function
ok 178 - should have ok method
ok 179 - ok method should be a function
ok 180 - should have isEqual method
ok 181 - isEqual method should be a function
ok 182 - should have isDeeply method
ok 183 - isDeeply method should be a function
ok 184 - should have deepEqual method
ok 185 - deepEqual method should be a function
ok 186 - should have deepEquals method
ok 187 - deepEquals method should be a function
ok 188 - should have pass method
ok 189 - pass method should be a function
ok 190 - should have length method
ok 191 - length method should be a function
ok 192 - should have skip method
ok 193 - skip method should be a function
ok 194 - should have isNotEqual method
ok 195 - isNotEqual method should be a function
ok 196 - should have looseEquals method
ok 197 - looseEquals method should be a function
ok 198 - should have false method
ok 199 - false method should be a function
ok 200 - should have notDeeply method
ok 201 - notDeeply method should be a function
ok 202 - should have ifErr method
ok 203 - ifErr method should be a function
ok 204 - should have hasFields method
ok 205 - hasFields method should be a function
ok 206 - should have isNotDeeply method
ok 207 - isNotDeeply method should be a function
ok 208 - should have like method
ok 209 - like method should be a function
ok 210 - should have similar method
ok 211 - similar method should be a function
ok 212 - should have notOk method
ok 213 - notOk method should be a function
ok 214 - should have isDissimilar method
ok 215 - isDissimilar method should be a function
ok 216 - should have isEquivalent method
ok 217 - isEquivalent method should be a function
ok 218 - should have doesNotEqual method
ok 219 - doesNotEqual method should be a function
ok 220 - should have isSimilar method
ok 221 - isSimilar method should be a function
ok 222 - should have notDeepEqual method
ok 223 - notDeepEqual method should be a function
ok 224 - should have type method
ok 225 - type method should be a function
ok 226 - should have notok method
ok 227 - notok method should be a function
ok 228 - should have isInequivalent method
ok 229 - isInequivalent method should be a function
ok 230 - should have isNot method
ok 231 - isNot method should be a function
ok 232 - should have same method
ok 233 - same method should be a function
ok 234 - should have isInequal method
ok 235 - isInequal method should be a function
ok 236 - should have _endNice method
ok 237 - _endNice method should be a function
ok 238 - should have ifError method
ok 239 - ifError method should be a function
ok 240 - should have iferror method
ok 241 - iferror method should be a function
ok 242 - should have clear method
ok 243 - clear method should be a function
ok 244 - should have has method
ok 245 - has method should be a function
ok 246 - should have not method
ok 247 - not method should be a function
ok 248 - should have timeout method
ok 249 - timeout method should be a function
ok 250 - should have notSimilar method
ok 251 - notSimilar method should be a function
ok 252 - should have isUnlike method
ok 253 - isUnlike method should be a function
ok 254 - should have notEquals method
ok 255 - notEquals method should be a function
ok 256 - should have unsimilar method
ok 257 - unsimilar method should be a function
ok 258 - should have result method
ok 259 - result method should be a function
ok 260 - should have doesNotThrow method
ok 261 - doesNotThrow method should be a function
ok 262 - should have error method
ok 263 - error method should be a function
ok 264 - should have constructor method
ok 265 - constructor method should be a function
ok 266 - should have notEqual method
ok 267 - notEqual method should be a function
ok 268 - should have throws method
ok 269 - throws method should be a function
ok 270 - should have isLike method
ok 271 - isLike method should be a function
ok 272 - should have isNotSimilar method
ok 273 - isNotSimilar method should be a function
ok 274 - should have isNotEquivalent method
ok 275 - isNotEquivalent method should be a function
ok 276 - should have inequal method
ok 277 - inequal method should be a function
ok 278 - should have notEquivalent method
ok 279 - notEquivalent method should be a function
ok 280 - should have isNotLike method
ok 281 - isNotLike method should be a function
ok 282 - should have equivalent method
ok 283 - equivalent method should be a function
ok 284 - should have looseEqual method
ok 285 - looseEqual method should be a function
ok 286 - should have equal method
ok 287 - equal method should be a function
ok 288 - should have unlike method
ok 289 - unlike method should be a function
ok 290 - should have doesNotHave method
ok 291 - doesNotHave method should be a function
ok 292 - should have comment method
ok 293 - comment method should be a function
ok 294 - should have isa method
ok 295 - isa method should be a function
# tests 147
# pass  147
# ok
ok 296 - test/test-test.js
# timeout.js
timeout test
t.plan=2
a assert
b assert
# TAP version 13
# timeout test with plan only
ok 297 - a
timeout test
t.plan=2
a assert
b assert
ok 298 - b
# timeout test with plan and end
ok 299 - a
ok 300 - b
# tests 4
# pass  4
# ok
ok 301 - test/timeout.js
# trivial-success.js
ok 302 - test/trivial-success.js
# undefined_indented.js
# TAP version 13
# consume yaml
ok 303 - should be equivalent
# tests 1
# pass  1
# ok
ok 304 - test/undefined_indented.js
# valid-command.js
# TAP version 13
# valid command
ok 305 - should be equivalent
ok 306 - should be equivalent
ok 307 - should be equivalent
ok 308 - should be equivalent
ok 309 - should be equivalent
ok 310 - should be equal
# tests 6
# pass  6
# ok
ok 311 - test/valid-command.js
1..311
# tests 311
# pass  297
# fail  5
# skip  5
# todo  4
# failed 27 of 311 tests
# todo: 4
# skip: 5

`

exports[`test/parser-stringify.js TAP tap-tests.tap strict > stringified flat 1`] = `
TAP version 13
# buffer_compare.js
# TAP version 13
# same buffers
ok 1 - should be equivalent
# not same buffers
ok 2 - should not be equivalent
# tests 2
# pass  2
# ok
ok 3 - test/buffer_compare.js
# common.js
ok 4 - just setup, nothing relevant
ok 5 - test/common.js
# consumer.js
# TAP version 13
# basic.tap
ok 6 - should be equivalent
# indent.tap
ok 7 - should be equivalent
# missing.tap
ok 8 - should be equivalent
# skip-all.tap
ok 9 - should be equivalent
# yamlish.tap
ok 10 - should be equivalent
# tests 5
# pass  5
# ok
ok 11 - test/consumer.js
# debug-test.js
debug test
t.plan=1
'Debugger listening on port 5858\\n'
# TAP version 13
# debug test
ok 12 - Should output debugger message
# tests 1
# pass  1
# ok
ok 13 - test/debug-test.js
# deep-strict.js
# TAP version 13
# strictDeepEquals shouldn't care about key order
ok 14 - should be strictly equal
# strictDeepEquals shouldn't care about key order recursively
ok 15 - should be strictly equal
# strictDeepEquals shoudn't care about key order (but still might)
ok 16 - should be strictly equal
# tests 3
# pass  3
# ok
ok 17 - test/deep-strict.js
# deep.js
# TAP version 13
# deepEquals shouldn't care about key order and types
ok 18 - should be equivalent
# deepEquals shouldn't care about key order recursively and types
ok 19 - should be equivalent
# deepEquals shoudn't care about key order (but still might) and types
ok 20 - should be equivalent
# tests 3
# pass  3
# ok
ok 21 - test/deep.js
# executed.sh
ok 22 - File with executable bit should be executed
ok 23 - test/executed.sh
# exit-code.js
# TAP version 13
# exit code 1 when tap results show failure
# test exits 0, has failures
ok 24 - should be equal
ok 25 - should be equal
# test exits 1, has failures
ok 26 - should be equal
ok 27 - should be equal
# test exits 1, has no failures
ok 28 - should be equal
ok 29 - should be equal
# successes exit 0
# test that does nothing, but exits 0
ok 30 - should be equal
ok 31 - should be equal
# test that succeeds, and exits 0
ok 32 - should be equal
ok 33 - should be equal
# tests 10
# pass  10
# ok
ok 34 - test/exit-code.js
# expose-gc-test.js
gc test
t.plan=1
assert gc does not exist
# TAP version 13
# gc test when the gc isn't there
gc test
t.plan=2
gc test using --gc
t.plan=1
assert gc exists
gc test using --expose-gc
t.plan=1
assert gc exists
ok 35 - should be equal
# gc test when the gc should be there
# test for gc using --gc
ok 36 - should be equal
# test for gc using --expose-gc
ok 37 - should be equal
# cleanup
# tests 3
# pass  3
# ok
ok 38 - test/expose-gc-test.js
# global-harness-async.js
# TAP version 13
# outer
# inner 1
ok 39 - 1-1
# inner 2
ok 40 - 2-1
# inner 3
ok 41 - 3-1
ok 42 - test/global-harness-async.js
# independent-timeouts.js
# TAP version 13
# finishes in time
# finishes in time too
# tests 0
# ok
ok 43 - test/independent-timeouts.js
# isolated-conf-test.js
# TAP version 13
# one
ok 44 - should be equal
ok 45 - should be equal
# two
ok 46 - should be equal
ok 47 - should be equal
# tests 4
# pass  4
# ok
ok 48 - test/isolated-conf-test.js
# meta-test.js
# TAP version 13
# meta test
ok 49 - sanity check
ok 50 - not ok
ok 51 - total test count
ok 52 - tests passed
ok 53 - tests failed
ok 54 - ok is boolean
ok 55 - skip is number
ok 56 - results isa Results
ok 57 - test isa Test
ok 58 - test isa Harness
# tests 10
# pass  10
# ok
ok 59 - test/meta-test.js
# nested-async.js
# TAP version 13
# Harness async test support
ok 60 - sync child A
# sync child B
# async grandchild A
ok 61 - (unnamed assert)
# async grandchild B
ok 62 - (unnamed assert)
# async child
ok 63 - sync grandchild in async child A
# sync grandchild in async child B
ok 64 - (unnamed assert)
# tests 5
# pass  5
# ok
ok 65 - test/nested-async.js
# nested-test.js
# TAP version 13
# parent
ok 66 - p test
# subtest
ok 67 - ch test
# nested subtest
ok 68 - grch test
# another subtest
ok 69 - ch test 2
# tests 4
# pass  4
# ok
ok 70 - test/nested-test.js
# non-tap-output.js
# everything is fine
# there are no errors
# this output is not haiku.
# is 8 ok?
ok 71 - , 8 can stay.
# but: nevertheless, here we are
# this: is indented
# and: it
# might: ~
# be: yaml?
ok 72 - might be confusing
ok 73 - done now, exiting
ok 74 - test/non-tap-output.js
# not-executed.sh
# output-childtest-description.js
# /Users/isaacs/dev/js/tap/test/nested-tests-fixture.js
# TAP version 13
# nested tests, parent and child pass
ok 75 - outputs parent description
ok 76 - outputs child description
ok 77 - outputs parent description before parent result
ok 78 - outputs parent result before child description
ok 79 - outputs child description before child result
# tests 5
# pass  5
# ok
ok 80 - test/output-childtest-description.js
# result-trap.js
# TAP version 13
# trap result
ok 81 - should be equal
ok 82 - should be equal
# tests 2
# pass  2
# ok
ok 83 - test/result-trap.js
# segv.js
# TAP version 13
# setup
ok 84 - compiled seg faulter
# segv
ok 85 - should be equivalent
ok 86 - should be equivalent
ok 87 - should be equivalent
ok 88 - should be equivalent
ok 89 - should be equivalent
ok 90 - should be equal
# cleanup
ok 91 - cleaned up
# tests 8
# pass  8
# ok
ok 92 - test/segv.js
# simple-harness-test-with-plan.js
# TAP version 13
# trivial success
ok 93 - it works
# two tests
ok 94 - math should work
ok 95 - false should not be ok
# tests 3
# pass  3
# ok
ok 96 - test/simple-harness-test-with-plan.js
# simple-harness-test.js
# TAP version 13
# trivial success
ok 97 - it works
# two tests
ok 98 - math should work
ok 99 - false should not be ok
# tests 3
# pass  3
# ok
ok 100 - test/simple-harness-test.js
# test-assert-todo-skip.js
# TAP version 13
# not much
ok 101 - always passes # SKIP skip it good
ok 102 - false # SKIP always fails
ok 103 - bonus # TODO remove todo directive
ok 104 - expected # TODO implement a thing
ok 105 - always passes without explanation # SKIP
ok 106 - false without explanation # SKIP
ok 107 - bonus without explanation # TODO
ok 108 - expected without explanation # TODO
# tests 8
# skip  4
# todo  4
ok 109 - test/test-assert-todo-skip.js
# test-descriptions.js
# TAP version 13
# captures test descriptions
ok 110 - exit cleanly
ok 111 - captures SKIP description
ok 112 - skip summary is not from file
ok 113 - todo summary is not from file
not ok 114 - captures TODO description
  ---
  file: child_process.js
  line: 707
  column: 7
  stack:
    - |
      getCaller (/Users/isaacs/dev/js/tap/lib/tap-assert.js:439:17)
    - |
      Function.assert (/Users/isaacs/dev/js/tap/lib/tap-assert.js:21:16)
    - |
      Test._testAssert (/Users/isaacs/dev/js/tap/lib/tap-test.js:87:16)
    - |
      /Users/isaacs/dev/js/tap/test/test-descriptions.js:32:7
    - |
      ChildProcess.exithandler (child_process.js:707:7)
    - |
      emitTwo (events.js:87:13)
    - |
      ChildProcess.emit (events.js:169:7)
    - |
      maybeClose (child_process.js:984:16)
    - |
      Socket.<anonymous> (child_process.js:1153:11)
    - |
      emitOne (events.js:77:13)
  ...
ok 115 - exit cleanly
ok 116 - captures SKIP description
ok 117 - skip summary is not in TAP output
ok 118 - todo summary is not in TAP output
not ok 119 - captures TODO description
  ---
  file: child_process.js
  line: 707
  column: 7
  stack:
    - |
      getCaller (/Users/isaacs/dev/js/tap/lib/tap-assert.js:439:17)
    - |
      Function.assert (/Users/isaacs/dev/js/tap/lib/tap-assert.js:21:16)
    - |
      Test._testAssert (/Users/isaacs/dev/js/tap/lib/tap-test.js:87:16)
    - |
      /Users/isaacs/dev/js/tap/test/test-descriptions.js:18:7
    - |
      ChildProcess.exithandler (child_process.js:707:7)
    - |
      emitTwo (events.js:87:13)
    - |
      ChildProcess.emit (events.js:169:7)
    - |
      maybeClose (child_process.js:984:16)
    - |
      Process.ChildProcess._handle.onexit (child_process.js:1057:5)
  ...
ok 120 - exit cleanly
not ok 121 - summarizes skipped count
  ---
  file: child_process.js
  line: 707
  column: 7
  stack:
    - |
      getCaller (/Users/isaacs/dev/js/tap/lib/tap-assert.js:439:17)
    - |
      Function.assert (/Users/isaacs/dev/js/tap/lib/tap-assert.js:21:16)
    - |
      Test._testAssert (/Users/isaacs/dev/js/tap/lib/tap-test.js:87:16)
    - |
      /Users/isaacs/dev/js/tap/test/test-descriptions.js:23:7
    - |
      ChildProcess.exithandler (child_process.js:707:7)
    - |
      emitTwo (events.js:87:13)
    - |
      ChildProcess.emit (events.js:169:7)
    - |
      maybeClose (child_process.js:984:16)
    - |
      Process.ChildProcess._handle.onexit (child_process.js:1057:5)
  ...
not ok 122 - summarizes todo count
  ---
  file: child_process.js
  line: 707
  column: 7
  stack:
    - |
      getCaller (/Users/isaacs/dev/js/tap/lib/tap-assert.js:439:17)
    - |
      Function.assert (/Users/isaacs/dev/js/tap/lib/tap-assert.js:21:16)
    - |
      Test._testAssert (/Users/isaacs/dev/js/tap/lib/tap-test.js:87:16)
    - |
      /Users/isaacs/dev/js/tap/test/test-descriptions.js:24:7
    - |
      ChildProcess.exithandler (child_process.js:707:7)
    - |
      emitTwo (events.js:87:13)
    - |
      ChildProcess.emit (events.js:169:7)
    - |
      maybeClose (child_process.js:984:16)
    - |
      Process.ChildProcess._handle.onexit (child_process.js:1057:5)
  ...
# tests 13
# pass  9
# fail  4
not ok 123 - test/test-descriptions.js
  ---
  exit: 1
  command: /usr/local/bin/iojs test-descriptions.js
  ...
# test-directives.js
# TAP version 13
# captures test descriptions
# raw TAP > TAP consumer > TAP producer
ok 124 - overall result is PASS
ok 125 - captures ok SKIP
ok 126 - captures not ok SKIP
ok 127 - skip summary not in TAP output
ok 128 - captures ok TODO
ok 129 - captures not ok TODO
ok 130 - todo summary is not in TAP output
ok 131 - no ugly "undefined" in output
# raw TAP > TAP consumer > summary
ok 132 - overall result is PASS
ok 133 - no SKIP in summary
ok 134 - skip summary is not in TAP output
ok 135 - no TODO in summary
ok 136 - todo summary is not in TAP output
ok 137 - no ugly "undefined" in output
# TAP producer via require("tap")
ok 138 - overall result is PASS
ok 139 - captures ok SKIP
ok 140 - captures not ok SKIP
ok 141 - skip summary not in TAP output
ok 142 - captures ok TODO
ok 143 - captures not ok TODO
ok 144 - todo summary is not in TAP output
ok 145 - no ugly "undefined" in output
# tests 22
# pass  22
# ok
ok 146 - test/test-directives.js
# test-skip.js
# TAP version 13
ok 147 - does not count as failure # SKIP
# tests 1
# skip  1
ok 148 - test/test-skip.js
# test-test.js
# TAP version 13
# testing the test object
ok 149 - test object should be instanceof Test
ok 150 - test object should be instanceof Harness
ok 151 - test._Test should be the Test class
ok 152 - should have isNotDeepEqual method
ok 153 - isNotDeepEqual method should be a function
ok 154 - should have equals method
ok 155 - equals method should be a function
ok 156 - should have inequivalent method
ok 157 - inequivalent method should be a function
ok 158 - should have threw method
ok 159 - threw method should be a function
ok 160 - should have strictEqual method
ok 161 - strictEqual method should be a function
ok 162 - should have emit method
ok 163 - emit method should be a function
ok 164 - should have fail method
ok 165 - fail method should be a function
ok 166 - should have strictEquals method
ok 167 - strictEquals method should be a function
ok 168 - should have notLike method
ok 169 - notLike method should be a function
ok 170 - should have dissimilar method
ok 171 - dissimilar method should be a function
ok 172 - should have true method
ok 173 - true method should be a function
ok 174 - should have assert method
ok 175 - assert method should be a function
ok 176 - should have is method
ok 177 - is method should be a function
ok 178 - should have ok method
ok 179 - ok method should be a function
ok 180 - should have isEqual method
ok 181 - isEqual method should be a function
ok 182 - should have isDeeply method
ok 183 - isDeeply method should be a function
ok 184 - should have deepEqual method
ok 185 - deepEqual method should be a function
ok 186 - should have deepEquals method
ok 187 - deepEquals method should be a function
ok 188 - should have pass method
ok 189 - pass method should be a function
ok 190 - should have length method
ok 191 - length method should be a function
ok 192 - should have skip method
ok 193 - skip method should be a function
ok 194 - should have isNotEqual method
ok 195 - isNotEqual method should be a function
ok 196 - should have looseEquals method
ok 197 - looseEquals method should be a function
ok 198 - should have false method
ok 199 - false method should be a function
ok 200 - should have notDeeply method
ok 201 - notDeeply method should be a function
ok 202 - should have ifErr method
ok 203 - ifErr method should be a function
ok 204 - should have hasFields method
ok 205 - hasFields method should be a function
ok 206 - should have isNotDeeply method
ok 207 - isNotDeeply method should be a function
ok 208 - should have like method
ok 209 - like method should be a function
ok 210 - should have similar method
ok 211 - similar method should be a function
ok 212 - should have notOk method
ok 213 - notOk method should be a function
ok 214 - should have isDissimilar method
ok 215 - isDissimilar method should be a function
ok 216 - should have isEquivalent method
ok 217 - isEquivalent method should be a function
ok 218 - should have doesNotEqual method
ok 219 - doesNotEqual method should be a function
ok 220 - should have isSimilar method
ok 221 - isSimilar method should be a function
ok 222 - should have notDeepEqual method
ok 223 - notDeepEqual method should be a function
ok 224 - should have type method
ok 225 - type method should be a function
ok 226 - should have notok method
ok 227 - notok method should be a function
ok 228 - should have isInequivalent method
ok 229 - isInequivalent method should be a function
ok 230 - should have isNot method
ok 231 - isNot method should be a function
ok 232 - should have same method
ok 233 - same method should be a function
ok 234 - should have isInequal method
ok 235 - isInequal method should be a function
ok 236 - should have _endNice method
ok 237 - _endNice method should be a function
ok 238 - should have ifError method
ok 239 - ifError method should be a function
ok 240 - should have iferror method
ok 241 - iferror method should be a function
ok 242 - should have clear method
ok 243 - clear method should be a function
ok 244 - should have has method
ok 245 - has method should be a function
ok 246 - should have not method
ok 247 - not method should be a function
ok 248 - should have timeout method
ok 249 - timeout method should be a function
ok 250 - should have notSimilar method
ok 251 - notSimilar method should be a function
ok 252 - should have isUnlike method
ok 253 - isUnlike method should be a function
ok 254 - should have notEquals method
ok 255 - notEquals method should be a function
ok 256 - should have unsimilar method
ok 257 - unsimilar method should be a function
ok 258 - should have result method
ok 259 - result method should be a function
ok 260 - should have doesNotThrow method
ok 261 - doesNotThrow method should be a function
ok 262 - should have error method
ok 263 - error method should be a function
ok 264 - should have constructor method
ok 265 - constructor method should be a function
ok 266 - should have notEqual method
ok 267 - notEqual method should be a function
ok 268 - should have throws method
ok 269 - throws method should be a function
ok 270 - should have isLike method
ok 271 - isLike method should be a function
ok 272 - should have isNotSimilar method
ok 273 - isNotSimilar method should be a function
ok 274 - should have isNotEquivalent method
ok 275 - isNotEquivalent method should be a function
ok 276 - should have inequal method
ok 277 - inequal method should be a function
ok 278 - should have notEquivalent method
ok 279 - notEquivalent method should be a function
ok 280 - should have isNotLike method
ok 281 - isNotLike method should be a function
ok 282 - should have equivalent method
ok 283 - equivalent method should be a function
ok 284 - should have looseEqual method
ok 285 - looseEqual method should be a function
ok 286 - should have equal method
ok 287 - equal method should be a function
ok 288 - should have unlike method
ok 289 - unlike method should be a function
ok 290 - should have doesNotHave method
ok 291 - doesNotHave method should be a function
ok 292 - should have comment method
ok 293 - comment method should be a function
ok 294 - should have isa method
ok 295 - isa method should be a function
# tests 147
# pass  147
# ok
ok 296 - test/test-test.js
# timeout.js
timeout test
t.plan=2
a assert
b assert
# TAP version 13
# timeout test with plan only
ok 297 - a
timeout test
t.plan=2
a assert
b assert
ok 298 - b
# timeout test with plan and end
ok 299 - a
ok 300 - b
# tests 4
# pass  4
# ok
ok 301 - test/timeout.js
# trivial-success.js
ok 302 - test/trivial-success.js
# undefined_indented.js
# TAP version 13
# consume yaml
ok 303 - should be equivalent
# tests 1
# pass  1
# ok
ok 304 - test/undefined_indented.js
# valid-command.js
# TAP version 13
# valid command
ok 305 - should be equivalent
ok 306 - should be equivalent
ok 307 - should be equivalent
ok 308 - should be equivalent
ok 309 - should be equivalent
ok 310 - should be equal
# tests 6
# pass  6
# ok
ok 311 - test/valid-command.js
1..311
# tests 311
# pass  297
# fail  5
# skip  5
# todo  4
# failed 27 of 311 tests
# todo: 4
# skip: 5

`

exports[`test/parser-stringify.js TAP tap-tests.tap strictBail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "comment",
    "# buffer_compare.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# same buffers\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# not same buffers\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "should not be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 2\\n",
  ],
  Array [
    "comment",
    "# pass  2\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "test/buffer_compare.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# common.js\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "name": "just setup, nothing relevant",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "name": "test/common.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# consumer.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# basic.tap\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 6,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# indent.tap\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 7,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# missing.tap\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 8,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# skip-all.tap\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 9,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# yamlish.tap\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 10,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 5\\n",
  ],
  Array [
    "comment",
    "# pass  5\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 11,
      "name": "test/consumer.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# debug-test.js\\n",
  ],
  Array [
    "extra",
    "debug test\\n",
  ],
  Array [
    "extra",
    "t.plan=1\\n",
  ],
  Array [
    "extra",
    "'Debugger listening on port 5858\\\\n'\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# debug test\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 12,
      "name": "Should output debugger message",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 1\\n",
  ],
  Array [
    "comment",
    "# pass  1\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 13,
      "name": "test/debug-test.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# deep-strict.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# strictDeepEquals shouldn't care about key order\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 14,
      "name": "should be strictly equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# strictDeepEquals shouldn't care about key order recursively\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 15,
      "name": "should be strictly equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# strictDeepEquals shoudn't care about key order (but still might)\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 16,
      "name": "should be strictly equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 3\\n",
  ],
  Array [
    "comment",
    "# pass  3\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 17,
      "name": "test/deep-strict.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# deep.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# deepEquals shouldn't care about key order and types\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 18,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# deepEquals shouldn't care about key order recursively and types\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 19,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# deepEquals shoudn't care about key order (but still might) and types\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 20,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 3\\n",
  ],
  Array [
    "comment",
    "# pass  3\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 21,
      "name": "test/deep.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# executed.sh\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 22,
      "name": "File with executable bit should be executed",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 23,
      "name": "test/executed.sh",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# exit-code.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# exit code 1 when tap results show failure\\n",
  ],
  Array [
    "comment",
    "# test exits 0, has failures\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 24,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 25,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test exits 1, has failures\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 26,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 27,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test exits 1, has no failures\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 28,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 29,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# successes exit 0\\n",
  ],
  Array [
    "comment",
    "# test that does nothing, but exits 0\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 30,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 31,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test that succeeds, and exits 0\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 32,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 33,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 10\\n",
  ],
  Array [
    "comment",
    "# pass  10\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 34,
      "name": "test/exit-code.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# expose-gc-test.js\\n",
  ],
  Array [
    "extra",
    "gc test\\n",
  ],
  Array [
    "extra",
    "t.plan=1\\n",
  ],
  Array [
    "extra",
    "assert gc does not exist\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# gc test when the gc isn't there\\n",
  ],
  Array [
    "extra",
    "gc test\\n",
  ],
  Array [
    "extra",
    "t.plan=2\\n",
  ],
  Array [
    "extra",
    "gc test using --gc\\n",
  ],
  Array [
    "extra",
    "t.plan=1\\n",
  ],
  Array [
    "extra",
    "assert gc exists\\n",
  ],
  Array [
    "extra",
    "gc test using --expose-gc\\n",
  ],
  Array [
    "extra",
    "t.plan=1\\n",
  ],
  Array [
    "extra",
    "assert gc exists\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 35,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# gc test when the gc should be there\\n",
  ],
  Array [
    "comment",
    "# test for gc using --gc\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 36,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test for gc using --expose-gc\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 37,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# cleanup\\n",
  ],
  Array [
    "comment",
    "# tests 3\\n",
  ],
  Array [
    "comment",
    "# pass  3\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 38,
      "name": "test/expose-gc-test.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# global-harness-async.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# outer\\n",
  ],
  Array [
    "comment",
    "# inner 1\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 39,
      "name": "1-1",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# inner 2\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 40,
      "name": "2-1",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# inner 3\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 41,
      "name": "3-1",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 42,
      "name": "test/global-harness-async.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# independent-timeouts.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# finishes in time\\n",
  ],
  Array [
    "comment",
    "# finishes in time too\\n",
  ],
  Array [
    "comment",
    "# tests 0\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 43,
      "name": "test/independent-timeouts.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# isolated-conf-test.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# one\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 44,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 45,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# two\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 46,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 47,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 4\\n",
  ],
  Array [
    "comment",
    "# pass  4\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 48,
      "name": "test/isolated-conf-test.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# meta-test.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# meta test\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 49,
      "name": "sanity check",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 50,
      "name": "not ok",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 51,
      "name": "total test count",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 52,
      "name": "tests passed",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 53,
      "name": "tests failed",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 54,
      "name": "ok is boolean",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 55,
      "name": "skip is number",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 56,
      "name": "results isa Results",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 57,
      "name": "test isa Test",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 58,
      "name": "test isa Harness",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 10\\n",
  ],
  Array [
    "comment",
    "# pass  10\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 59,
      "name": "test/meta-test.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# nested-async.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# Harness async test support\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 60,
      "name": "sync child A",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# sync child B\\n",
  ],
  Array [
    "comment",
    "# async grandchild A\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 61,
      "name": "(unnamed assert)",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# async grandchild B\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 62,
      "name": "(unnamed assert)",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# async child\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 63,
      "name": "sync grandchild in async child A",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# sync grandchild in async child B\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 64,
      "name": "(unnamed assert)",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 5\\n",
  ],
  Array [
    "comment",
    "# pass  5\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 65,
      "name": "test/nested-async.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# nested-test.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# parent\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 66,
      "name": "p test",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# subtest\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 67,
      "name": "ch test",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# nested subtest\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 68,
      "name": "grch test",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# another subtest\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 69,
      "name": "ch test 2",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 4\\n",
  ],
  Array [
    "comment",
    "# pass  4\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 70,
      "name": "test/nested-test.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# non-tap-output.js\\n",
  ],
  Array [
    "comment",
    "# everything is fine\\n",
  ],
  Array [
    "comment",
    "# there are no errors\\n",
  ],
  Array [
    "comment",
    "# this output is not haiku.\\n",
  ],
  Array [
    "comment",
    "# is 8 ok?\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 71,
      "name": ", 8 can stay.",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# but: nevertheless, here we are\\n",
  ],
  Array [
    "comment",
    "# this: is indented\\n",
  ],
  Array [
    "comment",
    "# and: it\\n",
  ],
  Array [
    "comment",
    "# might: ~\\n",
  ],
  Array [
    "comment",
    "# be: yaml?\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 72,
      "name": "might be confusing",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 73,
      "name": "done now, exiting",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 74,
      "name": "test/non-tap-output.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# not-executed.sh\\n",
  ],
  Array [
    "comment",
    "# output-childtest-description.js\\n",
  ],
  Array [
    "comment",
    "# /Users/isaacs/dev/js/tap/test/nested-tests-fixture.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# nested tests, parent and child pass\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 75,
      "name": "outputs parent description",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 76,
      "name": "outputs child description",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 77,
      "name": "outputs parent description before parent result",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 78,
      "name": "outputs parent result before child description",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 79,
      "name": "outputs child description before child result",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 5\\n",
  ],
  Array [
    "comment",
    "# pass  5\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 80,
      "name": "test/output-childtest-description.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# result-trap.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# trap result\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 81,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 82,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 2\\n",
  ],
  Array [
    "comment",
    "# pass  2\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 83,
      "name": "test/result-trap.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# segv.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# setup\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 84,
      "name": "compiled seg faulter",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# segv\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 85,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 86,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 87,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 88,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 89,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 90,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# cleanup\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 91,
      "name": "cleaned up",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 8\\n",
  ],
  Array [
    "comment",
    "# pass  8\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 92,
      "name": "test/segv.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# simple-harness-test-with-plan.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# trivial success\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 93,
      "name": "it works",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# two tests\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 94,
      "name": "math should work",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 95,
      "name": "false should not be ok",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 3\\n",
  ],
  Array [
    "comment",
    "# pass  3\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 96,
      "name": "test/simple-harness-test-with-plan.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# simple-harness-test.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# trivial success\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 97,
      "name": "it works",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# two tests\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 98,
      "name": "math should work",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 99,
      "name": "false should not be ok",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# tests 3\\n",
  ],
  Array [
    "comment",
    "# pass  3\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 100,
      "name": "test/simple-harness-test.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test-assert-todo-skip.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# not much\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 101,
      "name": "always passes",
      "ok": true,
      "skip": "skip it good",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 102,
      "name": "false",
      "ok": true,
      "skip": "always fails",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 103,
      "name": "bonus",
      "ok": true,
      "todo": "remove todo directive",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 104,
      "name": "expected",
      "ok": true,
      "todo": "implement a thing",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 105,
      "name": "always passes without explanation",
      "ok": true,
      "skip": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 106,
      "name": "false without explanation",
      "ok": true,
      "skip": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 107,
      "name": "bonus without explanation",
      "ok": true,
      "todo": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 108,
      "name": "expected without explanation",
      "ok": true,
      "todo": true,
    },
  ],
  Array [
    "comment",
    "# tests 8\\n",
  ],
  Array [
    "comment",
    "# skip  4\\n",
  ],
  Array [
    "comment",
    "# todo  4\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 109,
      "name": "test/test-assert-todo-skip.js",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test-descriptions.js\\n",
  ],
  Array [
    "comment",
    "# TAP version 13\\n",
  ],
  Array [
    "comment",
    "# captures test descriptions\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 110,
      "name": "exit cleanly",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 111,
      "name": "captures SKIP description",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 112,
      "name": "skip summary is not from file",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 113,
      "name": "todo summary is not from file",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "diag": Object {
        "column": 7,
        "file": "child_process.js",
        "line": 707,
        "stack": Array [
          "getCaller (/Users/isaacs/dev/js/tap/lib/tap-assert.js:439:17)\\n",
          "Function.assert (/Users/isaacs/dev/js/tap/lib/tap-assert.js:21:16)\\n",
          "Test._testAssert (/Users/isaacs/dev/js/tap/lib/tap-test.js:87:16)\\n",
          "/Users/isaacs/dev/js/tap/test/test-descriptions.js:32:7\\n",
          "ChildProcess.exithandler (child_process.js:707:7)\\n",
          "emitTwo (events.js:87:13)\\n",
          "ChildProcess.emit (events.js:169:7)\\n",
          "maybeClose (child_process.js:984:16)\\n",
          "Socket.<anonymous> (child_process.js:1153:11)\\n",
          "emitOne (events.js:77:13)\\n",
        ],
      },
      "fullname": "",
      "id": 114,
      "name": "captures TODO description",
      "ok": false,
    },
  ],
  Array [
    "bailout",
    "captures TODO description",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": "captures TODO description",
      "count": 114,
      "fail": 15,
      "failures": Array [
        Object {
          "data": "debug test\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "t.plan=1\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "'Debugger listening on port 5858\\\\n'\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "gc test\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "t.plan=1\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "assert gc does not exist\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "gc test\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "t.plan=2\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "gc test using --gc\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "t.plan=1\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "assert gc exists\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "gc test using --expose-gc\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "t.plan=1\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "assert gc exists\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Result {
          "diag": Object {
            "column": 7,
            "file": "child_process.js",
            "line": 707,
            "stack": Array [
              "getCaller (/Users/isaacs/dev/js/tap/lib/tap-assert.js:439:17)\\n",
              "Function.assert (/Users/isaacs/dev/js/tap/lib/tap-assert.js:21:16)\\n",
              "Test._testAssert (/Users/isaacs/dev/js/tap/lib/tap-test.js:87:16)\\n",
              "/Users/isaacs/dev/js/tap/test/test-descriptions.js:32:7\\n",
              "ChildProcess.exithandler (child_process.js:707:7)\\n",
              "emitTwo (events.js:87:13)\\n",
              "ChildProcess.emit (events.js:169:7)\\n",
              "maybeClose (child_process.js:984:16)\\n",
              "Socket.<anonymous> (child_process.js:1153:11)\\n",
              "emitOne (events.js:77:13)\\n",
            ],
          },
          "fullname": "",
          "id": 114,
          "name": "captures TODO description",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 113,
      "plan": FinalPlan {
        "comment": "",
        "end": null,
        "skipAll": false,
        "skipReason": "",
        "start": null,
      },
      "skip": 4,
      "time": null,
      "todo": 4,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP tap-tests.tap strictBail > stringified 1`] = `
TAP version 13
# buffer_compare.js
# TAP version 13
# same buffers
ok 1 - should be equivalent
# not same buffers
ok 2 - should not be equivalent
# tests 2
# pass  2
# ok
ok 3 - test/buffer_compare.js
# common.js
ok 4 - just setup, nothing relevant
ok 5 - test/common.js
# consumer.js
# TAP version 13
# basic.tap
ok 6 - should be equivalent
# indent.tap
ok 7 - should be equivalent
# missing.tap
ok 8 - should be equivalent
# skip-all.tap
ok 9 - should be equivalent
# yamlish.tap
ok 10 - should be equivalent
# tests 5
# pass  5
# ok
ok 11 - test/consumer.js
# debug-test.js
debug test
t.plan=1
'Debugger listening on port 5858\\n'
# TAP version 13
# debug test
ok 12 - Should output debugger message
# tests 1
# pass  1
# ok
ok 13 - test/debug-test.js
# deep-strict.js
# TAP version 13
# strictDeepEquals shouldn't care about key order
ok 14 - should be strictly equal
# strictDeepEquals shouldn't care about key order recursively
ok 15 - should be strictly equal
# strictDeepEquals shoudn't care about key order (but still might)
ok 16 - should be strictly equal
# tests 3
# pass  3
# ok
ok 17 - test/deep-strict.js
# deep.js
# TAP version 13
# deepEquals shouldn't care about key order and types
ok 18 - should be equivalent
# deepEquals shouldn't care about key order recursively and types
ok 19 - should be equivalent
# deepEquals shoudn't care about key order (but still might) and types
ok 20 - should be equivalent
# tests 3
# pass  3
# ok
ok 21 - test/deep.js
# executed.sh
ok 22 - File with executable bit should be executed
ok 23 - test/executed.sh
# exit-code.js
# TAP version 13
# exit code 1 when tap results show failure
# test exits 0, has failures
ok 24 - should be equal
ok 25 - should be equal
# test exits 1, has failures
ok 26 - should be equal
ok 27 - should be equal
# test exits 1, has no failures
ok 28 - should be equal
ok 29 - should be equal
# successes exit 0
# test that does nothing, but exits 0
ok 30 - should be equal
ok 31 - should be equal
# test that succeeds, and exits 0
ok 32 - should be equal
ok 33 - should be equal
# tests 10
# pass  10
# ok
ok 34 - test/exit-code.js
# expose-gc-test.js
gc test
t.plan=1
assert gc does not exist
# TAP version 13
# gc test when the gc isn't there
gc test
t.plan=2
gc test using --gc
t.plan=1
assert gc exists
gc test using --expose-gc
t.plan=1
assert gc exists
ok 35 - should be equal
# gc test when the gc should be there
# test for gc using --gc
ok 36 - should be equal
# test for gc using --expose-gc
ok 37 - should be equal
# cleanup
# tests 3
# pass  3
# ok
ok 38 - test/expose-gc-test.js
# global-harness-async.js
# TAP version 13
# outer
# inner 1
ok 39 - 1-1
# inner 2
ok 40 - 2-1
# inner 3
ok 41 - 3-1
ok 42 - test/global-harness-async.js
# independent-timeouts.js
# TAP version 13
# finishes in time
# finishes in time too
# tests 0
# ok
ok 43 - test/independent-timeouts.js
# isolated-conf-test.js
# TAP version 13
# one
ok 44 - should be equal
ok 45 - should be equal
# two
ok 46 - should be equal
ok 47 - should be equal
# tests 4
# pass  4
# ok
ok 48 - test/isolated-conf-test.js
# meta-test.js
# TAP version 13
# meta test
ok 49 - sanity check
ok 50 - not ok
ok 51 - total test count
ok 52 - tests passed
ok 53 - tests failed
ok 54 - ok is boolean
ok 55 - skip is number
ok 56 - results isa Results
ok 57 - test isa Test
ok 58 - test isa Harness
# tests 10
# pass  10
# ok
ok 59 - test/meta-test.js
# nested-async.js
# TAP version 13
# Harness async test support
ok 60 - sync child A
# sync child B
# async grandchild A
ok 61 - (unnamed assert)
# async grandchild B
ok 62 - (unnamed assert)
# async child
ok 63 - sync grandchild in async child A
# sync grandchild in async child B
ok 64 - (unnamed assert)
# tests 5
# pass  5
# ok
ok 65 - test/nested-async.js
# nested-test.js
# TAP version 13
# parent
ok 66 - p test
# subtest
ok 67 - ch test
# nested subtest
ok 68 - grch test
# another subtest
ok 69 - ch test 2
# tests 4
# pass  4
# ok
ok 70 - test/nested-test.js
# non-tap-output.js
# everything is fine
# there are no errors
# this output is not haiku.
# is 8 ok?
ok 71 - , 8 can stay.
# but: nevertheless, here we are
# this: is indented
# and: it
# might: ~
# be: yaml?
ok 72 - might be confusing
ok 73 - done now, exiting
ok 74 - test/non-tap-output.js
# not-executed.sh
# output-childtest-description.js
# /Users/isaacs/dev/js/tap/test/nested-tests-fixture.js
# TAP version 13
# nested tests, parent and child pass
ok 75 - outputs parent description
ok 76 - outputs child description
ok 77 - outputs parent description before parent result
ok 78 - outputs parent result before child description
ok 79 - outputs child description before child result
# tests 5
# pass  5
# ok
ok 80 - test/output-childtest-description.js
# result-trap.js
# TAP version 13
# trap result
ok 81 - should be equal
ok 82 - should be equal
# tests 2
# pass  2
# ok
ok 83 - test/result-trap.js
# segv.js
# TAP version 13
# setup
ok 84 - compiled seg faulter
# segv
ok 85 - should be equivalent
ok 86 - should be equivalent
ok 87 - should be equivalent
ok 88 - should be equivalent
ok 89 - should be equivalent
ok 90 - should be equal
# cleanup
ok 91 - cleaned up
# tests 8
# pass  8
# ok
ok 92 - test/segv.js
# simple-harness-test-with-plan.js
# TAP version 13
# trivial success
ok 93 - it works
# two tests
ok 94 - math should work
ok 95 - false should not be ok
# tests 3
# pass  3
# ok
ok 96 - test/simple-harness-test-with-plan.js
# simple-harness-test.js
# TAP version 13
# trivial success
ok 97 - it works
# two tests
ok 98 - math should work
ok 99 - false should not be ok
# tests 3
# pass  3
# ok
ok 100 - test/simple-harness-test.js
# test-assert-todo-skip.js
# TAP version 13
# not much
ok 101 - always passes # SKIP skip it good
ok 102 - false # SKIP always fails
ok 103 - bonus # TODO remove todo directive
ok 104 - expected # TODO implement a thing
ok 105 - always passes without explanation # SKIP
ok 106 - false without explanation # SKIP
ok 107 - bonus without explanation # TODO
ok 108 - expected without explanation # TODO
# tests 8
# skip  4
# todo  4
ok 109 - test/test-assert-todo-skip.js
# test-descriptions.js
# TAP version 13
# captures test descriptions
ok 110 - exit cleanly
ok 111 - captures SKIP description
ok 112 - skip summary is not from file
ok 113 - todo summary is not from file
not ok 114 - captures TODO description
  ---
  file: child_process.js
  line: 707
  column: 7
  stack:
    - |
      getCaller (/Users/isaacs/dev/js/tap/lib/tap-assert.js:439:17)
    - |
      Function.assert (/Users/isaacs/dev/js/tap/lib/tap-assert.js:21:16)
    - |
      Test._testAssert (/Users/isaacs/dev/js/tap/lib/tap-test.js:87:16)
    - |
      /Users/isaacs/dev/js/tap/test/test-descriptions.js:32:7
    - |
      ChildProcess.exithandler (child_process.js:707:7)
    - |
      emitTwo (events.js:87:13)
    - |
      ChildProcess.emit (events.js:169:7)
    - |
      maybeClose (child_process.js:984:16)
    - |
      Socket.<anonymous> (child_process.js:1153:11)
    - |
      emitOne (events.js:77:13)
  ...
Bail out! captures TODO description

`

exports[`test/parser-stringify.js TAP tap-tests.tap strictBail > stringified flat 1`] = `
TAP version 13
# buffer_compare.js
# TAP version 13
# same buffers
ok 1 - should be equivalent
# not same buffers
ok 2 - should not be equivalent
# tests 2
# pass  2
# ok
ok 3 - test/buffer_compare.js
# common.js
ok 4 - just setup, nothing relevant
ok 5 - test/common.js
# consumer.js
# TAP version 13
# basic.tap
ok 6 - should be equivalent
# indent.tap
ok 7 - should be equivalent
# missing.tap
ok 8 - should be equivalent
# skip-all.tap
ok 9 - should be equivalent
# yamlish.tap
ok 10 - should be equivalent
# tests 5
# pass  5
# ok
ok 11 - test/consumer.js
# debug-test.js
debug test
t.plan=1
'Debugger listening on port 5858\\n'
# TAP version 13
# debug test
ok 12 - Should output debugger message
# tests 1
# pass  1
# ok
ok 13 - test/debug-test.js
# deep-strict.js
# TAP version 13
# strictDeepEquals shouldn't care about key order
ok 14 - should be strictly equal
# strictDeepEquals shouldn't care about key order recursively
ok 15 - should be strictly equal
# strictDeepEquals shoudn't care about key order (but still might)
ok 16 - should be strictly equal
# tests 3
# pass  3
# ok
ok 17 - test/deep-strict.js
# deep.js
# TAP version 13
# deepEquals shouldn't care about key order and types
ok 18 - should be equivalent
# deepEquals shouldn't care about key order recursively and types
ok 19 - should be equivalent
# deepEquals shoudn't care about key order (but still might) and types
ok 20 - should be equivalent
# tests 3
# pass  3
# ok
ok 21 - test/deep.js
# executed.sh
ok 22 - File with executable bit should be executed
ok 23 - test/executed.sh
# exit-code.js
# TAP version 13
# exit code 1 when tap results show failure
# test exits 0, has failures
ok 24 - should be equal
ok 25 - should be equal
# test exits 1, has failures
ok 26 - should be equal
ok 27 - should be equal
# test exits 1, has no failures
ok 28 - should be equal
ok 29 - should be equal
# successes exit 0
# test that does nothing, but exits 0
ok 30 - should be equal
ok 31 - should be equal
# test that succeeds, and exits 0
ok 32 - should be equal
ok 33 - should be equal
# tests 10
# pass  10
# ok
ok 34 - test/exit-code.js
# expose-gc-test.js
gc test
t.plan=1
assert gc does not exist
# TAP version 13
# gc test when the gc isn't there
gc test
t.plan=2
gc test using --gc
t.plan=1
assert gc exists
gc test using --expose-gc
t.plan=1
assert gc exists
ok 35 - should be equal
# gc test when the gc should be there
# test for gc using --gc
ok 36 - should be equal
# test for gc using --expose-gc
ok 37 - should be equal
# cleanup
# tests 3
# pass  3
# ok
ok 38 - test/expose-gc-test.js
# global-harness-async.js
# TAP version 13
# outer
# inner 1
ok 39 - 1-1
# inner 2
ok 40 - 2-1
# inner 3
ok 41 - 3-1
ok 42 - test/global-harness-async.js
# independent-timeouts.js
# TAP version 13
# finishes in time
# finishes in time too
# tests 0
# ok
ok 43 - test/independent-timeouts.js
# isolated-conf-test.js
# TAP version 13
# one
ok 44 - should be equal
ok 45 - should be equal
# two
ok 46 - should be equal
ok 47 - should be equal
# tests 4
# pass  4
# ok
ok 48 - test/isolated-conf-test.js
# meta-test.js
# TAP version 13
# meta test
ok 49 - sanity check
ok 50 - not ok
ok 51 - total test count
ok 52 - tests passed
ok 53 - tests failed
ok 54 - ok is boolean
ok 55 - skip is number
ok 56 - results isa Results
ok 57 - test isa Test
ok 58 - test isa Harness
# tests 10
# pass  10
# ok
ok 59 - test/meta-test.js
# nested-async.js
# TAP version 13
# Harness async test support
ok 60 - sync child A
# sync child B
# async grandchild A
ok 61 - (unnamed assert)
# async grandchild B
ok 62 - (unnamed assert)
# async child
ok 63 - sync grandchild in async child A
# sync grandchild in async child B
ok 64 - (unnamed assert)
# tests 5
# pass  5
# ok
ok 65 - test/nested-async.js
# nested-test.js
# TAP version 13
# parent
ok 66 - p test
# subtest
ok 67 - ch test
# nested subtest
ok 68 - grch test
# another subtest
ok 69 - ch test 2
# tests 4
# pass  4
# ok
ok 70 - test/nested-test.js
# non-tap-output.js
# everything is fine
# there are no errors
# this output is not haiku.
# is 8 ok?
ok 71 - , 8 can stay.
# but: nevertheless, here we are
# this: is indented
# and: it
# might: ~
# be: yaml?
ok 72 - might be confusing
ok 73 - done now, exiting
ok 74 - test/non-tap-output.js
# not-executed.sh
# output-childtest-description.js
# /Users/isaacs/dev/js/tap/test/nested-tests-fixture.js
# TAP version 13
# nested tests, parent and child pass
ok 75 - outputs parent description
ok 76 - outputs child description
ok 77 - outputs parent description before parent result
ok 78 - outputs parent result before child description
ok 79 - outputs child description before child result
# tests 5
# pass  5
# ok
ok 80 - test/output-childtest-description.js
# result-trap.js
# TAP version 13
# trap result
ok 81 - should be equal
ok 82 - should be equal
# tests 2
# pass  2
# ok
ok 83 - test/result-trap.js
# segv.js
# TAP version 13
# setup
ok 84 - compiled seg faulter
# segv
ok 85 - should be equivalent
ok 86 - should be equivalent
ok 87 - should be equivalent
ok 88 - should be equivalent
ok 89 - should be equivalent
ok 90 - should be equal
# cleanup
ok 91 - cleaned up
# tests 8
# pass  8
# ok
ok 92 - test/segv.js
# simple-harness-test-with-plan.js
# TAP version 13
# trivial success
ok 93 - it works
# two tests
ok 94 - math should work
ok 95 - false should not be ok
# tests 3
# pass  3
# ok
ok 96 - test/simple-harness-test-with-plan.js
# simple-harness-test.js
# TAP version 13
# trivial success
ok 97 - it works
# two tests
ok 98 - math should work
ok 99 - false should not be ok
# tests 3
# pass  3
# ok
ok 100 - test/simple-harness-test.js
# test-assert-todo-skip.js
# TAP version 13
# not much
ok 101 - always passes # SKIP skip it good
ok 102 - false # SKIP always fails
ok 103 - bonus # TODO remove todo directive
ok 104 - expected # TODO implement a thing
ok 105 - always passes without explanation # SKIP
ok 106 - false without explanation # SKIP
ok 107 - bonus without explanation # TODO
ok 108 - expected without explanation # TODO
# tests 8
# skip  4
# todo  4
ok 109 - test/test-assert-todo-skip.js
# test-descriptions.js
# TAP version 13
# captures test descriptions
ok 110 - exit cleanly
ok 111 - captures SKIP description
ok 112 - skip summary is not from file
ok 113 - todo summary is not from file
not ok 114 - captures TODO description
  ---
  file: child_process.js
  line: 707
  column: 7
  stack:
    - |
      getCaller (/Users/isaacs/dev/js/tap/lib/tap-assert.js:439:17)
    - |
      Function.assert (/Users/isaacs/dev/js/tap/lib/tap-assert.js:21:16)
    - |
      Test._testAssert (/Users/isaacs/dev/js/tap/lib/tap-test.js:87:16)
    - |
      /Users/isaacs/dev/js/tap/test/test-descriptions.js:32:7
    - |
      ChildProcess.exithandler (child_process.js:707:7)
    - |
      emitTwo (events.js:87:13)
    - |
      ChildProcess.emit (events.js:169:7)
    - |
      maybeClose (child_process.js:984:16)
    - |
      Socket.<anonymous> (child_process.js:1153:11)
    - |
      emitOne (events.js:77:13)
  ...
Bail out! captures TODO description

`

exports[`test/parser-stringify.js TAP todo.tap bail > parsed 1`] = `
Array [
  Array [
    "version",
    14,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: a set of tests to be done later\\n",
      ],
      Array [
        "assert",
        Result {
          "fullname": "a set of tests to be done later",
          "id": 1,
          "name": "should have a thingie",
          "ok": true,
          "todo": true,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "a set of tests to be done later",
          "id": 2,
          "name": "should have a second whoosits also",
          "ok": true,
          "todo": true,
        },
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: the subset\\n",
          ],
          Array [
            "assert",
            Result {
              "fullname": "a set of tests to be done later the subset",
              "id": 1,
              "name": "should be a child thingie",
              "ok": true,
              "todo": true,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "a set of tests to be done later the subset",
              "id": 2,
              "name": "should also be a whoosits",
              "ok": true,
              "todo": true,
            },
          ],
          Array [
            "child",
            Array [
              Array [
                "comment",
                "# Subtest: has some of these things\\n",
              ],
              Array [
                "assert",
                Result {
                  "fullname": "a set of tests to be done later the subset has some of these things",
                  "id": 1,
                  "name": "true is truthy",
                  "ok": true,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "a set of tests to be done later the subset has some of these things",
                  "id": 2,
                  "name": "ten is also truthy",
                  "ok": true,
                },
              ],
              Array [
                "plan",
                Object {
                  "end": 2,
                  "start": 1,
                },
              ],
              Array [
                "complete",
                FinalResults {
                  "bailout": false,
                  "count": 2,
                  "fail": 0,
                  "failures": Array [],
                  "ok": true,
                  "pass": 2,
                  "plan": FinalPlan {
                    "comment": "",
                    "end": 2,
                    "skipAll": false,
                    "skipReason": "",
                    "start": 1,
                  },
                  "skip": 0,
                  "time": null,
                  "todo": 0,
                },
              ],
            ],
          ],
          Array [
            "assert",
            Result {
              "fullname": "a set of tests to be done later the subset",
              "id": 3,
              "name": "has some of these things",
              "ok": true,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 3,
              "start": 1,
            },
          ],
          Array [
            "comment",
            "# todo: 2\\n",
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 3,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 3,
              "plan": FinalPlan {
                "comment": "",
                "end": 3,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": null,
              "todo": 2,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "a set of tests to be done later",
          "id": 3,
          "name": "the subset",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 3,
          "start": 1,
        },
      ],
      Array [
        "comment",
        "# todo: 2\\n",
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 3,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 3,
          "plan": FinalPlan {
            "comment": "",
            "end": 3,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 2,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "a set of tests to be done later",
      "ok": true,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: another set of tests\\n",
      ],
      Array [
        "assert",
        Result {
          "fullname": "another set of tests",
          "id": 1,
          "name": "is a second set",
          "ok": true,
          "todo": true,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "another set of tests",
          "id": 2,
          "name": "looks like english",
          "ok": true,
          "todo": true,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "another set of tests",
          "id": 3,
          "name": "is marked TODO",
          "ok": true,
          "todo": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 3,
          "start": 1,
        },
      ],
      Array [
        "comment",
        "# todo: 3\\n",
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 3,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 3,
          "plan": FinalPlan {
            "comment": "",
            "end": 3,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 3,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "another set of tests",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 2,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 2,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 2,
      "plan": FinalPlan {
        "comment": "",
        "end": 2,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP todo.tap bail > stringified 1`] = `
TAP version 14
# Subtest: a set of tests to be done later
    ok 1 - should have a thingie # TODO
    ok 2 - should have a second whoosits also # TODO
    # Subtest: the subset
        ok 1 - should be a child thingie # TODO
        ok 2 - should also be a whoosits # TODO
        # Subtest: has some of these things
            ok 1 - true is truthy
            ok 2 - ten is also truthy
            1..2
        ok 3 - has some of these things
        1..3
        # todo: 2
    ok 3 - the subset
    1..3
    # todo: 2
ok 1 - a set of tests to be done later
# Subtest: another set of tests
    ok 1 - is a second set # TODO
    ok 2 - looks like english # TODO
    ok 3 - is marked TODO # TODO
    1..3
    # todo: 3
ok 2 - another set of tests
1..2

`

exports[`test/parser-stringify.js TAP todo.tap bail > stringified flat 1`] = `
TAP version 14
# Subtest: a set of tests to be done later
    ok 1 - should have a thingie # TODO
    ok 2 - should have a second whoosits also # TODO
    # Subtest: the subset
        ok 1 - should be a child thingie # TODO
        ok 2 - should also be a whoosits # TODO
        # Subtest: has some of these things
            ok 1 - true is truthy
            ok 2 - ten is also truthy
            1..2
        ok 3 - has some of these things
        1..3
        # todo: 2
    ok 3 - the subset
    1..3
    # todo: 2
ok 1 - a set of tests to be done later
# Subtest: another set of tests
    ok 1 - is a second set # TODO
    ok 2 - looks like english # TODO
    ok 3 - is marked TODO # TODO
    1..3
    # todo: 3
ok 2 - another set of tests
1..2

`

exports[`test/parser-stringify.js TAP todo.tap default settings > parsed 1`] = `
Array [
  Array [
    "version",
    14,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: a set of tests to be done later\\n",
      ],
      Array [
        "assert",
        Result {
          "fullname": "a set of tests to be done later",
          "id": 1,
          "name": "should have a thingie",
          "ok": true,
          "todo": true,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "a set of tests to be done later",
          "id": 2,
          "name": "should have a second whoosits also",
          "ok": true,
          "todo": true,
        },
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: the subset\\n",
          ],
          Array [
            "assert",
            Result {
              "fullname": "a set of tests to be done later the subset",
              "id": 1,
              "name": "should be a child thingie",
              "ok": true,
              "todo": true,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "a set of tests to be done later the subset",
              "id": 2,
              "name": "should also be a whoosits",
              "ok": true,
              "todo": true,
            },
          ],
          Array [
            "child",
            Array [
              Array [
                "comment",
                "# Subtest: has some of these things\\n",
              ],
              Array [
                "assert",
                Result {
                  "fullname": "a set of tests to be done later the subset has some of these things",
                  "id": 1,
                  "name": "true is truthy",
                  "ok": true,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "a set of tests to be done later the subset has some of these things",
                  "id": 2,
                  "name": "ten is also truthy",
                  "ok": true,
                },
              ],
              Array [
                "plan",
                Object {
                  "end": 2,
                  "start": 1,
                },
              ],
              Array [
                "complete",
                FinalResults {
                  "bailout": false,
                  "count": 2,
                  "fail": 0,
                  "failures": Array [],
                  "ok": true,
                  "pass": 2,
                  "plan": FinalPlan {
                    "comment": "",
                    "end": 2,
                    "skipAll": false,
                    "skipReason": "",
                    "start": 1,
                  },
                  "skip": 0,
                  "time": null,
                  "todo": 0,
                },
              ],
            ],
          ],
          Array [
            "assert",
            Result {
              "fullname": "a set of tests to be done later the subset",
              "id": 3,
              "name": "has some of these things",
              "ok": true,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 3,
              "start": 1,
            },
          ],
          Array [
            "comment",
            "# todo: 2\\n",
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 3,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 3,
              "plan": FinalPlan {
                "comment": "",
                "end": 3,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": null,
              "todo": 2,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "a set of tests to be done later",
          "id": 3,
          "name": "the subset",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 3,
          "start": 1,
        },
      ],
      Array [
        "comment",
        "# todo: 2\\n",
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 3,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 3,
          "plan": FinalPlan {
            "comment": "",
            "end": 3,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 2,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "a set of tests to be done later",
      "ok": true,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: another set of tests\\n",
      ],
      Array [
        "assert",
        Result {
          "fullname": "another set of tests",
          "id": 1,
          "name": "is a second set",
          "ok": true,
          "todo": true,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "another set of tests",
          "id": 2,
          "name": "looks like english",
          "ok": true,
          "todo": true,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "another set of tests",
          "id": 3,
          "name": "is marked TODO",
          "ok": true,
          "todo": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 3,
          "start": 1,
        },
      ],
      Array [
        "comment",
        "# todo: 3\\n",
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 3,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 3,
          "plan": FinalPlan {
            "comment": "",
            "end": 3,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 3,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "another set of tests",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 2,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 2,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 2,
      "plan": FinalPlan {
        "comment": "",
        "end": 2,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP todo.tap default settings > stringified 1`] = `
TAP version 14
# Subtest: a set of tests to be done later
    ok 1 - should have a thingie # TODO
    ok 2 - should have a second whoosits also # TODO
    # Subtest: the subset
        ok 1 - should be a child thingie # TODO
        ok 2 - should also be a whoosits # TODO
        # Subtest: has some of these things
            ok 1 - true is truthy
            ok 2 - ten is also truthy
            1..2
        ok 3 - has some of these things
        1..3
        # todo: 2
    ok 3 - the subset
    1..3
    # todo: 2
ok 1 - a set of tests to be done later
# Subtest: another set of tests
    ok 1 - is a second set # TODO
    ok 2 - looks like english # TODO
    ok 3 - is marked TODO # TODO
    1..3
    # todo: 3
ok 2 - another set of tests
1..2

`

exports[`test/parser-stringify.js TAP todo.tap default settings > stringified flat 1`] = `
TAP version 14
# Subtest: a set of tests to be done later
    ok 1 - should have a thingie # TODO
    ok 2 - should have a second whoosits also # TODO
    # Subtest: the subset
        ok 1 - should be a child thingie # TODO
        ok 2 - should also be a whoosits # TODO
        # Subtest: has some of these things
            ok 1 - true is truthy
            ok 2 - ten is also truthy
            1..2
        ok 3 - has some of these things
        1..3
        # todo: 2
    ok 3 - the subset
    1..3
    # todo: 2
ok 1 - a set of tests to be done later
# Subtest: another set of tests
    ok 1 - is a second set # TODO
    ok 2 - looks like english # TODO
    ok 3 - is marked TODO # TODO
    1..3
    # todo: 3
ok 2 - another set of tests
1..2

`

exports[`test/parser-stringify.js TAP todo.tap strict > parsed 1`] = `
Array [
  Array [
    "version",
    14,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: a set of tests to be done later\\n",
      ],
      Array [
        "assert",
        Result {
          "fullname": "a set of tests to be done later",
          "id": 1,
          "name": "should have a thingie",
          "ok": true,
          "todo": true,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "a set of tests to be done later",
          "id": 2,
          "name": "should have a second whoosits also",
          "ok": true,
          "todo": true,
        },
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: the subset\\n",
          ],
          Array [
            "assert",
            Result {
              "fullname": "a set of tests to be done later the subset",
              "id": 1,
              "name": "should be a child thingie",
              "ok": true,
              "todo": true,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "a set of tests to be done later the subset",
              "id": 2,
              "name": "should also be a whoosits",
              "ok": true,
              "todo": true,
            },
          ],
          Array [
            "child",
            Array [
              Array [
                "comment",
                "# Subtest: has some of these things\\n",
              ],
              Array [
                "assert",
                Result {
                  "fullname": "a set of tests to be done later the subset has some of these things",
                  "id": 1,
                  "name": "true is truthy",
                  "ok": true,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "a set of tests to be done later the subset has some of these things",
                  "id": 2,
                  "name": "ten is also truthy",
                  "ok": true,
                },
              ],
              Array [
                "plan",
                Object {
                  "end": 2,
                  "start": 1,
                },
              ],
              Array [
                "complete",
                FinalResults {
                  "bailout": false,
                  "count": 2,
                  "fail": 0,
                  "failures": Array [],
                  "ok": true,
                  "pass": 2,
                  "plan": FinalPlan {
                    "comment": "",
                    "end": 2,
                    "skipAll": false,
                    "skipReason": "",
                    "start": 1,
                  },
                  "skip": 0,
                  "time": null,
                  "todo": 0,
                },
              ],
            ],
          ],
          Array [
            "assert",
            Result {
              "fullname": "a set of tests to be done later the subset",
              "id": 3,
              "name": "has some of these things",
              "ok": true,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 3,
              "start": 1,
            },
          ],
          Array [
            "comment",
            "# todo: 2\\n",
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 3,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 3,
              "plan": FinalPlan {
                "comment": "",
                "end": 3,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": null,
              "todo": 2,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "a set of tests to be done later",
          "id": 3,
          "name": "the subset",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 3,
          "start": 1,
        },
      ],
      Array [
        "comment",
        "# todo: 2\\n",
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 3,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 3,
          "plan": FinalPlan {
            "comment": "",
            "end": 3,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 2,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "a set of tests to be done later",
      "ok": true,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: another set of tests\\n",
      ],
      Array [
        "assert",
        Result {
          "fullname": "another set of tests",
          "id": 1,
          "name": "is a second set",
          "ok": true,
          "todo": true,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "another set of tests",
          "id": 2,
          "name": "looks like english",
          "ok": true,
          "todo": true,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "another set of tests",
          "id": 3,
          "name": "is marked TODO",
          "ok": true,
          "todo": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 3,
          "start": 1,
        },
      ],
      Array [
        "comment",
        "# todo: 3\\n",
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 3,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 3,
          "plan": FinalPlan {
            "comment": "",
            "end": 3,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 3,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "another set of tests",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 2,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 2,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 2,
      "plan": FinalPlan {
        "comment": "",
        "end": 2,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP todo.tap strict > stringified 1`] = `
TAP version 14
# Subtest: a set of tests to be done later
    ok 1 - should have a thingie # TODO
    ok 2 - should have a second whoosits also # TODO
    # Subtest: the subset
        ok 1 - should be a child thingie # TODO
        ok 2 - should also be a whoosits # TODO
        # Subtest: has some of these things
            ok 1 - true is truthy
            ok 2 - ten is also truthy
            1..2
        ok 3 - has some of these things
        1..3
        # todo: 2
    ok 3 - the subset
    1..3
    # todo: 2
ok 1 - a set of tests to be done later
# Subtest: another set of tests
    ok 1 - is a second set # TODO
    ok 2 - looks like english # TODO
    ok 3 - is marked TODO # TODO
    1..3
    # todo: 3
ok 2 - another set of tests
1..2

`

exports[`test/parser-stringify.js TAP todo.tap strict > stringified flat 1`] = `
TAP version 14
# Subtest: a set of tests to be done later
    ok 1 - should have a thingie # TODO
    ok 2 - should have a second whoosits also # TODO
    # Subtest: the subset
        ok 1 - should be a child thingie # TODO
        ok 2 - should also be a whoosits # TODO
        # Subtest: has some of these things
            ok 1 - true is truthy
            ok 2 - ten is also truthy
            1..2
        ok 3 - has some of these things
        1..3
        # todo: 2
    ok 3 - the subset
    1..3
    # todo: 2
ok 1 - a set of tests to be done later
# Subtest: another set of tests
    ok 1 - is a second set # TODO
    ok 2 - looks like english # TODO
    ok 3 - is marked TODO # TODO
    1..3
    # todo: 3
ok 2 - another set of tests
1..2

`

exports[`test/parser-stringify.js TAP todo.tap strictBail > parsed 1`] = `
Array [
  Array [
    "version",
    14,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: a set of tests to be done later\\n",
      ],
      Array [
        "assert",
        Result {
          "fullname": "a set of tests to be done later",
          "id": 1,
          "name": "should have a thingie",
          "ok": true,
          "todo": true,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "a set of tests to be done later",
          "id": 2,
          "name": "should have a second whoosits also",
          "ok": true,
          "todo": true,
        },
      ],
      Array [
        "child",
        Array [
          Array [
            "comment",
            "# Subtest: the subset\\n",
          ],
          Array [
            "assert",
            Result {
              "fullname": "a set of tests to be done later the subset",
              "id": 1,
              "name": "should be a child thingie",
              "ok": true,
              "todo": true,
            },
          ],
          Array [
            "assert",
            Result {
              "fullname": "a set of tests to be done later the subset",
              "id": 2,
              "name": "should also be a whoosits",
              "ok": true,
              "todo": true,
            },
          ],
          Array [
            "child",
            Array [
              Array [
                "comment",
                "# Subtest: has some of these things\\n",
              ],
              Array [
                "assert",
                Result {
                  "fullname": "a set of tests to be done later the subset has some of these things",
                  "id": 1,
                  "name": "true is truthy",
                  "ok": true,
                },
              ],
              Array [
                "assert",
                Result {
                  "fullname": "a set of tests to be done later the subset has some of these things",
                  "id": 2,
                  "name": "ten is also truthy",
                  "ok": true,
                },
              ],
              Array [
                "plan",
                Object {
                  "end": 2,
                  "start": 1,
                },
              ],
              Array [
                "complete",
                FinalResults {
                  "bailout": false,
                  "count": 2,
                  "fail": 0,
                  "failures": Array [],
                  "ok": true,
                  "pass": 2,
                  "plan": FinalPlan {
                    "comment": "",
                    "end": 2,
                    "skipAll": false,
                    "skipReason": "",
                    "start": 1,
                  },
                  "skip": 0,
                  "time": null,
                  "todo": 0,
                },
              ],
            ],
          ],
          Array [
            "assert",
            Result {
              "fullname": "a set of tests to be done later the subset",
              "id": 3,
              "name": "has some of these things",
              "ok": true,
            },
          ],
          Array [
            "plan",
            Object {
              "end": 3,
              "start": 1,
            },
          ],
          Array [
            "comment",
            "# todo: 2\\n",
          ],
          Array [
            "complete",
            FinalResults {
              "bailout": false,
              "count": 3,
              "fail": 0,
              "failures": Array [],
              "ok": true,
              "pass": 3,
              "plan": FinalPlan {
                "comment": "",
                "end": 3,
                "skipAll": false,
                "skipReason": "",
                "start": 1,
              },
              "skip": 0,
              "time": null,
              "todo": 2,
            },
          ],
        ],
      ],
      Array [
        "assert",
        Result {
          "fullname": "a set of tests to be done later",
          "id": 3,
          "name": "the subset",
          "ok": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 3,
          "start": 1,
        },
      ],
      Array [
        "comment",
        "# todo: 2\\n",
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 3,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 3,
          "plan": FinalPlan {
            "comment": "",
            "end": 3,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 2,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "a set of tests to be done later",
      "ok": true,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: another set of tests\\n",
      ],
      Array [
        "assert",
        Result {
          "fullname": "another set of tests",
          "id": 1,
          "name": "is a second set",
          "ok": true,
          "todo": true,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "another set of tests",
          "id": 2,
          "name": "looks like english",
          "ok": true,
          "todo": true,
        },
      ],
      Array [
        "assert",
        Result {
          "fullname": "another set of tests",
          "id": 3,
          "name": "is marked TODO",
          "ok": true,
          "todo": true,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 3,
          "start": 1,
        },
      ],
      Array [
        "comment",
        "# todo: 3\\n",
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 3,
          "fail": 0,
          "failures": Array [],
          "ok": true,
          "pass": 3,
          "plan": FinalPlan {
            "comment": "",
            "end": 3,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 3,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "another set of tests",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 2,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 2,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 2,
      "plan": FinalPlan {
        "comment": "",
        "end": 2,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP todo.tap strictBail > stringified 1`] = `
TAP version 14
# Subtest: a set of tests to be done later
    ok 1 - should have a thingie # TODO
    ok 2 - should have a second whoosits also # TODO
    # Subtest: the subset
        ok 1 - should be a child thingie # TODO
        ok 2 - should also be a whoosits # TODO
        # Subtest: has some of these things
            ok 1 - true is truthy
            ok 2 - ten is also truthy
            1..2
        ok 3 - has some of these things
        1..3
        # todo: 2
    ok 3 - the subset
    1..3
    # todo: 2
ok 1 - a set of tests to be done later
# Subtest: another set of tests
    ok 1 - is a second set # TODO
    ok 2 - looks like english # TODO
    ok 3 - is marked TODO # TODO
    1..3
    # todo: 3
ok 2 - another set of tests
1..2

`

exports[`test/parser-stringify.js TAP todo.tap strictBail > stringified flat 1`] = `
TAP version 14
# Subtest: a set of tests to be done later
    ok 1 - should have a thingie # TODO
    ok 2 - should have a second whoosits also # TODO
    # Subtest: the subset
        ok 1 - should be a child thingie # TODO
        ok 2 - should also be a whoosits # TODO
        # Subtest: has some of these things
            ok 1 - true is truthy
            ok 2 - ten is also truthy
            1..2
        ok 3 - has some of these things
        1..3
        # todo: 2
    ok 3 - the subset
    1..3
    # todo: 2
ok 1 - a set of tests to be done later
# Subtest: another set of tests
    ok 1 - is a second set # TODO
    ok 2 - looks like english # TODO
    ok 3 - is marked TODO # TODO
    1..3
    # todo: 3
ok 2 - another set of tests
1..2

`

exports[`test/parser-stringify.js TAP todo_inline.tap bail > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "Foo",
      "ok": false,
      "todo": "Just testing the todo interface.",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "Unexpected success",
      "ok": true,
      "todo": "Just testing the todo interface.",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "This is not todo",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "name": "",
      "ok": true,
      "todo": "This is a todo with an empty description",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "name": "testTitle#todo is not a todo, it's a url",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# todo: 3\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 5,
      "fail": 1,
      "failures": Array [],
      "ok": true,
      "pass": 4,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 3,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP todo_inline.tap bail > stringified 1`] = `
1..5
not ok 1 - Foo # TODO Just testing the todo interface.
ok 2 - Unexpected success # TODO Just testing the todo interface.
ok 3 - This is not todo
ok 4 # TODO This is a todo with an empty description
ok 5 - testTitle\\#todo is not a todo, it's a url
# todo: 3

`

exports[`test/parser-stringify.js TAP todo_inline.tap bail > stringified flat 1`] = `
1..5
not ok 1 - Foo # TODO Just testing the todo interface.
ok 2 - Unexpected success # TODO Just testing the todo interface.
ok 3 - This is not todo
ok 4 # TODO This is a todo with an empty description
ok 5 - testTitle\\#todo is not a todo, it's a url
# todo: 3

`

exports[`test/parser-stringify.js TAP todo_inline.tap default settings > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "Foo",
      "ok": false,
      "todo": "Just testing the todo interface.",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "Unexpected success",
      "ok": true,
      "todo": "Just testing the todo interface.",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "This is not todo",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "name": "",
      "ok": true,
      "todo": "This is a todo with an empty description",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "name": "testTitle#todo is not a todo, it's a url",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# todo: 3\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 5,
      "fail": 1,
      "failures": Array [],
      "ok": true,
      "pass": 4,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 3,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP todo_inline.tap default settings > stringified 1`] = `
1..5
not ok 1 - Foo # TODO Just testing the todo interface.
ok 2 - Unexpected success # TODO Just testing the todo interface.
ok 3 - This is not todo
ok 4 # TODO This is a todo with an empty description
ok 5 - testTitle\\#todo is not a todo, it's a url
# todo: 3

`

exports[`test/parser-stringify.js TAP todo_inline.tap default settings > stringified flat 1`] = `
1..5
not ok 1 - Foo # TODO Just testing the todo interface.
ok 2 - Unexpected success # TODO Just testing the todo interface.
ok 3 - This is not todo
ok 4 # TODO This is a todo with an empty description
ok 5 - testTitle\\#todo is not a todo, it's a url
# todo: 3

`

exports[`test/parser-stringify.js TAP todo_inline.tap strict > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "Foo",
      "ok": false,
      "todo": "Just testing the todo interface.",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "Unexpected success",
      "ok": true,
      "todo": "Just testing the todo interface.",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "This is not todo",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "name": "",
      "ok": true,
      "todo": "This is a todo with an empty description",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "name": "testTitle#todo is not a todo, it's a url",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# todo: 3\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 5,
      "fail": 1,
      "failures": Array [],
      "ok": true,
      "pass": 4,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 3,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP todo_inline.tap strict > stringified 1`] = `
1..5
not ok 1 - Foo # TODO Just testing the todo interface.
ok 2 - Unexpected success # TODO Just testing the todo interface.
ok 3 - This is not todo
ok 4 # TODO This is a todo with an empty description
ok 5 - testTitle\\#todo is not a todo, it's a url
# todo: 3

`

exports[`test/parser-stringify.js TAP todo_inline.tap strict > stringified flat 1`] = `
1..5
not ok 1 - Foo # TODO Just testing the todo interface.
ok 2 - Unexpected success # TODO Just testing the todo interface.
ok 3 - This is not todo
ok 4 # TODO This is a todo with an empty description
ok 5 - testTitle\\#todo is not a todo, it's a url
# todo: 3

`

exports[`test/parser-stringify.js TAP todo_inline.tap strictBail > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "Foo",
      "ok": false,
      "todo": "Just testing the todo interface.",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "Unexpected success",
      "ok": true,
      "todo": "Just testing the todo interface.",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "This is not todo",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "name": "",
      "ok": true,
      "todo": "This is a todo with an empty description",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "name": "testTitle#todo is not a todo, it's a url",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# todo: 3\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 5,
      "fail": 1,
      "failures": Array [],
      "ok": true,
      "pass": 4,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 3,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP todo_inline.tap strictBail > stringified 1`] = `
1..5
not ok 1 - Foo # TODO Just testing the todo interface.
ok 2 - Unexpected success # TODO Just testing the todo interface.
ok 3 - This is not todo
ok 4 # TODO This is a todo with an empty description
ok 5 - testTitle\\#todo is not a todo, it's a url
# todo: 3

`

exports[`test/parser-stringify.js TAP todo_inline.tap strictBail > stringified flat 1`] = `
1..5
not ok 1 - Foo # TODO Just testing the todo interface.
ok 2 - Unexpected success # TODO Just testing the todo interface.
ok 3 - This is not todo
ok 4 # TODO This is a todo with an empty description
ok 5 - testTitle\\#todo is not a todo, it's a url
# todo: 3

`

exports[`test/parser-stringify.js TAP todo_misparse.tap bail > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "Hamlette",
      "ok": false,
      "todo": true,
    },
  ],
  Array [
    "comment",
    "# todo: 1\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 1,
      "failures": Array [],
      "ok": true,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 1,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP todo_misparse.tap bail > stringified 1`] = `
1..1
not ok 1 - Hamlette # TODO
# todo: 1

`

exports[`test/parser-stringify.js TAP todo_misparse.tap bail > stringified flat 1`] = `
1..1
not ok 1 - Hamlette # TODO
# todo: 1

`

exports[`test/parser-stringify.js TAP todo_misparse.tap default settings > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "Hamlette",
      "ok": false,
      "todo": true,
    },
  ],
  Array [
    "comment",
    "# todo: 1\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 1,
      "failures": Array [],
      "ok": true,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 1,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP todo_misparse.tap default settings > stringified 1`] = `
1..1
not ok 1 - Hamlette # TODO
# todo: 1

`

exports[`test/parser-stringify.js TAP todo_misparse.tap default settings > stringified flat 1`] = `
1..1
not ok 1 - Hamlette # TODO
# todo: 1

`

exports[`test/parser-stringify.js TAP todo_misparse.tap strict > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "Hamlette",
      "ok": false,
      "todo": true,
    },
  ],
  Array [
    "comment",
    "# todo: 1\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 1,
      "failures": Array [],
      "ok": true,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 1,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP todo_misparse.tap strict > stringified 1`] = `
1..1
not ok 1 - Hamlette # TODO
# todo: 1

`

exports[`test/parser-stringify.js TAP todo_misparse.tap strict > stringified flat 1`] = `
1..1
not ok 1 - Hamlette # TODO
# todo: 1

`

exports[`test/parser-stringify.js TAP todo_misparse.tap strictBail > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "Hamlette",
      "ok": false,
      "todo": true,
    },
  ],
  Array [
    "comment",
    "# todo: 1\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 1,
      "failures": Array [],
      "ok": true,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 1,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP todo_misparse.tap strictBail > stringified 1`] = `
1..1
not ok 1 - Hamlette # TODO
# todo: 1

`

exports[`test/parser-stringify.js TAP todo_misparse.tap strictBail > stringified flat 1`] = `
1..1
not ok 1 - Hamlette # TODO
# todo: 1

`

exports[`test/parser-stringify.js TAP too-many.tap bail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "comment",
    "# beep\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# boop\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "name": "(unnamed assert)",
      "ok": true,
      "plan": Object {
        "end": 3,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "plan",
    Object {
      "end": 3,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# tests 4\\n",
  ],
  Array [
    "comment",
    "# pass  4\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "comment",
    "# test count(4) != plan(3)\\n",
  ],
  Array [
    "comment",
    "# failed 1 of 4 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 4,
      "fail": 1,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 4,
          "name": "(unnamed assert)",
          "ok": true,
          "plan": Object {
            "end": 3,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
      ],
      "ok": false,
      "pass": 4,
      "plan": FinalPlan {
        "comment": "",
        "end": 3,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP too-many.tap bail > stringified 1`] = `
TAP version 13
# beep
ok 1 - should be equal
ok 2 - should be equivalent
# boop
ok 3 - should be equal
ok 4 - (unnamed assert)
1..3
# tests 4
# pass  4
# ok
# test count(4) != plan(3)
# failed 1 of 4 tests

`

exports[`test/parser-stringify.js TAP too-many.tap bail > stringified flat 1`] = `
TAP version 13
# beep
ok 1 - should be equal
ok 2 - should be equivalent
# boop
ok 3 - should be equal
ok 4 - (unnamed assert)
1..3
# tests 4
# pass  4
# ok
# test count(4) != plan(3)
# failed 1 of 4 tests

`

exports[`test/parser-stringify.js TAP too-many.tap default settings > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "comment",
    "# beep\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# boop\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "name": "(unnamed assert)",
      "ok": true,
      "plan": Object {
        "end": 3,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "plan",
    Object {
      "end": 3,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# tests 4\\n",
  ],
  Array [
    "comment",
    "# pass  4\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "comment",
    "# test count(4) != plan(3)\\n",
  ],
  Array [
    "comment",
    "# failed 1 of 4 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 4,
      "fail": 1,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 4,
          "name": "(unnamed assert)",
          "ok": true,
          "plan": Object {
            "end": 3,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
      ],
      "ok": false,
      "pass": 4,
      "plan": FinalPlan {
        "comment": "",
        "end": 3,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP too-many.tap default settings > stringified 1`] = `
TAP version 13
# beep
ok 1 - should be equal
ok 2 - should be equivalent
# boop
ok 3 - should be equal
ok 4 - (unnamed assert)
1..3
# tests 4
# pass  4
# ok
# test count(4) != plan(3)
# failed 1 of 4 tests

`

exports[`test/parser-stringify.js TAP too-many.tap default settings > stringified flat 1`] = `
TAP version 13
# beep
ok 1 - should be equal
ok 2 - should be equivalent
# boop
ok 3 - should be equal
ok 4 - (unnamed assert)
1..3
# tests 4
# pass  4
# ok
# test count(4) != plan(3)
# failed 1 of 4 tests

`

exports[`test/parser-stringify.js TAP too-many.tap strict > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "comment",
    "# beep\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# boop\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "name": "(unnamed assert)",
      "ok": true,
      "plan": Object {
        "end": 3,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "plan",
    Object {
      "end": 3,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# tests 4\\n",
  ],
  Array [
    "comment",
    "# pass  4\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "comment",
    "# test count(4) != plan(3)\\n",
  ],
  Array [
    "comment",
    "# failed 1 of 4 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 4,
      "fail": 1,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 4,
          "name": "(unnamed assert)",
          "ok": true,
          "plan": Object {
            "end": 3,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
      ],
      "ok": false,
      "pass": 4,
      "plan": FinalPlan {
        "comment": "",
        "end": 3,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP too-many.tap strict > stringified 1`] = `
TAP version 13
# beep
ok 1 - should be equal
ok 2 - should be equivalent
# boop
ok 3 - should be equal
ok 4 - (unnamed assert)
1..3
# tests 4
# pass  4
# ok
# test count(4) != plan(3)
# failed 1 of 4 tests

`

exports[`test/parser-stringify.js TAP too-many.tap strict > stringified flat 1`] = `
TAP version 13
# beep
ok 1 - should be equal
ok 2 - should be equivalent
# boop
ok 3 - should be equal
ok 4 - (unnamed assert)
1..3
# tests 4
# pass  4
# ok
# test count(4) != plan(3)
# failed 1 of 4 tests

`

exports[`test/parser-stringify.js TAP too-many.tap strictBail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "comment",
    "# beep\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "should be equivalent",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# boop\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "should be equal",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "name": "(unnamed assert)",
      "ok": true,
      "plan": Object {
        "end": 3,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "plan",
    Object {
      "end": 3,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# tests 4\\n",
  ],
  Array [
    "comment",
    "# pass  4\\n",
  ],
  Array [
    "comment",
    "# ok\\n",
  ],
  Array [
    "comment",
    "# test count(4) != plan(3)\\n",
  ],
  Array [
    "comment",
    "# failed 1 of 4 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 4,
      "fail": 1,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 4,
          "name": "(unnamed assert)",
          "ok": true,
          "plan": Object {
            "end": 3,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
      ],
      "ok": false,
      "pass": 4,
      "plan": FinalPlan {
        "comment": "",
        "end": 3,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP too-many.tap strictBail > stringified 1`] = `
TAP version 13
# beep
ok 1 - should be equal
ok 2 - should be equivalent
# boop
ok 3 - should be equal
ok 4 - (unnamed assert)
1..3
# tests 4
# pass  4
# ok
# test count(4) != plan(3)
# failed 1 of 4 tests

`

exports[`test/parser-stringify.js TAP too-many.tap strictBail > stringified flat 1`] = `
TAP version 13
# beep
ok 1 - should be equal
ok 2 - should be equivalent
# boop
ok 3 - should be equal
ok 4 - (unnamed assert)
1..3
# tests 4
# pass  4
# ok
# test count(4) != plan(3)
# failed 1 of 4 tests

`

exports[`test/parser-stringify.js TAP too_many.tap bail > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 3,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "ok": true,
      "plan": Object {
        "end": 3,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "ok": true,
      "plan": Object {
        "end": 3,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 6,
      "ok": true,
      "plan": Object {
        "end": 3,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 7,
      "ok": true,
      "plan": Object {
        "end": 3,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "comment",
    "# test count(7) != plan(3)\\n",
  ],
  Array [
    "comment",
    "# failed 4 of 7 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 7,
      "fail": 4,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 4,
          "ok": true,
          "plan": Object {
            "end": 3,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
        Result {
          "fullname": "",
          "id": 5,
          "ok": true,
          "plan": Object {
            "end": 3,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
        Result {
          "fullname": "",
          "id": 6,
          "ok": true,
          "plan": Object {
            "end": 3,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
        Result {
          "fullname": "",
          "id": 7,
          "ok": true,
          "plan": Object {
            "end": 3,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
      ],
      "ok": false,
      "pass": 7,
      "plan": FinalPlan {
        "comment": "",
        "end": 3,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP too_many.tap bail > stringified 1`] = `
1..3
ok 1
ok 2
ok 3
ok 4
ok 5
ok 6
ok 7
# test count(7) != plan(3)
# failed 4 of 7 tests

`

exports[`test/parser-stringify.js TAP too_many.tap bail > stringified flat 1`] = `
1..3
ok 1
ok 2
ok 3
ok 4
ok 5
ok 6
ok 7
# test count(7) != plan(3)
# failed 4 of 7 tests

`

exports[`test/parser-stringify.js TAP too_many.tap default settings > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 3,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "ok": true,
      "plan": Object {
        "end": 3,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "ok": true,
      "plan": Object {
        "end": 3,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 6,
      "ok": true,
      "plan": Object {
        "end": 3,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 7,
      "ok": true,
      "plan": Object {
        "end": 3,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "comment",
    "# test count(7) != plan(3)\\n",
  ],
  Array [
    "comment",
    "# failed 4 of 7 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 7,
      "fail": 4,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 4,
          "ok": true,
          "plan": Object {
            "end": 3,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
        Result {
          "fullname": "",
          "id": 5,
          "ok": true,
          "plan": Object {
            "end": 3,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
        Result {
          "fullname": "",
          "id": 6,
          "ok": true,
          "plan": Object {
            "end": 3,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
        Result {
          "fullname": "",
          "id": 7,
          "ok": true,
          "plan": Object {
            "end": 3,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
      ],
      "ok": false,
      "pass": 7,
      "plan": FinalPlan {
        "comment": "",
        "end": 3,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP too_many.tap default settings > stringified 1`] = `
1..3
ok 1
ok 2
ok 3
ok 4
ok 5
ok 6
ok 7
# test count(7) != plan(3)
# failed 4 of 7 tests

`

exports[`test/parser-stringify.js TAP too_many.tap default settings > stringified flat 1`] = `
1..3
ok 1
ok 2
ok 3
ok 4
ok 5
ok 6
ok 7
# test count(7) != plan(3)
# failed 4 of 7 tests

`

exports[`test/parser-stringify.js TAP too_many.tap strict > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 3,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "ok": true,
      "plan": Object {
        "end": 3,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "ok": true,
      "plan": Object {
        "end": 3,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 6,
      "ok": true,
      "plan": Object {
        "end": 3,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 7,
      "ok": true,
      "plan": Object {
        "end": 3,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "comment",
    "# test count(7) != plan(3)\\n",
  ],
  Array [
    "comment",
    "# failed 4 of 7 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 7,
      "fail": 4,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 4,
          "ok": true,
          "plan": Object {
            "end": 3,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
        Result {
          "fullname": "",
          "id": 5,
          "ok": true,
          "plan": Object {
            "end": 3,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
        Result {
          "fullname": "",
          "id": 6,
          "ok": true,
          "plan": Object {
            "end": 3,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
        Result {
          "fullname": "",
          "id": 7,
          "ok": true,
          "plan": Object {
            "end": 3,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
      ],
      "ok": false,
      "pass": 7,
      "plan": FinalPlan {
        "comment": "",
        "end": 3,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP too_many.tap strict > stringified 1`] = `
1..3
ok 1
ok 2
ok 3
ok 4
ok 5
ok 6
ok 7
# test count(7) != plan(3)
# failed 4 of 7 tests

`

exports[`test/parser-stringify.js TAP too_many.tap strict > stringified flat 1`] = `
1..3
ok 1
ok 2
ok 3
ok 4
ok 5
ok 6
ok 7
# test count(7) != plan(3)
# failed 4 of 7 tests

`

exports[`test/parser-stringify.js TAP too_many.tap strictBail > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 3,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "ok": true,
      "plan": Object {
        "end": 3,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "ok": true,
      "plan": Object {
        "end": 3,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 6,
      "ok": true,
      "plan": Object {
        "end": 3,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 7,
      "ok": true,
      "plan": Object {
        "end": 3,
        "start": 1,
      },
      "tapError": "id greater than plan end",
    },
  ],
  Array [
    "comment",
    "# test count(7) != plan(3)\\n",
  ],
  Array [
    "comment",
    "# failed 4 of 7 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 7,
      "fail": 4,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 4,
          "ok": true,
          "plan": Object {
            "end": 3,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
        Result {
          "fullname": "",
          "id": 5,
          "ok": true,
          "plan": Object {
            "end": 3,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
        Result {
          "fullname": "",
          "id": 6,
          "ok": true,
          "plan": Object {
            "end": 3,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
        Result {
          "fullname": "",
          "id": 7,
          "ok": true,
          "plan": Object {
            "end": 3,
            "start": 1,
          },
          "tapError": "id greater than plan end",
        },
      ],
      "ok": false,
      "pass": 7,
      "plan": FinalPlan {
        "comment": "",
        "end": 3,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP too_many.tap strictBail > stringified 1`] = `
1..3
ok 1
ok 2
ok 3
ok 4
ok 5
ok 6
ok 7
# test count(7) != plan(3)
# failed 4 of 7 tests

`

exports[`test/parser-stringify.js TAP too_many.tap strictBail > stringified flat 1`] = `
1..3
ok 1
ok 2
ok 3
ok 4
ok 5
ok 6
ok 7
# test count(7) != plan(3)
# failed 4 of 7 tests

`

exports[`test/parser-stringify.js TAP unfinished.tap bail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test count(2) != plan(5)\\n",
  ],
  Array [
    "comment",
    "# failed 1 of 2 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 2,
      "fail": 1,
      "failures": Array [
        Object {
          "tapError": "incorrect number of tests",
        },
      ],
      "ok": false,
      "pass": 2,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP unfinished.tap bail > stringified 1`] = `
TAP version 13
1..5
ok 1
ok 2
# test count(2) != plan(5)
# failed 1 of 2 tests

`

exports[`test/parser-stringify.js TAP unfinished.tap bail > stringified flat 1`] = `
TAP version 13
1..5
ok 1
ok 2
# test count(2) != plan(5)
# failed 1 of 2 tests

`

exports[`test/parser-stringify.js TAP unfinished.tap default settings > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test count(2) != plan(5)\\n",
  ],
  Array [
    "comment",
    "# failed 1 of 2 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 2,
      "fail": 1,
      "failures": Array [
        Object {
          "tapError": "incorrect number of tests",
        },
      ],
      "ok": false,
      "pass": 2,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP unfinished.tap default settings > stringified 1`] = `
TAP version 13
1..5
ok 1
ok 2
# test count(2) != plan(5)
# failed 1 of 2 tests

`

exports[`test/parser-stringify.js TAP unfinished.tap default settings > stringified flat 1`] = `
TAP version 13
1..5
ok 1
ok 2
# test count(2) != plan(5)
# failed 1 of 2 tests

`

exports[`test/parser-stringify.js TAP unfinished.tap strict > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test count(2) != plan(5)\\n",
  ],
  Array [
    "comment",
    "# failed 1 of 2 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 2,
      "fail": 1,
      "failures": Array [
        Object {
          "tapError": "incorrect number of tests",
        },
      ],
      "ok": false,
      "pass": 2,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP unfinished.tap strict > stringified 1`] = `
TAP version 13
1..5
ok 1
ok 2
# test count(2) != plan(5)
# failed 1 of 2 tests

`

exports[`test/parser-stringify.js TAP unfinished.tap strict > stringified flat 1`] = `
TAP version 13
1..5
ok 1
ok 2
# test count(2) != plan(5)
# failed 1 of 2 tests

`

exports[`test/parser-stringify.js TAP unfinished.tap strictBail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# test count(2) != plan(5)\\n",
  ],
  Array [
    "comment",
    "# failed 1 of 2 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 2,
      "fail": 1,
      "failures": Array [
        Object {
          "tapError": "incorrect number of tests",
        },
      ],
      "ok": false,
      "pass": 2,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP unfinished.tap strictBail > stringified 1`] = `
TAP version 13
1..5
ok 1
ok 2
# test count(2) != plan(5)
# failed 1 of 2 tests

`

exports[`test/parser-stringify.js TAP unfinished.tap strictBail > stringified flat 1`] = `
TAP version 13
1..5
ok 1
ok 2
# test count(2) != plan(5)
# failed 1 of 2 tests

`

exports[`test/parser-stringify.js TAP unknown-amount-and-failures.tap bail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "retrieving servers from the database",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# need to ping 6 servers\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "pinged diamond",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "pinged ruby",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "diag": Object {
        "message": "hostname \\"saphire\\" unknown",
        "severity": "fail",
      },
      "fullname": "",
      "id": 4,
      "name": "pinged saphire",
      "ok": false,
    },
  ],
  Array [
    "bailout",
    "pinged saphire",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": "pinged saphire",
      "count": 4,
      "fail": 1,
      "failures": Array [
        Result {
          "diag": Object {
            "message": "hostname \\"saphire\\" unknown",
            "severity": "fail",
          },
          "fullname": "",
          "id": 4,
          "name": "pinged saphire",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 3,
      "plan": FinalPlan {
        "comment": "",
        "end": null,
        "skipAll": false,
        "skipReason": "",
        "start": null,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP unknown-amount-and-failures.tap bail > stringified 1`] = `
TAP version 13
ok 1 - retrieving servers from the database
# need to ping 6 servers
ok 2 - pinged diamond
ok 3 - pinged ruby
not ok 4 - pinged saphire
  ---
  message: hostname "saphire" unknown
  severity: fail
  ...
Bail out! pinged saphire

`

exports[`test/parser-stringify.js TAP unknown-amount-and-failures.tap bail > stringified flat 1`] = `
TAP version 13
ok 1 - retrieving servers from the database
# need to ping 6 servers
ok 2 - pinged diamond
ok 3 - pinged ruby
not ok 4 - pinged saphire
  ---
  message: hostname "saphire" unknown
  severity: fail
  ...
Bail out! pinged saphire

`

exports[`test/parser-stringify.js TAP unknown-amount-and-failures.tap default settings > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "retrieving servers from the database",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# need to ping 6 servers\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "pinged diamond",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "pinged ruby",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "diag": Object {
        "message": "hostname \\"saphire\\" unknown",
        "severity": "fail",
      },
      "fullname": "",
      "id": 4,
      "name": "pinged saphire",
      "ok": false,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "name": "pinged onyx",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "diag": Object {
        "message": "timeout",
        "severity": "fail",
      },
      "fullname": "",
      "id": 6,
      "name": "pinged quartz",
      "ok": false,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 7,
      "name": "pinged gold",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 7,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# failed 2 of 7 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 7,
      "fail": 2,
      "failures": Array [
        Result {
          "diag": Object {
            "message": "hostname \\"saphire\\" unknown",
            "severity": "fail",
          },
          "fullname": "",
          "id": 4,
          "name": "pinged saphire",
          "ok": false,
        },
        Result {
          "diag": Object {
            "message": "timeout",
            "severity": "fail",
          },
          "fullname": "",
          "id": 6,
          "name": "pinged quartz",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 5,
      "plan": FinalPlan {
        "comment": "",
        "end": 7,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP unknown-amount-and-failures.tap default settings > stringified 1`] = `
TAP version 13
ok 1 - retrieving servers from the database
# need to ping 6 servers
ok 2 - pinged diamond
ok 3 - pinged ruby
not ok 4 - pinged saphire
  ---
  message: hostname "saphire" unknown
  severity: fail
  ...
ok 5 - pinged onyx
not ok 6 - pinged quartz
  ---
  message: timeout
  severity: fail
  ...
ok 7 - pinged gold
1..7
# failed 2 of 7 tests

`

exports[`test/parser-stringify.js TAP unknown-amount-and-failures.tap default settings > stringified flat 1`] = `
TAP version 13
ok 1 - retrieving servers from the database
# need to ping 6 servers
ok 2 - pinged diamond
ok 3 - pinged ruby
not ok 4 - pinged saphire
  ---
  message: hostname "saphire" unknown
  severity: fail
  ...
ok 5 - pinged onyx
not ok 6 - pinged quartz
  ---
  message: timeout
  severity: fail
  ...
ok 7 - pinged gold
1..7
# failed 2 of 7 tests

`

exports[`test/parser-stringify.js TAP unknown-amount-and-failures.tap strict > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "retrieving servers from the database",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# need to ping 6 servers\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "pinged diamond",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "pinged ruby",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "diag": Object {
        "message": "hostname \\"saphire\\" unknown",
        "severity": "fail",
      },
      "fullname": "",
      "id": 4,
      "name": "pinged saphire",
      "ok": false,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "name": "pinged onyx",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "diag": Object {
        "message": "timeout",
        "severity": "fail",
      },
      "fullname": "",
      "id": 6,
      "name": "pinged quartz",
      "ok": false,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 7,
      "name": "pinged gold",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 7,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# failed 2 of 7 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 7,
      "fail": 2,
      "failures": Array [
        Result {
          "diag": Object {
            "message": "hostname \\"saphire\\" unknown",
            "severity": "fail",
          },
          "fullname": "",
          "id": 4,
          "name": "pinged saphire",
          "ok": false,
        },
        Result {
          "diag": Object {
            "message": "timeout",
            "severity": "fail",
          },
          "fullname": "",
          "id": 6,
          "name": "pinged quartz",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 5,
      "plan": FinalPlan {
        "comment": "",
        "end": 7,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP unknown-amount-and-failures.tap strict > stringified 1`] = `
TAP version 13
ok 1 - retrieving servers from the database
# need to ping 6 servers
ok 2 - pinged diamond
ok 3 - pinged ruby
not ok 4 - pinged saphire
  ---
  message: hostname "saphire" unknown
  severity: fail
  ...
ok 5 - pinged onyx
not ok 6 - pinged quartz
  ---
  message: timeout
  severity: fail
  ...
ok 7 - pinged gold
1..7
# failed 2 of 7 tests

`

exports[`test/parser-stringify.js TAP unknown-amount-and-failures.tap strict > stringified flat 1`] = `
TAP version 13
ok 1 - retrieving servers from the database
# need to ping 6 servers
ok 2 - pinged diamond
ok 3 - pinged ruby
not ok 4 - pinged saphire
  ---
  message: hostname "saphire" unknown
  severity: fail
  ...
ok 5 - pinged onyx
not ok 6 - pinged quartz
  ---
  message: timeout
  severity: fail
  ...
ok 7 - pinged gold
1..7
# failed 2 of 7 tests

`

exports[`test/parser-stringify.js TAP unknown-amount-and-failures.tap strictBail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "retrieving servers from the database",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# need to ping 6 servers\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "pinged diamond",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "pinged ruby",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "diag": Object {
        "message": "hostname \\"saphire\\" unknown",
        "severity": "fail",
      },
      "fullname": "",
      "id": 4,
      "name": "pinged saphire",
      "ok": false,
    },
  ],
  Array [
    "bailout",
    "pinged saphire",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": "pinged saphire",
      "count": 4,
      "fail": 1,
      "failures": Array [
        Result {
          "diag": Object {
            "message": "hostname \\"saphire\\" unknown",
            "severity": "fail",
          },
          "fullname": "",
          "id": 4,
          "name": "pinged saphire",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 3,
      "plan": FinalPlan {
        "comment": "",
        "end": null,
        "skipAll": false,
        "skipReason": "",
        "start": null,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP unknown-amount-and-failures.tap strictBail > stringified 1`] = `
TAP version 13
ok 1 - retrieving servers from the database
# need to ping 6 servers
ok 2 - pinged diamond
ok 3 - pinged ruby
not ok 4 - pinged saphire
  ---
  message: hostname "saphire" unknown
  severity: fail
  ...
Bail out! pinged saphire

`

exports[`test/parser-stringify.js TAP unknown-amount-and-failures.tap strictBail > stringified flat 1`] = `
TAP version 13
ok 1 - retrieving servers from the database
# need to ping 6 servers
ok 2 - pinged diamond
ok 3 - pinged ruby
not ok 4 - pinged saphire
  ---
  message: hostname "saphire" unknown
  severity: fail
  ...
Bail out! pinged saphire

`

exports[`test/parser-stringify.js TAP version-in-yaml.tap bail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: child indented\\n",
      ],
      Array [
        "assert",
        Result {
          "diag": Object {
            "version": String(
              
              TAP version 13
            ),
          },
          "fullname": "child indented",
          "name": "some yaml",
          "ok": false,
        },
      ],
      Array [
        "bailout",
        "some yaml",
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": "some yaml",
          "count": 1,
          "fail": 1,
          "failures": Array [
            Result {
              "diag": Object {
                "version": String(
                  
                  TAP version 13
                ),
              },
              "fullname": "child indented",
              "name": "some yaml",
              "ok": false,
            },
          ],
          "ok": false,
          "pass": 0,
          "plan": FinalPlan {
            "comment": "",
            "end": null,
            "skipAll": false,
            "skipReason": "",
            "start": null,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "bailout",
    "some yaml",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": "some yaml",
      "count": 0,
      "fail": 0,
      "failures": Array [],
      "ok": false,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": null,
        "skipAll": false,
        "skipReason": "",
        "start": null,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP version-in-yaml.tap bail > stringified 1`] = `
TAP version 13
# Subtest: child indented
    not ok - some yaml
      ---
      version: |-
        
        TAP version 13
      ...
    Bail out! some yaml
Bail out! some yaml

`

exports[`test/parser-stringify.js TAP version-in-yaml.tap bail > stringified flat 1`] = `
TAP version 13
# Subtest: child indented
    not ok - some yaml
      ---
      version: |-
        
        TAP version 13
      ...
    Bail out! some yaml
Bail out! some yaml

`

exports[`test/parser-stringify.js TAP version-in-yaml.tap default settings > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: child indented\\n",
      ],
      Array [
        "assert",
        Result {
          "diag": Object {
            "version": String(
              
              TAP version 13
            ),
          },
          "fullname": "child indented",
          "name": "some yaml",
          "ok": false,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "comment",
        "# failed 1 test\\n",
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 1,
          "failures": Array [
            Result {
              "diag": Object {
                "version": String(
                  
                  TAP version 13
                ),
              },
              "fullname": "child indented",
              "name": "some yaml",
              "ok": false,
            },
          ],
          "ok": false,
          "pass": 0,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "child indented",
      "ok": false,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: child unindented\\n",
      ],
      Array [
        "assert",
        Result {
          "diag": Object {
            "version": String(
              
              TAP version 13
            ),
          },
          "fullname": "child unindented",
          "name": "some yaml",
          "ok": false,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "comment",
        "# failed 1 test\\n",
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 1,
          "failures": Array [
            Result {
              "diag": Object {
                "version": String(
                  
                  TAP version 13
                ),
              },
              "fullname": "child unindented",
              "name": "some yaml",
              "ok": false,
            },
          ],
          "ok": false,
          "pass": 0,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "child unindented",
      "ok": false,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest\\n",
      ],
      Array [
        "assert",
        Result {
          "diag": Object {
            "version": String(
              
              TAP version 13
            ),
          },
          "fullname": "",
          "name": "some yaml",
          "ok": false,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "comment",
        "# failed 1 test\\n",
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 1,
          "failures": Array [
            Result {
              "diag": Object {
                "version": String(
                  
                  TAP version 13
                ),
              },
              "fullname": "",
              "name": "some yaml",
              "ok": false,
            },
          ],
          "ok": false,
          "pass": 0,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "child unnamed",
      "ok": false,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: child buffered\\n",
      ],
      Array [
        "assert",
        Result {
          "diag": Object {
            "version": String(
              
              TAP version 13
            ),
          },
          "fullname": "child buffered",
          "name": "some yaml",
          "ok": false,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "comment",
        "# failed 1 test\\n",
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 1,
          "failures": Array [
            Result {
              "diag": Object {
                "version": String(
                  
                  TAP version 13
                ),
              },
              "fullname": "child buffered",
              "name": "some yaml",
              "ok": false,
            },
          ],
          "ok": false,
          "pass": 0,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "buffered": true,
      "fullname": "",
      "id": 4,
      "name": "child buffered",
      "ok": false,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 4,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# failed 4 of 4 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 4,
      "fail": 4,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 1,
          "name": "child indented",
          "ok": false,
        },
        Result {
          "fullname": "",
          "id": 2,
          "name": "child unindented",
          "ok": false,
        },
        Result {
          "fullname": "",
          "id": 3,
          "name": "child unnamed",
          "ok": false,
        },
        Result {
          "buffered": true,
          "fullname": "",
          "id": 4,
          "name": "child buffered",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": 4,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP version-in-yaml.tap default settings > stringified 1`] = `
TAP version 13
# Subtest: child indented
    not ok - some yaml
      ---
      version: |-
        
        TAP version 13
      ...
    1..1
    # failed 1 test
not ok 1 - child indented
# Subtest: child unindented
    not ok - some yaml
      ---
      version: |-
        
        TAP version 13
      ...
    1..1
    # failed 1 test
not ok 2 - child unindented
# Subtest
    not ok - some yaml
      ---
      version: |-
        
        TAP version 13
      ...
    1..1
    # failed 1 test
not ok 3 - child unnamed
# Subtest: child buffered
    not ok - some yaml
      ---
      version: |-
        
        TAP version 13
      ...
    1..1
    # failed 1 test
not ok 4 - child buffered
1..4
# failed 4 of 4 tests

`

exports[`test/parser-stringify.js TAP version-in-yaml.tap default settings > stringified flat 1`] = `
TAP version 13
# Subtest: child indented
    not ok - some yaml
      ---
      version: |-
        
        TAP version 13
      ...
    1..1
    # failed 1 test
not ok 1 - child indented
# Subtest: child unindented
    not ok - some yaml
      ---
      version: |-
        
        TAP version 13
      ...
    1..1
    # failed 1 test
not ok 2 - child unindented
# Subtest
    not ok - some yaml
      ---
      version: |-
        
        TAP version 13
      ...
    1..1
    # failed 1 test
not ok 3 - child unnamed
# Subtest: child buffered
    not ok - some yaml
      ---
      version: |-
        
        TAP version 13
      ...
    1..1
    # failed 1 test
not ok 4 - child buffered
1..4
# failed 4 of 4 tests

`

exports[`test/parser-stringify.js TAP version-in-yaml.tap strict > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: child indented\\n",
      ],
      Array [
        "assert",
        Result {
          "diag": Object {
            "version": String(
              
              TAP version 13
            ),
          },
          "fullname": "child indented",
          "name": "some yaml",
          "ok": false,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "comment",
        "# failed 1 test\\n",
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 1,
          "failures": Array [
            Result {
              "diag": Object {
                "version": String(
                  
                  TAP version 13
                ),
              },
              "fullname": "child indented",
              "name": "some yaml",
              "ok": false,
            },
          ],
          "ok": false,
          "pass": 0,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "child indented",
      "ok": false,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: child unindented\\n",
      ],
      Array [
        "assert",
        Result {
          "diag": Object {
            "version": String(
              
              TAP version 13
            ),
          },
          "fullname": "child unindented",
          "name": "some yaml",
          "ok": false,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "comment",
        "# failed 1 test\\n",
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 1,
          "failures": Array [
            Result {
              "diag": Object {
                "version": String(
                  
                  TAP version 13
                ),
              },
              "fullname": "child unindented",
              "name": "some yaml",
              "ok": false,
            },
          ],
          "ok": false,
          "pass": 0,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "child unindented",
      "ok": false,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest\\n",
      ],
      Array [
        "assert",
        Result {
          "diag": Object {
            "version": String(
              
              TAP version 13
            ),
          },
          "fullname": "",
          "name": "some yaml",
          "ok": false,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "comment",
        "# failed 1 test\\n",
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 1,
          "failures": Array [
            Result {
              "diag": Object {
                "version": String(
                  
                  TAP version 13
                ),
              },
              "fullname": "",
              "name": "some yaml",
              "ok": false,
            },
          ],
          "ok": false,
          "pass": 0,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "child unnamed",
      "ok": false,
    },
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: child buffered\\n",
      ],
      Array [
        "assert",
        Result {
          "diag": Object {
            "version": String(
              
              TAP version 13
            ),
          },
          "fullname": "child buffered",
          "name": "some yaml",
          "ok": false,
        },
      ],
      Array [
        "plan",
        Object {
          "end": 1,
          "start": 1,
        },
      ],
      Array [
        "comment",
        "# failed 1 test\\n",
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": false,
          "count": 1,
          "fail": 1,
          "failures": Array [
            Result {
              "diag": Object {
                "version": String(
                  
                  TAP version 13
                ),
              },
              "fullname": "child buffered",
              "name": "some yaml",
              "ok": false,
            },
          ],
          "ok": false,
          "pass": 0,
          "plan": FinalPlan {
            "comment": "",
            "end": 1,
            "skipAll": false,
            "skipReason": "",
            "start": 1,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "assert",
    Result {
      "buffered": true,
      "fullname": "",
      "id": 4,
      "name": "child buffered",
      "ok": false,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 4,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# failed 4 of 4 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 4,
      "fail": 4,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 1,
          "name": "child indented",
          "ok": false,
        },
        Result {
          "fullname": "",
          "id": 2,
          "name": "child unindented",
          "ok": false,
        },
        Result {
          "fullname": "",
          "id": 3,
          "name": "child unnamed",
          "ok": false,
        },
        Result {
          "buffered": true,
          "fullname": "",
          "id": 4,
          "name": "child buffered",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": 4,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP version-in-yaml.tap strict > stringified 1`] = `
TAP version 13
# Subtest: child indented
    not ok - some yaml
      ---
      version: |-
        
        TAP version 13
      ...
    1..1
    # failed 1 test
not ok 1 - child indented
# Subtest: child unindented
    not ok - some yaml
      ---
      version: |-
        
        TAP version 13
      ...
    1..1
    # failed 1 test
not ok 2 - child unindented
# Subtest
    not ok - some yaml
      ---
      version: |-
        
        TAP version 13
      ...
    1..1
    # failed 1 test
not ok 3 - child unnamed
# Subtest: child buffered
    not ok - some yaml
      ---
      version: |-
        
        TAP version 13
      ...
    1..1
    # failed 1 test
not ok 4 - child buffered
1..4
# failed 4 of 4 tests

`

exports[`test/parser-stringify.js TAP version-in-yaml.tap strict > stringified flat 1`] = `
TAP version 13
# Subtest: child indented
    not ok - some yaml
      ---
      version: |-
        
        TAP version 13
      ...
    1..1
    # failed 1 test
not ok 1 - child indented
# Subtest: child unindented
    not ok - some yaml
      ---
      version: |-
        
        TAP version 13
      ...
    1..1
    # failed 1 test
not ok 2 - child unindented
# Subtest
    not ok - some yaml
      ---
      version: |-
        
        TAP version 13
      ...
    1..1
    # failed 1 test
not ok 3 - child unnamed
# Subtest: child buffered
    not ok - some yaml
      ---
      version: |-
        
        TAP version 13
      ...
    1..1
    # failed 1 test
not ok 4 - child buffered
1..4
# failed 4 of 4 tests

`

exports[`test/parser-stringify.js TAP version-in-yaml.tap strictBail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "child",
    Array [
      Array [
        "comment",
        "# Subtest: child indented\\n",
      ],
      Array [
        "assert",
        Result {
          "diag": Object {
            "version": String(
              
              TAP version 13
            ),
          },
          "fullname": "child indented",
          "name": "some yaml",
          "ok": false,
        },
      ],
      Array [
        "bailout",
        "some yaml",
      ],
      Array [
        "complete",
        FinalResults {
          "bailout": "some yaml",
          "count": 1,
          "fail": 1,
          "failures": Array [
            Result {
              "diag": Object {
                "version": String(
                  
                  TAP version 13
                ),
              },
              "fullname": "child indented",
              "name": "some yaml",
              "ok": false,
            },
          ],
          "ok": false,
          "pass": 0,
          "plan": FinalPlan {
            "comment": "",
            "end": null,
            "skipAll": false,
            "skipReason": "",
            "start": null,
          },
          "skip": 0,
          "time": null,
          "todo": 0,
        },
      ],
    ],
  ],
  Array [
    "bailout",
    "some yaml",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": "some yaml",
      "count": 0,
      "fail": 0,
      "failures": Array [],
      "ok": false,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": null,
        "skipAll": false,
        "skipReason": "",
        "start": null,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP version-in-yaml.tap strictBail > stringified 1`] = `
TAP version 13
# Subtest: child indented
    not ok - some yaml
      ---
      version: |-
        
        TAP version 13
      ...
    Bail out! some yaml
Bail out! some yaml

`

exports[`test/parser-stringify.js TAP version-in-yaml.tap strictBail > stringified flat 1`] = `
TAP version 13
# Subtest: child indented
    not ok - some yaml
      ---
      version: |-
        
        TAP version 13
      ...
    Bail out! some yaml
Bail out! some yaml

`

exports[`test/parser-stringify.js TAP version_good.tap bail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "ok": true,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 5,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 5,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP version_good.tap bail > stringified 1`] = `
TAP version 13
1..5
ok 1
ok 2
ok 3
ok 4
ok 5

`

exports[`test/parser-stringify.js TAP version_good.tap bail > stringified flat 1`] = `
TAP version 13
1..5
ok 1
ok 2
ok 3
ok 4
ok 5

`

exports[`test/parser-stringify.js TAP version_good.tap default settings > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "ok": true,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 5,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 5,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP version_good.tap default settings > stringified 1`] = `
TAP version 13
1..5
ok 1
ok 2
ok 3
ok 4
ok 5

`

exports[`test/parser-stringify.js TAP version_good.tap default settings > stringified flat 1`] = `
TAP version 13
1..5
ok 1
ok 2
ok 3
ok 4
ok 5

`

exports[`test/parser-stringify.js TAP version_good.tap strict > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "ok": true,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 5,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 5,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP version_good.tap strict > stringified 1`] = `
TAP version 13
1..5
ok 1
ok 2
ok 3
ok 4
ok 5

`

exports[`test/parser-stringify.js TAP version_good.tap strict > stringified flat 1`] = `
TAP version 13
1..5
ok 1
ok 2
ok 3
ok 4
ok 5

`

exports[`test/parser-stringify.js TAP version_good.tap strictBail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "ok": true,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 5,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 5,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP version_good.tap strictBail > stringified 1`] = `
TAP version 13
1..5
ok 1
ok 2
ok 3
ok 4
ok 5

`

exports[`test/parser-stringify.js TAP version_good.tap strictBail > stringified flat 1`] = `
TAP version 13
1..5
ok 1
ok 2
ok 3
ok 4
ok 5

`

exports[`test/parser-stringify.js TAP version_late.tap bail > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "extra",
    "TAP version 13\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "ok": true,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 5,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 5,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP version_late.tap bail > stringified 1`] = `
1..5
TAP version 13
ok 1
ok 2
ok 3
ok 4
ok 5

`

exports[`test/parser-stringify.js TAP version_late.tap bail > stringified flat 1`] = `
1..5
TAP version 13
ok 1
ok 2
ok 3
ok 4
ok 5

`

exports[`test/parser-stringify.js TAP version_late.tap default settings > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "extra",
    "TAP version 13\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "ok": true,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 5,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 5,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP version_late.tap default settings > stringified 1`] = `
1..5
TAP version 13
ok 1
ok 2
ok 3
ok 4
ok 5

`

exports[`test/parser-stringify.js TAP version_late.tap default settings > stringified flat 1`] = `
1..5
TAP version 13
ok 1
ok 2
ok 3
ok 4
ok 5

`

exports[`test/parser-stringify.js TAP version_late.tap strict > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "extra",
    "TAP version 13\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# failed 1 of 5 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 5,
      "fail": 1,
      "failures": Array [
        Object {
          "data": "TAP version 13\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
      ],
      "ok": false,
      "pass": 5,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP version_late.tap strict > stringified 1`] = `
1..5
TAP version 13
ok 1
ok 2
ok 3
ok 4
ok 5
# failed 1 of 5 tests

`

exports[`test/parser-stringify.js TAP version_late.tap strict > stringified flat 1`] = `
1..5
TAP version 13
ok 1
ok 2
ok 3
ok 4
ok 5
# failed 1 of 5 tests

`

exports[`test/parser-stringify.js TAP version_late.tap strictBail > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "extra",
    "TAP version 13\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# failed 1 of 5 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 5,
      "fail": 1,
      "failures": Array [
        Object {
          "data": "TAP version 13\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
      ],
      "ok": false,
      "pass": 5,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP version_late.tap strictBail > stringified 1`] = `
1..5
TAP version 13
ok 1
ok 2
ok 3
ok 4
ok 5
# failed 1 of 5 tests

`

exports[`test/parser-stringify.js TAP version_late.tap strictBail > stringified flat 1`] = `
1..5
TAP version 13
ok 1
ok 2
ok 3
ok 4
ok 5
# failed 1 of 5 tests

`

exports[`test/parser-stringify.js TAP version_old-strict.tap bail > parsed 1`] = `
Array [
  Array [
    "pragma",
    "strict",
    true,
  ],
  Array [
    "extra",
    "TAP version 12\\n",
  ],
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# failed 1 of 5 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 5,
      "fail": 1,
      "failures": Array [
        Object {
          "data": "TAP version 12\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
      ],
      "ok": false,
      "pass": 5,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP version_old-strict.tap bail > stringified 1`] = `
pragma +strict
TAP version 12
1..5
ok 1
ok 2
ok 3
ok 4
ok 5
# failed 1 of 5 tests

`

exports[`test/parser-stringify.js TAP version_old-strict.tap bail > stringified flat 1`] = `
pragma +strict
TAP version 12
1..5
ok 1
ok 2
ok 3
ok 4
ok 5
# failed 1 of 5 tests

`

exports[`test/parser-stringify.js TAP version_old-strict.tap default settings > parsed 1`] = `
Array [
  Array [
    "pragma",
    "strict",
    true,
  ],
  Array [
    "extra",
    "TAP version 12\\n",
  ],
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# failed 1 of 5 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 5,
      "fail": 1,
      "failures": Array [
        Object {
          "data": "TAP version 12\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
      ],
      "ok": false,
      "pass": 5,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP version_old-strict.tap default settings > stringified 1`] = `
pragma +strict
TAP version 12
1..5
ok 1
ok 2
ok 3
ok 4
ok 5
# failed 1 of 5 tests

`

exports[`test/parser-stringify.js TAP version_old-strict.tap default settings > stringified flat 1`] = `
pragma +strict
TAP version 12
1..5
ok 1
ok 2
ok 3
ok 4
ok 5
# failed 1 of 5 tests

`

exports[`test/parser-stringify.js TAP version_old-strict.tap strict > parsed 1`] = `
Array [
  Array [
    "pragma",
    "strict",
    true,
  ],
  Array [
    "extra",
    "TAP version 12\\n",
  ],
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# failed 1 of 5 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 5,
      "fail": 1,
      "failures": Array [
        Object {
          "data": "TAP version 12\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
      ],
      "ok": false,
      "pass": 5,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP version_old-strict.tap strict > stringified 1`] = `
pragma +strict
TAP version 12
1..5
ok 1
ok 2
ok 3
ok 4
ok 5
# failed 1 of 5 tests

`

exports[`test/parser-stringify.js TAP version_old-strict.tap strict > stringified flat 1`] = `
pragma +strict
TAP version 12
1..5
ok 1
ok 2
ok 3
ok 4
ok 5
# failed 1 of 5 tests

`

exports[`test/parser-stringify.js TAP version_old-strict.tap strictBail > parsed 1`] = `
Array [
  Array [
    "pragma",
    "strict",
    true,
  ],
  Array [
    "extra",
    "TAP version 12\\n",
  ],
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# failed 1 of 5 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 5,
      "fail": 1,
      "failures": Array [
        Object {
          "data": "TAP version 12\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
      ],
      "ok": false,
      "pass": 5,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP version_old-strict.tap strictBail > stringified 1`] = `
pragma +strict
TAP version 12
1..5
ok 1
ok 2
ok 3
ok 4
ok 5
# failed 1 of 5 tests

`

exports[`test/parser-stringify.js TAP version_old-strict.tap strictBail > stringified flat 1`] = `
pragma +strict
TAP version 12
1..5
ok 1
ok 2
ok 3
ok 4
ok 5
# failed 1 of 5 tests

`

exports[`test/parser-stringify.js TAP version_old.tap bail > parsed 1`] = `
Array [
  Array [
    "extra",
    "TAP version 12\\n",
  ],
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "ok": true,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 5,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 5,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP version_old.tap bail > stringified 1`] = `
TAP version 12
1..5
ok 1
ok 2
ok 3
ok 4
ok 5

`

exports[`test/parser-stringify.js TAP version_old.tap bail > stringified flat 1`] = `
TAP version 12
1..5
ok 1
ok 2
ok 3
ok 4
ok 5

`

exports[`test/parser-stringify.js TAP version_old.tap default settings > parsed 1`] = `
Array [
  Array [
    "extra",
    "TAP version 12\\n",
  ],
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "ok": true,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 5,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 5,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP version_old.tap default settings > stringified 1`] = `
TAP version 12
1..5
ok 1
ok 2
ok 3
ok 4
ok 5

`

exports[`test/parser-stringify.js TAP version_old.tap default settings > stringified flat 1`] = `
TAP version 12
1..5
ok 1
ok 2
ok 3
ok 4
ok 5

`

exports[`test/parser-stringify.js TAP version_old.tap strict > parsed 1`] = `
Array [
  Array [
    "extra",
    "TAP version 12\\n",
  ],
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# failed 1 of 5 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 5,
      "fail": 1,
      "failures": Array [
        Object {
          "data": "TAP version 12\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
      ],
      "ok": false,
      "pass": 5,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP version_old.tap strict > stringified 1`] = `
TAP version 12
1..5
ok 1
ok 2
ok 3
ok 4
ok 5
# failed 1 of 5 tests

`

exports[`test/parser-stringify.js TAP version_old.tap strict > stringified flat 1`] = `
TAP version 12
1..5
ok 1
ok 2
ok 3
ok 4
ok 5
# failed 1 of 5 tests

`

exports[`test/parser-stringify.js TAP version_old.tap strictBail > parsed 1`] = `
Array [
  Array [
    "extra",
    "TAP version 12\\n",
  ],
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# failed 1 of 5 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 5,
      "fail": 1,
      "failures": Array [
        Object {
          "data": "TAP version 12\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
      ],
      "ok": false,
      "pass": 5,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP version_old.tap strictBail > stringified 1`] = `
TAP version 12
1..5
ok 1
ok 2
ok 3
ok 4
ok 5
# failed 1 of 5 tests

`

exports[`test/parser-stringify.js TAP version_old.tap strictBail > stringified flat 1`] = `
TAP version 12
1..5
ok 1
ok 2
ok 3
ok 4
ok 5
# failed 1 of 5 tests

`

exports[`test/parser-stringify.js TAP vms_nit.tap bail > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 2,
      "start": 1,
    },
  ],
  Array [
    "extra",
    "not \\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 2,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 2,
      "plan": FinalPlan {
        "comment": "",
        "end": 2,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP vms_nit.tap bail > stringified 1`] = `
1..2
not 
ok 1
ok 2

`

exports[`test/parser-stringify.js TAP vms_nit.tap bail > stringified flat 1`] = `
1..2
not 
ok 1
ok 2

`

exports[`test/parser-stringify.js TAP vms_nit.tap default settings > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 2,
      "start": 1,
    },
  ],
  Array [
    "extra",
    "not \\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 2,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 2,
      "plan": FinalPlan {
        "comment": "",
        "end": 2,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP vms_nit.tap default settings > stringified 1`] = `
1..2
not 
ok 1
ok 2

`

exports[`test/parser-stringify.js TAP vms_nit.tap default settings > stringified flat 1`] = `
1..2
not 
ok 1
ok 2

`

exports[`test/parser-stringify.js TAP vms_nit.tap strict > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 2,
      "start": 1,
    },
  ],
  Array [
    "extra",
    "not \\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# failed 1 of 2 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 2,
      "fail": 1,
      "failures": Array [
        Object {
          "data": "not \\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
      ],
      "ok": false,
      "pass": 2,
      "plan": FinalPlan {
        "comment": "",
        "end": 2,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP vms_nit.tap strict > stringified 1`] = `
1..2
not 
ok 1
ok 2
# failed 1 of 2 tests

`

exports[`test/parser-stringify.js TAP vms_nit.tap strict > stringified flat 1`] = `
1..2
not 
ok 1
ok 2
# failed 1 of 2 tests

`

exports[`test/parser-stringify.js TAP vms_nit.tap strictBail > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 2,
      "start": 1,
    },
  ],
  Array [
    "extra",
    "not \\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# failed 1 of 2 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 2,
      "fail": 1,
      "failures": Array [
        Object {
          "data": "not \\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
      ],
      "ok": false,
      "pass": 2,
      "plan": FinalPlan {
        "comment": "",
        "end": 2,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP vms_nit.tap strictBail > stringified 1`] = `
1..2
not 
ok 1
ok 2
# failed 1 of 2 tests

`

exports[`test/parser-stringify.js TAP vms_nit.tap strictBail > stringified flat 1`] = `
1..2
not 
ok 1
ok 2
# failed 1 of 2 tests

`

exports[`test/parser-stringify.js TAP with_comments.tap bail > parsed 1`] = `
Array [
  Array [
    "comment",
    "# and stuff\\n",
  ],
  Array [
    "extra",
    "1..5 todo 1 2 4 5;\\n",
  ],
  Array [
    "comment",
    "# yeah, that\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": false,
    },
  ],
  Array [
    "comment",
    "# Failed test 1 in t/todo.t at line 9 *TODO*\\n",
  ],
  Array [
    "bailout",
    "",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": true,
      "count": 1,
      "fail": 1,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 1,
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": null,
        "skipAll": false,
        "skipReason": "",
        "start": null,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP with_comments.tap bail > stringified 1`] = `
# and stuff
1..5 todo 1 2 4 5;
# yeah, that
not ok 1
# Failed test 1 in t/todo.t at line 9 *TODO*
Bail out!

`

exports[`test/parser-stringify.js TAP with_comments.tap bail > stringified flat 1`] = `
# and stuff
1..5 todo 1 2 4 5;
# yeah, that
not ok 1
# Failed test 1 in t/todo.t at line 9 *TODO*
Bail out!

`

exports[`test/parser-stringify.js TAP with_comments.tap default settings > parsed 1`] = `
Array [
  Array [
    "comment",
    "# and stuff\\n",
  ],
  Array [
    "extra",
    "1..5 todo 1 2 4 5;\\n",
  ],
  Array [
    "comment",
    "# yeah, that\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": false,
    },
  ],
  Array [
    "comment",
    "# Failed test 1 in t/todo.t at line 9 *TODO*\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "# (t/todo.t at line 10 TODO?!)",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "ok": false,
    },
  ],
  Array [
    "comment",
    "# Test 4 got: '0' (t/todo.t at line 12 *TODO*)\\n",
  ],
  Array [
    "comment",
    "#   Expected: '1' (need more tuits)\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "name": "# (t/todo.t at line 13 TODO?!)",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# woo\\n",
  ],
  Array [
    "comment",
    "# test count(5) != plan(null)\\n",
  ],
  Array [
    "comment",
    "# failed 3 of 5 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 5,
      "fail": 3,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 1,
          "ok": false,
        },
        Result {
          "fullname": "",
          "id": 4,
          "ok": false,
        },
        Object {
          "tapError": "no plan",
        },
      ],
      "ok": false,
      "pass": 3,
      "plan": FinalPlan {
        "comment": "",
        "end": null,
        "skipAll": false,
        "skipReason": "",
        "start": null,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP with_comments.tap default settings > stringified 1`] = `
# and stuff
1..5 todo 1 2 4 5;
# yeah, that
not ok 1
# Failed test 1 in t/todo.t at line 9 *TODO*
ok 2 - \\# (t/todo.t at line 10 TODO?!)
ok 3
not ok 4
# Test 4 got: '0' (t/todo.t at line 12 *TODO*)
#   Expected: '1' (need more tuits)
ok 5 - \\# (t/todo.t at line 13 TODO?!)
# woo
# test count(5) != plan(null)
# failed 3 of 5 tests

`

exports[`test/parser-stringify.js TAP with_comments.tap default settings > stringified flat 1`] = `
# and stuff
1..5 todo 1 2 4 5;
# yeah, that
not ok 1
# Failed test 1 in t/todo.t at line 9 *TODO*
ok 2 - \\# (t/todo.t at line 10 TODO?!)
ok 3
not ok 4
# Test 4 got: '0' (t/todo.t at line 12 *TODO*)
#   Expected: '1' (need more tuits)
ok 5 - \\# (t/todo.t at line 13 TODO?!)
# woo
# test count(5) != plan(null)
# failed 3 of 5 tests

`

exports[`test/parser-stringify.js TAP with_comments.tap strict > parsed 1`] = `
Array [
  Array [
    "comment",
    "# and stuff\\n",
  ],
  Array [
    "extra",
    "1..5 todo 1 2 4 5;\\n",
  ],
  Array [
    "comment",
    "# yeah, that\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": false,
    },
  ],
  Array [
    "comment",
    "# Failed test 1 in t/todo.t at line 9 *TODO*\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "# (t/todo.t at line 10 TODO?!)",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "ok": false,
    },
  ],
  Array [
    "comment",
    "# Test 4 got: '0' (t/todo.t at line 12 *TODO*)\\n",
  ],
  Array [
    "comment",
    "#   Expected: '1' (need more tuits)\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "name": "# (t/todo.t at line 13 TODO?!)",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# woo\\n",
  ],
  Array [
    "comment",
    "# test count(5) != plan(null)\\n",
  ],
  Array [
    "comment",
    "# failed 4 of 5 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 5,
      "fail": 4,
      "failures": Array [
        Object {
          "data": "1..5 todo 1 2 4 5;\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Result {
          "fullname": "",
          "id": 1,
          "ok": false,
        },
        Result {
          "fullname": "",
          "id": 4,
          "ok": false,
        },
        Object {
          "tapError": "no plan",
        },
      ],
      "ok": false,
      "pass": 3,
      "plan": FinalPlan {
        "comment": "",
        "end": null,
        "skipAll": false,
        "skipReason": "",
        "start": null,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP with_comments.tap strict > stringified 1`] = `
# and stuff
1..5 todo 1 2 4 5;
# yeah, that
not ok 1
# Failed test 1 in t/todo.t at line 9 *TODO*
ok 2 - \\# (t/todo.t at line 10 TODO?!)
ok 3
not ok 4
# Test 4 got: '0' (t/todo.t at line 12 *TODO*)
#   Expected: '1' (need more tuits)
ok 5 - \\# (t/todo.t at line 13 TODO?!)
# woo
# test count(5) != plan(null)
# failed 4 of 5 tests

`

exports[`test/parser-stringify.js TAP with_comments.tap strict > stringified flat 1`] = `
# and stuff
1..5 todo 1 2 4 5;
# yeah, that
not ok 1
# Failed test 1 in t/todo.t at line 9 *TODO*
ok 2 - \\# (t/todo.t at line 10 TODO?!)
ok 3
not ok 4
# Test 4 got: '0' (t/todo.t at line 12 *TODO*)
#   Expected: '1' (need more tuits)
ok 5 - \\# (t/todo.t at line 13 TODO?!)
# woo
# test count(5) != plan(null)
# failed 4 of 5 tests

`

exports[`test/parser-stringify.js TAP with_comments.tap strictBail > parsed 1`] = `
Array [
  Array [
    "comment",
    "# and stuff\\n",
  ],
  Array [
    "extra",
    "1..5 todo 1 2 4 5;\\n",
  ],
  Array [
    "comment",
    "# yeah, that\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": false,
    },
  ],
  Array [
    "comment",
    "# Failed test 1 in t/todo.t at line 9 *TODO*\\n",
  ],
  Array [
    "bailout",
    "",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": true,
      "count": 1,
      "fail": 2,
      "failures": Array [
        Object {
          "data": "1..5 todo 1 2 4 5;\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Result {
          "fullname": "",
          "id": 1,
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": null,
        "skipAll": false,
        "skipReason": "",
        "start": null,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP with_comments.tap strictBail > stringified 1`] = `
# and stuff
1..5 todo 1 2 4 5;
# yeah, that
not ok 1
# Failed test 1 in t/todo.t at line 9 *TODO*
Bail out!

`

exports[`test/parser-stringify.js TAP with_comments.tap strictBail > stringified flat 1`] = `
# and stuff
1..5 todo 1 2 4 5;
# yeah, that
not ok 1
# Failed test 1 in t/todo.t at line 9 *TODO*
Bail out!

`

exports[`test/parser-stringify.js TAP wrong-last.tap bail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "ok": true,
      "previous": Result {
        "fullname": "",
        "id": 4,
        "ok": true,
      },
      "tapError": "test point id 4 appears multiple times",
    },
  ],
  Array [
    "comment",
    "# failed 1 of 5 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 5,
      "fail": 1,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 4,
          "ok": true,
          "previous": Result {
            "fullname": "",
            "id": 4,
            "ok": true,
          },
          "tapError": "test point id 4 appears multiple times",
        },
      ],
      "ok": false,
      "pass": 5,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP wrong-last.tap bail > stringified 1`] = `
TAP version 13
1..5
ok 1
ok 2
ok 3
ok 4
ok 4
# failed 1 of 5 tests

`

exports[`test/parser-stringify.js TAP wrong-last.tap bail > stringified flat 1`] = `
TAP version 13
1..5
ok 1
ok 2
ok 3
ok 4
ok 4
# failed 1 of 5 tests

`

exports[`test/parser-stringify.js TAP wrong-last.tap default settings > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "ok": true,
      "previous": Result {
        "fullname": "",
        "id": 4,
        "ok": true,
      },
      "tapError": "test point id 4 appears multiple times",
    },
  ],
  Array [
    "comment",
    "# failed 1 of 5 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 5,
      "fail": 1,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 4,
          "ok": true,
          "previous": Result {
            "fullname": "",
            "id": 4,
            "ok": true,
          },
          "tapError": "test point id 4 appears multiple times",
        },
      ],
      "ok": false,
      "pass": 5,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP wrong-last.tap default settings > stringified 1`] = `
TAP version 13
1..5
ok 1
ok 2
ok 3
ok 4
ok 4
# failed 1 of 5 tests

`

exports[`test/parser-stringify.js TAP wrong-last.tap default settings > stringified flat 1`] = `
TAP version 13
1..5
ok 1
ok 2
ok 3
ok 4
ok 4
# failed 1 of 5 tests

`

exports[`test/parser-stringify.js TAP wrong-last.tap strict > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "ok": true,
      "previous": Result {
        "fullname": "",
        "id": 4,
        "ok": true,
      },
      "tapError": "test point id 4 appears multiple times",
    },
  ],
  Array [
    "comment",
    "# failed 1 of 5 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 5,
      "fail": 1,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 4,
          "ok": true,
          "previous": Result {
            "fullname": "",
            "id": 4,
            "ok": true,
          },
          "tapError": "test point id 4 appears multiple times",
        },
      ],
      "ok": false,
      "pass": 5,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP wrong-last.tap strict > stringified 1`] = `
TAP version 13
1..5
ok 1
ok 2
ok 3
ok 4
ok 4
# failed 1 of 5 tests

`

exports[`test/parser-stringify.js TAP wrong-last.tap strict > stringified flat 1`] = `
TAP version 13
1..5
ok 1
ok 2
ok 3
ok 4
ok 4
# failed 1 of 5 tests

`

exports[`test/parser-stringify.js TAP wrong-last.tap strictBail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 4,
      "ok": true,
      "previous": Result {
        "fullname": "",
        "id": 4,
        "ok": true,
      },
      "tapError": "test point id 4 appears multiple times",
    },
  ],
  Array [
    "comment",
    "# failed 1 of 5 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 5,
      "fail": 1,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 4,
          "ok": true,
          "previous": Result {
            "fullname": "",
            "id": 4,
            "ok": true,
          },
          "tapError": "test point id 4 appears multiple times",
        },
      ],
      "ok": false,
      "pass": 5,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP wrong-last.tap strictBail > stringified 1`] = `
TAP version 13
1..5
ok 1
ok 2
ok 3
ok 4
ok 4
# failed 1 of 5 tests

`

exports[`test/parser-stringify.js TAP wrong-last.tap strictBail > stringified flat 1`] = `
TAP version 13
1..5
ok 1
ok 2
ok 3
ok 4
ok 4
# failed 1 of 5 tests

`

exports[`test/parser-stringify.js TAP yaml_late_plan.tap bail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "name": "test suite started",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "diag": Object {
        "Bogomips": 5226.88,
      },
      "fullname": "",
      "name": "bogomips",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "name": "test suite finished",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 3,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 3,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 3,
      "plan": FinalPlan {
        "comment": "",
        "end": 3,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP yaml_late_plan.tap bail > stringified 1`] = `
TAP version 13
ok - test suite started
ok - bogomips
  ---
  Bogomips: 5226.88
  ...
ok - test suite finished
1..3

`

exports[`test/parser-stringify.js TAP yaml_late_plan.tap bail > stringified flat 1`] = `
TAP version 13
ok - test suite started
ok - bogomips
  ---
  Bogomips: 5226.88
  ...
ok - test suite finished
1..3

`

exports[`test/parser-stringify.js TAP yaml_late_plan.tap default settings > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "name": "test suite started",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "diag": Object {
        "Bogomips": 5226.88,
      },
      "fullname": "",
      "name": "bogomips",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "name": "test suite finished",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 3,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 3,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 3,
      "plan": FinalPlan {
        "comment": "",
        "end": 3,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP yaml_late_plan.tap default settings > stringified 1`] = `
TAP version 13
ok - test suite started
ok - bogomips
  ---
  Bogomips: 5226.88
  ...
ok - test suite finished
1..3

`

exports[`test/parser-stringify.js TAP yaml_late_plan.tap default settings > stringified flat 1`] = `
TAP version 13
ok - test suite started
ok - bogomips
  ---
  Bogomips: 5226.88
  ...
ok - test suite finished
1..3

`

exports[`test/parser-stringify.js TAP yaml_late_plan.tap strict > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "name": "test suite started",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "diag": Object {
        "Bogomips": 5226.88,
      },
      "fullname": "",
      "name": "bogomips",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "name": "test suite finished",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 3,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 3,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 3,
      "plan": FinalPlan {
        "comment": "",
        "end": 3,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP yaml_late_plan.tap strict > stringified 1`] = `
TAP version 13
ok - test suite started
ok - bogomips
  ---
  Bogomips: 5226.88
  ...
ok - test suite finished
1..3

`

exports[`test/parser-stringify.js TAP yaml_late_plan.tap strict > stringified flat 1`] = `
TAP version 13
ok - test suite started
ok - bogomips
  ---
  Bogomips: 5226.88
  ...
ok - test suite finished
1..3

`

exports[`test/parser-stringify.js TAP yaml_late_plan.tap strictBail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "name": "test suite started",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "diag": Object {
        "Bogomips": 5226.88,
      },
      "fullname": "",
      "name": "bogomips",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "name": "test suite finished",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 3,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 3,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 3,
      "plan": FinalPlan {
        "comment": "",
        "end": 3,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP yaml_late_plan.tap strictBail > stringified 1`] = `
TAP version 13
ok - test suite started
ok - bogomips
  ---
  Bogomips: 5226.88
  ...
ok - test suite finished
1..3

`

exports[`test/parser-stringify.js TAP yaml_late_plan.tap strictBail > stringified flat 1`] = `
TAP version 13
ok - test suite started
ok - bogomips
  ---
  Bogomips: 5226.88
  ...
ok - test suite finished
1..3

`

exports[`test/parser-stringify.js TAP yamlish-looks-like-child.tap bail > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 3,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "diag": Object {
        "ok": Array [
          "I wished for a bailout!",
          "lots of other shapes here can look like valid tap",
        ],
      },
      "fullname": "",
      "id": 1,
      "name": "callback happened",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "child test",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "should come last",
      "ok": true,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 3,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 3,
      "plan": FinalPlan {
        "comment": "",
        "end": 3,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP yamlish-looks-like-child.tap bail > stringified 1`] = `
1..3
ok 1 - callback happened
  ---
  ok:
    - I wished for a bailout!
    - lots of other shapes here can look like valid tap
  ...
ok 2 - child test
ok 3 - should come last

`

exports[`test/parser-stringify.js TAP yamlish-looks-like-child.tap bail > stringified flat 1`] = `
1..3
ok 1 - callback happened
  ---
  ok:
    - I wished for a bailout!
    - lots of other shapes here can look like valid tap
  ...
ok 2 - child test
ok 3 - should come last

`

exports[`test/parser-stringify.js TAP yamlish-looks-like-child.tap default settings > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 3,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "diag": Object {
        "ok": Array [
          "I wished for a bailout!",
          "lots of other shapes here can look like valid tap",
        ],
      },
      "fullname": "",
      "id": 1,
      "name": "callback happened",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "child test",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "should come last",
      "ok": true,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 3,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 3,
      "plan": FinalPlan {
        "comment": "",
        "end": 3,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP yamlish-looks-like-child.tap default settings > stringified 1`] = `
1..3
ok 1 - callback happened
  ---
  ok:
    - I wished for a bailout!
    - lots of other shapes here can look like valid tap
  ...
ok 2 - child test
ok 3 - should come last

`

exports[`test/parser-stringify.js TAP yamlish-looks-like-child.tap default settings > stringified flat 1`] = `
1..3
ok 1 - callback happened
  ---
  ok:
    - I wished for a bailout!
    - lots of other shapes here can look like valid tap
  ...
ok 2 - child test
ok 3 - should come last

`

exports[`test/parser-stringify.js TAP yamlish-looks-like-child.tap strict > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 3,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "diag": Object {
        "ok": Array [
          "I wished for a bailout!",
          "lots of other shapes here can look like valid tap",
        ],
      },
      "fullname": "",
      "id": 1,
      "name": "callback happened",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "child test",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "should come last",
      "ok": true,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 3,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 3,
      "plan": FinalPlan {
        "comment": "",
        "end": 3,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP yamlish-looks-like-child.tap strict > stringified 1`] = `
1..3
ok 1 - callback happened
  ---
  ok:
    - I wished for a bailout!
    - lots of other shapes here can look like valid tap
  ...
ok 2 - child test
ok 3 - should come last

`

exports[`test/parser-stringify.js TAP yamlish-looks-like-child.tap strict > stringified flat 1`] = `
1..3
ok 1 - callback happened
  ---
  ok:
    - I wished for a bailout!
    - lots of other shapes here can look like valid tap
  ...
ok 2 - child test
ok 3 - should come last

`

exports[`test/parser-stringify.js TAP yamlish-looks-like-child.tap strictBail > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 3,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "diag": Object {
        "ok": Array [
          "I wished for a bailout!",
          "lots of other shapes here can look like valid tap",
        ],
      },
      "fullname": "",
      "id": 1,
      "name": "callback happened",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "child test",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 3,
      "name": "should come last",
      "ok": true,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 3,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 3,
      "plan": FinalPlan {
        "comment": "",
        "end": 3,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP yamlish-looks-like-child.tap strictBail > stringified 1`] = `
1..3
ok 1 - callback happened
  ---
  ok:
    - I wished for a bailout!
    - lots of other shapes here can look like valid tap
  ...
ok 2 - child test
ok 3 - should come last

`

exports[`test/parser-stringify.js TAP yamlish-looks-like-child.tap strictBail > stringified flat 1`] = `
1..3
ok 1 - callback happened
  ---
  ok:
    - I wished for a bailout!
    - lots of other shapes here can look like valid tap
  ...
ok 2 - child test
ok 3 - should come last

`

exports[`test/parser-stringify.js TAP yamlish-that-is-not-yaml.tap bail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "assert",
    Result {
      "diag": Object {
        "but": "this",
        "is": "yaml",
      },
      "fullname": "",
      "id": 1,
      "name": "expected yaml, got a sea turtle",
      "ok": false,
    },
  ],
  Array [
    "extra",
    String(
      ---
        this is not yaml
        "In fact, it": : : :%%% <@!<
        is not 
                      anything
            but a peaceful
              Sea Turtle
                            _,.---.---.---.--.._ 
                        _.-' \`--.\`---.\`---'-. _,\`--.._
                       /\`--._ .'.     \`.     \`,\`-.\`-._\\\\
                      ||   \\\\  \`.\`---.__\`__..-\`. ,'\`-._/
                 _  ,\`\\\\ \`-._\\\\   \\\\    \`.    \`_.-\`-._,\`\`-.
              ,\`   \`-_ \\\\/ \`-.\`--.\\\\    _\\\\_.-'\\\\__.-\`-.\`-._\`.
             (_.o> ,--. \`._/'--.-\`,--\`  \\\\_.-'       \\\\\`-._ \\\\
              \`---'    \`._ \`---._/__,----\`           \`-. \`-\\\\
                        /_, ,  _..-'                    \`-._\\\\
                        \\\\_, \\\\/ ._(
                         \\\\_, \\\\/ ._\\\\
                          \`._,\\\\/ ._\\\\
                            \`._// ./\`-._
                     LGB      \`-._-_-_.-'
                         http://www.ascii-art.de/ascii/t/turtle.txt
      ...
      
    ),
  ],
  Array [
    "bailout",
    "expected yaml, got a sea turtle",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": "expected yaml, got a sea turtle",
      "count": 1,
      "fail": 1,
      "failures": Array [
        Result {
          "diag": Object {
            "but": "this",
            "is": "yaml",
          },
          "fullname": "",
          "id": 1,
          "name": "expected yaml, got a sea turtle",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": null,
        "skipAll": false,
        "skipReason": "",
        "start": null,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP yamlish-that-is-not-yaml.tap bail > stringified 1`] = `
TAP version 13
not ok 1 - expected yaml, got a sea turtle
  ---
  but: this
  is: yaml
  ...
---
  this is not yaml
  "In fact, it": : : :%%% <@!<
  is not 
                anything
      but a peaceful
        Sea Turtle
                      _,.---.---.---.--.._ 
                  _.-' \`--.\`---.\`---'-. _,\`--.._
                 /\`--._ .'.     \`.     \`,\`-.\`-._\\
                ||   \\  \`.\`---.__\`__..-\`. ,'\`-._/
           _  ,\`\\ \`-._\\   \\    \`.    \`_.-\`-._,\`\`-.
        ,\`   \`-_ \\/ \`-.\`--.\\    _\\_.-'\\__.-\`-.\`-._\`.
       (_.o> ,--. \`._/'--.-\`,--\`  \\_.-'       \\\`-._ \\
        \`---'    \`._ \`---._/__,----\`           \`-. \`-\\
                  /_, ,  _..-'                    \`-._\\
                  \\_, \\/ ._(
                   \\_, \\/ ._\\
                    \`._,\\/ ._\\
                      \`._// ./\`-._
               LGB      \`-._-_-_.-'
                   http://www.ascii-art.de/ascii/t/turtle.txt
...
Bail out! expected yaml, got a sea turtle

`

exports[`test/parser-stringify.js TAP yamlish-that-is-not-yaml.tap bail > stringified flat 1`] = `
TAP version 13
not ok 1 - expected yaml, got a sea turtle
  ---
  but: this
  is: yaml
  ...
---
  this is not yaml
  "In fact, it": : : :%%% <@!<
  is not 
                anything
      but a peaceful
        Sea Turtle
                      _,.---.---.---.--.._ 
                  _.-' \`--.\`---.\`---'-. _,\`--.._
                 /\`--._ .'.     \`.     \`,\`-.\`-._\\
                ||   \\  \`.\`---.__\`__..-\`. ,'\`-._/
           _  ,\`\\ \`-._\\   \\    \`.    \`_.-\`-._,\`\`-.
        ,\`   \`-_ \\/ \`-.\`--.\\    _\\_.-'\\__.-\`-.\`-._\`.
       (_.o> ,--. \`._/'--.-\`,--\`  \\_.-'       \\\`-._ \\
        \`---'    \`._ \`---._/__,----\`           \`-. \`-\\
                  /_, ,  _..-'                    \`-._\\
                  \\_, \\/ ._(
                   \\_, \\/ ._\\
                    \`._,\\/ ._\\
                      \`._// ./\`-._
               LGB      \`-._-_-_.-'
                   http://www.ascii-art.de/ascii/t/turtle.txt
...
Bail out! expected yaml, got a sea turtle

`

exports[`test/parser-stringify.js TAP yamlish-that-is-not-yaml.tap default settings > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "assert",
    Result {
      "diag": Object {
        "but": "this",
        "is": "yaml",
      },
      "fullname": "",
      "id": 1,
      "name": "expected yaml, got a sea turtle",
      "ok": false,
    },
  ],
  Array [
    "extra",
    String(
      ---
        this is not yaml
        "In fact, it": : : :%%% <@!<
        is not 
                      anything
            but a peaceful
              Sea Turtle
                            _,.---.---.---.--.._ 
                        _.-' \`--.\`---.\`---'-. _,\`--.._
                       /\`--._ .'.     \`.     \`,\`-.\`-._\\\\
                      ||   \\\\  \`.\`---.__\`__..-\`. ,'\`-._/
                 _  ,\`\\\\ \`-._\\\\   \\\\    \`.    \`_.-\`-._,\`\`-.
              ,\`   \`-_ \\\\/ \`-.\`--.\\\\    _\\\\_.-'\\\\__.-\`-.\`-._\`.
             (_.o> ,--. \`._/'--.-\`,--\`  \\\\_.-'       \\\\\`-._ \\\\
              \`---'    \`._ \`---._/__,----\`           \`-. \`-\\\\
                        /_, ,  _..-'                    \`-._\\\\
                        \\\\_, \\\\/ ._(
                         \\\\_, \\\\/ ._\\\\
                          \`._,\\\\/ ._\\\\
                            \`._// ./\`-._
                     LGB      \`-._-_-_.-'
                         http://www.ascii-art.de/ascii/t/turtle.txt
      ...
      
    ),
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# failed 1 test\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 1,
      "failures": Array [
        Result {
          "diag": Object {
            "but": "this",
            "is": "yaml",
          },
          "fullname": "",
          "id": 1,
          "name": "expected yaml, got a sea turtle",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP yamlish-that-is-not-yaml.tap default settings > stringified 1`] = `
TAP version 13
not ok 1 - expected yaml, got a sea turtle
  ---
  but: this
  is: yaml
  ...
---
  this is not yaml
  "In fact, it": : : :%%% <@!<
  is not 
                anything
      but a peaceful
        Sea Turtle
                      _,.---.---.---.--.._ 
                  _.-' \`--.\`---.\`---'-. _,\`--.._
                 /\`--._ .'.     \`.     \`,\`-.\`-._\\
                ||   \\  \`.\`---.__\`__..-\`. ,'\`-._/
           _  ,\`\\ \`-._\\   \\    \`.    \`_.-\`-._,\`\`-.
        ,\`   \`-_ \\/ \`-.\`--.\\    _\\_.-'\\__.-\`-.\`-._\`.
       (_.o> ,--. \`._/'--.-\`,--\`  \\_.-'       \\\`-._ \\
        \`---'    \`._ \`---._/__,----\`           \`-. \`-\\
                  /_, ,  _..-'                    \`-._\\
                  \\_, \\/ ._(
                   \\_, \\/ ._\\
                    \`._,\\/ ._\\
                      \`._// ./\`-._
               LGB      \`-._-_-_.-'
                   http://www.ascii-art.de/ascii/t/turtle.txt
...
1..1
# failed 1 test

`

exports[`test/parser-stringify.js TAP yamlish-that-is-not-yaml.tap default settings > stringified flat 1`] = `
TAP version 13
not ok 1 - expected yaml, got a sea turtle
  ---
  but: this
  is: yaml
  ...
---
  this is not yaml
  "In fact, it": : : :%%% <@!<
  is not 
                anything
      but a peaceful
        Sea Turtle
                      _,.---.---.---.--.._ 
                  _.-' \`--.\`---.\`---'-. _,\`--.._
                 /\`--._ .'.     \`.     \`,\`-.\`-._\\
                ||   \\  \`.\`---.__\`__..-\`. ,'\`-._/
           _  ,\`\\ \`-._\\   \\    \`.    \`_.-\`-._,\`\`-.
        ,\`   \`-_ \\/ \`-.\`--.\\    _\\_.-'\\__.-\`-.\`-._\`.
       (_.o> ,--. \`._/'--.-\`,--\`  \\_.-'       \\\`-._ \\
        \`---'    \`._ \`---._/__,----\`           \`-. \`-\\
                  /_, ,  _..-'                    \`-._\\
                  \\_, \\/ ._(
                   \\_, \\/ ._\\
                    \`._,\\/ ._\\
                      \`._// ./\`-._
               LGB      \`-._-_-_.-'
                   http://www.ascii-art.de/ascii/t/turtle.txt
...
1..1
# failed 1 test

`

exports[`test/parser-stringify.js TAP yamlish-that-is-not-yaml.tap strict > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "assert",
    Result {
      "diag": Object {
        "but": "this",
        "is": "yaml",
      },
      "fullname": "",
      "id": 1,
      "name": "expected yaml, got a sea turtle",
      "ok": false,
    },
  ],
  Array [
    "extra",
    String(
      ---
        this is not yaml
        "In fact, it": : : :%%% <@!<
        is not 
                      anything
            but a peaceful
              Sea Turtle
                            _,.---.---.---.--.._ 
                        _.-' \`--.\`---.\`---'-. _,\`--.._
                       /\`--._ .'.     \`.     \`,\`-.\`-._\\\\
                      ||   \\\\  \`.\`---.__\`__..-\`. ,'\`-._/
                 _  ,\`\\\\ \`-._\\\\   \\\\    \`.    \`_.-\`-._,\`\`-.
              ,\`   \`-_ \\\\/ \`-.\`--.\\\\    _\\\\_.-'\\\\__.-\`-.\`-._\`.
             (_.o> ,--. \`._/'--.-\`,--\`  \\\\_.-'       \\\\\`-._ \\\\
              \`---'    \`._ \`---._/__,----\`           \`-. \`-\\\\
                        /_, ,  _..-'                    \`-._\\\\
                        \\\\_, \\\\/ ._(
                         \\\\_, \\\\/ ._\\\\
                          \`._,\\\\/ ._\\\\
                            \`._// ./\`-._
                     LGB      \`-._-_-_.-'
                         http://www.ascii-art.de/ascii/t/turtle.txt
      ...
      
    ),
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# failed 2 test\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 2,
      "failures": Array [
        Object {
          "data": String(
            ---
              this is not yaml
              "In fact, it": : : :%%% <@!<
              is not 
                            anything
                  but a peaceful
                    Sea Turtle
                                  _,.---.---.---.--.._ 
                              _.-' \`--.\`---.\`---'-. _,\`--.._
                             /\`--._ .'.     \`.     \`,\`-.\`-._\\\\
                            ||   \\\\  \`.\`---.__\`__..-\`. ,'\`-._/
                       _  ,\`\\\\ \`-._\\\\   \\\\    \`.    \`_.-\`-._,\`\`-.
                    ,\`   \`-_ \\\\/ \`-.\`--.\\\\    _\\\\_.-'\\\\__.-\`-.\`-._\`.
                   (_.o> ,--. \`._/'--.-\`,--\`  \\\\_.-'       \\\\\`-._ \\\\
                    \`---'    \`._ \`---._/__,----\`           \`-. \`-\\\\
                              /_, ,  _..-'                    \`-._\\\\
                              \\\\_, \\\\/ ._(
                               \\\\_, \\\\/ ._\\\\
                                \`._,\\\\/ ._\\\\
                                  \`._// ./\`-._
                           LGB      \`-._-_-_.-'
                               http://www.ascii-art.de/ascii/t/turtle.txt
            ...
            
          ),
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Result {
          "diag": Object {
            "but": "this",
            "is": "yaml",
          },
          "fullname": "",
          "id": 1,
          "name": "expected yaml, got a sea turtle",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP yamlish-that-is-not-yaml.tap strict > stringified 1`] = `
TAP version 13
not ok 1 - expected yaml, got a sea turtle
  ---
  but: this
  is: yaml
  ...
---
  this is not yaml
  "In fact, it": : : :%%% <@!<
  is not 
                anything
      but a peaceful
        Sea Turtle
                      _,.---.---.---.--.._ 
                  _.-' \`--.\`---.\`---'-. _,\`--.._
                 /\`--._ .'.     \`.     \`,\`-.\`-._\\
                ||   \\  \`.\`---.__\`__..-\`. ,'\`-._/
           _  ,\`\\ \`-._\\   \\    \`.    \`_.-\`-._,\`\`-.
        ,\`   \`-_ \\/ \`-.\`--.\\    _\\_.-'\\__.-\`-.\`-._\`.
       (_.o> ,--. \`._/'--.-\`,--\`  \\_.-'       \\\`-._ \\
        \`---'    \`._ \`---._/__,----\`           \`-. \`-\\
                  /_, ,  _..-'                    \`-._\\
                  \\_, \\/ ._(
                   \\_, \\/ ._\\
                    \`._,\\/ ._\\
                      \`._// ./\`-._
               LGB      \`-._-_-_.-'
                   http://www.ascii-art.de/ascii/t/turtle.txt
...
1..1
# failed 2 test

`

exports[`test/parser-stringify.js TAP yamlish-that-is-not-yaml.tap strict > stringified flat 1`] = `
TAP version 13
not ok 1 - expected yaml, got a sea turtle
  ---
  but: this
  is: yaml
  ...
---
  this is not yaml
  "In fact, it": : : :%%% <@!<
  is not 
                anything
      but a peaceful
        Sea Turtle
                      _,.---.---.---.--.._ 
                  _.-' \`--.\`---.\`---'-. _,\`--.._
                 /\`--._ .'.     \`.     \`,\`-.\`-._\\
                ||   \\  \`.\`---.__\`__..-\`. ,'\`-._/
           _  ,\`\\ \`-._\\   \\    \`.    \`_.-\`-._,\`\`-.
        ,\`   \`-_ \\/ \`-.\`--.\\    _\\_.-'\\__.-\`-.\`-._\`.
       (_.o> ,--. \`._/'--.-\`,--\`  \\_.-'       \\\`-._ \\
        \`---'    \`._ \`---._/__,----\`           \`-. \`-\\
                  /_, ,  _..-'                    \`-._\\
                  \\_, \\/ ._(
                   \\_, \\/ ._\\
                    \`._,\\/ ._\\
                      \`._// ./\`-._
               LGB      \`-._-_-_.-'
                   http://www.ascii-art.de/ascii/t/turtle.txt
...
1..1
# failed 2 test

`

exports[`test/parser-stringify.js TAP yamlish-that-is-not-yaml.tap strictBail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "assert",
    Result {
      "diag": Object {
        "but": "this",
        "is": "yaml",
      },
      "fullname": "",
      "id": 1,
      "name": "expected yaml, got a sea turtle",
      "ok": false,
    },
  ],
  Array [
    "extra",
    String(
      ---
        this is not yaml
        "In fact, it": : : :%%% <@!<
        is not 
                      anything
            but a peaceful
              Sea Turtle
                            _,.---.---.---.--.._ 
                        _.-' \`--.\`---.\`---'-. _,\`--.._
                       /\`--._ .'.     \`.     \`,\`-.\`-._\\\\
                      ||   \\\\  \`.\`---.__\`__..-\`. ,'\`-._/
                 _  ,\`\\\\ \`-._\\\\   \\\\    \`.    \`_.-\`-._,\`\`-.
              ,\`   \`-_ \\\\/ \`-.\`--.\\\\    _\\\\_.-'\\\\__.-\`-.\`-._\`.
             (_.o> ,--. \`._/'--.-\`,--\`  \\\\_.-'       \\\\\`-._ \\\\
              \`---'    \`._ \`---._/__,----\`           \`-. \`-\\\\
                        /_, ,  _..-'                    \`-._\\\\
                        \\\\_, \\\\/ ._(
                         \\\\_, \\\\/ ._\\\\
                          \`._,\\\\/ ._\\\\
                            \`._// ./\`-._
                     LGB      \`-._-_-_.-'
                         http://www.ascii-art.de/ascii/t/turtle.txt
      ...
      
    ),
  ],
  Array [
    "bailout",
    "expected yaml, got a sea turtle",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": "expected yaml, got a sea turtle",
      "count": 1,
      "fail": 2,
      "failures": Array [
        Object {
          "data": String(
            ---
              this is not yaml
              "In fact, it": : : :%%% <@!<
              is not 
                            anything
                  but a peaceful
                    Sea Turtle
                                  _,.---.---.---.--.._ 
                              _.-' \`--.\`---.\`---'-. _,\`--.._
                             /\`--._ .'.     \`.     \`,\`-.\`-._\\\\
                            ||   \\\\  \`.\`---.__\`__..-\`. ,'\`-._/
                       _  ,\`\\\\ \`-._\\\\   \\\\    \`.    \`_.-\`-._,\`\`-.
                    ,\`   \`-_ \\\\/ \`-.\`--.\\\\    _\\\\_.-'\\\\__.-\`-.\`-._\`.
                   (_.o> ,--. \`._/'--.-\`,--\`  \\\\_.-'       \\\\\`-._ \\\\
                    \`---'    \`._ \`---._/__,----\`           \`-. \`-\\\\
                              /_, ,  _..-'                    \`-._\\\\
                              \\\\_, \\\\/ ._(
                               \\\\_, \\\\/ ._\\\\
                                \`._,\\\\/ ._\\\\
                                  \`._// ./\`-._
                           LGB      \`-._-_-_.-'
                               http://www.ascii-art.de/ascii/t/turtle.txt
            ...
            
          ),
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Result {
          "diag": Object {
            "but": "this",
            "is": "yaml",
          },
          "fullname": "",
          "id": 1,
          "name": "expected yaml, got a sea turtle",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": null,
        "skipAll": false,
        "skipReason": "",
        "start": null,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP yamlish-that-is-not-yaml.tap strictBail > stringified 1`] = `
TAP version 13
not ok 1 - expected yaml, got a sea turtle
  ---
  but: this
  is: yaml
  ...
---
  this is not yaml
  "In fact, it": : : :%%% <@!<
  is not 
                anything
      but a peaceful
        Sea Turtle
                      _,.---.---.---.--.._ 
                  _.-' \`--.\`---.\`---'-. _,\`--.._
                 /\`--._ .'.     \`.     \`,\`-.\`-._\\
                ||   \\  \`.\`---.__\`__..-\`. ,'\`-._/
           _  ,\`\\ \`-._\\   \\    \`.    \`_.-\`-._,\`\`-.
        ,\`   \`-_ \\/ \`-.\`--.\\    _\\_.-'\\__.-\`-.\`-._\`.
       (_.o> ,--. \`._/'--.-\`,--\`  \\_.-'       \\\`-._ \\
        \`---'    \`._ \`---._/__,----\`           \`-. \`-\\
                  /_, ,  _..-'                    \`-._\\
                  \\_, \\/ ._(
                   \\_, \\/ ._\\
                    \`._,\\/ ._\\
                      \`._// ./\`-._
               LGB      \`-._-_-_.-'
                   http://www.ascii-art.de/ascii/t/turtle.txt
...
Bail out! expected yaml, got a sea turtle

`

exports[`test/parser-stringify.js TAP yamlish-that-is-not-yaml.tap strictBail > stringified flat 1`] = `
TAP version 13
not ok 1 - expected yaml, got a sea turtle
  ---
  but: this
  is: yaml
  ...
---
  this is not yaml
  "In fact, it": : : :%%% <@!<
  is not 
                anything
      but a peaceful
        Sea Turtle
                      _,.---.---.---.--.._ 
                  _.-' \`--.\`---.\`---'-. _,\`--.._
                 /\`--._ .'.     \`.     \`,\`-.\`-._\\
                ||   \\  \`.\`---.__\`__..-\`. ,'\`-._/
           _  ,\`\\ \`-._\\   \\    \`.    \`_.-\`-._,\`\`-.
        ,\`   \`-_ \\/ \`-.\`--.\\    _\\_.-'\\__.-\`-.\`-._\`.
       (_.o> ,--. \`._/'--.-\`,--\`  \\_.-'       \\\`-._ \\
        \`---'    \`._ \`---._/__,----\`           \`-. \`-\\
                  /_, ,  _..-'                    \`-._\\
                  \\_, \\/ ._(
                   \\_, \\/ ._\\
                    \`._,\\/ ._\\
                      \`._// ./\`-._
               LGB      \`-._-_-_.-'
                   http://www.ascii-art.de/ascii/t/turtle.txt
...
Bail out! expected yaml, got a sea turtle

`

exports[`test/parser-stringify.js TAP yamlish-without-test.tap bail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "extra",
    "  ---\\n",
  ],
  Array [
    "extra",
    "  this: is yaml\\n",
  ],
  Array [
    "extra",
    "  but: no test here\\n",
  ],
  Array [
    "extra",
    "  ...\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "name": "this is fine",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP yamlish-without-test.tap bail > stringified 1`] = `
TAP version 13
  ---
  this: is yaml
  but: no test here
  ...
ok - this is fine
1..1

`

exports[`test/parser-stringify.js TAP yamlish-without-test.tap bail > stringified flat 1`] = `
TAP version 13
  ---
  this: is yaml
  but: no test here
  ...
ok - this is fine
1..1

`

exports[`test/parser-stringify.js TAP yamlish-without-test.tap default settings > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "extra",
    "  ---\\n",
  ],
  Array [
    "extra",
    "  this: is yaml\\n",
  ],
  Array [
    "extra",
    "  but: no test here\\n",
  ],
  Array [
    "extra",
    "  ...\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "name": "this is fine",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 0,
      "failures": Array [],
      "ok": true,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP yamlish-without-test.tap default settings > stringified 1`] = `
TAP version 13
  ---
  this: is yaml
  but: no test here
  ...
ok - this is fine
1..1

`

exports[`test/parser-stringify.js TAP yamlish-without-test.tap default settings > stringified flat 1`] = `
TAP version 13
  ---
  this: is yaml
  but: no test here
  ...
ok - this is fine
1..1

`

exports[`test/parser-stringify.js TAP yamlish-without-test.tap strict > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "extra",
    "  ---\\n",
  ],
  Array [
    "extra",
    "  this: is yaml\\n",
  ],
  Array [
    "extra",
    "  but: no test here\\n",
  ],
  Array [
    "extra",
    "  ...\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "name": "this is fine",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# failed 4 test\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 4,
      "failures": Array [
        Object {
          "data": "  ---\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "  this: is yaml\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "  but: no test here\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "  ...\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
      ],
      "ok": false,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP yamlish-without-test.tap strict > stringified 1`] = `
TAP version 13
  ---
  this: is yaml
  but: no test here
  ...
ok - this is fine
1..1
# failed 4 test

`

exports[`test/parser-stringify.js TAP yamlish-without-test.tap strict > stringified flat 1`] = `
TAP version 13
  ---
  this: is yaml
  but: no test here
  ...
ok - this is fine
1..1
# failed 4 test

`

exports[`test/parser-stringify.js TAP yamlish-without-test.tap strictBail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "extra",
    "  ---\\n",
  ],
  Array [
    "extra",
    "  this: is yaml\\n",
  ],
  Array [
    "extra",
    "  but: no test here\\n",
  ],
  Array [
    "extra",
    "  ...\\n",
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "name": "this is fine",
      "ok": true,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# failed 4 test\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 4,
      "failures": Array [
        Object {
          "data": "  ---\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "  this: is yaml\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "  but: no test here\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
        Object {
          "data": "  ...\\n",
          "tapError": "Non-TAP data encountered in strict mode",
        },
      ],
      "ok": false,
      "pass": 1,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP yamlish-without-test.tap strictBail > stringified 1`] = `
TAP version 13
  ---
  this: is yaml
  but: no test here
  ...
ok - this is fine
1..1
# failed 4 test

`

exports[`test/parser-stringify.js TAP yamlish-without-test.tap strictBail > stringified flat 1`] = `
TAP version 13
  ---
  this: is yaml
  but: no test here
  ...
ok - this is fine
1..1
# failed 4 test

`

exports[`test/parser-stringify.js TAP yamlish.tap bail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "assert",
    Result {
      "diag": Object {
        "data": Object {
          "expected": Object {
            "address": "85.193.201.85",
            "hostname": "peebles.example.com",
          },
          "got": Object {
            "address": null,
            "hostname": "peebles.example.com",
          },
        },
        "message": "Failed with error 'hostname peebles.example.com not found'",
        "severity": "fail",
      },
      "fullname": "",
      "id": 1,
      "name": "Resolve address",
      "ok": false,
    },
  ],
  Array [
    "bailout",
    "Resolve address",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": "Resolve address",
      "count": 1,
      "fail": 1,
      "failures": Array [
        Result {
          "diag": Object {
            "data": Object {
              "expected": Object {
                "address": "85.193.201.85",
                "hostname": "peebles.example.com",
              },
              "got": Object {
                "address": null,
                "hostname": "peebles.example.com",
              },
            },
            "message": "Failed with error 'hostname peebles.example.com not found'",
            "severity": "fail",
          },
          "fullname": "",
          "id": 1,
          "name": "Resolve address",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": null,
        "skipAll": false,
        "skipReason": "",
        "start": null,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP yamlish.tap bail > stringified 1`] = `
TAP version 13
not ok 1 - Resolve address
  ---
  message: Failed with error 'hostname peebles.example.com not found'
  severity: fail
  data:
    got:
      hostname: peebles.example.com
      address: null
    expected:
      hostname: peebles.example.com
      address: 85.193.201.85
  ...
Bail out! Resolve address

`

exports[`test/parser-stringify.js TAP yamlish.tap bail > stringified flat 1`] = `
TAP version 13
not ok 1 - Resolve address
  ---
  message: Failed with error 'hostname peebles.example.com not found'
  severity: fail
  data:
    got:
      hostname: peebles.example.com
      address: null
    expected:
      hostname: peebles.example.com
      address: 85.193.201.85
  ...
Bail out! Resolve address

`

exports[`test/parser-stringify.js TAP yamlish.tap default settings > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "assert",
    Result {
      "diag": Object {
        "data": Object {
          "expected": Object {
            "address": "85.193.201.85",
            "hostname": "peebles.example.com",
          },
          "got": Object {
            "address": null,
            "hostname": "peebles.example.com",
          },
        },
        "message": "Failed with error 'hostname peebles.example.com not found'",
        "severity": "fail",
      },
      "fullname": "",
      "id": 1,
      "name": "Resolve address",
      "ok": false,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# failed 1 test\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 1,
      "failures": Array [
        Result {
          "diag": Object {
            "data": Object {
              "expected": Object {
                "address": "85.193.201.85",
                "hostname": "peebles.example.com",
              },
              "got": Object {
                "address": null,
                "hostname": "peebles.example.com",
              },
            },
            "message": "Failed with error 'hostname peebles.example.com not found'",
            "severity": "fail",
          },
          "fullname": "",
          "id": 1,
          "name": "Resolve address",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP yamlish.tap default settings > stringified 1`] = `
TAP version 13
not ok 1 - Resolve address
  ---
  message: Failed with error 'hostname peebles.example.com not found'
  severity: fail
  data:
    got:
      hostname: peebles.example.com
      address: null
    expected:
      hostname: peebles.example.com
      address: 85.193.201.85
  ...
1..1
# failed 1 test

`

exports[`test/parser-stringify.js TAP yamlish.tap default settings > stringified flat 1`] = `
TAP version 13
not ok 1 - Resolve address
  ---
  message: Failed with error 'hostname peebles.example.com not found'
  severity: fail
  data:
    got:
      hostname: peebles.example.com
      address: null
    expected:
      hostname: peebles.example.com
      address: 85.193.201.85
  ...
1..1
# failed 1 test

`

exports[`test/parser-stringify.js TAP yamlish.tap strict > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "assert",
    Result {
      "diag": Object {
        "data": Object {
          "expected": Object {
            "address": "85.193.201.85",
            "hostname": "peebles.example.com",
          },
          "got": Object {
            "address": null,
            "hostname": "peebles.example.com",
          },
        },
        "message": "Failed with error 'hostname peebles.example.com not found'",
        "severity": "fail",
      },
      "fullname": "",
      "id": 1,
      "name": "Resolve address",
      "ok": false,
    },
  ],
  Array [
    "plan",
    Object {
      "end": 1,
      "start": 1,
    },
  ],
  Array [
    "comment",
    "# failed 1 test\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 1,
      "fail": 1,
      "failures": Array [
        Result {
          "diag": Object {
            "data": Object {
              "expected": Object {
                "address": "85.193.201.85",
                "hostname": "peebles.example.com",
              },
              "got": Object {
                "address": null,
                "hostname": "peebles.example.com",
              },
            },
            "message": "Failed with error 'hostname peebles.example.com not found'",
            "severity": "fail",
          },
          "fullname": "",
          "id": 1,
          "name": "Resolve address",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": 1,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP yamlish.tap strict > stringified 1`] = `
TAP version 13
not ok 1 - Resolve address
  ---
  message: Failed with error 'hostname peebles.example.com not found'
  severity: fail
  data:
    got:
      hostname: peebles.example.com
      address: null
    expected:
      hostname: peebles.example.com
      address: 85.193.201.85
  ...
1..1
# failed 1 test

`

exports[`test/parser-stringify.js TAP yamlish.tap strict > stringified flat 1`] = `
TAP version 13
not ok 1 - Resolve address
  ---
  message: Failed with error 'hostname peebles.example.com not found'
  severity: fail
  data:
    got:
      hostname: peebles.example.com
      address: null
    expected:
      hostname: peebles.example.com
      address: 85.193.201.85
  ...
1..1
# failed 1 test

`

exports[`test/parser-stringify.js TAP yamlish.tap strictBail > parsed 1`] = `
Array [
  Array [
    "version",
    13,
  ],
  Array [
    "assert",
    Result {
      "diag": Object {
        "data": Object {
          "expected": Object {
            "address": "85.193.201.85",
            "hostname": "peebles.example.com",
          },
          "got": Object {
            "address": null,
            "hostname": "peebles.example.com",
          },
        },
        "message": "Failed with error 'hostname peebles.example.com not found'",
        "severity": "fail",
      },
      "fullname": "",
      "id": 1,
      "name": "Resolve address",
      "ok": false,
    },
  ],
  Array [
    "bailout",
    "Resolve address",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": "Resolve address",
      "count": 1,
      "fail": 1,
      "failures": Array [
        Result {
          "diag": Object {
            "data": Object {
              "expected": Object {
                "address": "85.193.201.85",
                "hostname": "peebles.example.com",
              },
              "got": Object {
                "address": null,
                "hostname": "peebles.example.com",
              },
            },
            "message": "Failed with error 'hostname peebles.example.com not found'",
            "severity": "fail",
          },
          "fullname": "",
          "id": 1,
          "name": "Resolve address",
          "ok": false,
        },
      ],
      "ok": false,
      "pass": 0,
      "plan": FinalPlan {
        "comment": "",
        "end": null,
        "skipAll": false,
        "skipReason": "",
        "start": null,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP yamlish.tap strictBail > stringified 1`] = `
TAP version 13
not ok 1 - Resolve address
  ---
  message: Failed with error 'hostname peebles.example.com not found'
  severity: fail
  data:
    got:
      hostname: peebles.example.com
      address: null
    expected:
      hostname: peebles.example.com
      address: 85.193.201.85
  ...
Bail out! Resolve address

`

exports[`test/parser-stringify.js TAP yamlish.tap strictBail > stringified flat 1`] = `
TAP version 13
not ok 1 - Resolve address
  ---
  message: Failed with error 'hostname peebles.example.com not found'
  severity: fail
  data:
    got:
      hostname: peebles.example.com
      address: null
    expected:
      hostname: peebles.example.com
      address: 85.193.201.85
  ...
Bail out! Resolve address

`

exports[`test/parser-stringify.js TAP zero_valid.tap bail > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "One",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "Two",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "name": "Three",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 0,
      "name": "Four",
      "ok": true,
      "plan": Object {
        "end": 5,
        "start": 1,
      },
      "tapError": "id less than plan start",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "name": "Five",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# failed 1 of 5 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 5,
      "fail": 1,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 0,
          "name": "Four",
          "ok": true,
          "plan": Object {
            "end": 5,
            "start": 1,
          },
          "tapError": "id less than plan start",
        },
      ],
      "ok": false,
      "pass": 5,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP zero_valid.tap bail > stringified 1`] = `
1..5
ok 1 - One
ok 2 - Two
ok - Three
ok 0 - Four
ok 5 - Five
# failed 1 of 5 tests

`

exports[`test/parser-stringify.js TAP zero_valid.tap bail > stringified flat 1`] = `
1..5
ok 1 - One
ok 2 - Two
ok - Three
ok 0 - Four
ok 5 - Five
# failed 1 of 5 tests

`

exports[`test/parser-stringify.js TAP zero_valid.tap default settings > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "One",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "Two",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "name": "Three",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 0,
      "name": "Four",
      "ok": true,
      "plan": Object {
        "end": 5,
        "start": 1,
      },
      "tapError": "id less than plan start",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "name": "Five",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# failed 1 of 5 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 5,
      "fail": 1,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 0,
          "name": "Four",
          "ok": true,
          "plan": Object {
            "end": 5,
            "start": 1,
          },
          "tapError": "id less than plan start",
        },
      ],
      "ok": false,
      "pass": 5,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP zero_valid.tap default settings > stringified 1`] = `
1..5
ok 1 - One
ok 2 - Two
ok - Three
ok 0 - Four
ok 5 - Five
# failed 1 of 5 tests

`

exports[`test/parser-stringify.js TAP zero_valid.tap default settings > stringified flat 1`] = `
1..5
ok 1 - One
ok 2 - Two
ok - Three
ok 0 - Four
ok 5 - Five
# failed 1 of 5 tests

`

exports[`test/parser-stringify.js TAP zero_valid.tap strict > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "One",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "Two",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "name": "Three",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 0,
      "name": "Four",
      "ok": true,
      "plan": Object {
        "end": 5,
        "start": 1,
      },
      "tapError": "id less than plan start",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "name": "Five",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# failed 1 of 5 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 5,
      "fail": 1,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 0,
          "name": "Four",
          "ok": true,
          "plan": Object {
            "end": 5,
            "start": 1,
          },
          "tapError": "id less than plan start",
        },
      ],
      "ok": false,
      "pass": 5,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP zero_valid.tap strict > stringified 1`] = `
1..5
ok 1 - One
ok 2 - Two
ok - Three
ok 0 - Four
ok 5 - Five
# failed 1 of 5 tests

`

exports[`test/parser-stringify.js TAP zero_valid.tap strict > stringified flat 1`] = `
1..5
ok 1 - One
ok 2 - Two
ok - Three
ok 0 - Four
ok 5 - Five
# failed 1 of 5 tests

`

exports[`test/parser-stringify.js TAP zero_valid.tap strictBail > parsed 1`] = `
Array [
  Array [
    "plan",
    Object {
      "end": 5,
      "start": 1,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 1,
      "name": "One",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 2,
      "name": "Two",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "name": "Three",
      "ok": true,
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 0,
      "name": "Four",
      "ok": true,
      "plan": Object {
        "end": 5,
        "start": 1,
      },
      "tapError": "id less than plan start",
    },
  ],
  Array [
    "assert",
    Result {
      "fullname": "",
      "id": 5,
      "name": "Five",
      "ok": true,
    },
  ],
  Array [
    "comment",
    "# failed 1 of 5 tests\\n",
  ],
  Array [
    "complete",
    FinalResults {
      "bailout": false,
      "count": 5,
      "fail": 1,
      "failures": Array [
        Result {
          "fullname": "",
          "id": 0,
          "name": "Four",
          "ok": true,
          "plan": Object {
            "end": 5,
            "start": 1,
          },
          "tapError": "id less than plan start",
        },
      ],
      "ok": false,
      "pass": 5,
      "plan": FinalPlan {
        "comment": "",
        "end": 5,
        "skipAll": false,
        "skipReason": "",
        "start": 1,
      },
      "skip": 0,
      "time": null,
      "todo": 0,
    },
  ],
]
`

exports[`test/parser-stringify.js TAP zero_valid.tap strictBail > stringified 1`] = `
1..5
ok 1 - One
ok 2 - Two
ok - Three
ok 0 - Four
ok 5 - Five
# failed 1 of 5 tests

`

exports[`test/parser-stringify.js TAP zero_valid.tap strictBail > stringified flat 1`] = `
1..5
ok 1 - One
ok 2 - Two
ok - Three
ok 0 - Four
ok 5 - Five
# failed 1 of 5 tests

`
