{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"AAEA,MAAM,OAAO,KAAK;IAChB,EAAE,CAAU;IACZ,WAAW,GAAkB,EAAE,CAAA;IAC/B,SAAS,GAAY,KAAK,CAAA;IAC1B,YAAY,CAAW;QACrB,IAAI,CAAC,EAAE,GAAG,CAAC,CAAA;IACb,CAAC;IAED;;OAEG;IACH,QAAQ,CAAC,EAAa;QACpB,OAAO,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,CAAA;IACvB,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,EAAa;QACjB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,CAAC,CAAA;QAEzB,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;YACnB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAA;YACrB,MAAM,KAAK,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,CAAA;YAE3B,IAAI,CAAC,EAAE,CAAC,KAAK,GAAG,GAAG,EAAE;gBACnB,MAAM,GAAG,GAAG,KAAK,EAAE,CAAA;gBACnB,IAAI,SAAS,CAAC,GAAG,CAAC,EAAE;oBAClB,OAAO,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC,CAAA;iBAC5C;gBACD,OAAO,IAAI,CAAC,aAAa,EAAE,CAAA;YAC7B,CAAC,CAAA;SACF;IACH,CAAC;IAED,aAAa;QACX,IAAI,EAA2B,CAAA;QAC/B,OAAO,EAAE,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,EAAE;YACpC,MAAM,GAAG,GAAG,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAA;YAC9B,IAAI,SAAS,CAAC,GAAG,CAAC,EAAE;gBAClB,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE;oBACtB,IAAI,CAAC,CAAC,QAAQ,EAAE;wBACd,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAA;qBACvB;yBAAM;wBACL,IAAI,CAAC,aAAa,EAAE,CAAA;qBACrB;gBACH,CAAC,CAAC,CAAA;gBACF,OAAO,GAAG,CAAA;aACX;SACF;IACH,CAAC;CACF;AAED,MAAM,CAAC,MAAM,MAAM,GAAqB,CAAC,CAAW,EAAE,EAAE,CACtD,IAAI,KAAK,CAAC,CAAC,CAAC,CAAA;AAEd,MAAM,SAAS,GAAG,CAAC,CAAM,EAA4B,EAAE,CACrD,CAAC,CAAC,CAAC;IACH,OAAO,CAAC,KAAK,QAAQ;IACrB,OAAO,CAAC,CAAC,IAAI,KAAK,UAAU,CAAA","sourcesContent":["import { TapPlugin, TestBase } from '@tapjs/core'\n\nexport class After {\n  #t: TestBase\n  #onTeardown: (() => any)[] = []\n  #didOnEOF: boolean = false\n  constructor(t: TestBase) {\n    this.#t = t\n  }\n\n  /**\n   * Alias for `t.after(fn)`\n   */\n  teardown(fn: () => any) {\n    return this.after(fn)\n  }\n\n  /**\n   * Just run the supplied function right away.\n   * Runs after the test is completely finished, and before the next\n   * test starts.\n   */\n  after(fn: () => any) {\n    this.#onTeardown.push(fn)\n\n    if (!this.#didOnEOF) {\n      this.#didOnEOF = true\n      const onEOF = this.#t.onEOF\n\n      this.#t.onEOF = () => {\n        const ret = onEOF()\n        if (isPromise(ret)) {\n          return ret.then(() => this.#callTeardown())\n        }\n        return this.#callTeardown()\n      }\n    }\n  }\n\n  #callTeardown() {\n    let fn: (() => any) | undefined\n    while (fn = this.#onTeardown.shift()) {\n      const ret = fn.call(this.#t.t)\n      if (isPromise(ret)) {\n        this.#t.waitOn(ret, w => {\n          if (w.rejected) {\n            this.#t.threw(w.value)\n          } else {\n            this.#callTeardown()\n          }\n        })\n        return ret\n      }\n    }\n  }\n}\n\nexport const plugin: TapPlugin<After> = (t: TestBase) =>\n  new After(t)\n\nconst isPromise = (p: any): p is Promise<any | void> =>\n  !!p &&\n  typeof p === 'object' &&\n  typeof p.then === 'function'\n"]}