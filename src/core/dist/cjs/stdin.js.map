{"version":3,"file":"stdin.js","sourceRoot":"","sources":["../../src/stdin.ts"],"names":[],"mappings":";;;AACA,uCAAyD;AAQzD,MAAa,KAAM,SAAQ,cAAiB;IAC1C,WAAW,CAAkC;IAC7C,YAAY,OAAkB;QAC5B,KAAK,CAAC;YACJ,GAAG,OAAO;YACV,IAAI,EAAE,OAAO,CAAC,IAAI,IAAI,YAAY;SACnC,CAAC,CAAA;QACF,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,SAAS,IAAI,OAAO,CAAC,KAAK,CAAA;QACrD,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAA;IAC1B,CAAC;IAED,IAAI,CAAC,EAAc;QACjB,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,OAAO,EAAE,EAAE,CAAC,EAAE;YAChC,EAAE,CAAC,SAAS,GAAG,YAAY,CAAA;YAC3B,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,CAAA;QAChB,CAAC,CAAC,CAAA;QACF,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE;YACxB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAA;SACtC;QACD,MAAM,CAAC,GAAG,IAAI,CAAC,WAAuB,CAAA;QACtC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;QACnB,IAAI,IAAI,CAAC,MAAM,EAAE;YACf,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,CAAA;SAChC;QACD,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAA;QACzB,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,EAAE,CAAC,CAAA;IACnB,CAAC;IAED,KAAK,CAAC,EAAO,EAAE,KAAW,EAAE,KAAe;QACzC,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,EAAE,EAAE,KAAK,EAAE,KAAK,CAAC,CAAA;QACrC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,CAAA;QAClC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,OAAO,EAAE,KAAK,CAAC,CAAA;QACpC,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,CAAA;IACnB,CAAC;CACF;AAlCD,sBAkCC","sourcesContent":["import { Minipass } from 'minipass'\nimport { Base, BaseOpts, TapBaseEvents } from './base.js'\n\nexport interface StdinOpts extends BaseOpts {\n  tapStream?: NodeJS.ReadableStream | Minipass\n}\n\nexport interface StdinEvents extends TapBaseEvents {}\n\nexport class Stdin extends Base<StdinEvents> {\n  inputStream: NodeJS.ReadableStream | Minipass\n  constructor(options: StdinOpts) {\n    super({\n      ...options,\n      name: options.name || '/dev/stdin',\n    })\n    this.inputStream = options.tapStream || process.stdin\n    this.inputStream.pause()\n  }\n\n  main(cb: () => void) {\n    this.inputStream.on('error', er => {\n      er.tapCaught = 'stdinError'\n      this.threw(er)\n    })\n    if (this.options.timeout) {\n      this.setTimeout(this.options.timeout)\n    }\n    const s = this.inputStream as Minipass\n    s.pipe(this.parser)\n    if (this.parent) {\n      this.parent.emit('stdin', this)\n    }\n    this.inputStream.resume()\n    s.once('end', cb)\n  }\n\n  threw(er: any, extra?: any, proxy?: boolean) {\n    extra = super.threw(er, extra, proxy)\n    Object.assign(this.options, extra)\n    this.parser.abort(er.message, extra)\n    this.parser.end()\n  }\n}\n"]}