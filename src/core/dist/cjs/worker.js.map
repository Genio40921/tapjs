{"version":3,"file":"worker.js","sourceRoot":"","sources":["../../src/worker.ts"],"names":[],"mappings":"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","sourcesContent":["// the .worker() method is only added to the root test object\n// See https://github.com/tapjs/node-tap/issues/812\nimport { Base, TapBaseEvents } from './base.js'\nimport { cwd, env } from './proc.js'\nimport { TestBaseOpts } from './test-base.js'\n\nimport { format } from 'node:util'\nimport { Worker as NodeWorker } from 'node:worker_threads'\nimport { FinalResults } from 'tap-parser'\n\nexport interface WorkerEvents extends TapBaseEvents {}\n\nexport interface WorkerOpts extends TestBaseOpts {\n  workerData?: any\n  threadId?: number\n  env?: { [k: string]: string } | NodeJS.ProcessEnv\n  eval?: boolean\n}\n\nexport class Worker extends Base<WorkerEvents> {\n  declare options: WorkerOpts\n\n  eval: boolean\n  filename: string\n  cb?: () => void\n  worker: null | NodeWorker = null\n  #childId: string\n  env: { [k: string]: string } | NodeJS.ProcessEnv\n  // doesn't have to be cryptographically secure, just a gut check\n  #tapAbortKey: string = String(Math.random())\n  #timedOut?: { expired?: string }\n  #workerEnded: boolean = false\n\n  constructor(options: WorkerOpts) {\n    const { filename } = options\n    if (!filename) {\n      throw new TypeError('no filename provided for t.worker()')\n    }\n    options.name =\n      options.name || Worker.procName(filename, !!options.eval)\n    super(options)\n    this.#childId = String(options.childId || env.TAP_CHILD_ID || '1')\n    this.filename = filename\n    this.eval = !!options.eval\n    this.env = options.env || env\n  }\n\n  main(cb: () => void) {\n    this.cb = cb\n    this.setTimeout(this.options.timeout || 0)\n\n    this.parser.on('comment', c => {\n      const tomatch = c.match(/# timeout=([0-9]+)\\n$/)\n      if (tomatch) {\n        this.setTimeout(+tomatch[1])\n      }\n    })\n\n    this.parent?.emit('worker', this)\n    const options = {\n      ...this.options,\n      eval: this.eval,\n      stdout: true,\n      env: {\n        ...this.env,\n        TAP: '1',\n        TAP_CHILD_ID: this.#childId,\n        TAP_BAIL: this.bail ? '1' : '0',\n        TAP_ABORT_KEY: this.#tapAbortKey,\n      },\n    }\n    this.emit('preprocess', options)\n    this.worker = new NodeWorker(this.filename, options)\n    this.worker.stdout.pipe(this.parser)\n    this.worker.on('error', e => this.threw(e))\n    this.worker.on('exit', () => this.#onworkerexit())\n    this.worker.on('message', m => this.comment(m))\n    this.emit('process', this.worker)\n  }\n\n  #onworkerexit() {\n    this.#workerEnded = true\n    if (this.results) this.#callCb()\n    this.setTimeout(0)\n  }\n\n  timeout(options: { expired?: string } = { expired: this.name }) {\n    this.#timedOut = options\n    // try to send the timeout signal.  If the child test process is\n    // using node-tap as the test runner, and not caught in a busy\n    // loop, it will trigger a dump of outstanding handles and refs.\n    // If that doesn't do the job, then we fall back to thread termination.\n    const worker = this.worker\n    if (worker) {\n      try {\n        worker.postMessage({\n          tapAbort: 'timeout',\n          key: this.#tapAbortKey,\n          child: this.childId,\n        })\n        /* c8 ignore start */\n      } catch {}\n      // need to ignore this bit because there's no way (by design) to\n      // ignore the timeout signal, but it's theoretically possible that\n      // it could be dropped or some busy-wait process prevents it from\n      // being processed.\n      const t = setTimeout(() => {\n        // try to give it a chance to note the timeout and report handles\n        try {\n          worker.terminate()\n        } catch (er) {}\n      }, 500)\n      if (t.unref) t.unref()\n      /* c8 ignore stop */\n    }\n  }\n\n  oncomplete(results: FinalResults) {\n    this.results = results\n    if (this.#workerEnded) this.#callCb()\n  }\n\n  #callCb() {\n    if (this.#timedOut) super.timeout(this.#timedOut)\n    const { results } = this\n    /* c8 ignore start */\n    if (!results) {\n      throw new Error('worker calling cb before parser ended??')\n    }\n    /* c8 ignore stop */\n    // worker closing with no tests is treated as a skip.\n    if (results.plan && results.plan.skipAll) {\n      this.options.skip = results.plan.skipReason || true\n    }\n    super.oncomplete(results)\n\n    const { cb } = this\n    /* c8 ignore start */\n    if (!cb) {\n      throw new Error('tap worker finished before receiving cb??')\n    }\n    /* c8 ignore stop */\n    cb()\n  }\n\n  comment(...args: any[]) {\n    const body = format(...args)\n    const message =\n      ('# ' + body.split(/\\r?\\n/).join('\\n# ')).trim() + '\\n'\n    // it's almost impossible to send a message that will arrive\n    // AFTER the stdout closes, as this only happens when the worker\n    // thread closes, but it is theoretically possible, since messages\n    // are asynchronous.\n    /* c8 ignore start */\n    if (this.parser.results) {\n      if (this.parent && !this.parent.results) {\n        this.parent.parser.write(message)\n      } else {\n        console.log(message.trimEnd())\n      }\n    } else {\n      /* c8 ignore stop */\n      this.parser.write(message)\n    }\n  }\n\n  endAll() {\n    if (this.worker) {\n      this.parser.abort('test unfinished')\n      this.worker.terminate()\n    }\n  }\n\n  static procName(filename: string, ev: boolean) {\n    const pref = '<worker> node'\n    if (ev) return `${pref} -e <inline code>`\n    if (filename.indexOf(cwd) === 0) {\n      filename = './' + filename.substring(cwd.length + 1)\n    }\n    filename = filename.replace(/\\\\/g, '/')\n    return `${pref} ${filename}`\n  }\n}\n"]}