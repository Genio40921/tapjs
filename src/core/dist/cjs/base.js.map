{"version":3,"file":"base.js","sourceRoot":"","sources":["../../src/base.ts"],"names":[],"mappings":"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","sourcesContent":["import { Domain } from 'async-hook-domain'\nimport { AsyncResource } from 'async_hooks'\nimport { Minipass } from 'minipass'\nimport { hrtime } from 'node:process'\nimport { format } from 'node:util'\nimport {\n  FinalResults,\n  Parser,\n  Result,\n  TapError,\n} from 'tap-parser'\nimport { Deferred } from 'trivial-deferred'\nimport { extraFromError } from './extra-from-error.js'\nimport type { Extra, TestBase } from './index.js'\n\nexport interface TapBaseEvents\n  extends Minipass.Events<string> {\n  timeout: [threw?: Extra]\n  bailout: [reason?: string]\n  complete: [results: FinalResults]\n}\n\nexport class TapWrap extends AsyncResource {\n  test: Base\n  constructor(test: Base) {\n    super(`tap.${test.constructor.name}`)\n    this.test = test\n  }\n}\n\nexport interface CountsJSON {\n  total: number\n  pass: number\n  fail?: number\n  skip?: number\n  todo?: number\n  complete?: number\n}\n\nexport class Counts {\n  total: number = 0\n  pass: number = 0\n  fail: number = 0\n  skip: number = 0\n  todo: number = 0\n  complete?: number\n  constructor (c?: Counts | CountsJSON) {\n    if (c) Object.assign(this, c)\n  }\n  toJSON(): CountsJSON {\n    const c: CountsJSON = {\n      total: this.total,\n      pass: this.pass,\n    }\n    if (this.fail) c.fail = this.fail\n    if (this.todo) c.todo = this.todo\n    if (this.skip) c.skip = this.skip\n    return c\n  }\n}\n\nexport class Lists {\n  fail: Result[] = []\n  todo: Result[] = []\n  skip: Result[] = []\n  pass: Result[] = []\n}\n\nconst debug =\n  (name: string) =>\n  (...args: any[]) => {\n    const prefix = `TAP ${process.pid} ${name}: `\n    const msg = format(...args).trim()\n    console.error(\n      prefix + msg.split('\\n').join(`\\n${prefix}`)\n    )\n  }\n\nexport interface BaseOpts extends Extra {\n  // parser-related options\n  bail?: boolean\n  strict?: boolean\n  omitVersion?: boolean\n  preserveWhitespace?: boolean\n  skip?: boolean | string\n  todo?: boolean | string\n  timeout?: number\n\n  time?: number\n  tapChildBuffer?: string\n  stack?: string\n\n  parent?: Base | TestBase\n  name?: string\n  childId?: number\n  context?: any\n  indent?: string\n  debug?: boolean\n  parser?: Parser\n  buffered?: boolean\n\n  /**\n   * Setting silent:true in a subtest option makes it completely excluded\n   * from test output, UNLESS it fails.\n   *\n   * This was used historically for a few things which are now implemented\n   * with a more sophisticated promise management system, but can be handy in\n   * some rare situations.\n   */\n  silent?: boolean\n}\n\nexport class Base<\n  Events extends TapBaseEvents = TapBaseEvents\n> extends Minipass<string, string, Events> {\n  readyToProcess: boolean = false\n  options: BaseOpts\n  indent: string\n  hook: TapWrap\n  // this actually is deterministically set in the ctor, but\n  // in the hook, so tsc doesn't see it.\n  hookDomain!: Domain\n  timer?: NodeJS.Timeout\n\n  parser: Parser\n  debug: (...args: any[]) => void\n  counts: Counts\n  lists: Lists\n  name: string\n  results?: FinalResults\n  parent?: Base | TestBase\n\n  bail: boolean\n  strict: boolean\n  omitVersion: boolean\n  preserveWhitespace: boolean\n\n  errors: TapError[]\n  childId: number\n  context: any\n  output: string\n  buffered: boolean\n  bailedOut: string | boolean\n  start: bigint\n  #started: boolean = false\n  time: number\n  hrtime: bigint\n  silent: boolean\n\n  deferred?: Deferred<FinalResults>\n\n  constructor(options: BaseOpts = {}) {\n    super({ encoding: 'utf8' })\n    // all tap streams are sync string minipasses\n    this.hook = new TapWrap(this)\n    this.options = options\n    this.counts = new Counts()\n    this.lists = new Lists()\n\n    this.silent = !!options.silent\n\n    // if it's null or an object, inherit from it.  otherwise, copy it.\n    const ctx = options.context\n    if (ctx !== undefined) {\n      this.context =\n        typeof ctx === 'object' ? Object.create(ctx) : ctx\n    } else {\n      this.context = null\n    }\n\n    this.bail = !!options.bail\n    this.strict = !!options.strict\n    this.omitVersion = !!options.omitVersion\n    this.preserveWhitespace =\n      options.preserveWhitespace !== false\n    this.buffered = !!options.buffered\n    this.bailedOut = false\n    this.errors = []\n    this.parent = options.parent\n\n    this.time = 0\n    this.hrtime = 0n\n    this.start = 0n\n    this.childId = options.childId || 0\n    // do we need this?  couldn't we just call the Minipass\n    this.output = ''\n    this.indent = options.indent || ''\n    this.name = options.name || '(unnamed test)'\n    this.hook.runInAsyncScope(\n      () =>\n        (this.hookDomain = new Domain((er, type) => {\n          if (!er || typeof er !== 'object')\n            er = { error: er }\n          ;(er as { tapCaught?: string }).tapCaught = type\n          this.threw(er)\n        }))\n    )\n    this.debug = !!options.debug\n      ? debug(this.name)\n      : () => {}\n\n    this.parser =\n      options.parser ||\n      new Parser({\n        bail: this.bail,\n        strict: this.strict,\n        omitVersion: this.omitVersion,\n        preserveWhitespace: this.preserveWhitespace,\n        name: this.name,\n      })\n    this.setupParser()\n\n    // ensure that a skip or todo on a child class reverts\n    // back to Base's no-op main.\n    if (options.skip || options.todo) {\n      this.main = Base.prototype.main\n    }\n  }\n\n  setupParser() {\n    this.parser.on('line', l => this.online(l))\n    this.parser.once('bailout', reason =>\n      this.onbail(reason)\n    )\n    this.parser.on('complete', result =>\n      this.oncomplete(result)\n    )\n\n    this.parser.on('result', () => this.counts.total++)\n    this.parser.on('pass', () => this.counts.pass++)\n    this.parser.on('todo', res => {\n      this.counts.todo++\n      this.lists.todo.push(res)\n    })\n    this.parser.on('skip', res => {\n      // it is uselessly noisy to print out lists of tests skipped\n      // because of a --grep or --only argument.\n      if (/^filter: (only|\\/.*\\/)$/.test(res.skip)) return\n\n      this.counts.skip++\n      this.lists.skip.push(res)\n    })\n    this.parser.on('fail', res => {\n      this.counts.fail++\n      this.lists.fail.push(res)\n    })\n  }\n\n  setTimeout(n: number) {\n    if (this.timer) {\n      clearTimeout(this.timer)\n    }\n    if (n <= 0) {\n      this.timer = undefined\n    } else {\n      this.timer = setTimeout(() => this.timeout(), n)\n      this.timer.unref()\n    }\n  }\n\n  timeout(\n    options: { expired?: string; message?: string } = {\n      expired: this.name,\n      message: 'timeout!',\n    }\n  ) {\n    const { message = 'timeout!' } = options\n    this.setTimeout(0)\n    options.expired = options.expired || this.name\n    // timeouts don't generally have a useful callsite information,\n    // and no sense trying to capture it from @tapjs/stack\n    const extra = {\n      ...options,\n      stack: '',\n      at: {},\n    }\n\n    const threw = this.threw({ message }, extra)\n    if (threw) {\n      this.emit('timeout', threw)\n    }\n  }\n\n  runMain(cb: () => void) {\n    this.debug('BASE runMain')\n    this.start = hrtime.bigint()\n    this.#started = true\n    this.hook.runInAsyncScope(this.main, this, cb)\n  }\n  get started() {\n    return this.#started\n  }\n\n  main(cb: () => void) {\n    cb()\n  }\n\n  write(c: string) {\n    if (this.buffered) {\n      this.output += c\n      return true\n    }\n\n    return super.write(c)\n  }\n\n  onbail(reason?: string) {\n    this.bailedOut = reason || true\n    this.emit('bailout', reason)\n  }\n\n  online(line: string) {\n    this.debug('LINE %j', line, [this.name, this.indent])\n    return this.write(this.indent + line)\n  }\n\n  oncomplete(results: FinalResults) {\n    if (this.start) {\n      this.hrtime = hrtime.bigint() - this.start\n      this.time =\n        results.time ||\n        Math.floor(Number(this.hrtime) / 1000) / 1000\n    }\n\n    this.debug('ONCOMPLETE %j %j', this.name, results)\n\n    if (this.results) {\n      Object.assign(results, this.results)\n    }\n\n    this.results = results\n    this.emit('complete', results)\n    const errors = results.failures\n      .filter(f => f.tapError)\n      .map(f => {\n        delete f.diag\n        delete f.ok\n        return f\n      })\n\n    if (errors.length) {\n      this.errors = errors\n    }\n\n    super.end()\n  }\n\n  /**\n   * extension point for plugins that want to be notified when the test\n   * is about to end, whether explicitly or implicitly.\n   */\n  onbeforeend(): Promise<void> | void {}\n\n  /**\n   * extension point for plugins that want to be notified when the test\n   * is completely done, and terminating its parser.\n   * Eg, used by Snapshot plugin to write the snapshot file.\n   */\n  onEOF(): Promise<void> | void {}\n\n  /**\n   * extension point for TestBase to know when a child tests is done being\n   * processed and it's safe to move on to the next one.\n   *\n   * @internal\n   */\n  ondone() {}\n\n  emit<Event extends keyof Events>(\n    ev: Event,\n    ...data: Events[Event]\n  ) {\n    const ret = super.emit(ev, ...data)\n    if (ev === 'end') {\n      this.ondone()\n      this.hook.emitDestroy()\n      this.hookDomain.destroy()\n    }\n    return ret\n  }\n\n  end() {\n    return this\n  }\n\n  threw(\n    er: any,\n    extra?: Extra,\n    proxy: boolean = false\n  ): Extra | void | undefined {\n    this.hook.emitDestroy()\n    this.hookDomain.destroy()\n    if (typeof er === 'string') {\n      er = { message: er }\n    } else if (!er || typeof er !== 'object') {\n      er = { error: er }\n    }\n    if (this.name && !proxy) {\n      er.test = this.name\n    }\n\n    const message = er.message\n    if (!extra) {\n      extra = extraFromError(er, extra)\n    }\n\n    // if we ended, we have to report it SOMEWHERE, unless we're\n    // already in the process of bailing out, in which case it's\n    // a bit excessive.\n    if (this.results) {\n      const alreadyBailing = !this.results.ok && this.bail\n      this.results.ok = false\n      if (this.parent) {\n        this.parent.threw(er, extra, true)\n      } else if (alreadyBailing) {\n        // we are already bailing out, and this is the top level,\n        // just make our way hastily to the nearest exit.\n        return\n      } else if (!er.stack) {\n        console.error(er)\n      } else {\n        if (message) {\n          er.message = message\n        }\n        delete extra.stack\n        delete extra.at\n        console.error('%s: %s', er.name || 'Error', message)\n        console.error(\n          er.stack.split(/\\n/).slice(1).join('\\n')\n        )\n        console.error(extra)\n      }\n    } else {\n      this.parser.ok = false\n    }\n\n    return extra\n  }\n\n  passing() {\n    return this.parser.ok\n  }\n}\n"]}