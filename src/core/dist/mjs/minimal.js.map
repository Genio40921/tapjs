{"version":3,"file":"minimal.js","sourceRoot":"","sources":["../../src/minimal.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;GAWG;AAEH,OAAO,EAAE,aAAa,EAAY,MAAM,sBAAsB,CAAA;AAC9D,OAAO,EAEL,QAAQ,GAET,MAAM,gBAAgB,CAAA;AAEvB,MAAM,OAAO,OAAQ,SAAQ,QAAQ;IACnC,YAAY,IAAkB;QAC5B,KAAK,CAAC,IAAI,CAAC,CAAA;QACX,IAAI,CAAC,IAAI,CAAC,MAAM;YAAE,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,GAAE,CAAC,CAAC,CAAA;IAC1C,CAAC;IAeD,IAAI,CACF,GAAG,IAAqC;QAExC,MAAM,KAAK,GAAG,aAAa,CAAwB,GAAG,IAAI,CAAC,CAAA;QAC3D,OAAO,IAAI,CAAC,GAAG,CACb,OAAO,EACP,KAAK,EACL,IAAI,CAAC,IAAI,CACqB,CAAA;IAClC,CAAC;CACF","sourcesContent":["/**\n * This is a very minimal Test class with no plugins, which can\n * be used in tap tests.\n *\n * It is essentially just the TestBase class, but automatically\n * starting in the constructor, and with a .test() method so\n * that it can be used somewhat like a \"normal\" Test instance.\n *\n * The reason that this method does not live on TestBase itself\n * is that it would make it more awkward to define on the Test\n * class, with all its plugins and extensions.\n */\n\nimport { parseTestArgs, TestArgs } from './parse-test-args.js'\nimport {\n  PromiseWithSubtest,\n  TestBase,\n  TestBaseOpts,\n} from './test-base.js'\n\nexport class Minimal extends TestBase {\n  constructor(opts: TestBaseOpts) {\n    super(opts)\n    if (!this.parent) this.runMain(() => {})\n  }\n  test(\n    name: string,\n    extra: TestBaseOpts,\n    cb: (t: Minimal) => any\n  ): PromiseWithSubtest<Minimal>\n  test(\n    name: string,\n    cb: (t: Minimal) => any\n  ): PromiseWithSubtest<Minimal>\n  test(\n    extra: TestBaseOpts,\n    cb: (t: Minimal) => any\n  ): PromiseWithSubtest<Minimal>\n  test(cb: (t: Minimal) => any): PromiseWithSubtest<Minimal>\n  test(\n    ...args: TestArgs<Minimal, TestBaseOpts>\n  ): PromiseWithSubtest<Minimal> {\n    const extra = parseTestArgs<Minimal, TestBaseOpts>(...args)\n    return this.sub(\n      Minimal,\n      extra,\n      this.test\n    ) as PromiseWithSubtest<Minimal>\n  }\n}\n"]}