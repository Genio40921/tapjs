{"version":3,"file":"message-from-error.js","sourceRoot":"","sources":["../../src/message-from-error.ts"],"names":[],"mappings":"AAAA;;;GAGG;AACH,MAAM,CAAC,MAAM,gBAAgB,GAAG,CAAC,EAAW,EAAU,EAAE;IACtD,IAAI,OAAO,EAAE,KAAK,QAAQ;QAAE,OAAO,EAAE,CAAA;IACrC,IAAI,WAAW,CAAC,EAAE,CAAC,EAAE;QACnB,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,EAAE,CAAA;QAChD,IAAI,KAAK,IAAI,OAAO,KAAK,IAAI,QAAQ;YAAE,OAAO,KAAK,CAAA;QACnD,MAAM,EAAE,GAAG,IAAI,IAAI,OAAO,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC,EAAE,CAAA;QAC9D,MAAM,MAAM,GAAG,EAAE,IAAI,OAAO,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC,GAAG,IAAI,KAAK,IAAI,KAAK,CAAA,CAAC,CAAC,EAAE,CAAA;QACzE,IAAI,OAAO,IAAI,OAAO,OAAO,KAAK,QAAQ;YAAE,OAAO,OAAO,CAAA;QAC1D,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,CAAC,IAAI,EAAE,EAAE;YAC7C,MAAM,KAAK,GAAG,KAAK,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAA;YACtC,OAAO,IAAI,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,EAAE,CAAC;gBACpC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,EAAE,CAAC,MAAM,CAAC;gBAC/B,CAAC,CAAC,MAAM,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC;oBACvC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC;oBACnC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA;SACb;KACF;IACD,OAAO,iBAAiB,CAAA;AAC1B,CAAC,CAAA;AAYD,MAAM,WAAW,GAAG,CAAC,EAAW,EAAmB,EAAE,CACnD,CAAC,CAAC,EAAE;IACJ,OAAO,EAAE,KAAK,QAAQ;IACtB,CAAC,EAAE,YAAY,KAAK;QAClB,OAAQ,EAAgB,CAAC,KAAK,KAAK,WAAW;QAC9C,OAAQ,EAAgB,CAAC,IAAI,KAAK,WAAW;QAC7C,OAAQ,EAAgB,CAAC,OAAO,KAAK,WAAW;QAChD,OAAQ,EAAgB,CAAC,KAAK,KAAK,WAAW,CAAC;IACjD,CAAE,EAAgB,CAAC,IAAI,KAAK,SAAS;QACnC,OAAQ,EAAgB,CAAC,IAAI,KAAK,QAAQ,CAAC,CAAA","sourcesContent":["/**\n * get the appropriate failure message from an error object to print\n * in a `not ok` test point when unhandled throws or rejections happen.\n */\nexport const messageFromError = (er: unknown): string => {\n  if (typeof er === 'string') return er\n  if (isErrorLike(er)) {\n    const { name, message, stack, error, code } = er\n    if (error && typeof error == 'string') return error\n    const nc = name && typeof name === 'string' ? `${name}: ` : ''\n    const ncCode = nc && typeof code === 'string' ? `${name} [${code}]: `: ''\n    if (message && typeof message === 'string') return message\n    if (typeof stack === 'string' && stack.trim()) {\n      const lines = stack.trim().split('\\n')\n      return name && lines[0].startsWith(nc)\n        ? lines[0].substring(nc.length)\n        : ncCode && lines[0].startsWith(ncCode)\n        ? lines[0].substring(ncCode.length)\n        : lines[0]\n    }\n  }\n  return 'unhandled error'\n}\n\ntype ErrorLike =\n  | (Error & { error?: any; code?: string })\n  | {\n      error?: any\n      name?: string\n      message?: string\n      stack?: any\n      code?: string\n    }\n\nconst isErrorLike = (er: unknown): er is ErrorLike =>\n  !!er &&\n  typeof er === 'object' &&\n  (er instanceof Error ||\n    typeof (er as ErrorLike).error !== 'undefined' ||\n    typeof (er as ErrorLike).name !== 'undefined' ||\n    typeof (er as ErrorLike).message !== 'undefined' ||\n    typeof (er as ErrorLike).stack !== 'undefined') &&\n  ((er as ErrorLike).code === undefined ||\n    typeof (er as ErrorLike).code === 'string')\n"]}