{
	"id": 0,
	"name": "@tapjs/test",
	"variant": "project",
	"kind": 1,
	"flags": {},
	"children": [
		{
			"id": 1,
			"name": "default-plugins",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 2,
					"name": "defaultPlugins",
					"variant": "declaration",
					"kind": 32,
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/test/src/default-plugins.ts",
							"line": 1,
							"character": 13,
							"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/src/default-plugins.ts#L1"
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					},
					"defaultValue": "..."
				}
			],
			"groups": [
				{
					"title": "Variables",
					"children": [
						2
					]
				}
			],
			"sources": [
				{
					"fileName": "src/test/src/default-plugins.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/src/default-plugins.ts#L1"
				}
			]
		},
		{
			"id": 3,
			"name": "index",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 1485,
					"name": "defaultPlugins",
					"variant": "reference",
					"kind": 8388608,
					"flags": {},
					"sources": [
						{
							"fileName": "src/test/src/default-plugins.ts",
							"line": 1,
							"character": 13,
							"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/src/default-plugins.ts#L1"
						}
					],
					"target": 2
				},
				{
					"id": 565,
					"name": "Test",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "This is the class that is extended for the root "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "TAP"
							},
							{
								"kind": "text",
								"text": " test,\nand used to instantiate test objects in its child tests. It extends\n"
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "TestBase",
								"target": {
									"sourceFileName": "../core/src/test-base.ts",
									"qualifiedName": "TestBase"
								},
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": ", and implements the union of return values of all\nloaded plugins via a Proxy."
							}
						]
					},
					"children": [
						{
							"id": 620,
							"name": "constructor",
							"variant": "declaration",
							"kind": 512,
							"flags": {},
							"sources": [
								{
									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
									"line": 209,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L209"
								}
							],
							"signatures": [
								{
									"id": 621,
									"name": "new Test",
									"variant": "signature",
									"kind": 16384,
									"flags": {},
									"comment": {
										"summary": [],
										"modifierTags": [
											"@internal"
										]
									},
									"sources": [
										{
											"fileName": "src/test/test-built/dist/mjs/index.d.ts",
											"line": 209,
											"character": 4,
											"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L209"
										}
									],
									"typeParameter": [
										{
											"id": 622,
											"name": "Ext",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 161,
												"typeArguments": [
													{
														"type": "reference",
														"target": -1,
														"name": "Ext",
														"refersToTypeParameter": true
													}
												],
												"name": "BuiltPlugins",
												"package": "@tapjs/test-built"
											},
											"default": {
												"type": "reference",
												"target": 161,
												"name": "BuiltPlugins",
												"package": "@tapjs/test-built"
											}
										},
										{
											"id": 623,
											"name": "Opts",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 19,
												"name": "TestOpts",
												"package": "@tapjs/test-built"
											},
											"default": {
												"type": "reference",
												"target": 19,
												"name": "TestOpts",
												"package": "@tapjs/test-built"
											}
										}
									],
									"parameters": [
										{
											"id": 624,
											"name": "opts",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Test options for this instance"
													}
												]
											},
											"type": {
												"type": "reference",
												"target": -1,
												"name": "Opts",
												"refersToTypeParameter": true
											}
										},
										{
											"id": 625,
											"name": "__INTERNAL",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isOptional": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Extension option used by the subclasses created in\n"
													},
													{
														"kind": "inline-tag",
														"tag": "@link",
														"text": "applyPlugin",
														"target": 633
													},
													{
														"kind": "text",
														"text": "."
													}
												]
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "test-built/src/index.ts",
													"qualifiedName": "PluginExtensionOption"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": -1,
														"name": "Ext",
														"refersToTypeParameter": true
													},
													{
														"type": "reference",
														"target": -1,
														"name": "Opts",
														"refersToTypeParameter": true
													}
												],
												"name": "PluginExtensionOption",
												"package": "@tapjs/test-built"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": 565,
										"typeArguments": [
											{
												"type": "reference",
												"target": -1,
												"name": "Ext",
												"refersToTypeParameter": true
											},
											{
												"type": "reference",
												"target": -1,
												"name": "Opts",
												"refersToTypeParameter": true
											}
										],
										"name": "Test",
										"package": "@tapjs/test-built"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.constructor"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.constructor"
							}
						},
						{
							"id": 632,
							"name": "#private",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
									"line": 200,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L200"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 725,
							"name": "#private",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "src/core/dist/mjs/test-base.d.ts",
									"line": 134,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/test-base.d.ts#L134"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.#private"
							}
						},
						{
							"id": 835,
							"name": "#private",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "src/core/dist/mjs/base.d.ts",
									"line": 162,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/base.d.ts#L162"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.#private"
							}
						},
						{
							"id": 1080,
							"name": "#private",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "src/after/dist/mjs/index.d.ts",
									"line": 12,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/after/dist/mjs/index.d.ts#L12"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.#private"
							}
						},
						{
							"id": 1091,
							"name": "#private",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "src/after-each/dist/mjs/index.d.ts",
									"line": 13,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.#private"
							}
						},
						{
							"id": 1098,
							"name": "#private",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "src/asserts/dist/mjs/index.d.ts",
									"line": 31,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.#private"
							}
						},
						{
							"id": 1278,
							"name": "#private",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "src/before/dist/mjs/index.d.ts",
									"line": 12,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.#private"
							}
						},
						{
							"id": 1284,
							"name": "#private",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "src/before-each/dist/mjs/index.d.ts",
									"line": 13,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.#private"
							}
						},
						{
							"id": 1291,
							"name": "#private",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "src/filter/dist/mjs/index.d.ts",
									"line": 33,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.#private"
							}
						},
						{
							"id": 1317,
							"name": "#private",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "src/fixture/dist/mjs/index.d.ts",
									"line": 18,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.#private"
							}
						},
						{
							"id": 1330,
							"name": "#private",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "src/intercept/dist/mjs/index.d.ts",
									"line": 168,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.#private"
							}
						},
						{
							"id": 1365,
							"name": "#private",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "src/mock/dist/mjs/index.d.ts",
									"line": 7,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.#private"
							}
						},
						{
							"id": 1401,
							"name": "#private",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "src/snapshot/dist/mjs/index.d.ts",
									"line": 53,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.#private"
							}
						},
						{
							"id": 1442,
							"name": "#private",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "src/spawn/dist/mjs/index.d.ts",
									"line": 17,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.#private"
							}
						},
						{
							"id": 1459,
							"name": "#private",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "src/stdin/dist/mjs/index.d.ts",
									"line": 4,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.#private"
							}
						},
						{
							"id": 1469,
							"name": "#private",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "src/worker/dist/mjs/index.d.ts",
									"line": 4,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.#private"
							}
						},
						{
							"id": 1007,
							"name": "[ABORTED]",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
									"line": 248,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.[ABORTED]"
							}
						},
						{
							"id": 997,
							"name": "[ASYNC]",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
									"line": 238,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.[ASYNC]"
							}
						},
						{
							"id": 1004,
							"name": "[BUFFERLENGTH]",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
									"line": 245,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.[BUFFERLENGTH]"
							}
						},
						{
							"id": 994,
							"name": "[BUFFER]",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
									"line": 235,
									"character": 4
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.[BUFFER]"
							}
						},
						{
							"id": 1002,
							"name": "[CLOSED]",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
									"line": 243,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.[CLOSED]"
							}
						},
						{
							"id": 1008,
							"name": "[DATALISTENERS]",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
									"line": 249,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.[DATALISTENERS]"
							}
						},
						{
							"id": 998,
							"name": "[DECODER]",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
									"line": 239,
									"character": 4
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/minipass/src/index.ts",
											"qualifiedName": "SD"
										},
										"name": "SD",
										"package": "minipass"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.[DECODER]"
							}
						},
						{
							"id": 1005,
							"name": "[DESTROYED]",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
									"line": 246,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.[DESTROYED]"
							}
						},
						{
							"id": 1009,
							"name": "[DISCARDED]",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
									"line": 250,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.[DISCARDED]"
							}
						},
						{
							"id": 1000,
							"name": "[EMITTED_END]",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
									"line": 241,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.[EMITTED_END]"
							}
						},
						{
							"id": 1003,
							"name": "[EMITTED_ERROR]",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
									"line": 244,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "unknown"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.[EMITTED_ERROR]"
							}
						},
						{
							"id": 1001,
							"name": "[EMITTING_END]",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
									"line": 242,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.[EMITTING_END]"
							}
						},
						{
							"id": 996,
							"name": "[ENCODING]",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
									"line": 237,
									"character": 4
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
											"qualifiedName": "__global.BufferEncoding"
										},
										"name": "BufferEncoding",
										"package": "@types/node",
										"qualifiedName": "__global.BufferEncoding"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.[ENCODING]"
							}
						},
						{
							"id": 999,
							"name": "[EOF]",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
									"line": 240,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.[EOF]"
							}
						},
						{
							"id": 991,
							"name": "[FLOWING]",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
									"line": 232,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.[FLOWING]"
							}
						},
						{
							"id": 995,
							"name": "[OBJECTMODE]",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
									"line": 236,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.[OBJECTMODE]"
							}
						},
						{
							"id": 992,
							"name": "[PAUSED]",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
									"line": 233,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.[PAUSED]"
							}
						},
						{
							"id": 993,
							"name": "[PIPES]",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
									"line": 234,
									"character": 4
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": {
										"sourceFileName": "../../node_modules/minipass/src/index.ts",
										"qualifiedName": "Pipe"
									},
									"typeArguments": [
										{
											"type": "intrinsic",
											"name": "string"
										}
									],
									"name": "Pipe",
									"package": "minipass"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.[PIPES]"
							}
						},
						{
							"id": 1006,
							"name": "[SIGNAL]",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
									"line": 247,
									"character": 4
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.dom.d.ts",
									"qualifiedName": "AbortSignal"
								},
								"name": "AbortSignal",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.[SIGNAL]"
							}
						},
						{
							"id": 745,
							"name": "activeSubtests",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Subtests that are currently in process"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/core/dist/mjs/test-base.d.ts",
									"line": 158,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/test-base.d.ts#L158"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es2015.collection.d.ts",
									"qualifiedName": "Set"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../core/src/base.ts",
											"qualifiedName": "Base"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../core/src/base.ts",
													"qualifiedName": "TapBaseEvents"
												},
												"name": "TapBaseEvents",
												"package": "@tapjs/core"
											}
										],
										"name": "Base",
										"package": "@tapjs/core"
									}
								],
								"name": "Set",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.activeSubtests"
							}
						},
						{
							"id": 746,
							"name": "assertTotals",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Count of all asserts in this and all child tests,\nexcluding child test summary points"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/core/dist/mjs/test-base.d.ts",
									"line": 163,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/test-base.d.ts#L163"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../core/src/counts.ts",
									"qualifiedName": "Counts"
								},
								"name": "Counts",
								"package": "@tapjs/core"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.assertTotals"
							}
						},
						{
							"id": 851,
							"name": "bail",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Bail out on the first failed test point"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/core/dist/mjs/base.d.ts",
									"line": 226,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/base.d.ts#L226"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.bail"
							}
						},
						{
							"id": 860,
							"name": "bailedOut",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "True if this test emitted a bailout"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/core/dist/mjs/base.d.ts",
									"line": 269,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/base.d.ts#L269"
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.bailedOut"
							}
						},
						{
							"id": 859,
							"name": "buffered",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "True if this test should be buffered and only processed on completion"
									}
								],
								"modifierTags": [
									"@internal"
								]
							},
							"sources": [
								{
									"fileName": "src/core/dist/mjs/base.d.ts",
									"line": 265,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/base.d.ts#L265"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.buffered"
							}
						},
						{
							"id": 738,
							"name": "cb",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/core/dist/mjs/test-base.d.ts",
									"line": 151,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/test-base.d.ts#L151"
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 739,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "src/core/dist/mjs/test-base.d.ts",
											"line": 151,
											"character": 9,
											"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/test-base.d.ts#L151"
										}
									],
									"signatures": [
										{
											"id": 740,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"sources": [
												{
													"fileName": "src/core/dist/mjs/test-base.d.ts",
													"line": 151,
													"character": 9,
													"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/test-base.d.ts#L151"
												}
											],
											"parameters": [
												{
													"id": 741,
													"name": "args",
													"variant": "param",
													"kind": 32768,
													"flags": {
														"isRest": true
													},
													"type": {
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "any"
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									]
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.cb"
							}
						},
						{
							"id": 856,
							"name": "childId",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Numeric identifier for this test"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/core/dist/mjs/base.d.ts",
									"line": 248,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/base.d.ts#L248"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.childId"
							}
						},
						{
							"id": 857,
							"name": "context",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Any arbitrary data that is provided to this test object. Often, this\nis set in a "
									},
									{
										"kind": "code",
										"text": "`t.before()`"
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "code",
										"text": "`t.beforeEach()`"
									},
									{
										"kind": "text",
										"text": " method. Scalar values\nare inherited by child tests. Object values are extended in child\ntests using "
									},
									{
										"kind": "code",
										"text": "`Object.create()`"
									},
									{
										"kind": "text",
										"text": "."
									}
								]
							},
							"sources": [
								{
									"fileName": "src/core/dist/mjs/base.d.ts",
									"line": 255,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/base.d.ts#L255"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.context"
							}
						},
						{
							"id": 742,
							"name": "count",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "src/core/dist/mjs/test-base.d.ts",
									"line": 152,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/test-base.d.ts#L152"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.count"
							}
						},
						{
							"id": 847,
							"name": "counts",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The count of all assertions that this stream emitted"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/core/dist/mjs/base.d.ts",
									"line": 205,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/base.d.ts#L205"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../core/src/counts.ts",
									"qualifiedName": "Counts"
								},
								"name": "Counts",
								"package": "@tapjs/core"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.counts"
							}
						},
						{
							"id": 843,
							"name": "debug",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "src/core/dist/mjs/base.d.ts",
									"line": 201,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/base.d.ts#L201"
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 844,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"sources": [
										{
											"fileName": "src/core/dist/mjs/base.d.ts",
											"line": 201,
											"character": 11,
											"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/base.d.ts#L201"
										}
									],
									"signatures": [
										{
											"id": 845,
											"name": "__type",
											"variant": "signature",
											"kind": 4096,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Method that writes to stderr when "
													},
													{
														"kind": "code",
														"text": "`debug: true`"
													},
													{
														"kind": "text",
														"text": " is set in the options,\nor no-ops otherwise"
													}
												]
											},
											"sources": [
												{
													"fileName": "src/core/dist/mjs/base.d.ts",
													"line": 201,
													"character": 11,
													"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/base.d.ts#L201"
												}
											],
											"parameters": [
												{
													"id": 846,
													"name": "args",
													"variant": "param",
													"kind": 32768,
													"flags": {
														"isRest": true
													},
													"type": {
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "any"
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											}
										}
									]
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.debug"
							}
						},
						{
							"id": 865,
							"name": "deferred",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "A "
									},
									{
										"kind": "code",
										"text": "`Deferred`"
									},
									{
										"kind": "text",
										"text": " promise wrapper that is resolved when this test completes."
									}
								]
							},
							"sources": [
								{
									"fileName": "src/core/dist/mjs/base.d.ts",
									"line": 289,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/base.d.ts#L289"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/trivial-deferred/src/index.ts",
									"qualifiedName": "Deferred"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../parser/src/final-results.ts",
											"qualifiedName": "FinalResults"
										},
										"name": "FinalResults",
										"package": "tap-parser"
									}
								],
								"name": "Deferred",
								"package": "trivial-deferred"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.deferred"
							}
						},
						{
							"id": 744,
							"name": "diagnostic",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "src/core/dist/mjs/test-base.d.ts",
									"line": 154,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/test-base.d.ts#L154"
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "literal",
										"value": null
									},
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.diagnostic"
							}
						},
						{
							"id": 729,
							"name": "donePromise",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/core/dist/mjs/test-base.d.ts",
									"line": 144,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/test-base.d.ts#L144"
								}
							],
							"type": {
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 730,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"children": [
												{
													"id": 731,
													"name": "tapAbortPromise",
													"variant": "declaration",
													"kind": 1024,
													"flags": {
														"isOptional": true
													},
													"sources": [
														{
															"fileName": "src/core/dist/mjs/test-base.d.ts",
															"line": 145,
															"character": 8,
															"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/test-base.d.ts#L145"
														}
													],
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 732,
															"name": "__type",
															"variant": "declaration",
															"kind": 65536,
															"flags": {},
															"sources": [
																{
																	"fileName": "src/core/dist/mjs/test-base.d.ts",
																	"line": 145,
																	"character": 26,
																	"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/test-base.d.ts#L145"
																}
															],
															"signatures": [
																{
																	"id": 733,
																	"name": "__type",
																	"variant": "signature",
																	"kind": 4096,
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "src/core/dist/mjs/test-base.d.ts",
																			"line": 145,
																			"character": 26,
																			"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/test-base.d.ts#L145"
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"children": [
														731
													]
												}
											],
											"sources": [
												{
													"fileName": "src/core/dist/mjs/test-base.d.ts",
													"line": 144,
													"character": 33,
													"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/test-base.d.ts#L144"
												}
											]
										}
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.donePromise"
							}
						},
						{
							"id": 743,
							"name": "ended",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "src/core/dist/mjs/test-base.d.ts",
									"line": 153,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/test-base.d.ts#L153"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.ended"
							}
						},
						{
							"id": 855,
							"name": "errors",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Unrecoverable TAP protocol errors in the stream"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/core/dist/mjs/base.d.ts",
									"line": 244,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/base.d.ts#L244"
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": {
										"sourceFileName": "../parser/src/result.ts",
										"qualifiedName": "TapError"
									},
									"name": "TapError",
									"package": "tap-parser"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.errors"
							}
						},
						{
							"id": 838,
							"name": "hook",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "TapWrap AsyncResource that limits the async-hook-domain"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/core/dist/mjs/base.d.ts",
									"line": 179,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/base.d.ts#L179"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../core/src/base.ts",
									"qualifiedName": "TapWrap"
								},
								"name": "TapWrap",
								"package": "@tapjs/core"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.hook"
							}
						},
						{
							"id": 839,
							"name": "hookDomain",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "the async-hook-domain that catches throws and Promise rejections"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/core/dist/mjs/base.d.ts",
									"line": 183,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/base.d.ts#L183"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/async-hook-domain/src/index.ts",
									"qualifiedName": "Domain"
								},
								"name": "Domain",
								"package": "async-hook-domain"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.hookDomain"
							}
						},
						{
							"id": 863,
							"name": "hrtime",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "High resolution time in ns that this test took to complete."
									}
								]
							},
							"sources": [
								{
									"fileName": "src/core/dist/mjs/base.d.ts",
									"line": 281,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/base.d.ts#L281"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "bigint"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.hrtime"
							}
						},
						{
							"id": 837,
							"name": "indent",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "number of spaces to indent the TAP stream"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/core/dist/mjs/base.d.ts",
									"line": 175,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/base.d.ts#L175"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.indent"
							}
						},
						{
							"id": 1470,
							"name": "isMainThread",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "src/worker/dist/mjs/index.d.ts",
									"line": 5,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.isMainThread"
							}
						},
						{
							"id": 734,
							"name": "jobs",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "src/core/dist/mjs/test-base.d.ts",
									"line": 147,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/test-base.d.ts#L147"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.jobs"
							}
						},
						{
							"id": 848,
							"name": "lists",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Lists of todo, skip, and failure test points. If "
									},
									{
										"kind": "code",
										"text": "`passes: true`"
									},
									{
										"kind": "text",
										"text": " is\nset in the options, then passing test points will also be tracked."
									}
								]
							},
							"sources": [
								{
									"fileName": "src/core/dist/mjs/base.d.ts",
									"line": 210,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/base.d.ts#L210"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../core/src/lists.ts",
									"qualifiedName": "Lists"
								},
								"name": "Lists",
								"package": "@tapjs/core"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.lists"
							}
						},
						{
							"id": 849,
							"name": "name",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "the name of this test"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/core/dist/mjs/base.d.ts",
									"line": 214,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/base.d.ts#L214"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.name"
							}
						},
						{
							"id": 853,
							"name": "omitVersion",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Do not emit the "
									},
									{
										"kind": "code",
										"text": "`TAP version 14`"
									},
									{
										"kind": "text",
										"text": " line at the start"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/core/dist/mjs/base.d.ts",
									"line": 236,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/base.d.ts#L236"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.omitVersion"
							}
						},
						{
							"id": 727,
							"name": "options",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "src/core/dist/mjs/test-base.d.ts",
									"line": 136,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/test-base.d.ts#L136"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../core/src/test-base.ts",
									"qualifiedName": "TestBaseOpts"
								},
								"name": "TestBaseOpts",
								"package": "@tapjs/core"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.options"
							}
						},
						{
							"id": 858,
							"name": "output",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "the TAP stream data for buffered tests"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/core/dist/mjs/base.d.ts",
									"line": 259,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/base.d.ts#L259"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.output"
							}
						},
						{
							"id": 726,
							"name": "parent",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/core/dist/mjs/test-base.d.ts",
									"line": 135,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/test-base.d.ts#L135"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../core/src/test-base.ts",
									"qualifiedName": "TestBase"
								},
								"name": "TestBase",
								"package": "@tapjs/core"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.parent"
							}
						},
						{
							"id": 842,
							"name": "parser",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The tap parser attached to this TAP stream"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/core/dist/mjs/base.d.ts",
									"line": 196,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/base.d.ts#L196"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../parser/src/index.ts",
									"qualifiedName": "Parser"
								},
								"name": "Parser",
								"package": "tap-parser"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.parser"
							}
						},
						{
							"id": 736,
							"name": "pool",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "src/core/dist/mjs/test-base.d.ts",
									"line": 149,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/test-base.d.ts#L149"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es2015.collection.d.ts",
									"qualifiedName": "Set"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../core/src/base.ts",
											"qualifiedName": "Base"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../core/src/base.ts",
													"qualifiedName": "TapBaseEvents"
												},
												"name": "TapBaseEvents",
												"package": "@tapjs/core"
											}
										],
										"name": "Base",
										"package": "@tapjs/core"
									}
								],
								"name": "Set",
								"package": "typescript"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.pool"
							}
						},
						{
							"id": 854,
							"name": "preserveWhitespace",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Do not elide extraneous whitespace and empty lines."
									}
								]
							},
							"sources": [
								{
									"fileName": "src/core/dist/mjs/base.d.ts",
									"line": 240,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/base.d.ts#L240"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.preserveWhitespace"
							}
						},
						{
							"id": 737,
							"name": "queue",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "src/core/dist/mjs/test-base.d.ts",
									"line": 150,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/test-base.d.ts#L150"
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": {
										"sourceFileName": "../core/src/test-base.ts",
										"qualifiedName": "QueueEntry"
									},
									"name": "QueueEntry",
									"package": "@tapjs/core"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.queue"
							}
						},
						{
							"id": 898,
							"name": "readable",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "true if the stream can be read"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
									"line": 258,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.readable"
							}
						},
						{
							"id": 836,
							"name": "readyToProcess",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Set upon test completion when a child test is ready to be processed by its\nparent."
									}
								]
							},
							"sources": [
								{
									"fileName": "src/core/dist/mjs/base.d.ts",
									"line": 167,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/base.d.ts#L167"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.readyToProcess"
							}
						},
						{
							"id": 850,
							"name": "results",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Set on completion. The results of the test run."
									}
								]
							},
							"sources": [
								{
									"fileName": "src/core/dist/mjs/base.d.ts",
									"line": 218,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/base.d.ts#L218"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../parser/src/final-results.ts",
									"qualifiedName": "FinalResults"
								},
								"name": "FinalResults",
								"package": "tap-parser"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.results"
							}
						},
						{
							"id": 864,
							"name": "silent",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "True if this test should be buffered and only emit data if it fails"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/core/dist/mjs/base.d.ts",
									"line": 285,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/base.d.ts#L285"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.silent"
							}
						},
						{
							"id": 861,
							"name": "start",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "high resolution bigint time when this test started"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/core/dist/mjs/base.d.ts",
									"line": 273,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/base.d.ts#L273"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "bigint"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.start"
							}
						},
						{
							"id": 852,
							"name": "strict",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Treat non-TAP data as an error.\nMay be set with "
									},
									{
										"kind": "code",
										"text": "`pragma +strict`"
									},
									{
										"kind": "text",
										"text": " in the TAP stream, or unset with\n"
									},
									{
										"kind": "code",
										"text": "`pragma: -strict`"
									},
									{
										"kind": "text",
										"text": "."
									}
								]
							},
							"sources": [
								{
									"fileName": "src/core/dist/mjs/base.d.ts",
									"line": 232,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/base.d.ts#L232"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.strict"
							}
						},
						{
							"id": 735,
							"name": "subtests",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "src/core/dist/mjs/test-base.d.ts",
									"line": 148,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/test-base.d.ts#L148"
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"target": {
										"sourceFileName": "../core/src/base.ts",
										"qualifiedName": "Base"
									},
									"typeArguments": [
										{
											"type": "reference",
											"target": {
												"sourceFileName": "../core/src/base.ts",
												"qualifiedName": "TapBaseEvents"
											},
											"name": "TapBaseEvents",
											"package": "@tapjs/core"
										}
									],
									"name": "Base",
									"package": "@tapjs/core"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.subtests"
							}
						},
						{
							"id": 728,
							"name": "t",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Attached when the Test class is instantiated from a TestBase,\nas a reference to the final plugged-in Test instance.\nIf TestBase is used directly (outside the context of a plugin)\nor during plugin setup time, this will be undefined, so watch out."
									}
								]
							},
							"sources": [
								{
									"fileName": "src/core/dist/mjs/test-base.d.ts",
									"line": 143,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/test-base.d.ts#L143"
								}
							],
							"type": {
								"type": "reference",
								"target": 565,
								"typeArguments": [
									{
										"type": "reference",
										"target": 161,
										"name": "BuiltPlugins",
										"package": "@tapjs/test-built"
									},
									{
										"type": "reference",
										"target": 19,
										"name": "TestOpts",
										"package": "@tapjs/test-built"
									}
								],
								"name": "Test",
								"package": "@tapjs/test-built"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.t"
							}
						},
						{
							"id": 862,
							"name": "time",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Amount of time in milliseconds that this test took to complete."
									}
								]
							},
							"sources": [
								{
									"fileName": "src/core/dist/mjs/base.d.ts",
									"line": 277,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/base.d.ts#L277"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.time"
							}
						},
						{
							"id": 841,
							"name": "timedOut",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Set to true when the test times out, so its failure status can be\ndetermined later."
									}
								]
							},
							"sources": [
								{
									"fileName": "src/core/dist/mjs/base.d.ts",
									"line": 192,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/base.d.ts#L192"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.timedOut"
							}
						},
						{
							"id": 840,
							"name": "timer",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isOptional": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The timer that fires when the test times out"
									}
								]
							},
							"sources": [
								{
									"fileName": "src/core/dist/mjs/base.d.ts",
									"line": 187,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/base.d.ts#L187"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/@types/node/timers.d.ts",
									"qualifiedName": "__global.NodeJS.Timeout"
								},
								"name": "Timeout",
								"package": "@types/node",
								"qualifiedName": "__global.NodeJS.Timeout"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.timer"
							}
						},
						{
							"id": 897,
							"name": "writable",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "true if the stream can be written"
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
									"line": 254,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.writable"
							}
						},
						{
							"id": 1402,
							"name": "writeSnapshot",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "src/snapshot/dist/mjs/index.d.ts",
									"line": 54,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.writeSnapshot"
							}
						},
						{
							"id": 617,
							"name": "captureRejectionSymbol",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isStatic": true,
								"isExternal": true,
								"isReadonly": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Value: "
									},
									{
										"kind": "code",
										"text": "`Symbol.for('nodejs.rejection')`"
									},
									{
										"kind": "text",
										"text": "\n\nSee how to write a custom "
									},
									{
										"kind": "code",
										"text": "`rejection handler`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v13.4.0, v12.16.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 326,
									"character": 24
								}
							],
							"type": {
								"type": "query",
								"queryType": {
									"type": "reference",
									"target": 617,
									"name": "captureRejectionSymbol",
									"package": "@types/node",
									"qualifiedName": "EventEmitter.captureRejectionSymbol"
								}
							}
						},
						{
							"id": 618,
							"name": "captureRejections",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isStatic": true,
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "Value: [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type)\n\nChange the default "
									},
									{
										"kind": "code",
										"text": "`captureRejections`"
									},
									{
										"kind": "text",
										"text": " option on all new "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " objects."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v13.4.0, v12.16.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 333,
									"character": 15
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						},
						{
							"id": 619,
							"name": "defaultMaxListeners",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isStatic": true,
								"isExternal": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "By default, a maximum of "
									},
									{
										"kind": "code",
										"text": "`10`"
									},
									{
										"kind": "text",
										"text": " listeners can be registered for any single\nevent. This limit can be changed for individual "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " instances\nusing the "
									},
									{
										"kind": "code",
										"text": "`emitter.setMaxListeners(n)`"
									},
									{
										"kind": "text",
										"text": " method. To change the default\nfor _all_"
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " instances, the "
									},
									{
										"kind": "code",
										"text": "`events.defaultMaxListeners`"
									},
									{
										"kind": "text",
										"text": "property can be used. If this value is not a positive number, a "
									},
									{
										"kind": "code",
										"text": "`RangeError`"
									},
									{
										"kind": "text",
										"text": "is thrown.\n\nTake caution when setting the "
									},
									{
										"kind": "code",
										"text": "`events.defaultMaxListeners`"
									},
									{
										"kind": "text",
										"text": " because the\nchange affects _all_"
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " instances, including those created before\nthe change is made. However, calling "
									},
									{
										"kind": "code",
										"text": "`emitter.setMaxListeners(n)`"
									},
									{
										"kind": "text",
										"text": " still has\nprecedence over "
									},
									{
										"kind": "code",
										"text": "`events.defaultMaxListeners`"
									},
									{
										"kind": "text",
										"text": ".\n\nThis is not a hard limit. The "
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": " instance will allow\nmore listeners to be added but will output a trace warning to stderr indicating\nthat a \"possible EventEmitter memory leak\" has been detected. For any single"
									},
									{
										"kind": "code",
										"text": "`EventEmitter`"
									},
									{
										"kind": "text",
										"text": ", the "
									},
									{
										"kind": "code",
										"text": "`emitter.getMaxListeners()`"
									},
									{
										"kind": "text",
										"text": " and "
									},
									{
										"kind": "code",
										"text": "`emitter.setMaxListeners()`"
									},
									{
										"kind": "text",
										"text": "methods can be used to\ntemporarily avoid this warning:\n\n"
									},
									{
										"kind": "code",
										"text": "```js\nimport { EventEmitter } from 'node:events';\nconst emitter = new EventEmitter();\nemitter.setMaxListeners(emitter.getMaxListeners() + 1);\nemitter.once('event', () => {\n  // do stuff\n  emitter.setMaxListeners(Math.max(emitter.getMaxListeners() - 1, 0));\n});\n```"
									},
									{
										"kind": "text",
										"text": "\n\nThe "
									},
									{
										"kind": "code",
										"text": "`--trace-warnings`"
									},
									{
										"kind": "text",
										"text": " command-line flag can be used to display the\nstack trace for such warnings.\n\nThe emitted warning can be inspected with "
									},
									{
										"kind": "code",
										"text": "`process.on('warning')`"
									},
									{
										"kind": "text",
										"text": " and will\nhave the additional "
									},
									{
										"kind": "code",
										"text": "`emitter`"
									},
									{
										"kind": "text",
										"text": ", "
									},
									{
										"kind": "code",
										"text": "`type`"
									},
									{
										"kind": "text",
										"text": ", and "
									},
									{
										"kind": "code",
										"text": "`count`"
									},
									{
										"kind": "text",
										"text": " properties, referring to\nthe event emitter instance, the event's name and the number of attached\nlisteners, respectively.\nIts "
									},
									{
										"kind": "code",
										"text": "`name`"
									},
									{
										"kind": "text",
										"text": " property is set to "
									},
									{
										"kind": "code",
										"text": "`'MaxListenersExceededWarning'`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v0.11.2"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 370,
									"character": 15
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "number"
							}
						},
						{
							"id": 616,
							"name": "errorMonitor",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isStatic": true,
								"isExternal": true,
								"isReadonly": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This symbol shall be used to install a listener for only monitoring "
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": "events. Listeners installed using this symbol are called before the regular"
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": " listeners are called.\n\nInstalling a listener using this symbol does not change the behavior once an"
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": " event is emitted. Therefore, the process will still crash if no\nregular "
									},
									{
										"kind": "code",
										"text": "`'error'`"
									},
									{
										"kind": "text",
										"text": " listener is installed."
									}
								],
								"blockTags": [
									{
										"tag": "@since",
										"content": [
											{
												"kind": "text",
												"text": "v13.6.0, v12.17.0"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 319,
									"character": 24
								}
							],
							"type": {
								"type": "query",
								"queryType": {
									"type": "reference",
									"target": 616,
									"name": "errorMonitor",
									"package": "@types/node",
									"qualifiedName": "EventEmitter.errorMonitor"
								}
							}
						},
						{
							"id": 723,
							"name": "[toStringTag]",
							"variant": "declaration",
							"kind": 262144,
							"flags": {},
							"sources": [
								{
									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
									"line": 210,
									"character": 8,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L210"
								}
							],
							"getSignature": {
								"id": 724,
								"name": "[toStringTag]",
								"variant": "signature",
								"kind": 524288,
								"flags": {},
								"sources": [
									{
										"fileName": "src/test/test-built/dist/mjs/index.d.ts",
										"line": 210,
										"character": 4,
										"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L210"
									}
								],
								"type": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						},
						{
							"id": 916,
							"name": "aborted",
							"variant": "declaration",
							"kind": 262144,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
									"line": 312,
									"character": 8
								},
								{
									"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
									"line": 317,
									"character": 8
								}
							],
							"getSignature": {
								"id": 917,
								"name": "aborted",
								"variant": "signature",
								"kind": 524288,
								"flags": {
									"isExternal": true
								},
								"comment": {
									"summary": [
										{
											"kind": "text",
											"text": "True if the stream has been aborted."
										}
									]
								},
								"sources": [
									{
										"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
										"line": 312,
										"character": 4
									}
								],
								"type": {
									"type": "intrinsic",
									"name": "boolean"
								},
								"inheritedFrom": {
									"type": "reference",
									"target": -1,
									"name": "TTest.aborted"
								}
							},
							"setSignature": {
								"id": 918,
								"name": "aborted",
								"variant": "signature",
								"kind": 1048576,
								"flags": {
									"isExternal": true
								},
								"comment": {
									"summary": [
										{
											"kind": "text",
											"text": "No-op setter. Stream aborted status is set via the AbortSignal provided\nin the constructor options."
										}
									]
								},
								"sources": [
									{
										"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
										"line": 317,
										"character": 4
									}
								],
								"parameters": [
									{
										"id": 919,
										"name": "_",
										"variant": "param",
										"kind": 32768,
										"flags": {
											"isExternal": true
										},
										"type": {
											"type": "intrinsic",
											"name": "boolean"
										}
									}
								],
								"type": {
									"type": "intrinsic",
									"name": "void"
								},
								"inheritedFrom": {
									"type": "reference",
									"target": -1,
									"name": "TTest.aborted"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.aborted"
							}
						},
						{
							"id": 912,
							"name": "async",
							"variant": "declaration",
							"kind": 262144,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
									"line": 299,
									"character": 8
								},
								{
									"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
									"line": 307,
									"character": 8
								}
							],
							"getSignature": {
								"id": 913,
								"name": "async",
								"variant": "signature",
								"kind": 524288,
								"flags": {
									"isExternal": true
								},
								"comment": {
									"summary": [
										{
											"kind": "text",
											"text": "true if this is an async stream"
										}
									]
								},
								"sources": [
									{
										"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
										"line": 299,
										"character": 4
									}
								],
								"type": {
									"type": "intrinsic",
									"name": "boolean"
								},
								"inheritedFrom": {
									"type": "reference",
									"target": -1,
									"name": "TTest.async"
								}
							},
							"setSignature": {
								"id": 914,
								"name": "async",
								"variant": "signature",
								"kind": 1048576,
								"flags": {
									"isExternal": true
								},
								"comment": {
									"summary": [
										{
											"kind": "text",
											"text": "Set to true to make this stream async.\n\nOnce set, it cannot be unset, as this would potentially cause incorrect\nbehavior.  Ie, a sync stream can be made async, but an async stream\ncannot be safely made sync."
										}
									]
								},
								"sources": [
									{
										"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
										"line": 307,
										"character": 4
									}
								],
								"parameters": [
									{
										"id": 915,
										"name": "a",
										"variant": "param",
										"kind": 32768,
										"flags": {
											"isExternal": true
										},
										"type": {
											"type": "intrinsic",
											"name": "boolean"
										}
									}
								],
								"type": {
									"type": "intrinsic",
									"name": "void"
								},
								"inheritedFrom": {
									"type": "reference",
									"target": -1,
									"name": "TTest.async"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.async"
							}
						},
						{
							"id": 899,
							"name": "bufferLength",
							"variant": "declaration",
							"kind": 262144,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
									"line": 275,
									"character": 8
								}
							],
							"getSignature": {
								"id": 900,
								"name": "bufferLength",
								"variant": "signature",
								"kind": 524288,
								"flags": {
									"isExternal": true
								},
								"comment": {
									"summary": [
										{
											"kind": "text",
											"text": "The amount of data stored in the buffer waiting to be read.\n\nFor Buffer strings, this will be the total byte length.\nFor string encoding streams, this will be the string character length,\naccording to JavaScript's "
										},
										{
											"kind": "code",
											"text": "`string.length`"
										},
										{
											"kind": "text",
											"text": " logic.\nFor objectMode streams, this is a count of the items waiting to be\nemitted."
										}
									]
								},
								"sources": [
									{
										"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
										"line": 275,
										"character": 4
									}
								],
								"type": {
									"type": "intrinsic",
									"name": "number"
								},
								"inheritedFrom": {
									"type": "reference",
									"target": -1,
									"name": "TTest.bufferLength"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.bufferLength"
							}
						},
						{
							"id": 1407,
							"name": "cleanSnapshot",
							"variant": "declaration",
							"kind": 262144,
							"flags": {},
							"sources": [
								{
									"fileName": "src/snapshot/dist/mjs/index.d.ts",
									"line": 58,
									"character": 8
								},
								{
									"fileName": "src/snapshot/dist/mjs/index.d.ts",
									"line": 59,
									"character": 8
								}
							],
							"getSignature": {
								"id": 1408,
								"name": "cleanSnapshot",
								"variant": "signature",
								"kind": 524288,
								"flags": {},
								"sources": [
									{
										"fileName": "src/snapshot/dist/mjs/index.d.ts",
										"line": 58,
										"character": 4
									}
								],
								"type": {
									"type": "union",
									"types": [
										{
											"type": "intrinsic",
											"name": "undefined"
										},
										{
											"type": "reflection",
											"declaration": {
												"id": 1409,
												"name": "__type",
												"variant": "declaration",
												"kind": 65536,
												"flags": {},
												"sources": [
													{
														"fileName": "src/snapshot/dist/mjs/index.d.ts",
														"line": 49,
														"character": 20
													}
												],
												"signatures": [
													{
														"id": 1410,
														"name": "__type",
														"variant": "signature",
														"kind": 4096,
														"flags": {},
														"comment": {
															"summary": [
																{
																	"kind": "text",
																	"text": "Function called on the string snapshot result, can be used to\nremove changeable data, platform-specific stuff, etc."
																}
															]
														},
														"sources": [
															{
																"fileName": "src/snapshot/dist/mjs/index.d.ts",
																"line": 49,
																"character": 20
															}
														],
														"parameters": [
															{
																"id": 1411,
																"name": "snapshotData",
																"variant": "param",
																"kind": 32768,
																"flags": {},
																"type": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														],
														"type": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										}
									]
								},
								"inheritedFrom": {
									"type": "reference",
									"target": -1,
									"name": "TTest.cleanSnapshot"
								}
							},
							"setSignature": {
								"id": 1412,
								"name": "cleanSnapshot",
								"variant": "signature",
								"kind": 1048576,
								"flags": {},
								"sources": [
									{
										"fileName": "src/snapshot/dist/mjs/index.d.ts",
										"line": 59,
										"character": 4
									}
								],
								"parameters": [
									{
										"id": 1413,
										"name": "clean",
										"variant": "param",
										"kind": 32768,
										"flags": {},
										"type": {
											"type": "union",
											"types": [
												{
													"type": "intrinsic",
													"name": "undefined"
												},
												{
													"type": "reflection",
													"declaration": {
														"id": 1414,
														"name": "__type",
														"variant": "declaration",
														"kind": 65536,
														"flags": {},
														"sources": [
															{
																"fileName": "src/snapshot/dist/mjs/index.d.ts",
																"line": 49,
																"character": 20
															}
														],
														"signatures": [
															{
																"id": 1415,
																"name": "__type",
																"variant": "signature",
																"kind": 4096,
																"flags": {},
																"comment": {
																	"summary": [
																		{
																			"kind": "text",
																			"text": "Function called on the string snapshot result, can be used to\nremove changeable data, platform-specific stuff, etc."
																		}
																	]
																},
																"sources": [
																	{
																		"fileName": "src/snapshot/dist/mjs/index.d.ts",
																		"line": 49,
																		"character": 20
																	}
																],
																"parameters": [
																	{
																		"id": 1416,
																		"name": "snapshotData",
																		"variant": "param",
																		"kind": 32768,
																		"flags": {},
																		"type": {
																			"type": "intrinsic",
																			"name": "string"
																		}
																	}
																],
																"type": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														]
													}
												}
											]
										}
									}
								],
								"type": {
									"type": "intrinsic",
									"name": "void"
								},
								"inheritedFrom": {
									"type": "reference",
									"target": -1,
									"name": "TTest.cleanSnapshot"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.cleanSnapshot"
							}
						},
						{
							"id": 1403,
							"name": "compareOptions",
							"variant": "declaration",
							"kind": 262144,
							"flags": {},
							"sources": [
								{
									"fileName": "src/snapshot/dist/mjs/index.d.ts",
									"line": 56,
									"character": 8
								},
								{
									"fileName": "src/snapshot/dist/mjs/index.d.ts",
									"line": 57,
									"character": 8
								}
							],
							"getSignature": {
								"id": 1404,
								"name": "compareOptions",
								"variant": "signature",
								"kind": 524288,
								"flags": {},
								"sources": [
									{
										"fileName": "src/snapshot/dist/mjs/index.d.ts",
										"line": 56,
										"character": 4
									}
								],
								"type": {
									"type": "reference",
									"target": {
										"sourceFileName": "../tcompare/src/index.ts",
										"qualifiedName": "CompareOptions"
									},
									"name": "CompareOptions",
									"package": "tcompare"
								},
								"inheritedFrom": {
									"type": "reference",
									"target": -1,
									"name": "TTest.compareOptions"
								}
							},
							"setSignature": {
								"id": 1405,
								"name": "compareOptions",
								"variant": "signature",
								"kind": 1048576,
								"flags": {},
								"sources": [
									{
										"fileName": "src/snapshot/dist/mjs/index.d.ts",
										"line": 57,
										"character": 4
									}
								],
								"parameters": [
									{
										"id": 1406,
										"name": "cmt",
										"variant": "param",
										"kind": 32768,
										"flags": {},
										"type": {
											"type": "reference",
											"target": {
												"sourceFileName": "../tcompare/src/index.ts",
												"qualifiedName": "CompareOptions"
											},
											"name": "CompareOptions",
											"package": "tcompare"
										}
									}
								],
								"type": {
									"type": "intrinsic",
									"name": "void"
								},
								"inheritedFrom": {
									"type": "reference",
									"target": -1,
									"name": "TTest.compareOptions"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.compareOptions"
							}
						},
						{
							"id": 774,
							"name": "currentAssert",
							"variant": "declaration",
							"kind": 262144,
							"flags": {},
							"sources": [
								{
									"fileName": "src/core/dist/mjs/test-base.d.ts",
									"line": 235,
									"character": 8,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/test-base.d.ts#L235"
								},
								{
									"fileName": "src/core/dist/mjs/test-base.d.ts",
									"line": 240,
									"character": 8,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/test-base.d.ts#L240"
								}
							],
							"getSignature": {
								"id": 775,
								"name": "currentAssert",
								"variant": "signature",
								"kind": 524288,
								"flags": {},
								"comment": {
									"summary": [
										{
											"kind": "text",
											"text": "The current assertion being processed.  May only be set if\nnot already set."
										}
									]
								},
								"sources": [
									{
										"fileName": "src/core/dist/mjs/test-base.d.ts",
										"line": 235,
										"character": 4,
										"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/test-base.d.ts#L235"
									}
								],
								"type": {
									"type": "union",
									"types": [
										{
											"type": "literal",
											"value": null
										},
										{
											"type": "reference",
											"target": {
												"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
												"qualifiedName": "Function"
											},
											"name": "Function",
											"package": "typescript"
										},
										{
											"type": "reflection",
											"declaration": {
												"id": 776,
												"name": "__type",
												"variant": "declaration",
												"kind": 65536,
												"flags": {},
												"sources": [
													{
														"fileName": "src/core/dist/mjs/test-base.d.ts",
														"line": 235,
														"character": 44,
														"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/test-base.d.ts#L235"
													}
												],
												"signatures": [
													{
														"id": 777,
														"name": "__type",
														"variant": "signature",
														"kind": 4096,
														"flags": {},
														"sources": [
															{
																"fileName": "src/core/dist/mjs/test-base.d.ts",
																"line": 235,
																"character": 44,
																"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/test-base.d.ts#L235"
															}
														],
														"parameters": [
															{
																"id": 778,
																"name": "a",
																"variant": "param",
																"kind": 32768,
																"flags": {
																	"isRest": true
																},
																"type": {
																	"type": "array",
																	"elementType": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																}
															}
														],
														"type": {
															"type": "intrinsic",
															"name": "any"
														}
													}
												]
											}
										}
									]
								},
								"inheritedFrom": {
									"type": "reference",
									"target": -1,
									"name": "TTest.currentAssert"
								}
							},
							"setSignature": {
								"id": 779,
								"name": "currentAssert",
								"variant": "signature",
								"kind": 1048576,
								"flags": {},
								"comment": {
									"summary": [
										{
											"kind": "text",
											"text": "The current assertion being processed.  May only be set if\nnot already set."
										}
									]
								},
								"sources": [
									{
										"fileName": "src/core/dist/mjs/test-base.d.ts",
										"line": 240,
										"character": 4,
										"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/test-base.d.ts#L240"
									}
								],
								"parameters": [
									{
										"id": 780,
										"name": "fn",
										"variant": "param",
										"kind": 32768,
										"flags": {},
										"type": {
											"type": "union",
											"types": [
												{
													"type": "literal",
													"value": null
												},
												{
													"type": "reference",
													"target": {
														"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
														"qualifiedName": "Function"
													},
													"name": "Function",
													"package": "typescript"
												},
												{
													"type": "reflection",
													"declaration": {
														"id": 781,
														"name": "__type",
														"variant": "declaration",
														"kind": 65536,
														"flags": {},
														"sources": [
															{
																"fileName": "src/core/dist/mjs/test-base.d.ts",
																"line": 240,
																"character": 45,
																"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/test-base.d.ts#L240"
															}
														],
														"signatures": [
															{
																"id": 782,
																"name": "__type",
																"variant": "signature",
																"kind": 4096,
																"flags": {},
																"sources": [
																	{
																		"fileName": "src/core/dist/mjs/test-base.d.ts",
																		"line": 240,
																		"character": 45,
																		"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/test-base.d.ts#L240"
																	}
																],
																"parameters": [
																	{
																		"id": 783,
																		"name": "a",
																		"variant": "param",
																		"kind": 32768,
																		"flags": {
																			"isRest": true
																		},
																		"type": {
																			"type": "array",
																			"elementType": {
																				"type": "intrinsic",
																				"name": "any"
																			}
																		}
																	}
																],
																"type": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														]
													}
												}
											]
										}
									}
								],
								"type": {
									"type": "intrinsic",
									"name": "void"
								},
								"inheritedFrom": {
									"type": "reference",
									"target": -1,
									"name": "TTest.currentAssert"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.currentAssert"
							}
						},
						{
							"id": 927,
							"name": "destroyed",
							"variant": "declaration",
							"kind": 262144,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
									"line": 379,
									"character": 8
								}
							],
							"getSignature": {
								"id": 928,
								"name": "destroyed",
								"variant": "signature",
								"kind": 524288,
								"flags": {
									"isExternal": true
								},
								"comment": {
									"summary": [
										{
											"kind": "text",
											"text": "true if the stream has been forcibly destroyed"
										}
									]
								},
								"sources": [
									{
										"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
										"line": 379,
										"character": 4
									}
								],
								"type": {
									"type": "intrinsic",
									"name": "boolean"
								},
								"inheritedFrom": {
									"type": "reference",
									"target": -1,
									"name": "TTest.destroyed"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.destroyed"
							}
						},
						{
							"id": 978,
							"name": "emittedEnd",
							"variant": "declaration",
							"kind": 262144,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
									"line": 455,
									"character": 8
								}
							],
							"getSignature": {
								"id": 979,
								"name": "emittedEnd",
								"variant": "signature",
								"kind": 524288,
								"flags": {
									"isExternal": true
								},
								"comment": {
									"summary": [
										{
											"kind": "text",
											"text": "true if the 'end' event has been emitted"
										}
									]
								},
								"sources": [
									{
										"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
										"line": 455,
										"character": 4
									}
								],
								"type": {
									"type": "intrinsic",
									"name": "boolean"
								},
								"inheritedFrom": {
									"type": "reference",
									"target": -1,
									"name": "TTest.emittedEnd"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.emittedEnd"
							}
						},
						{
							"id": 901,
							"name": "encoding",
							"variant": "declaration",
							"kind": 262144,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
									"line": 279,
									"character": 8
								},
								{
									"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
									"line": 283,
									"character": 8
								}
							],
							"getSignature": {
								"id": 902,
								"name": "encoding",
								"variant": "signature",
								"kind": 524288,
								"flags": {
									"isExternal": true
								},
								"comment": {
									"summary": [
										{
											"kind": "text",
											"text": "The "
										},
										{
											"kind": "code",
											"text": "`BufferEncoding`"
										},
										{
											"kind": "text",
											"text": " currently in use, or "
										},
										{
											"kind": "code",
											"text": "`null`"
										}
									]
								},
								"sources": [
									{
										"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
										"line": 279,
										"character": 4
									}
								],
								"type": {
									"type": "union",
									"types": [
										{
											"type": "literal",
											"value": null
										},
										{
											"type": "reference",
											"target": {
												"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
												"qualifiedName": "__global.BufferEncoding"
											},
											"name": "BufferEncoding",
											"package": "@types/node",
											"qualifiedName": "__global.BufferEncoding"
										}
									]
								},
								"inheritedFrom": {
									"type": "reference",
									"target": -1,
									"name": "TTest.encoding"
								}
							},
							"setSignature": {
								"id": 903,
								"name": "encoding",
								"variant": "signature",
								"kind": 1048576,
								"flags": {
									"isExternal": true
								},
								"comment": {
									"summary": [],
									"blockTags": [
										{
											"tag": "@deprecated",
											"content": [
												{
													"kind": "text",
													"text": "- This is a read only property"
												}
											]
										}
									]
								},
								"sources": [
									{
										"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
										"line": 283,
										"character": 4
									}
								],
								"parameters": [
									{
										"id": 904,
										"name": "_enc",
										"variant": "param",
										"kind": 32768,
										"flags": {
											"isExternal": true
										},
										"type": {
											"type": "union",
											"types": [
												{
													"type": "literal",
													"value": null
												},
												{
													"type": "reference",
													"target": {
														"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
														"qualifiedName": "__global.BufferEncoding"
													},
													"name": "BufferEncoding",
													"package": "@types/node",
													"qualifiedName": "__global.BufferEncoding"
												}
											]
										}
									}
								],
								"type": {
									"type": "intrinsic",
									"name": "void"
								},
								"inheritedFrom": {
									"type": "reference",
									"target": -1,
									"name": "TTest.encoding"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.encoding"
							}
						},
						{
							"id": 929,
							"name": "flowing",
							"variant": "declaration",
							"kind": 262144,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
									"line": 384,
									"character": 8
								}
							],
							"getSignature": {
								"id": 930,
								"name": "flowing",
								"variant": "signature",
								"kind": 524288,
								"flags": {
									"isExternal": true
								},
								"comment": {
									"summary": [
										{
											"kind": "text",
											"text": "true if the stream is currently in a flowing state, meaning that\nany writes will be immediately emitted."
										}
									]
								},
								"sources": [
									{
										"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
										"line": 384,
										"character": 4
									}
								],
								"type": {
									"type": "intrinsic",
									"name": "boolean"
								},
								"inheritedFrom": {
									"type": "reference",
									"target": -1,
									"name": "TTest.flowing"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.flowing"
							}
						},
						{
							"id": 1417,
							"name": "formatSnapshot",
							"variant": "declaration",
							"kind": 262144,
							"flags": {},
							"sources": [
								{
									"fileName": "src/snapshot/dist/mjs/index.d.ts",
									"line": 60,
									"character": 8
								},
								{
									"fileName": "src/snapshot/dist/mjs/index.d.ts",
									"line": 61,
									"character": 8
								}
							],
							"getSignature": {
								"id": 1418,
								"name": "formatSnapshot",
								"variant": "signature",
								"kind": 524288,
								"flags": {},
								"sources": [
									{
										"fileName": "src/snapshot/dist/mjs/index.d.ts",
										"line": 60,
										"character": 4
									}
								],
								"type": {
									"type": "union",
									"types": [
										{
											"type": "intrinsic",
											"name": "undefined"
										},
										{
											"type": "reflection",
											"declaration": {
												"id": 1419,
												"name": "__type",
												"variant": "declaration",
												"kind": 65536,
												"flags": {},
												"sources": [
													{
														"fileName": "src/snapshot/dist/mjs/index.d.ts",
														"line": 44,
														"character": 21
													}
												],
												"signatures": [
													{
														"id": 1420,
														"name": "__type",
														"variant": "signature",
														"kind": 4096,
														"flags": {},
														"comment": {
															"summary": [
																{
																	"kind": "text",
																	"text": "Function used to serialize snapshotted objects to a string.\nIf a non-string is returned, then the default formatting will\nbe used, so this can also transform the object, if needed."
																}
															]
														},
														"sources": [
															{
																"fileName": "src/snapshot/dist/mjs/index.d.ts",
																"line": 44,
																"character": 21
															}
														],
														"parameters": [
															{
																"id": 1421,
																"name": "obj",
																"variant": "param",
																"kind": 32768,
																"flags": {},
																"type": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														],
														"type": {
															"type": "intrinsic",
															"name": "any"
														}
													}
												]
											}
										}
									]
								},
								"inheritedFrom": {
									"type": "reference",
									"target": -1,
									"name": "TTest.formatSnapshot"
								}
							},
							"setSignature": {
								"id": 1422,
								"name": "formatSnapshot",
								"variant": "signature",
								"kind": 1048576,
								"flags": {},
								"sources": [
									{
										"fileName": "src/snapshot/dist/mjs/index.d.ts",
										"line": 61,
										"character": 4
									}
								],
								"parameters": [
									{
										"id": 1423,
										"name": "format",
										"variant": "param",
										"kind": 32768,
										"flags": {},
										"type": {
											"type": "union",
											"types": [
												{
													"type": "intrinsic",
													"name": "undefined"
												},
												{
													"type": "reflection",
													"declaration": {
														"id": 1424,
														"name": "__type",
														"variant": "declaration",
														"kind": 65536,
														"flags": {},
														"sources": [
															{
																"fileName": "src/snapshot/dist/mjs/index.d.ts",
																"line": 44,
																"character": 21
															}
														],
														"signatures": [
															{
																"id": 1425,
																"name": "__type",
																"variant": "signature",
																"kind": 4096,
																"flags": {},
																"comment": {
																	"summary": [
																		{
																			"kind": "text",
																			"text": "Function used to serialize snapshotted objects to a string.\nIf a non-string is returned, then the default formatting will\nbe used, so this can also transform the object, if needed."
																		}
																	]
																},
																"sources": [
																	{
																		"fileName": "src/snapshot/dist/mjs/index.d.ts",
																		"line": 44,
																		"character": 21
																	}
																],
																"parameters": [
																	{
																		"id": 1426,
																		"name": "obj",
																		"variant": "param",
																		"kind": 32768,
																		"flags": {},
																		"type": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																],
																"type": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														]
													}
												}
											]
										}
									}
								],
								"type": {
									"type": "intrinsic",
									"name": "void"
								},
								"inheritedFrom": {
									"type": "reference",
									"target": -1,
									"name": "TTest.formatSnapshot"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.formatSnapshot"
							}
						},
						{
							"id": 792,
							"name": "fullname",
							"variant": "declaration",
							"kind": 262144,
							"flags": {},
							"sources": [
								{
									"fileName": "src/core/dist/mjs/test-base.d.ts",
									"line": 265,
									"character": 8,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/test-base.d.ts#L265"
								}
							],
							"getSignature": {
								"id": 793,
								"name": "fullname",
								"variant": "signature",
								"kind": 524288,
								"flags": {},
								"comment": {
									"summary": [
										{
											"kind": "text",
											"text": "The full name of the test, starting with the main script name,\nand including all parent names."
										}
									]
								},
								"sources": [
									{
										"fileName": "src/core/dist/mjs/test-base.d.ts",
										"line": 265,
										"character": 4,
										"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/test-base.d.ts#L265"
									}
								],
								"type": {
									"type": "intrinsic",
									"name": "string"
								},
								"inheritedFrom": {
									"type": "reference",
									"target": -1,
									"name": "TTest.fullname"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.fullname"
							}
						},
						{
							"id": 794,
							"name": "idle",
							"variant": "declaration",
							"kind": 262144,
							"flags": {},
							"sources": [
								{
									"fileName": "src/core/dist/mjs/test-base.d.ts",
									"line": 269,
									"character": 8,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/test-base.d.ts#L269"
								}
							],
							"getSignature": {
								"id": 795,
								"name": "idle",
								"variant": "signature",
								"kind": 524288,
								"flags": {},
								"comment": {
									"summary": [
										{
											"kind": "text",
											"text": "True if the test is currently in an idle state"
										}
									]
								},
								"sources": [
									{
										"fileName": "src/core/dist/mjs/test-base.d.ts",
										"line": 269,
										"character": 4,
										"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/test-base.d.ts#L269"
									}
								],
								"type": {
									"type": "intrinsic",
									"name": "boolean"
								},
								"inheritedFrom": {
									"type": "reference",
									"target": -1,
									"name": "TTest.idle"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.idle"
							}
						},
						{
							"id": 908,
							"name": "objectMode",
							"variant": "declaration",
							"kind": 262144,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
									"line": 291,
									"character": 8
								},
								{
									"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
									"line": 295,
									"character": 8
								}
							],
							"getSignature": {
								"id": 909,
								"name": "objectMode",
								"variant": "signature",
								"kind": 524288,
								"flags": {
									"isExternal": true
								},
								"comment": {
									"summary": [
										{
											"kind": "text",
											"text": "True if this is an objectMode stream"
										}
									]
								},
								"sources": [
									{
										"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
										"line": 291,
										"character": 4
									}
								],
								"type": {
									"type": "intrinsic",
									"name": "boolean"
								},
								"inheritedFrom": {
									"type": "reference",
									"target": -1,
									"name": "TTest.objectMode"
								}
							},
							"setSignature": {
								"id": 910,
								"name": "objectMode",
								"variant": "signature",
								"kind": 1048576,
								"flags": {
									"isExternal": true
								},
								"comment": {
									"summary": [],
									"blockTags": [
										{
											"tag": "@deprecated",
											"content": [
												{
													"kind": "text",
													"text": "- This is a read-only property"
												}
											]
										}
									]
								},
								"sources": [
									{
										"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
										"line": 295,
										"character": 4
									}
								],
								"parameters": [
									{
										"id": 911,
										"name": "_om",
										"variant": "param",
										"kind": 32768,
										"flags": {
											"isExternal": true
										},
										"type": {
											"type": "intrinsic",
											"name": "boolean"
										}
									}
								],
								"type": {
									"type": "intrinsic",
									"name": "void"
								},
								"inheritedFrom": {
									"type": "reference",
									"target": -1,
									"name": "TTest.objectMode"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.objectMode"
							}
						},
						{
							"id": 749,
							"name": "occupied",
							"variant": "declaration",
							"kind": 262144,
							"flags": {},
							"sources": [
								{
									"fileName": "src/core/dist/mjs/test-base.d.ts",
									"line": 171,
									"character": 8,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/test-base.d.ts#L171"
								}
							],
							"getSignature": {
								"id": 750,
								"name": "occupied",
								"variant": "signature",
								"kind": 524288,
								"flags": {},
								"comment": {
									"summary": [
										{
											"kind": "text",
											"text": "true if the test is currently waiting for something to finish"
										}
									]
								},
								"sources": [
									{
										"fileName": "src/core/dist/mjs/test-base.d.ts",
										"line": 171,
										"character": 4,
										"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/test-base.d.ts#L171"
									}
								],
								"type": {
									"type": "intrinsic",
									"name": "boolean"
								},
								"inheritedFrom": {
									"type": "reference",
									"target": -1,
									"name": "TTest.occupied"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.occupied"
							}
						},
						{
							"id": 931,
							"name": "paused",
							"variant": "declaration",
							"kind": 262144,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
									"line": 388,
									"character": 8
								}
							],
							"getSignature": {
								"id": 932,
								"name": "paused",
								"variant": "signature",
								"kind": 524288,
								"flags": {
									"isExternal": true
								},
								"comment": {
									"summary": [
										{
											"kind": "text",
											"text": "true if the stream is currently in a paused state"
										}
									]
								},
								"sources": [
									{
										"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
										"line": 388,
										"character": 4
									}
								],
								"type": {
									"type": "intrinsic",
									"name": "boolean"
								},
								"inheritedFrom": {
									"type": "reference",
									"target": -1,
									"name": "TTest.paused"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.paused"
							}
						},
						{
							"id": 646,
							"name": "plugins",
							"variant": "declaration",
							"kind": 262144,
							"flags": {},
							"sources": [
								{
									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
									"line": 239,
									"character": 8,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L239"
								}
							],
							"getSignature": {
								"id": 647,
								"name": "plugins",
								"variant": "signature",
								"kind": 524288,
								"flags": {},
								"comment": {
									"summary": [
										{
											"kind": "text",
											"text": "Return the set of plugins loaded by this Test"
										}
									]
								},
								"sources": [
									{
										"fileName": "src/test/test-built/dist/mjs/index.d.ts",
										"line": 239,
										"character": 4,
										"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L239"
									}
								],
								"type": {
									"type": "array",
									"elementType": {
										"type": "reference",
										"target": {
											"sourceFileName": "../core/src/index.ts",
											"qualifiedName": "TapPlugin"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											},
											{
												"type": "reference",
												"target": -1,
												"name": "Opts",
												"refersToTypeParameter": true
											}
										],
										"name": "TapPlugin",
										"package": "@tapjs/core"
									}
								}
							}
						},
						{
							"id": 876,
							"name": "printedOutput",
							"variant": "declaration",
							"kind": 262144,
							"flags": {},
							"sources": [
								{
									"fileName": "src/core/dist/mjs/base.d.ts",
									"line": 326,
									"character": 8,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/base.d.ts#L326"
								}
							],
							"getSignature": {
								"id": 877,
								"name": "printedOutput",
								"variant": "signature",
								"kind": 524288,
								"flags": {},
								"comment": {
									"summary": [
										{
											"kind": "text",
											"text": "True if the test has printed *some* output of any kind"
										}
									]
								},
								"sources": [
									{
										"fileName": "src/core/dist/mjs/base.d.ts",
										"line": 326,
										"character": 4,
										"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/base.d.ts#L326"
									}
								],
								"type": {
									"type": "intrinsic",
									"name": "boolean"
								},
								"inheritedFrom": {
									"type": "reference",
									"target": -1,
									"name": "TTest.printedOutput"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.printedOutput"
							}
						},
						{
							"id": 747,
							"name": "printedResult",
							"variant": "declaration",
							"kind": 262144,
							"flags": {},
							"sources": [
								{
									"fileName": "src/core/dist/mjs/test-base.d.ts",
									"line": 167,
									"character": 8,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/test-base.d.ts#L167"
								}
							],
							"getSignature": {
								"id": 748,
								"name": "printedResult",
								"variant": "signature",
								"kind": 524288,
								"flags": {},
								"comment": {
									"summary": [
										{
											"kind": "text",
											"text": "true if the test has printed at least one TestPoint"
										}
									]
								},
								"sources": [
									{
										"fileName": "src/core/dist/mjs/test-base.d.ts",
										"line": 167,
										"character": 4,
										"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/test-base.d.ts#L167"
									}
								],
								"type": {
									"type": "intrinsic",
									"name": "boolean"
								},
								"inheritedFrom": {
									"type": "reference",
									"target": -1,
									"name": "TTest.printedResult"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.printedResult"
							}
						},
						{
							"id": 1427,
							"name": "snapshotFile",
							"variant": "declaration",
							"kind": 262144,
							"flags": {},
							"sources": [
								{
									"fileName": "src/snapshot/dist/mjs/index.d.ts",
									"line": 62,
									"character": 8
								},
								{
									"fileName": "src/snapshot/dist/mjs/index.d.ts",
									"line": 63,
									"character": 8
								}
							],
							"getSignature": {
								"id": 1428,
								"name": "snapshotFile",
								"variant": "signature",
								"kind": 524288,
								"flags": {},
								"sources": [
									{
										"fileName": "src/snapshot/dist/mjs/index.d.ts",
										"line": 62,
										"character": 4
									}
								],
								"type": {
									"type": "intrinsic",
									"name": "string"
								},
								"inheritedFrom": {
									"type": "reference",
									"target": -1,
									"name": "TTest.snapshotFile"
								}
							},
							"setSignature": {
								"id": 1429,
								"name": "snapshotFile",
								"variant": "signature",
								"kind": 1048576,
								"flags": {},
								"sources": [
									{
										"fileName": "src/snapshot/dist/mjs/index.d.ts",
										"line": 63,
										"character": 4
									}
								],
								"parameters": [
									{
										"id": 1430,
										"name": "f",
										"variant": "param",
										"kind": 32768,
										"flags": {},
										"type": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								],
								"type": {
									"type": "intrinsic",
									"name": "void"
								},
								"inheritedFrom": {
									"type": "reference",
									"target": -1,
									"name": "TTest.snapshotFile"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.snapshotFile"
							}
						},
						{
							"id": 874,
							"name": "started",
							"variant": "declaration",
							"kind": 262144,
							"flags": {},
							"sources": [
								{
									"fileName": "src/core/dist/mjs/base.d.ts",
									"line": 322,
									"character": 8,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/base.d.ts#L322"
								}
							],
							"getSignature": {
								"id": 875,
								"name": "started",
								"variant": "signature",
								"kind": 524288,
								"flags": {},
								"comment": {
									"summary": [
										{
											"kind": "text",
											"text": "getter for the high resolution time when this test began"
										}
									]
								},
								"sources": [
									{
										"fileName": "src/core/dist/mjs/base.d.ts",
										"line": 322,
										"character": 4,
										"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/base.d.ts#L322"
									}
								],
								"type": {
									"type": "intrinsic",
									"name": "boolean"
								},
								"inheritedFrom": {
									"type": "reference",
									"target": -1,
									"name": "TTest.started"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.started"
							}
						},
						{
							"id": 1326,
							"name": "testdirName",
							"variant": "declaration",
							"kind": 262144,
							"flags": {},
							"sources": [
								{
									"fileName": "src/fixture/dist/mjs/index.d.ts",
									"line": 22,
									"character": 8
								},
								{
									"fileName": "src/fixture/dist/mjs/index.d.ts",
									"line": 23,
									"character": 8
								}
							],
							"getSignature": {
								"id": 1327,
								"name": "testdirName",
								"variant": "signature",
								"kind": 524288,
								"flags": {},
								"sources": [
									{
										"fileName": "src/fixture/dist/mjs/index.d.ts",
										"line": 22,
										"character": 4
									}
								],
								"type": {
									"type": "intrinsic",
									"name": "string"
								},
								"inheritedFrom": {
									"type": "reference",
									"target": -1,
									"name": "TTest.testdirName"
								}
							},
							"setSignature": {
								"id": 1328,
								"name": "testdirName",
								"variant": "signature",
								"kind": 1048576,
								"flags": {},
								"sources": [
									{
										"fileName": "src/fixture/dist/mjs/index.d.ts",
										"line": 23,
										"character": 4
									}
								],
								"parameters": [
									{
										"id": 1329,
										"name": "td",
										"variant": "param",
										"kind": 32768,
										"flags": {},
										"type": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								],
								"type": {
									"type": "intrinsic",
									"name": "void"
								},
								"inheritedFrom": {
									"type": "reference",
									"target": -1,
									"name": "TTest.testdirName"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.testdirName"
							}
						},
						{
							"id": 1471,
							"name": "workerData",
							"variant": "declaration",
							"kind": 262144,
							"flags": {},
							"sources": [
								{
									"fileName": "src/worker/dist/mjs/index.d.ts",
									"line": 7,
									"character": 8
								}
							],
							"getSignature": {
								"id": 1472,
								"name": "workerData",
								"variant": "signature",
								"kind": 524288,
								"flags": {},
								"sources": [
									{
										"fileName": "src/worker/dist/mjs/index.d.ts",
										"line": 7,
										"character": 4
									}
								],
								"type": {
									"type": "intrinsic",
									"name": "any"
								},
								"inheritedFrom": {
									"type": "reference",
									"target": -1,
									"name": "TTest.workerData"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.workerData"
							}
						},
						{
							"id": 566,
							"name": "isStream",
							"variant": "declaration",
							"kind": 262144,
							"flags": {
								"isStatic": true,
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
									"line": 536,
									"character": 15
								}
							],
							"getSignature": {
								"id": 567,
								"name": "isStream",
								"variant": "signature",
								"kind": 524288,
								"flags": {
									"isExternal": true
								},
								"comment": {
									"summary": [
										{
											"kind": "text",
											"text": "Alias for "
										},
										{
											"kind": "inline-tag",
											"tag": "@link",
											"text": "isStream",
											"target": 566,
											"tsLinkText": ""
										},
										{
											"kind": "text",
											"text": "\n\nFormer export location, maintained for backwards compatibility."
										}
									],
									"blockTags": [
										{
											"tag": "@deprecated",
											"content": []
										}
									]
								},
								"sources": [
									{
										"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
										"line": 536,
										"character": 4
									}
								],
								"type": {
									"type": "reflection",
									"declaration": {
										"id": 568,
										"name": "__type",
										"variant": "declaration",
										"kind": 65536,
										"flags": {
											"isExternal": true
										},
										"sources": [
											{
												"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
												"line": 536,
												"character": 27
											}
										],
										"signatures": [
											{
												"id": 569,
												"name": "__type",
												"variant": "signature",
												"kind": 4096,
												"flags": {
													"isExternal": true
												},
												"comment": {
													"summary": [
														{
															"kind": "text",
															"text": "Alias for "
														},
														{
															"kind": "inline-tag",
															"tag": "@link",
															"text": "isStream",
															"target": 566,
															"tsLinkText": ""
														},
														{
															"kind": "text",
															"text": "\n\nFormer export location, maintained for backwards compatibility."
														}
													],
													"blockTags": [
														{
															"tag": "@deprecated",
															"content": []
														}
													]
												},
												"sources": [
													{
														"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
														"line": 536,
														"character": 27
													}
												],
												"parameters": [
													{
														"id": 570,
														"name": "s",
														"variant": "param",
														"kind": 32768,
														"flags": {
															"isExternal": true
														},
														"type": {
															"type": "intrinsic",
															"name": "any"
														}
													}
												],
												"type": {
													"type": "predicate",
													"name": "s",
													"asserts": false,
													"targetType": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"target": {
																	"sourceFileName": "../../node_modules/@types/node/process.d.ts",
																	"qualifiedName": "__global.NodeJS.WriteStream"
																},
																"name": "WriteStream",
																"package": "@types/node",
																"qualifiedName": "__global.NodeJS.WriteStream"
															},
															{
																"type": "reference",
																"target": {
																	"sourceFileName": "../../node_modules/@types/node/process.d.ts",
																	"qualifiedName": "__global.NodeJS.ReadStream"
																},
																"name": "ReadStream",
																"package": "@types/node",
																"qualifiedName": "__global.NodeJS.ReadStream"
															},
															{
																"type": "reference",
																"target": {
																	"sourceFileName": "../../node_modules/minipass/src/index.ts",
																	"qualifiedName": "Minipass"
																},
																"typeArguments": [
																	{
																		"type": "intrinsic",
																		"name": "any"
																	},
																	{
																		"type": "intrinsic",
																		"name": "any"
																	},
																	{
																		"type": "intrinsic",
																		"name": "any"
																	}
																],
																"name": "Minipass",
																"package": "minipass"
															},
															{
																"type": "intersection",
																"types": [
																	{
																		"type": "reference",
																		"target": {
																			"sourceFileName": "../../node_modules/@types/node/process.d.ts",
																			"qualifiedName": "__global.NodeJS.ReadStream"
																		},
																		"name": "ReadStream",
																		"package": "@types/node",
																		"qualifiedName": "__global.NodeJS.ReadStream"
																	},
																	{
																		"type": "reflection",
																		"declaration": {
																			"id": 571,
																			"name": "__type",
																			"variant": "declaration",
																			"kind": 65536,
																			"flags": {
																				"isExternal": true
																			},
																			"children": [
																				{
																					"id": 572,
																					"name": "fd",
																					"variant": "declaration",
																					"kind": 1024,
																					"flags": {
																						"isExternal": true
																					},
																					"sources": [
																						{
																							"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
																							"line": 537,
																							"character": 8
																						}
																					],
																					"type": {
																						"type": "intrinsic",
																						"name": "number"
																					}
																				}
																			],
																			"groups": [
																				{
																					"title": "Properties",
																					"children": [
																						572
																					]
																				}
																			],
																			"sources": [
																				{
																					"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
																					"line": 536,
																					"character": 132
																				}
																			]
																		}
																	}
																]
															},
															{
																"type": "intersection",
																"types": [
																	{
																		"type": "reference",
																		"target": {
																			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
																			"qualifiedName": "EventEmitter"
																		},
																		"name": "EventEmitter",
																		"package": "@types/node"
																	},
																	{
																		"type": "reflection",
																		"declaration": {
																			"id": 573,
																			"name": "__type",
																			"variant": "declaration",
																			"kind": 65536,
																			"flags": {
																				"isExternal": true
																			},
																			"children": [
																				{
																					"id": 574,
																					"name": "pause",
																					"variant": "declaration",
																					"kind": 2048,
																					"flags": {
																						"isExternal": true
																					},
																					"sources": [
																						{
																							"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
																							"line": 539,
																							"character": 8
																						}
																					],
																					"signatures": [
																						{
																							"id": 575,
																							"name": "pause",
																							"variant": "signature",
																							"kind": 4096,
																							"flags": {
																								"isExternal": true
																							},
																							"sources": [
																								{
																									"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
																									"line": 539,
																									"character": 8
																								}
																							],
																							"type": {
																								"type": "intrinsic",
																								"name": "any"
																							}
																						}
																					]
																				},
																				{
																					"id": 578,
																					"name": "pipe",
																					"variant": "declaration",
																					"kind": 2048,
																					"flags": {
																						"isExternal": true
																					},
																					"sources": [
																						{
																							"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
																							"line": 541,
																							"character": 8
																						}
																					],
																					"signatures": [
																						{
																							"id": 579,
																							"name": "pipe",
																							"variant": "signature",
																							"kind": 4096,
																							"flags": {
																								"isExternal": true
																							},
																							"sources": [
																								{
																									"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
																									"line": 541,
																									"character": 8
																								}
																							],
																							"parameters": [
																								{
																									"id": 580,
																									"name": "destArgs",
																									"variant": "param",
																									"kind": 32768,
																									"flags": {
																										"isExternal": true,
																										"isRest": true
																									},
																									"type": {
																										"type": "array",
																										"elementType": {
																											"type": "intrinsic",
																											"name": "any"
																										}
																									}
																								}
																							],
																							"type": {
																								"type": "intrinsic",
																								"name": "any"
																							}
																						}
																					]
																				},
																				{
																					"id": 576,
																					"name": "resume",
																					"variant": "declaration",
																					"kind": 2048,
																					"flags": {
																						"isExternal": true
																					},
																					"sources": [
																						{
																							"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
																							"line": 540,
																							"character": 8
																						}
																					],
																					"signatures": [
																						{
																							"id": 577,
																							"name": "resume",
																							"variant": "signature",
																							"kind": 4096,
																							"flags": {
																								"isExternal": true
																							},
																							"sources": [
																								{
																									"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
																									"line": 540,
																									"character": 8
																								}
																							],
																							"type": {
																								"type": "intrinsic",
																								"name": "any"
																							}
																						}
																					]
																				}
																			],
																			"groups": [
																				{
																					"title": "Methods",
																					"children": [
																						574,
																						578,
																						576
																					]
																				}
																			],
																			"sources": [
																				{
																					"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
																					"line": 538,
																					"character": 25
																				}
																			]
																		}
																	}
																]
															},
															{
																"type": "intersection",
																"types": [
																	{
																		"type": "reference",
																		"target": {
																			"sourceFileName": "../../node_modules/@types/node/process.d.ts",
																			"qualifiedName": "__global.NodeJS.WriteStream"
																		},
																		"name": "WriteStream",
																		"package": "@types/node",
																		"qualifiedName": "__global.NodeJS.WriteStream"
																	},
																	{
																		"type": "reflection",
																		"declaration": {
																			"id": 581,
																			"name": "__type",
																			"variant": "declaration",
																			"kind": 65536,
																			"flags": {
																				"isExternal": true
																			},
																			"children": [
																				{
																					"id": 582,
																					"name": "fd",
																					"variant": "declaration",
																					"kind": 1024,
																					"flags": {
																						"isExternal": true
																					},
																					"sources": [
																						{
																							"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
																							"line": 543,
																							"character": 8
																						}
																					],
																					"type": {
																						"type": "intrinsic",
																						"name": "number"
																					}
																				}
																			],
																			"groups": [
																				{
																					"title": "Properties",
																					"children": [
																						582
																					]
																				}
																			],
																			"sources": [
																				{
																					"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
																					"line": 542,
																					"character": 31
																				}
																			]
																		}
																	}
																]
															},
															{
																"type": "intersection",
																"types": [
																	{
																		"type": "reference",
																		"target": {
																			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
																			"qualifiedName": "EventEmitter"
																		},
																		"name": "EventEmitter",
																		"package": "@types/node"
																	},
																	{
																		"type": "reflection",
																		"declaration": {
																			"id": 583,
																			"name": "__type",
																			"variant": "declaration",
																			"kind": 65536,
																			"flags": {
																				"isExternal": true
																			},
																			"children": [
																				{
																					"id": 584,
																					"name": "end",
																					"variant": "declaration",
																					"kind": 2048,
																					"flags": {
																						"isExternal": true
																					},
																					"sources": [
																						{
																							"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
																							"line": 545,
																							"character": 8
																						}
																					],
																					"signatures": [
																						{
																							"id": 585,
																							"name": "end",
																							"variant": "signature",
																							"kind": 4096,
																							"flags": {
																								"isExternal": true
																							},
																							"sources": [
																								{
																									"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
																									"line": 545,
																									"character": 8
																								}
																							],
																							"type": {
																								"type": "intrinsic",
																								"name": "any"
																							}
																						}
																					]
																				},
																				{
																					"id": 586,
																					"name": "write",
																					"variant": "declaration",
																					"kind": 2048,
																					"flags": {
																						"isExternal": true
																					},
																					"sources": [
																						{
																							"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
																							"line": 546,
																							"character": 8
																						}
																					],
																					"signatures": [
																						{
																							"id": 587,
																							"name": "write",
																							"variant": "signature",
																							"kind": 4096,
																							"flags": {
																								"isExternal": true
																							},
																							"sources": [
																								{
																									"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
																									"line": 546,
																									"character": 8
																								}
																							],
																							"parameters": [
																								{
																									"id": 588,
																									"name": "chunk",
																									"variant": "param",
																									"kind": 32768,
																									"flags": {
																										"isExternal": true
																									},
																									"type": {
																										"type": "intrinsic",
																										"name": "any"
																									}
																								},
																								{
																									"id": 589,
																									"name": "args",
																									"variant": "param",
																									"kind": 32768,
																									"flags": {
																										"isExternal": true,
																										"isRest": true
																									},
																									"type": {
																										"type": "array",
																										"elementType": {
																											"type": "intrinsic",
																											"name": "any"
																										}
																									}
																								}
																							],
																							"type": {
																								"type": "intrinsic",
																								"name": "any"
																							}
																						}
																					]
																				}
																			],
																			"groups": [
																				{
																					"title": "Methods",
																					"children": [
																						584,
																						586
																					]
																				}
																			],
																			"sources": [
																				{
																					"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
																					"line": 544,
																					"character": 25
																				}
																			]
																		}
																	}
																]
															}
														]
													}
												}
											}
										]
									}
								}
							}
						},
						{
							"id": 1010,
							"name": "[ABORT]",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
									"line": 308,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1011,
									"name": "[ABORT]",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true
									},
									"sources": [
										{
											"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
											"line": 308,
											"character": 4
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.[ABORT]"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.[ABORT]"
							}
						},
						{
							"id": 1018,
							"name": "[BUFFERPUSH]",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
									"line": 389,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1019,
									"name": "[BUFFERPUSH]",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true
									},
									"sources": [
										{
											"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
											"line": 389,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 1020,
											"name": "chunk",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.[BUFFERPUSH]"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.[BUFFERPUSH]"
							}
						},
						{
							"id": 1021,
							"name": "[BUFFERSHIFT]",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
									"line": 390,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1022,
									"name": "[BUFFERSHIFT]",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true
									},
									"sources": [
										{
											"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
											"line": 390,
											"character": 4
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.[BUFFERSHIFT]"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.[BUFFERSHIFT]"
							}
						},
						{
							"id": 1031,
							"name": "[EMITDATA]",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
									"line": 482,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1032,
									"name": "[EMITDATA]",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true
									},
									"sources": [
										{
											"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
											"line": 482,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 1033,
											"name": "data",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.[EMITDATA]"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.[EMITDATA]"
							}
						},
						{
							"id": 1036,
							"name": "[EMITEND2]",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
									"line": 484,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1037,
									"name": "[EMITEND2]",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true
									},
									"sources": [
										{
											"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
											"line": 484,
											"character": 4
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.[EMITEND2]"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.[EMITEND2]"
							}
						},
						{
							"id": 1034,
							"name": "[EMITEND]",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
									"line": 483,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1035,
									"name": "[EMITEND]",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true
									},
									"sources": [
										{
											"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
											"line": 483,
											"character": 4
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.[EMITEND]"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.[EMITEND]"
							}
						},
						{
							"id": 1026,
							"name": "[FLUSHCHUNK]",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
									"line": 392,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1027,
									"name": "[FLUSHCHUNK]",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true
									},
									"sources": [
										{
											"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
											"line": 392,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 1028,
											"name": "chunk",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.[FLUSHCHUNK]"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.[FLUSHCHUNK]"
							}
						},
						{
							"id": 1023,
							"name": "[FLUSH]",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
									"line": 391,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1024,
									"name": "[FLUSH]",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true
									},
									"sources": [
										{
											"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
											"line": 391,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 1025,
											"name": "noDrain",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.[FLUSH]"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.[FLUSH]"
							}
						},
						{
							"id": 1029,
							"name": "[MAYBE_EMIT_END]",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
									"line": 456,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1030,
									"name": "[MAYBE_EMIT_END]",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true
									},
									"sources": [
										{
											"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
											"line": 456,
											"character": 4
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.[MAYBE_EMIT_END]"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.[MAYBE_EMIT_END]"
							}
						},
						{
							"id": 1012,
							"name": "[READ]",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
									"line": 352,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1013,
									"name": "[READ]",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true
									},
									"sources": [
										{
											"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
											"line": 352,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 1014,
											"name": "n",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": null
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										},
										{
											"id": 1015,
											"name": "chunk",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.[READ]"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.[READ]"
							}
						},
						{
							"id": 1016,
							"name": "[RESUME]",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
									"line": 361,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1017,
									"name": "[RESUME]",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true
									},
									"sources": [
										{
											"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
											"line": 361,
											"character": 4
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.[RESUME]"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.[RESUME]"
							}
						},
						{
							"id": 1038,
							"name": "[asyncIterator]",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
									"line": 508,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1039,
									"name": "[asyncIterator]",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Asynchronous "
											},
											{
												"kind": "code",
												"text": "`for await of`"
											},
											{
												"kind": "text",
												"text": " iteration.\n\nThis will continue emitting all chunks until the stream terminates."
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
											"line": 508,
											"character": 4
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es2018.asyncgenerator.d.ts",
											"qualifiedName": "AsyncGenerator"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "AsyncGenerator",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.[asyncIterator]"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.[asyncIterator]"
							}
						},
						{
							"id": 1040,
							"name": "[iterator]",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
									"line": 515,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1041,
									"name": "[iterator]",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Synchronous "
											},
											{
												"kind": "code",
												"text": "`for of`"
											},
											{
												"kind": "text",
												"text": " iteration.\n\nThe iteration will terminate when the internal buffer runs out, even\nif the stream has not yet terminated."
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
											"line": 515,
											"character": 4
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es2015.generator.d.ts",
											"qualifiedName": "Generator"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Generator",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.[iterator]"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.[iterator]"
							}
						},
						{
							"id": 942,
							"name": "addListener",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
									"line": 411,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 943,
									"name": "addListener",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Alias for "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "Minipass#on"
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
											"line": 411,
											"character": 4
										}
									],
									"typeParameter": [
										{
											"id": 944,
											"name": "Event",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"target": {
														"sourceFileName": "../core/src/test-base.ts",
														"qualifiedName": "TestBaseEvents"
													},
													"name": "TestBaseEvents",
													"package": "@tapjs/core"
												}
											}
										}
									],
									"parameters": [
										{
											"id": 945,
											"name": "ev",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"target": -1,
												"name": "Event",
												"refersToTypeParameter": true
											}
										},
										{
											"id": 946,
											"name": "handler",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 947,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
															"line": 411,
															"character": 64
														}
													],
													"signatures": [
														{
															"id": 948,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
																	"line": 411,
																	"character": 64
																}
															],
															"parameters": [
																{
																	"id": 949,
																	"name": "args",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {
																		"isExternal": true,
																		"isRest": true
																	},
																	"type": {
																		"type": "indexedAccess",
																		"indexType": {
																			"type": "reference",
																			"target": -1,
																			"name": "Event",
																			"refersToTypeParameter": true
																		},
																		"objectType": {
																			"type": "reference",
																			"target": {
																				"sourceFileName": "../core/src/test-base.ts",
																				"qualifiedName": "TestBaseEvents"
																			},
																			"name": "TestBaseEvents",
																			"package": "@tapjs/core"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"target": 565,
										"typeArguments": [
											{
												"type": "reference",
												"target": -1,
												"name": "Ext",
												"refersToTypeParameter": true
											},
											{
												"type": "reference",
												"target": -1,
												"name": "Opts",
												"refersToTypeParameter": true
											}
										],
										"name": "Test",
										"package": "@tapjs/test-built"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.addListener"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.addListener"
							}
						},
						{
							"id": 1086,
							"name": "after",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/after/dist/mjs/index.d.ts",
									"line": 22,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/after/dist/mjs/index.d.ts#L22"
								}
							],
							"signatures": [
								{
									"id": 1087,
									"name": "after",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Runs the supplied function after the test is completely finished, and\nbefore the next test starts."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/after/dist/mjs/index.d.ts",
											"line": 22,
											"character": 4,
											"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/after/dist/mjs/index.d.ts#L22"
										}
									],
									"parameters": [
										{
											"id": 1088,
											"name": "fn",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1089,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"sources": [
														{
															"fileName": "src/after/dist/mjs/index.d.ts",
															"line": 22,
															"character": 14,
															"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/after/dist/mjs/index.d.ts#L22"
														}
													],
													"signatures": [
														{
															"id": 1090,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {},
															"sources": [
																{
																	"fileName": "src/after/dist/mjs/index.d.ts",
																	"line": 22,
																	"character": 14,
																	"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/after/dist/mjs/index.d.ts#L22"
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.after"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.after"
							}
						},
						{
							"id": 1092,
							"name": "afterEach",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/after-each/dist/mjs/index.d.ts",
									"line": 23,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1093,
									"name": "afterEach",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Run the supplied function after every *child* test, and any of those\nchild tests' children, and so on.\n\nThe test that has just completed is passed in as an argument to the\nfunction. Note that at this point, the test is fully ended, so attempting\nto call assertion methods on it will raise an error."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/after-each/dist/mjs/index.d.ts",
											"line": 23,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 1094,
											"name": "fn",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1095,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"sources": [
														{
															"fileName": "src/after-each/dist/mjs/index.d.ts",
															"line": 23,
															"character": 18
														}
													],
													"signatures": [
														{
															"id": 1096,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {},
															"sources": [
																{
																	"fileName": "src/after-each/dist/mjs/index.d.ts",
																	"line": 23,
																	"character": 18
																}
															],
															"parameters": [
																{
																	"id": 1097,
																	"name": "t",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"target": 565,
																		"typeArguments": [
																			{
																				"type": "reference",
																				"target": 161,
																				"name": "BuiltPlugins",
																				"package": "@tapjs/test-built"
																			},
																			{
																				"type": "reference",
																				"target": 19,
																				"name": "TestOpts",
																				"package": "@tapjs/test-built"
																			}
																		],
																		"name": "Test",
																		"package": "@tapjs/test-built"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.afterEach"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.afterEach"
							}
						},
						{
							"id": 633,
							"name": "applyPlugin",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
									"line": 230,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L230"
								}
							],
							"signatures": [
								{
									"id": 634,
									"name": "applyPlugin",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Add a plugin at run-time.\n\nCreates a subclass of "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "Test",
												"target": 565,
												"tsLinkText": ""
											},
											{
												"kind": "text",
												"text": " which has the specified\nplugin, and which applies the plugin to all child tests it creates.\n\nTypically, it's best to load plugins using configuration, set via the\n"
											},
											{
												"kind": "code",
												"text": "`tap plugin <add|rm>`"
											},
											{
												"kind": "text",
												"text": " command.\n\nHowever, in some cases, for example while developing plugins or if a\ncertain plugin is only needed in a small number of tests, it can be\nuseful to apply it after the fact.\n\nThis is best used sparingly, as it may result in poor typescript\ncompilation performance, which can manifest in slower test start-up times\nand lag loading autocomplete in editors. If you find yourself calling\napplyPlugin often, consider whether it'd be better to just add the plugin\nto the entire test suite, so that it can be built up front."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/test/test-built/dist/mjs/index.d.ts",
											"line": 230,
											"character": 4,
											"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L230"
										}
									],
									"typeParameter": [
										{
											"id": 635,
											"name": "B",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "Object"
												},
												"name": "Object",
												"package": "typescript"
											}
										},
										{
											"id": 636,
											"name": "O",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "unknown"
											},
											"default": {
												"type": "intrinsic",
												"name": "unknown"
											}
										}
									],
									"parameters": [
										{
											"id": 637,
											"name": "plugin",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../core/src/index.ts",
													"qualifiedName": "TapPlugin"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": -1,
														"name": "B",
														"refersToTypeParameter": true
													},
													{
														"type": "reference",
														"target": -1,
														"name": "O",
														"refersToTypeParameter": true
													}
												],
												"name": "TapPlugin",
												"package": "@tapjs/core"
											}
										}
									],
									"type": {
										"type": "intersection",
										"types": [
											{
												"type": "reference",
												"target": 565,
												"typeArguments": [
													{
														"type": "intersection",
														"types": [
															{
																"type": "reference",
																"target": -1,
																"name": "Ext",
																"refersToTypeParameter": true
															},
															{
																"type": "reference",
																"target": -1,
																"name": "B",
																"refersToTypeParameter": true
															}
														]
													},
													{
														"type": "intersection",
														"types": [
															{
																"type": "reference",
																"target": -1,
																"name": "Opts",
																"refersToTypeParameter": true
															},
															{
																"type": "reference",
																"target": -1,
																"name": "O",
																"refersToTypeParameter": true
															}
														]
													}
												],
												"name": "Test",
												"package": "@tapjs/test-built"
											},
											{
												"type": "reference",
												"target": -1,
												"name": "Ext",
												"refersToTypeParameter": true
											},
											{
												"type": "reference",
												"target": -1,
												"name": "B",
												"refersToTypeParameter": true
											}
										]
									}
								}
							]
						},
						{
							"id": 751,
							"name": "bailout",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/core/dist/mjs/test-base.d.ts",
									"line": 179,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/test-base.d.ts#L179"
								}
							],
							"signatures": [
								{
									"id": 752,
									"name": "bailout",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "immediately exit this and all parent tests with a TAP\nBail out! message."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/core/dist/mjs/test-base.d.ts",
											"line": 179,
											"character": 4,
											"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/test-base.d.ts#L179"
										}
									],
									"parameters": [
										{
											"id": 753,
											"name": "message",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.bailout"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.bailout"
							}
						},
						{
							"id": 1279,
							"name": "before",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/before/dist/mjs/index.d.ts",
									"line": 21,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1280,
									"name": "before",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Just run the supplied function right away, but do not run any\nchild tests until it has completed.\n\nThis is handy when some setup may require asynchronous actions, and\ntests should wait until after it completes."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/before/dist/mjs/index.d.ts",
											"line": 21,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 1281,
											"name": "fn",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1282,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"sources": [
														{
															"fileName": "src/before/dist/mjs/index.d.ts",
															"line": 21,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 1283,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {},
															"sources": [
																{
																	"fileName": "src/before/dist/mjs/index.d.ts",
																	"line": 21,
																	"character": 15
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.before"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.before"
							}
						},
						{
							"id": 1285,
							"name": "beforeEach",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/before-each/dist/mjs/index.d.ts",
									"line": 24,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1286,
									"name": "beforeEach",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Run the supplied function before any child tests, and all of their\nchildren, and so on.\n\nThe test about to run is an argument to the function. While its test\nmethod has not yet run, it is safe to call test methods on it, but note\nthat this may potentially be confusing if for example you call "
											},
											{
												"kind": "code",
												"text": "`t.plan()`"
											},
											{
												"kind": "text",
												"text": "\nand this conflicts with the "
											},
											{
												"kind": "code",
												"text": "`t.plan()`"
											},
											{
												"kind": "text",
												"text": " called in the test method."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/before-each/dist/mjs/index.d.ts",
											"line": 24,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 1287,
											"name": "fn",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1288,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"sources": [
														{
															"fileName": "src/before-each/dist/mjs/index.d.ts",
															"line": 24,
															"character": 19
														}
													],
													"signatures": [
														{
															"id": 1289,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {},
															"sources": [
																{
																	"fileName": "src/before-each/dist/mjs/index.d.ts",
																	"line": 24,
																	"character": 19
																}
															],
															"parameters": [
																{
																	"id": 1290,
																	"name": "t",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"target": 565,
																		"typeArguments": [
																			{
																				"type": "reference",
																				"target": 161,
																				"name": "BuiltPlugins",
																				"package": "@tapjs/test-built"
																			},
																			{
																				"type": "reference",
																				"target": 19,
																				"name": "TestOpts",
																				"package": "@tapjs/test-built"
																			}
																		],
																		"name": "Test",
																		"package": "@tapjs/test-built"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.beforeEach"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.beforeEach"
							}
						},
						{
							"id": 1338,
							"name": "capture",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/intercept/dist/mjs/index.d.ts",
									"line": 195,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1339,
									"name": "capture",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Intercept calls to a method to track the arguments, call site,\nand return/throw status, and replace the implementation.\n\nBy default, the method is set to a no-op. To retain the method behavior,\npass the current value of the method as the third argument.  For example:\n\n"
											},
											{
												"kind": "code",
												"text": "```\nconst results = t.capture(obj, 'foo', obj.foo)\n```"
											},
											{
												"kind": "text",
												"text": "\n\nAutomatically restores at "
											},
											{
												"kind": "code",
												"text": "`t.teardown()`"
											},
											{
												"kind": "text",
												"text": " if the "
											},
											{
												"kind": "code",
												"text": "`@tapjs/after`"
											},
											{
												"kind": "text",
												"text": "\nplugin is not disabled.  Otherwise, it is important to call the\n"
											},
											{
												"kind": "code",
												"text": "`restore()`"
											},
											{
												"kind": "text",
												"text": " method on the returned function when you are done capturing."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/intercept/dist/mjs/index.d.ts",
											"line": 195,
											"character": 4
										}
									],
									"typeParameter": [
										{
											"id": 1340,
											"name": "T",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1341,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {}
												}
											}
										},
										{
											"id": 1342,
											"name": "M",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										}
									],
									"parameters": [
										{
											"id": 1343,
											"name": "obj",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": -1,
												"name": "T",
												"refersToTypeParameter": true
											}
										},
										{
											"id": 1344,
											"name": "method",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": -1,
												"name": "M",
												"refersToTypeParameter": true
											}
										},
										{
											"id": 1345,
											"name": "impl",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1346,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"sources": [
														{
															"fileName": "src/intercept/dist/mjs/index.d.ts",
															"line": 195,
															"character": 74
														}
													],
													"signatures": [
														{
															"id": 1347,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {},
															"sources": [
																{
																	"fileName": "src/intercept/dist/mjs/index.d.ts",
																	"line": 195,
																	"character": 74
																}
															],
															"parameters": [
																{
																	"id": 1348,
																	"name": "a",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../intercept/src/index.ts",
											"qualifiedName": "CaptureResultsMethod"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": -1,
												"name": "T",
												"refersToTypeParameter": true
											},
											{
												"type": "reference",
												"target": -1,
												"name": "M",
												"refersToTypeParameter": true
											},
											{
												"type": "indexedAccess",
												"indexType": {
													"type": "reference",
													"target": -1,
													"name": "M",
													"refersToTypeParameter": true
												},
												"objectType": {
													"type": "reference",
													"target": -1,
													"name": "T",
													"refersToTypeParameter": true
												}
											}
										],
										"name": "CaptureResultsMethod",
										"package": "@tapjs/intercept"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.capture"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.capture"
							}
						},
						{
							"id": 1349,
							"name": "captureFn",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/intercept/dist/mjs/index.d.ts",
									"line": 204,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1350,
									"name": "captureFn",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Just wrap the function and return it.  Does not have any\nlogic to restore, since it's not actually modifying anything.\nThe results hang off the function as the 'calls' property.\n\nThe added "
											},
											{
												"kind": "code",
												"text": "`fn.args()`"
											},
											{
												"kind": "text",
												"text": " method will return an array of the arguments\npassed to each call since the last time it was inspected."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/intercept/dist/mjs/index.d.ts",
											"line": 204,
											"character": 4
										}
									],
									"typeParameter": [
										{
											"id": 1351,
											"name": "F",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1352,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"sources": [
														{
															"fileName": "src/intercept/dist/mjs/index.d.ts",
															"line": 204,
															"character": 24
														}
													],
													"signatures": [
														{
															"id": 1353,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {},
															"sources": [
																{
																	"fileName": "src/intercept/dist/mjs/index.d.ts",
																	"line": 204,
																	"character": 24
																}
															],
															"parameters": [
																{
																	"id": 1354,
																	"name": "this",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																},
																{
																	"id": 1355,
																	"name": "a",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													]
												}
											}
										}
									],
									"parameters": [
										{
											"id": 1356,
											"name": "original",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": -1,
												"name": "F",
												"refersToTypeParameter": true
											}
										}
									],
									"type": {
										"type": "intersection",
										"types": [
											{
												"type": "reflection",
												"declaration": {
													"id": 1357,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"sources": [
														{
															"fileName": "src/intercept/dist/mjs/index.d.ts",
															"line": 204,
															"character": 72
														}
													],
													"signatures": [
														{
															"id": 1358,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {},
															"sources": [
																{
																	"fileName": "src/intercept/dist/mjs/index.d.ts",
																	"line": 204,
																	"character": 72
																}
															],
															"parameters": [
																{
																	"id": 1359,
																	"name": "a",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													]
												}
											},
											{
												"type": "reflection",
												"declaration": {
													"id": 1360,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"children": [
														{
															"id": 1362,
															"name": "args",
															"variant": "declaration",
															"kind": 1024,
															"flags": {},
															"sources": [
																{
																	"fileName": "src/intercept/dist/mjs/index.d.ts",
																	"line": 206,
																	"character": 8
																}
															],
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 1363,
																	"name": "__type",
																	"variant": "declaration",
																	"kind": 65536,
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "src/intercept/dist/mjs/index.d.ts",
																			"line": 206,
																			"character": 14
																		}
																	],
																	"signatures": [
																		{
																			"id": 1364,
																			"name": "__type",
																			"variant": "signature",
																			"kind": 4096,
																			"flags": {},
																			"sources": [
																				{
																					"fileName": "src/intercept/dist/mjs/index.d.ts",
																					"line": 206,
																					"character": 14
																				}
																			],
																			"type": {
																				"type": "array",
																				"elementType": {
																					"type": "reference",
																					"target": {
																						"sourceFileName": "../intercept/src/index.ts",
																						"qualifiedName": "TupleUnion"
																					},
																					"typeArguments": [
																						{
																							"type": "reference",
																							"target": {
																								"sourceFileName": "../intercept/src/index.ts",
																								"qualifiedName": "FilterUnknown"
																							},
																							"typeArguments": [
																								{
																									"type": "reference",
																									"target": {
																										"sourceFileName": "../intercept/src/index.ts",
																										"qualifiedName": "OverloadParamsTuple"
																									},
																									"typeArguments": [
																										{
																											"type": "reference",
																											"target": -1,
																											"name": "F",
																											"refersToTypeParameter": true
																										}
																									],
																									"name": "OverloadParamsTuple",
																									"package": "@tapjs/intercept"
																								}
																							],
																							"name": "FilterUnknown",
																							"package": "@tapjs/intercept"
																						}
																					],
																					"name": "TupleUnion",
																					"package": "@tapjs/intercept"
																				}
																			}
																		}
																	]
																}
															}
														},
														{
															"id": 1361,
															"name": "calls",
															"variant": "declaration",
															"kind": 1024,
															"flags": {},
															"sources": [
																{
																	"fileName": "src/intercept/dist/mjs/index.d.ts",
																	"line": 205,
																	"character": 8
																}
															],
															"type": {
																"type": "array",
																"elementType": {
																	"type": "reference",
																	"target": {
																		"sourceFileName": "../intercept/src/index.ts",
																		"qualifiedName": "CaptureResult"
																	},
																	"typeArguments": [
																		{
																			"type": "reference",
																			"target": -1,
																			"name": "F",
																			"refersToTypeParameter": true
																		}
																	],
																	"name": "CaptureResult",
																	"package": "@tapjs/intercept"
																}
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"children": [
																1362,
																1361
															]
														}
													],
													"sources": [
														{
															"fileName": "src/intercept/dist/mjs/index.d.ts",
															"line": 204,
															"character": 96
														}
													]
												}
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.captureFn"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.captureFn"
							}
						},
						{
							"id": 980,
							"name": "collect",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
									"line": 489,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 981,
									"name": "collect",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Return a Promise that resolves to an array of all emitted data once\nthe stream ends."
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
											"line": 489,
											"character": 4
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "intersection",
												"types": [
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													},
													{
														"type": "reflection",
														"declaration": {
															"id": 982,
															"name": "__type",
															"variant": "declaration",
															"kind": 65536,
															"flags": {
																"isExternal": true
															},
															"children": [
																{
																	"id": 983,
																	"name": "dataLength",
																	"variant": "declaration",
																	"kind": 1024,
																	"flags": {
																		"isExternal": true
																	},
																	"sources": [
																		{
																			"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
																			"line": 490,
																			"character": 8
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "number"
																	}
																}
															],
															"groups": [
																{
																	"title": "Properties",
																	"children": [
																		983
																	]
																}
															],
															"sources": [
																{
																	"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
																	"line": 489,
																	"character": 33
																}
															]
														}
													}
												]
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.collect"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.collect"
							}
						},
						{
							"id": 754,
							"name": "comment",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/core/dist/mjs/test-base.d.ts",
									"line": 192,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/test-base.d.ts#L192"
								}
							],
							"signatures": [
								{
									"id": 755,
									"name": "comment",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "output a TAP comment, formatted like console.log()\n\nIf the test is currently awaiting a child test, it will be deferred\nuntil after the child test completes.\n\nIf the test is already completed, the comment will be emitted\non the parent, or if no parent is available, it will be printed\nto standard output."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/core/dist/mjs/test-base.d.ts",
											"line": 192,
											"character": 4,
											"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/test-base.d.ts#L192"
										}
									],
									"parameters": [
										{
											"id": 756,
											"name": "args",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.comment"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.comment"
							}
						},
						{
							"id": 984,
							"name": "concat",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
									"line": 498,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 985,
									"name": "concat",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Return a Promise that resolves to the concatenation of all emitted data\nonce the stream ends.\n\nNot allowed on objectMode streams."
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
											"line": 498,
											"character": 4
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.concat"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.concat"
							}
						},
						{
							"id": 1366,
							"name": "createMock",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/mock/dist/mjs/index.d.ts",
									"line": 43,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1367,
									"name": "createMock",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Convenience method to create a mock from an existing object by\noverriding some (possibly deeply nested) methods or properties.\n\nExample:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport * as fs from 'node:fs'\nconst mockedThing = t.mockRequire('./module.js', t.createMock(\n  { fs },\n  { fs: { statSync: myMockedStatSync }}\n)\n```"
											},
											{
												"kind": "text",
												"text": "\n\nThis can also appear anywhere in the object hierarchy, which may\nbe more convenient in some cases:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport * as blah from '@long-name/blah-api'\nconst mockedThing = t.mockRequire('./module.js', {\n  fs: t.createMock(fs, { statSync: myMockedStatSync }),\n  child_process: t.createMock(child_process, { spawn: mockSpawn }),\n  '@long-name/blah-api': t.createMock(blah, {\n    some: {\n      nested: {\n        prop: true\n      }\n    }\n  })\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo *remove* a property, set it as undefined in the override."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/mock/dist/mjs/index.d.ts",
											"line": 43,
											"character": 4
										}
									],
									"typeParameter": [
										{
											"id": 1368,
											"name": "B",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "any"
														}
													},
													{
														"type": "reflection",
														"declaration": {
															"id": 1369,
															"name": "__type",
															"variant": "declaration",
															"kind": 65536,
															"flags": {},
															"sources": [
																{
																	"fileName": "src/mock/dist/mjs/index.d.ts",
																	"line": 43,
																	"character": 25
																}
															],
															"indexSignature": {
																"id": 1370,
																"name": "__index",
																"variant": "signature",
																"kind": 8192,
																"flags": {},
																"sources": [
																	{
																		"fileName": "src/mock/dist/mjs/index.d.ts",
																		"line": 44,
																		"character": 8
																	}
																],
																"parameters": [
																	{
																		"id": 1371,
																		"name": "k",
																		"variant": "param",
																		"kind": 32768,
																		"flags": {},
																		"type": {
																			"type": "reference",
																			"target": {
																				"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
																				"qualifiedName": "PropertyKey"
																			},
																			"name": "PropertyKey",
																			"package": "typescript"
																		}
																	}
																],
																"type": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													}
												]
											}
										},
										{
											"id": 1372,
											"name": "O",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "any"
														}
													},
													{
														"type": "reflection",
														"declaration": {
															"id": 1373,
															"name": "__type",
															"variant": "declaration",
															"kind": 65536,
															"flags": {},
															"sources": [
																{
																	"fileName": "src/mock/dist/mjs/index.d.ts",
																	"line": 45,
																	"character": 30
																}
															],
															"indexSignature": {
																"id": 1374,
																"name": "__index",
																"variant": "signature",
																"kind": 8192,
																"flags": {},
																"sources": [
																	{
																		"fileName": "src/mock/dist/mjs/index.d.ts",
																		"line": 46,
																		"character": 8
																	}
																],
																"parameters": [
																	{
																		"id": 1375,
																		"name": "k",
																		"variant": "param",
																		"kind": 32768,
																		"flags": {},
																		"type": {
																			"type": "intrinsic",
																			"name": "string"
																		}
																	}
																],
																"type": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													}
												]
											}
										}
									],
									"parameters": [
										{
											"id": 1376,
											"name": "bases",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": -1,
												"name": "B",
												"refersToTypeParameter": true
											}
										},
										{
											"id": 1377,
											"name": "overrides",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": -1,
												"name": "O",
												"refersToTypeParameter": true
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../mock/src/index.ts",
											"qualifiedName": "MockedObject"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": -1,
												"name": "B",
												"refersToTypeParameter": true
											},
											{
												"type": "reference",
												"target": -1,
												"name": "O",
												"refersToTypeParameter": true
											}
										],
										"name": "MockedObject",
										"package": "@tapjs/mock"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.createMock"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.createMock"
							}
						},
						{
							"id": 988,
							"name": "destroy",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
									"line": 528,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 989,
									"name": "destroy",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Destroy a stream, preventing it from being used for any further purpose.\n\nIf the stream has a "
											},
											{
												"kind": "code",
												"text": "`close()`"
											},
											{
												"kind": "text",
												"text": " method, then it will be called on\ndestruction.\n\nAfter destruction, any attempt to write data, read data, or emit most\nevents will be ignored.\n\nIf an error argument is provided, then it will be emitted in an\n'error' event."
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
											"line": 528,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 990,
											"name": "er",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "unknown"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": 565,
										"typeArguments": [
											{
												"type": "reference",
												"target": -1,
												"name": "Ext",
												"refersToTypeParameter": true
											},
											{
												"type": "reference",
												"target": -1,
												"name": "Opts",
												"refersToTypeParameter": true
											}
										],
										"name": "Test",
										"package": "@tapjs/test-built"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.destroy"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.destroy"
							}
						},
						{
							"id": 1245,
							"name": "doesNotThrow",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/asserts/dist/mjs/index.d.ts",
									"line": 181,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1246,
									"name": "doesNotThrow",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Returns the error object if it throws and that does not fail the test\n(by virtue of being marked skip or todo). Otherwise returns the\npassing status, like other assertions."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/asserts/dist/mjs/index.d.ts",
											"line": 181,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 1247,
											"name": "fn",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"target": {
															"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
															"qualifiedName": "Function"
														},
														"name": "Function",
														"package": "typescript"
													},
													{
														"type": "reflection",
														"declaration": {
															"id": 1248,
															"name": "__type",
															"variant": "declaration",
															"kind": 65536,
															"flags": {},
															"sources": [
																{
																	"fileName": "src/asserts/dist/mjs/index.d.ts",
																	"line": 181,
																	"character": 33
																}
															],
															"signatures": [
																{
																	"id": 1249,
																	"name": "__type",
																	"variant": "signature",
																	"kind": 4096,
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "src/asserts/dist/mjs/index.d.ts",
																			"line": 181,
																			"character": 33
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																}
															]
														}
													}
												]
											}
										},
										{
											"id": 1250,
											"name": "__namedParameters",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../core/src/index.ts",
													"qualifiedName": "MessageExtra"
												},
												"name": "MessageExtra",
												"package": "@tapjs/core"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "boolean"
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "Error"
												},
												"name": "Error",
												"package": "typescript"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.doesNotThrow"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.doesNotThrow"
							}
						},
						{
							"id": 890,
							"name": "emit",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/core/dist/mjs/base.d.ts",
									"line": 376,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/base.d.ts#L376"
								}
							],
							"signatures": [
								{
									"id": 891,
									"name": "emit",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "EventEmitter emit method, but closes the "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "Base#hook"
											},
											{
												"kind": "text",
												"text": " and\n"
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "Base#hookDomain"
											},
											{
												"kind": "text",
												"text": " when emitting "
											},
											{
												"kind": "code",
												"text": "`'end'`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/core/dist/mjs/base.d.ts",
											"line": 376,
											"character": 4,
											"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/base.d.ts#L376"
										}
									],
									"typeParameter": [
										{
											"id": 892,
											"name": "Event",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"target": {
														"sourceFileName": "../core/src/test-base.ts",
														"qualifiedName": "TestBaseEvents"
													},
													"name": "TestBaseEvents",
													"package": "@tapjs/core"
												}
											}
										}
									],
									"parameters": [
										{
											"id": 893,
											"name": "ev",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": -1,
												"name": "Event",
												"refersToTypeParameter": true
											}
										},
										{
											"id": 894,
											"name": "data",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "indexedAccess",
												"indexType": {
													"type": "reference",
													"target": -1,
													"name": "Event",
													"refersToTypeParameter": true
												},
												"objectType": {
													"type": "reference",
													"target": {
														"sourceFileName": "../core/src/test-base.ts",
														"qualifiedName": "TestBaseEvents"
													},
													"name": "TestBaseEvents",
													"package": "@tapjs/core"
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.emit"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.emit"
							}
						},
						{
							"id": 1273,
							"name": "emits",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/asserts/dist/mjs/index.d.ts",
									"line": 210,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1274,
									"name": "emits",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Asserts that the emitter emits the specified event before the test\nends. Returns a promise that resolves when the event is emitted.\nNote that waiting on the returned promise within a test can deadlock\nthe test, if the event never emits, but the returned promise can be\na handy way to pause a test until an event happens, if you are\nreasonably confident that it will fire."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/asserts/dist/mjs/index.d.ts",
											"line": 210,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 1275,
											"name": "emitter",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"target": {
															"sourceFileName": "../../node_modules/@types/node/events.d.ts",
															"qualifiedName": "EventEmitter"
														},
														"name": "EventEmitter",
														"package": "@types/node"
													},
													{
														"type": "reference",
														"target": {
															"sourceFileName": "../../node_modules/typescript/lib/lib.dom.d.ts",
															"qualifiedName": "EventTarget"
														},
														"name": "EventTarget",
														"package": "typescript"
													}
												]
											}
										},
										{
											"id": 1276,
											"name": "event",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1277,
											"name": "__namedParameters",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../core/src/index.ts",
													"qualifiedName": "MessageExtra"
												},
												"name": "MessageExtra",
												"package": "@tapjs/core"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.emits"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.emits"
							}
						},
						{
							"id": 626,
							"name": "end",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
									"line": 190,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L190"
								}
							],
							"signatures": [
								{
									"id": 627,
									"name": "end",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"sources": [
										{
											"fileName": "src/test/test-built/dist/mjs/index.d.ts",
											"line": 190,
											"character": 4,
											"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L190"
										}
									],
									"type": {
										"type": "reference",
										"target": 565,
										"typeArguments": [
											{
												"type": "reference",
												"target": -1,
												"name": "Ext",
												"refersToTypeParameter": true
											},
											{
												"type": "reference",
												"target": -1,
												"name": "Opts",
												"refersToTypeParameter": true
											}
										],
										"name": "Test",
										"package": "@tapjs/test-built"
									},
									"overwrites": {
										"type": "reference",
										"target": -1,
										"name": "TTest.end"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"target": -1,
								"name": "TTest.end"
							}
						},
						{
							"id": 828,
							"name": "endAll",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/core/dist/mjs/test-base.d.ts",
									"line": 316,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/test-base.d.ts#L316"
								}
							],
							"signatures": [
								{
									"id": 829,
									"name": "endAll",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Called when a test times out or bails out, or the process ends,\nmarking all currently active or queued subtests as incomplete.\n\nNo need to ever call this directly, exposed so that it can be extended\nby "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "Spawn",
												"target": {
													"sourceFileName": "../core/src/spawn.ts",
													"qualifiedName": "Spawn"
												},
												"tsLinkText": ""
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "Worker",
												"target": {
													"sourceFileName": "../core/src/worker.ts",
													"qualifiedName": "Worker"
												},
												"tsLinkText": ""
											},
											{
												"kind": "text",
												"text": ", which have special behaviors\nthat are required when a process hangs indefinitely."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/core/dist/mjs/test-base.d.ts",
											"line": 316,
											"character": 4,
											"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/test-base.d.ts#L316"
										}
									],
									"parameters": [
										{
											"id": 830,
											"name": "sub",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.endAll"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.endAll"
							}
						},
						{
							"id": 1107,
							"name": "equal",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/asserts/dist/mjs/index.d.ts",
									"line": 44,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1108,
									"name": "equal",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Verify that the values are equal"
											}
										]
									},
									"sources": [
										{
											"fileName": "src/asserts/dist/mjs/index.d.ts",
											"line": 44,
											"character": 4
										}
									],
									"typeParameter": [
										{
											"id": 1109,
											"name": "T",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "unknown"
											}
										}
									],
									"parameters": [
										{
											"id": 1110,
											"name": "found",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 1111,
											"name": "wanted",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": -1,
												"name": "T",
												"refersToTypeParameter": true
											}
										},
										{
											"id": 1112,
											"name": "__namedParameters",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../core/src/index.ts",
													"qualifiedName": "MessageExtra"
												},
												"name": "MessageExtra",
												"package": "@tapjs/core"
											}
										}
									],
									"type": {
										"type": "predicate",
										"name": "found",
										"asserts": false,
										"targetType": {
											"type": "reference",
											"target": -1,
											"name": "T",
											"refersToTypeParameter": true
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.equal"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.equal"
							}
						},
						{
							"id": 1078,
							"name": "eventNames",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 715,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 1079,
									"name": "eventNames",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Returns an array listing the events for which the emitter has registered\nlisteners. The values in the array are strings or "
											},
											{
												"kind": "code",
												"text": "`Symbol`"
											},
											{
												"kind": "text",
												"text": "s.\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nimport { EventEmitter } from 'node:events';\n\nconst myEE = new EventEmitter();\nmyEE.on('foo', () => {});\nmyEE.on('bar', () => {});\n\nconst sym = Symbol('symbol');\nmyEE.on(sym, () => {});\n\nconsole.log(myEE.eventNames());\n// Prints: [ 'foo', 'bar', Symbol(symbol) ]\n```"
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v6.0.0"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@types/node/events.d.ts",
											"line": 715,
											"character": 16
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "union",
											"types": [
												{
													"type": "intrinsic",
													"name": "string"
												},
												{
													"type": "intrinsic",
													"name": "symbol"
												}
											]
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.eventNames"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.eventNames"
							}
						},
						{
							"id": 771,
							"name": "fail",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/core/dist/mjs/test-base.d.ts",
									"line": 230,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/test-base.d.ts#L230"
								}
							],
							"signatures": [
								{
									"id": 772,
									"name": "fail",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A failing (not ok) Test Point"
											}
										]
									},
									"sources": [
										{
											"fileName": "src/core/dist/mjs/test-base.d.ts",
											"line": 230,
											"character": 4,
											"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/test-base.d.ts#L230"
										}
									],
									"parameters": [
										{
											"id": 773,
											"name": "__namedParameters",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../core/src/index.ts",
													"qualifiedName": "MessageExtra"
												},
												"name": "MessageExtra",
												"package": "@tapjs/core"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.fail"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.fail"
							}
						},
						{
							"id": 1318,
							"name": "fixture",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/fixture/dist/mjs/index.d.ts",
									"line": 20,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1319,
									"name": "fixture",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"sources": [
										{
											"fileName": "src/fixture/dist/mjs/index.d.ts",
											"line": 20,
											"character": 4
										}
									],
									"typeParameter": [
										{
											"id": 1320,
											"name": "T",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../fixture/src/fixture.ts",
													"qualifiedName": "FixtureType"
												},
												"name": "FixtureType",
												"package": "@tapjs/fixture"
											}
										}
									],
									"parameters": [
										{
											"id": 1321,
											"name": "type",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": -1,
												"name": "T",
												"refersToTypeParameter": true
											}
										},
										{
											"id": 1322,
											"name": "content",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../fixture/src/fixture.ts",
													"qualifiedName": "FixtureContent"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": -1,
														"name": "T",
														"refersToTypeParameter": true
													}
												],
												"name": "FixtureContent",
												"package": "@tapjs/fixture"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../fixture/src/fixture.ts",
											"qualifiedName": "Fixture"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": -1,
												"name": "T",
												"refersToTypeParameter": true
											}
										],
										"name": "Fixture",
										"package": "@tapjs/fixture"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.fixture"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.fixture"
							}
						},
						{
							"id": 1052,
							"name": "getMaxListeners",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 567,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 1053,
									"name": "getMaxListeners",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Returns the current max listener value for the "
											},
											{
												"kind": "code",
												"text": "`EventEmitter`"
											},
											{
												"kind": "text",
												"text": " which is either\nset by "
											},
											{
												"kind": "code",
												"text": "`emitter.setMaxListeners(n)`"
											},
											{
												"kind": "text",
												"text": " or defaults to "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "defaultMaxListeners",
												"target": 619
											},
											{
												"kind": "text",
												"text": "."
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v1.0.0"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@types/node/events.d.ts",
											"line": 567,
											"character": 16
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.getMaxListeners"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.getMaxListeners"
							}
						},
						{
							"id": 1144,
							"name": "has",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/asserts/dist/mjs/index.d.ts",
									"line": 79,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1145,
									"name": "has",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Verify that the object has all of the properties and values in the\npattern, matching loosely."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/asserts/dist/mjs/index.d.ts",
											"line": 79,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 1146,
											"name": "found",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 1147,
											"name": "wanted",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 1148,
											"name": "__namedParameters",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../core/src/index.ts",
													"qualifiedName": "MessageExtra"
												},
												"name": "MessageExtra",
												"package": "@tapjs/core"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.has"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.has"
							}
						},
						{
							"id": 1211,
							"name": "hasOwnProp",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/asserts/dist/mjs/index.d.ts",
									"line": 152,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1212,
									"name": "hasOwnProp",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Verify that the object has the wanted property, using\nObject#hasOwnProperty"
											}
										]
									},
									"sources": [
										{
											"fileName": "src/asserts/dist/mjs/index.d.ts",
											"line": 152,
											"character": 4
										}
									],
									"typeParameter": [
										{
											"id": 1213,
											"name": "T",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1214,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {}
												}
											}
										}
									],
									"parameters": [
										{
											"id": 1215,
											"name": "found",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": -1,
												"name": "T",
												"refersToTypeParameter": true
											}
										},
										{
											"id": 1216,
											"name": "wanted",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										},
										{
											"id": 1217,
											"name": "__namedParameters",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../core/src/index.ts",
													"qualifiedName": "MessageExtra"
												},
												"name": "MessageExtra",
												"package": "@tapjs/core"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.hasOwnProp"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.hasOwnProp"
							}
						},
						{
							"id": 1225,
							"name": "hasOwnProps",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/asserts/dist/mjs/index.d.ts",
									"line": 162,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1226,
									"name": "hasOwnProps",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Verify that the object has all of the properties listed in the\n"
											},
											{
												"kind": "code",
												"text": "`wanted`"
											},
											{
												"kind": "text",
												"text": " list, using Object#hasOwnProperties()"
											}
										]
									},
									"sources": [
										{
											"fileName": "src/asserts/dist/mjs/index.d.ts",
											"line": 162,
											"character": 4
										}
									],
									"typeParameter": [
										{
											"id": 1227,
											"name": "T",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1228,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {}
												}
											}
										}
									],
									"parameters": [
										{
											"id": 1229,
											"name": "found",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": -1,
												"name": "T",
												"refersToTypeParameter": true
											}
										},
										{
											"id": 1230,
											"name": "wanted",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/typescript/lib/lib.es2015.iterable.d.ts",
													"qualifiedName": "Iterable"
												},
												"typeArguments": [
													{
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "intrinsic",
																"name": "number"
															},
															{
																"type": "intrinsic",
																"name": "symbol"
															}
														]
													}
												],
												"name": "Iterable",
												"package": "typescript"
											}
										},
										{
											"id": 1231,
											"name": "__namedParameters",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../core/src/index.ts",
													"qualifiedName": "MessageExtra"
												},
												"name": "MessageExtra",
												"package": "@tapjs/core"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.hasOwnProps"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.hasOwnProps"
							}
						},
						{
							"id": 1232,
							"name": "hasOwnPropsOnly",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/asserts/dist/mjs/index.d.ts",
									"line": 167,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1233,
									"name": "hasOwnPropsOnly",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Verify that the object has all of the properties listed in the\n"
											},
											{
												"kind": "code",
												"text": "`wanted`"
											},
											{
												"kind": "text",
												"text": " list, using Object#hasOwnProperties(), and no others"
											}
										]
									},
									"sources": [
										{
											"fileName": "src/asserts/dist/mjs/index.d.ts",
											"line": 167,
											"character": 4
										}
									],
									"typeParameter": [
										{
											"id": 1234,
											"name": "T",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1235,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {}
												}
											}
										}
									],
									"parameters": [
										{
											"id": 1236,
											"name": "found",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": -1,
												"name": "T",
												"refersToTypeParameter": true
											}
										},
										{
											"id": 1237,
											"name": "wanted",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/typescript/lib/lib.es2015.iterable.d.ts",
													"qualifiedName": "Iterable"
												},
												"typeArguments": [
													{
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "intrinsic",
																"name": "number"
															},
															{
																"type": "intrinsic",
																"name": "symbol"
															}
														]
													}
												],
												"name": "Iterable",
												"package": "typescript"
											}
										},
										{
											"id": 1238,
											"name": "__namedParameters",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../core/src/index.ts",
													"qualifiedName": "MessageExtra"
												},
												"name": "MessageExtra",
												"package": "@tapjs/core"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.hasOwnPropsOnly"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.hasOwnPropsOnly"
							}
						},
						{
							"id": 1204,
							"name": "hasProp",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/asserts/dist/mjs/index.d.ts",
									"line": 147,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1205,
									"name": "hasProp",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Verify that the object has the wanted property, anywhere in its\nprototype chain."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/asserts/dist/mjs/index.d.ts",
											"line": 147,
											"character": 4
										}
									],
									"typeParameter": [
										{
											"id": 1206,
											"name": "T",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1207,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {}
												}
											}
										}
									],
									"parameters": [
										{
											"id": 1208,
											"name": "found",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": -1,
												"name": "T",
												"refersToTypeParameter": true
											}
										},
										{
											"id": 1209,
											"name": "wanted",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										},
										{
											"id": 1210,
											"name": "__namedParameters",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../core/src/index.ts",
													"qualifiedName": "MessageExtra"
												},
												"name": "MessageExtra",
												"package": "@tapjs/core"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.hasProp"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.hasProp"
							}
						},
						{
							"id": 1218,
							"name": "hasProps",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/asserts/dist/mjs/index.d.ts",
									"line": 157,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1219,
									"name": "hasProps",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Verify that the object has all of the properties in the "
											},
											{
												"kind": "code",
												"text": "`wanted`"
											},
											{
												"kind": "text",
												"text": "\nlist, anywhere in its prototype chain."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/asserts/dist/mjs/index.d.ts",
											"line": 157,
											"character": 4
										}
									],
									"typeParameter": [
										{
											"id": 1220,
											"name": "T",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1221,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {}
												}
											}
										}
									],
									"parameters": [
										{
											"id": 1222,
											"name": "found",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": -1,
												"name": "T",
												"refersToTypeParameter": true
											}
										},
										{
											"id": 1223,
											"name": "wanted",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/typescript/lib/lib.es2015.iterable.d.ts",
													"qualifiedName": "Iterable"
												},
												"typeArguments": [
													{
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "intrinsic",
																"name": "number"
															},
															{
																"type": "intrinsic",
																"name": "symbol"
															}
														]
													}
												],
												"name": "Iterable",
												"package": "typescript"
											}
										},
										{
											"id": 1224,
											"name": "__namedParameters",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../core/src/index.ts",
													"qualifiedName": "MessageExtra"
												},
												"name": "MessageExtra",
												"package": "@tapjs/core"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.hasProps"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.hasProps"
							}
						},
						{
							"id": 1154,
							"name": "hasStrict",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/asserts/dist/mjs/index.d.ts",
									"line": 89,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1155,
									"name": "hasStrict",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Verify that the value has all of the properties and values in the\npattern, matching strictly."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/asserts/dist/mjs/index.d.ts",
											"line": 89,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 1156,
											"name": "found",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 1157,
											"name": "wanted",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 1158,
											"name": "__namedParameters",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../core/src/index.ts",
													"qualifiedName": "MessageExtra"
												},
												"name": "MessageExtra",
												"package": "@tapjs/core"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.hasStrict"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.hasStrict"
							}
						},
						{
							"id": 1331,
							"name": "intercept",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/intercept/dist/mjs/index.d.ts",
									"line": 179,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1332,
									"name": "intercept",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Intercept and track object property sets and gets.\n\nIf a PropertyDescriptor is set, then it will be used as the replacement\nvalue. Otherwise, the original descriptor will be used.\n\nIf the "
											},
											{
												"kind": "code",
												"text": "`strictMode`"
											},
											{
												"kind": "text",
												"text": " param is set, then attempts to write to read-only\nproperties will throw an error."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/intercept/dist/mjs/index.d.ts",
											"line": 179,
											"character": 4
										}
									],
									"typeParameter": [
										{
											"id": 1333,
											"name": "T",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "object"
											}
										}
									],
									"parameters": [
										{
											"id": 1334,
											"name": "obj",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": -1,
												"name": "T",
												"refersToTypeParameter": true
											}
										},
										{
											"id": 1335,
											"name": "prop",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"target": -1,
													"name": "T",
													"refersToTypeParameter": true
												}
											}
										},
										{
											"id": 1336,
											"name": "desc",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "PropertyDescriptor"
												},
												"name": "PropertyDescriptor",
												"package": "typescript"
											}
										},
										{
											"id": 1337,
											"name": "strictMode",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../intercept/src/index.ts",
											"qualifiedName": "InterceptResultsMethod"
										},
										"name": "InterceptResultsMethod",
										"package": "@tapjs/intercept"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.intercept"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.intercept"
							}
						},
						{
							"id": 1060,
							"name": "listenerCount",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 661,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 1061,
									"name": "listenerCount",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Returns the number of listeners listening for the event named "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": ".\nIf "
											},
											{
												"kind": "code",
												"text": "`listener`"
											},
											{
												"kind": "text",
												"text": " is provided, it will return how many times the listener is found\nin the list of the listeners of the event."
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v3.2.0"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@types/node/events.d.ts",
											"line": 661,
											"character": 16
										}
									],
									"parameters": [
										{
											"id": 1062,
											"name": "eventName",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The name of the event being listened for"
													}
												]
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										},
										{
											"id": 1063,
											"name": "listener",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The event handler function"
													}
												]
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "Function"
												},
												"name": "Function",
												"package": "typescript"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.listenerCount"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.listenerCount"
							}
						},
						{
							"id": 1054,
							"name": "listeners",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 580,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 1055,
									"name": "listeners",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Returns a copy of the array of listeners for the event named "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": ".\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nserver.on('connection', (stream) => {\n  console.log('someone connected!');\n});\nconsole.log(util.inspect(server.listeners('connection')));\n// Prints: [ [Function] ]\n```"
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v0.1.26"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@types/node/events.d.ts",
											"line": 580,
											"character": 16
										}
									],
									"parameters": [
										{
											"id": 1056,
											"name": "eventName",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": {
												"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
												"qualifiedName": "Function"
											},
											"name": "Function",
											"package": "typescript"
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.listeners"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.listeners"
							}
						},
						{
							"id": 796,
							"name": "main",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/core/dist/mjs/test-base.d.ts",
									"line": 276,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/test-base.d.ts#L276"
								}
							],
							"signatures": [
								{
									"id": 797,
									"name": "main",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The main function that starts a test running. Generally no need\nto call this directly."
											}
										],
										"modifierTags": [
											"@internal"
										]
									},
									"sources": [
										{
											"fileName": "src/core/dist/mjs/test-base.d.ts",
											"line": 276,
											"character": 4,
											"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/test-base.d.ts#L276"
										}
									],
									"parameters": [
										{
											"id": 798,
											"name": "cb",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 799,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"sources": [
														{
															"fileName": "src/core/dist/mjs/test-base.d.ts",
															"line": 276,
															"character": 13,
															"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/test-base.d.ts#L276"
														}
													],
													"signatures": [
														{
															"id": 800,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {},
															"sources": [
																{
																	"fileName": "src/core/dist/mjs/test-base.d.ts",
																	"line": 276,
																	"character": 13,
																	"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/test-base.d.ts#L276"
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.main"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.main"
							}
						},
						{
							"id": 1164,
							"name": "match",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/asserts/dist/mjs/index.d.ts",
									"line": 101,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1165,
									"name": "match",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Verify that the value matches the pattern provided"
											}
										]
									},
									"sources": [
										{
											"fileName": "src/asserts/dist/mjs/index.d.ts",
											"line": 101,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 1166,
											"name": "found",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 1167,
											"name": "wanted",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 1168,
											"name": "__namedParameters",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../core/src/index.ts",
													"qualifiedName": "MessageExtra"
												},
												"name": "MessageExtra",
												"package": "@tapjs/core"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.match"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.match"
							}
						},
						{
							"id": 1174,
							"name": "matchOnly",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/asserts/dist/mjs/index.d.ts",
									"line": 110,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1175,
									"name": "matchOnly",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Verify that the value matches the pattern provided, with no\nextra properties."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/asserts/dist/mjs/index.d.ts",
											"line": 110,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 1176,
											"name": "found",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 1177,
											"name": "wanted",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 1178,
											"name": "__namedParameters",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../core/src/index.ts",
													"qualifiedName": "MessageExtra"
												},
												"name": "MessageExtra",
												"package": "@tapjs/core"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.matchOnly"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.matchOnly"
							}
						},
						{
							"id": 1184,
							"name": "matchOnlyStrict",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/asserts/dist/mjs/index.d.ts",
									"line": 120,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1185,
									"name": "matchOnlyStrict",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Verify that the value matches the pattern provided, with no\nextra properties."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/asserts/dist/mjs/index.d.ts",
											"line": 120,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 1186,
											"name": "found",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 1187,
											"name": "wanted",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 1188,
											"name": "__namedParameters",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../core/src/index.ts",
													"qualifiedName": "MessageExtra"
												},
												"name": "MessageExtra",
												"package": "@tapjs/core"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.matchOnlyStrict"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.matchOnlyStrict"
							}
						},
						{
							"id": 1431,
							"name": "matchSnapshot",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/snapshot/dist/mjs/index.d.ts",
									"line": 64,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1432,
									"name": "matchSnapshot",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"sources": [
										{
											"fileName": "src/snapshot/dist/mjs/index.d.ts",
											"line": 64,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 1433,
											"name": "found",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 1434,
											"name": "__namedParameters",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../core/src/index.ts",
													"qualifiedName": "MessageExtra"
												},
												"name": "MessageExtra",
												"package": "@tapjs/core"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.matchSnapshot"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.matchSnapshot"
							}
						},
						{
							"id": 1194,
							"name": "matchStrict",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/asserts/dist/mjs/index.d.ts",
									"line": 137,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1195,
									"name": "matchStrict",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Verify that the value matches the pattern provided, but fail if any\nfields *only* match via type coercion.\n\nFor example,\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nt.matchStrict({ a: 1 }, { a: Number }, 'this passes')\nt.matchStrict({ a: 1 }, { a: '1' }, 'this fails')\n```"
											}
										]
									},
									"sources": [
										{
											"fileName": "src/asserts/dist/mjs/index.d.ts",
											"line": 137,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 1196,
											"name": "found",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 1197,
											"name": "wanted",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 1198,
											"name": "__namedParameters",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../core/src/index.ts",
													"qualifiedName": "MessageExtra"
												},
												"name": "MessageExtra",
												"package": "@tapjs/core"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.matchStrict"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.matchStrict"
							}
						},
						{
							"id": 1378,
							"name": "mock",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/mock/dist/mjs/index.d.ts",
									"line": 56,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1379,
									"name": "mock",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Deprecated alias for "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "TapMock#mockRequire"
											},
											{
												"kind": "text",
												"text": "\n\nPrints a warning to stderr the first time it used, otherwise\nidentical."
											}
										],
										"blockTags": [
											{
												"tag": "@deprecated",
												"content": []
											}
										]
									},
									"sources": [
										{
											"fileName": "src/mock/dist/mjs/index.d.ts",
											"line": 56,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 1380,
											"name": "module",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1381,
											"name": "mocks",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1382,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"sources": [
														{
															"fileName": "src/mock/dist/mjs/index.d.ts",
															"line": 56,
															"character": 33
														}
													],
													"indexSignature": {
														"id": 1383,
														"name": "__index",
														"variant": "signature",
														"kind": 8192,
														"flags": {},
														"sources": [
															{
																"fileName": "src/mock/dist/mjs/index.d.ts",
																"line": 57,
																"character": 8
															}
														],
														"parameters": [
															{
																"id": 1384,
																"name": "k",
																"variant": "param",
																"kind": 32768,
																"flags": {},
																"type": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														],
														"type": {
															"type": "intrinsic",
															"name": "any"
														}
													}
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.mock"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.mock"
							}
						},
						{
							"id": 1385,
							"name": "mockImport",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/mock/dist/mjs/index.d.ts",
									"line": 79,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1386,
									"name": "mockImport",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Load the supplied module asynchronously using import(),\nreplacing any of the referenced modules with the mocks provided.\n\nWorks with either ESM or CommonJS modules, but as with "
											},
											{
												"kind": "code",
												"text": "`import()`"
											},
											{
												"kind": "text",
												"text": " of\nCommonJS modules, the "
											},
											{
												"kind": "code",
												"text": "`module.exports`"
											},
											{
												"kind": "text",
												"text": " value will be set as the\n"
											},
											{
												"kind": "code",
												"text": "`default`"
											},
											{
												"kind": "text",
												"text": " property on the resolved object, making\n"
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "TapMock#mockRequire"
											},
											{
												"kind": "text",
												"text": " somewhat more intuitive in those cases.\n\nFor type info, cast result to "
											},
											{
												"kind": "code",
												"text": "`as typeof import(...)`"
											},
											{
												"kind": "text",
												"text": ", as\nTypeScript lacks a way to infer imports dynamically.\n\nFor example:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nconst myThing = await t.mockImport('../my-thing.js', {\n  some: { tricky: 'mocks' },\n}) as typeof import('../my-thing.js')\n```"
											}
										]
									},
									"sources": [
										{
											"fileName": "src/mock/dist/mjs/index.d.ts",
											"line": 79,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 1387,
											"name": "module",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1388,
											"name": "mocks",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1389,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"sources": [
														{
															"fileName": "src/mock/dist/mjs/index.d.ts",
															"line": 79,
															"character": 39
														}
													],
													"indexSignature": {
														"id": 1390,
														"name": "__index",
														"variant": "signature",
														"kind": 8192,
														"flags": {},
														"sources": [
															{
																"fileName": "src/mock/dist/mjs/index.d.ts",
																"line": 80,
																"character": 8
															}
														],
														"parameters": [
															{
																"id": 1391,
																"name": "k",
																"variant": "param",
																"kind": 32768,
																"flags": {},
																"type": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														],
														"type": {
															"type": "intrinsic",
															"name": "any"
														}
													}
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.mockImport"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.mockImport"
							}
						},
						{
							"id": 1392,
							"name": "mockRequire",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/mock/dist/mjs/index.d.ts",
									"line": 98,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1393,
									"name": "mockRequire",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Load the supplied module synchronously using "
											},
											{
												"kind": "code",
												"text": "`require()`"
											},
											{
												"kind": "text",
												"text": ",\nreplacing any of the referenced modules with the mocks provided.\n\nOnly works with CommonJS modules.\n\nFor type info, cast result to "
											},
											{
												"kind": "code",
												"text": "`as typeof import(...)`"
											},
											{
												"kind": "text",
												"text": ", as\nTypeScript lacks a way to infer imports dynamically.\n\nFor example:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nconst myThing = t.mockRequire('../my-thing.js', {\n  some: { tricky: 'mocks' },\n}) as typeof import('../my-thing.js')"
											}
										]
									},
									"sources": [
										{
											"fileName": "src/mock/dist/mjs/index.d.ts",
											"line": 98,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 1394,
											"name": "module",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1395,
											"name": "mocks",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1396,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"sources": [
														{
															"fileName": "src/mock/dist/mjs/index.d.ts",
															"line": 98,
															"character": 40
														}
													],
													"indexSignature": {
														"id": 1397,
														"name": "__index",
														"variant": "signature",
														"kind": 8192,
														"flags": {},
														"sources": [
															{
																"fileName": "src/mock/dist/mjs/index.d.ts",
																"line": 99,
																"character": 8
															}
														],
														"parameters": [
															{
																"id": 1398,
																"name": "k",
																"variant": "param",
																"kind": 32768,
																"flags": {},
																"type": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														],
														"type": {
															"type": "intrinsic",
															"name": "any"
														}
													}
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.mockRequire"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.mockRequire"
							}
						},
						{
							"id": 1113,
							"name": "not",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/asserts/dist/mjs/index.d.ts",
									"line": 48,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1114,
									"name": "not",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Verify that the values are not equal"
											}
										]
									},
									"sources": [
										{
											"fileName": "src/asserts/dist/mjs/index.d.ts",
											"line": 48,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 1115,
											"name": "found",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 1116,
											"name": "doNotWant",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 1117,
											"name": "__namedParameters",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../core/src/index.ts",
													"qualifiedName": "MessageExtra"
												},
												"name": "MessageExtra",
												"package": "@tapjs/core"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.not"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.not"
							}
						},
						{
							"id": 1149,
							"name": "notHas",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/asserts/dist/mjs/index.d.ts",
									"line": 84,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1150,
									"name": "notHas",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Verify that the object does NOT have all of the properties and values\nin the pattern, matching loosely."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/asserts/dist/mjs/index.d.ts",
											"line": 84,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 1151,
											"name": "found",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 1152,
											"name": "doNotWant",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 1153,
											"name": "__namedParameters",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../core/src/index.ts",
													"qualifiedName": "MessageExtra"
												},
												"name": "MessageExtra",
												"package": "@tapjs/core"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.notHas"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.notHas"
							}
						},
						{
							"id": 1159,
							"name": "notHasStrict",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/asserts/dist/mjs/index.d.ts",
									"line": 97,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1160,
									"name": "notHasStrict",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Verify that the value does NOT contain all of the properties and\nvalues in the test pattern, comparing strictly.\n\nNote that this will pass if the value has *some* of the listed properties,\nor if they do not match the same type."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/asserts/dist/mjs/index.d.ts",
											"line": 97,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 1161,
											"name": "found",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 1162,
											"name": "doNotWant",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 1163,
											"name": "__namedParameters",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../core/src/index.ts",
													"qualifiedName": "MessageExtra"
												},
												"name": "MessageExtra",
												"package": "@tapjs/core"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.notHasStrict"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.notHasStrict"
							}
						},
						{
							"id": 1169,
							"name": "notMatch",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/asserts/dist/mjs/index.d.ts",
									"line": 105,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1170,
									"name": "notMatch",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Verify that the value does NOT match the pattern provided."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/asserts/dist/mjs/index.d.ts",
											"line": 105,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 1171,
											"name": "found",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 1172,
											"name": "doNotWant",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 1173,
											"name": "__namedParameters",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../core/src/index.ts",
													"qualifiedName": "MessageExtra"
												},
												"name": "MessageExtra",
												"package": "@tapjs/core"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.notMatch"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.notMatch"
							}
						},
						{
							"id": 1179,
							"name": "notMatchOnly",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/asserts/dist/mjs/index.d.ts",
									"line": 115,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1180,
									"name": "notMatchOnly",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Verify that the value does not match the pattern provided, with no\nextra properties. Ie, it might either not match, or have extra props."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/asserts/dist/mjs/index.d.ts",
											"line": 115,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 1181,
											"name": "found",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 1182,
											"name": "doNotWant",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 1183,
											"name": "__namedParameters",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../core/src/index.ts",
													"qualifiedName": "MessageExtra"
												},
												"name": "MessageExtra",
												"package": "@tapjs/core"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.notMatchOnly"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.notMatchOnly"
							}
						},
						{
							"id": 1189,
							"name": "notMatchOnlyStrict",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/asserts/dist/mjs/index.d.ts",
									"line": 125,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1190,
									"name": "notMatchOnlyStrict",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Verify that the value does not match the pattern provided, with no\nextra properties. Ie, it might either not match, or have extra props."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/asserts/dist/mjs/index.d.ts",
											"line": 125,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 1191,
											"name": "found",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 1192,
											"name": "doNotWant",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 1193,
											"name": "__namedParameters",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../core/src/index.ts",
													"qualifiedName": "MessageExtra"
												},
												"name": "MessageExtra",
												"package": "@tapjs/core"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.notMatchOnlyStrict"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.notMatchOnlyStrict"
							}
						},
						{
							"id": 1199,
							"name": "notMatchStrict",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/asserts/dist/mjs/index.d.ts",
									"line": 142,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1200,
									"name": "notMatchStrict",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Verify that the value does not match the pattern provided, without\ntype coercion."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/asserts/dist/mjs/index.d.ts",
											"line": 142,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 1201,
											"name": "found",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 1202,
											"name": "doNotWant",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 1203,
											"name": "__namedParameters",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../core/src/index.ts",
													"qualifiedName": "MessageExtra"
												},
												"name": "MessageExtra",
												"package": "@tapjs/core"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.notMatchStrict"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.notMatchStrict"
							}
						},
						{
							"id": 1103,
							"name": "notOk",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/asserts/dist/mjs/index.d.ts",
									"line": 40,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1104,
									"name": "notOk",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Verify that the value is not truthy"
											}
										]
									},
									"sources": [
										{
											"fileName": "src/asserts/dist/mjs/index.d.ts",
											"line": 40,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 1105,
											"name": "obj",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 1106,
											"name": "__namedParameters",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../core/src/index.ts",
													"qualifiedName": "MessageExtra"
												},
												"name": "MessageExtra",
												"package": "@tapjs/core"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.notOk"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.notOk"
							}
						},
						{
							"id": 1128,
							"name": "notSame",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/asserts/dist/mjs/index.d.ts",
									"line": 65,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1129,
									"name": "notSame",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Verify that the value is not loosely equivalent to the supplied pattern"
											}
										]
									},
									"sources": [
										{
											"fileName": "src/asserts/dist/mjs/index.d.ts",
											"line": 65,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 1130,
											"name": "found",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 1131,
											"name": "doNotWant",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 1132,
											"name": "__namedParameters",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../core/src/index.ts",
													"qualifiedName": "MessageExtra"
												},
												"name": "MessageExtra",
												"package": "@tapjs/core"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.notSame"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.notSame"
							}
						},
						{
							"id": 966,
							"name": "off",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
									"line": 442,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 967,
									"name": "off",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Mostly identical to "
											},
											{
												"kind": "code",
												"text": "`EventEmitter.off`"
											},
											{
												"kind": "text",
												"text": "\n\nIf a 'data' event handler is removed, and it was the last consumer\n(ie, there are no pipe destinations or other 'data' event listeners),\nthen the flow of data will stop until there is another consumer or\n"
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "Minipass#resume"
											},
											{
												"kind": "text",
												"text": " is explicitly called."
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
											"line": 442,
											"character": 4
										}
									],
									"typeParameter": [
										{
											"id": 968,
											"name": "Event",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"target": {
														"sourceFileName": "../core/src/test-base.ts",
														"qualifiedName": "TestBaseEvents"
													},
													"name": "TestBaseEvents",
													"package": "@tapjs/core"
												}
											}
										}
									],
									"parameters": [
										{
											"id": 969,
											"name": "ev",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"target": -1,
												"name": "Event",
												"refersToTypeParameter": true
											}
										},
										{
											"id": 970,
											"name": "handler",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 971,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
															"line": 442,
															"character": 56
														}
													],
													"signatures": [
														{
															"id": 972,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
																	"line": 442,
																	"character": 56
																}
															],
															"parameters": [
																{
																	"id": 973,
																	"name": "args",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {
																		"isExternal": true,
																		"isRest": true
																	},
																	"type": {
																		"type": "indexedAccess",
																		"indexType": {
																			"type": "reference",
																			"target": -1,
																			"name": "Event",
																			"refersToTypeParameter": true
																		},
																		"objectType": {
																			"type": "reference",
																			"target": {
																				"sourceFileName": "../core/src/test-base.ts",
																				"qualifiedName": "TestBaseEvents"
																			},
																			"name": "TestBaseEvents",
																			"package": "@tapjs/core"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"target": 565,
										"typeArguments": [
											{
												"type": "reference",
												"target": -1,
												"name": "Ext",
												"refersToTypeParameter": true
											},
											{
												"type": "reference",
												"target": -1,
												"name": "Opts",
												"refersToTypeParameter": true
											}
										],
										"name": "Test",
										"package": "@tapjs/test-built"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.off"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.off"
							}
						},
						{
							"id": 1099,
							"name": "ok",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/asserts/dist/mjs/index.d.ts",
									"line": 36,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1100,
									"name": "ok",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Verify that the value is truthy"
											}
										]
									},
									"sources": [
										{
											"fileName": "src/asserts/dist/mjs/index.d.ts",
											"line": 36,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 1101,
											"name": "obj",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 1102,
											"name": "__namedParameters",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../core/src/index.ts",
													"qualifiedName": "MessageExtra"
												},
												"name": "MessageExtra",
												"package": "@tapjs/core"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.ok"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.ok"
							}
						},
						{
							"id": 950,
							"name": "on",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
									"line": 429,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 951,
									"name": "on",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Mostly identical to "
											},
											{
												"kind": "code",
												"text": "`EventEmitter.on`"
											},
											{
												"kind": "text",
												"text": ", with the following\nbehavior differences to prevent data loss and unnecessary hangs:\n\n- Adding a 'data' event handler will trigger the flow of data\n\n- Adding a 'readable' event handler when there is data waiting to be read\n  will cause 'readable' to be emitted immediately.\n\n- Adding an 'endish' event handler ('end', 'finish', etc.) which has\n  already passed will cause the event to be emitted immediately and all\n  handlers removed.\n\n- Adding an 'error' event handler after an error has been emitted will\n  cause the event to be re-emitted immediately with the error previously\n  raised."
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
											"line": 429,
											"character": 4
										}
									],
									"typeParameter": [
										{
											"id": 952,
											"name": "Event",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"target": {
														"sourceFileName": "../core/src/test-base.ts",
														"qualifiedName": "TestBaseEvents"
													},
													"name": "TestBaseEvents",
													"package": "@tapjs/core"
												}
											}
										}
									],
									"parameters": [
										{
											"id": 953,
											"name": "ev",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"target": -1,
												"name": "Event",
												"refersToTypeParameter": true
											}
										},
										{
											"id": 954,
											"name": "handler",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 955,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
															"line": 429,
															"character": 55
														}
													],
													"signatures": [
														{
															"id": 956,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
																	"line": 429,
																	"character": 55
																}
															],
															"parameters": [
																{
																	"id": 957,
																	"name": "args",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {
																		"isExternal": true,
																		"isRest": true
																	},
																	"type": {
																		"type": "indexedAccess",
																		"indexType": {
																			"type": "reference",
																			"target": -1,
																			"name": "Event",
																			"refersToTypeParameter": true
																		},
																		"objectType": {
																			"type": "reference",
																			"target": {
																				"sourceFileName": "../core/src/test-base.ts",
																				"qualifiedName": "TestBaseEvents"
																			},
																			"name": "TestBaseEvents",
																			"package": "@tapjs/core"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"target": 565,
										"typeArguments": [
											{
												"type": "reference",
												"target": -1,
												"name": "Ext",
												"refersToTypeParameter": true
											},
											{
												"type": "reference",
												"target": -1,
												"name": "Opts",
												"refersToTypeParameter": true
											}
										],
										"name": "Test",
										"package": "@tapjs/test-built"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.on"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.on"
							}
						},
						{
							"id": 886,
							"name": "onEOF",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/core/dist/mjs/base.d.ts",
									"line": 364,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/base.d.ts#L364"
								}
							],
							"signatures": [
								{
									"id": 887,
									"name": "onEOF",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "extension point for plugins that want to be notified when the test\nis completely done, and terminating its parser."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/core/dist/mjs/base.d.ts",
											"line": 364,
											"character": 4,
											"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/base.d.ts#L364"
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "Promise"
												},
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "void"
													}
												],
												"name": "Promise",
												"package": "typescript"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.onEOF"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.onEOF"
							}
						},
						{
							"id": 825,
							"name": "onbail",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/core/dist/mjs/test-base.d.ts",
									"line": 307,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/test-base.d.ts#L307"
								}
							],
							"signatures": [
								{
									"id": 826,
									"name": "onbail",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Method called when the parser encounters a bail out"
											}
										]
									},
									"sources": [
										{
											"fileName": "src/core/dist/mjs/test-base.d.ts",
											"line": 307,
											"character": 4,
											"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/test-base.d.ts#L307"
										}
									],
									"parameters": [
										{
											"id": 827,
											"name": "message",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.onbail"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.onbail"
							}
						},
						{
							"id": 884,
							"name": "onbeforeend",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/core/dist/mjs/base.d.ts",
									"line": 359,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/base.d.ts#L359"
								}
							],
							"signatures": [
								{
									"id": 885,
									"name": "onbeforeend",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "extension point for plugins that want to be notified when the test\nis about to end, whether explicitly or implicitly.\n\nIf the function returns a Promise, it will be awaited before ending\nthe TAP stream."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/core/dist/mjs/base.d.ts",
											"line": 359,
											"character": 4,
											"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/base.d.ts#L359"
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "Promise"
												},
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "void"
													}
												],
												"name": "Promise",
												"package": "typescript"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.onbeforeend"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.onbeforeend"
							}
						},
						{
							"id": 1042,
							"name": "once",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 452,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 1043,
									"name": "once",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Adds a **one-time**"
											},
											{
												"kind": "code",
												"text": "`listener`"
											},
											{
												"kind": "text",
												"text": " function for the event named "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": ". The\nnext time "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": " is triggered, this listener is removed and then invoked.\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nserver.once('connection', (stream) => {\n  console.log('Ah, we have our first user!');\n});\n```"
											},
											{
												"kind": "text",
												"text": "\n\nReturns a reference to the "
											},
											{
												"kind": "code",
												"text": "`EventEmitter`"
											},
											{
												"kind": "text",
												"text": ", so that calls can be chained.\n\nBy default, event listeners are invoked in the order they are added. The"
											},
											{
												"kind": "code",
												"text": "`emitter.prependOnceListener()`"
											},
											{
												"kind": "text",
												"text": " method can be used as an alternative to add the\nevent listener to the beginning of the listeners array.\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nimport { EventEmitter } from 'node:events';\nconst myEE = new EventEmitter();\nmyEE.once('foo', () => console.log('a'));\nmyEE.prependOnceListener('foo', () => console.log('b'));\nmyEE.emit('foo');\n// Prints:\n//   b\n//   a\n```"
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v0.3.0"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@types/node/events.d.ts",
											"line": 452,
											"character": 16
										}
									],
									"parameters": [
										{
											"id": 1044,
											"name": "eventName",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The name of the event."
													}
												]
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										},
										{
											"id": 1045,
											"name": "listener",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The callback function"
													}
												]
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1046,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/@types/node/events.d.ts",
															"line": 452,
															"character": 59
														}
													],
													"signatures": [
														{
															"id": 1047,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "node_modules/@types/node/events.d.ts",
																	"line": 452,
																	"character": 59
																}
															],
															"parameters": [
																{
																	"id": 1048,
																	"name": "args",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {
																		"isExternal": true,
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"target": 565,
										"typeArguments": [
											{
												"type": "reference",
												"target": -1,
												"name": "Ext",
												"refersToTypeParameter": true
											},
											{
												"type": "reference",
												"target": -1,
												"name": "Opts",
												"refersToTypeParameter": true
											}
										],
										"name": "Test",
										"package": "@tapjs/test-built"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.once"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.once"
							}
						},
						{
							"id": 881,
							"name": "oncomplete",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/core/dist/mjs/base.d.ts",
									"line": 351,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/base.d.ts#L351"
								}
							],
							"signatures": [
								{
									"id": 882,
									"name": "oncomplete",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Method called when the parser completes and emits its final results\n\nExtended by "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "Worker",
												"target": {
													"sourceFileName": "../../node_modules/typescript/lib/lib.dom.d.ts",
													"qualifiedName": "Worker"
												},
												"tsLinkText": ""
											},
											{
												"kind": "text",
												"text": " and "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "TAP"
											},
											{
												"kind": "text",
												"text": " classes"
											}
										]
									},
									"sources": [
										{
											"fileName": "src/core/dist/mjs/base.d.ts",
											"line": 351,
											"character": 4,
											"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/base.d.ts#L351"
										}
									],
									"parameters": [
										{
											"id": 883,
											"name": "results",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../parser/src/final-results.ts",
													"qualifiedName": "FinalResults"
												},
												"name": "FinalResults",
												"package": "tap-parser"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.oncomplete"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.oncomplete"
							}
						},
						{
							"id": 888,
							"name": "ondone",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/core/dist/mjs/base.d.ts",
									"line": 371,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/base.d.ts#L371"
								}
							],
							"signatures": [
								{
									"id": 889,
									"name": "ondone",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "extension point for TestBase to know when a child tests is done being\nprocessed and it's safe to move on to the next one."
											}
										],
										"modifierTags": [
											"@internal"
										]
									},
									"sources": [
										{
											"fileName": "src/core/dist/mjs/base.d.ts",
											"line": 371,
											"character": 4,
											"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/base.d.ts#L371"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.ondone"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.ondone"
							}
						},
						{
							"id": 1292,
							"name": "only",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/filter/dist/mjs/index.d.ts",
									"line": 39,
									"character": 4
								},
								{
									"fileName": "src/filter/dist/mjs/index.d.ts",
									"line": 40,
									"character": 4
								},
								{
									"fileName": "src/filter/dist/mjs/index.d.ts",
									"line": 41,
									"character": 4
								},
								{
									"fileName": "src/filter/dist/mjs/index.d.ts",
									"line": 42,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1293,
									"name": "only",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Run a child test that will run when the "
											},
											{
												"kind": "code",
												"text": "`--only`"
											},
											{
												"kind": "text",
												"text": " config is set,\nor "
											},
											{
												"kind": "code",
												"text": "`{ runOnly: true }`"
											},
											{
												"kind": "text",
												"text": " is set in the parent test options."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/filter/dist/mjs/index.d.ts",
											"line": 39,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 1294,
											"name": "name",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1295,
											"name": "extra",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 19,
												"name": "TestOpts",
												"package": "@tapjs/test-built"
											}
										},
										{
											"id": 1296,
											"name": "cb",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1297,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"sources": [
														{
															"fileName": "src/filter/dist/mjs/index.d.ts",
															"line": 39,
															"character": 44
														}
													],
													"signatures": [
														{
															"id": 1298,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {},
															"sources": [
																{
																	"fileName": "src/filter/dist/mjs/index.d.ts",
																	"line": 39,
																	"character": 44
																}
															],
															"parameters": [
																{
																	"id": 1299,
																	"name": "t",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"target": 565,
																		"typeArguments": [
																			{
																				"type": "reference",
																				"target": 161,
																				"name": "BuiltPlugins",
																				"package": "@tapjs/test-built"
																			},
																			{
																				"type": "reference",
																				"target": 19,
																				"name": "TestOpts",
																				"package": "@tapjs/test-built"
																			}
																		],
																		"name": "Test",
																		"package": "@tapjs/test-built"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../core/src/test-base.ts",
											"qualifiedName": "PromiseWithSubtest"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": 565,
												"typeArguments": [
													{
														"type": "reference",
														"target": 161,
														"name": "BuiltPlugins",
														"package": "@tapjs/test-built"
													},
													{
														"type": "reference",
														"target": 19,
														"name": "TestOpts",
														"package": "@tapjs/test-built"
													}
												],
												"name": "Test",
												"package": "@tapjs/test-built"
											}
										],
										"name": "PromiseWithSubtest",
										"package": "@tapjs/core"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.only"
									}
								},
								{
									"id": 1300,
									"name": "only",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"sources": [
										{
											"fileName": "src/filter/dist/mjs/index.d.ts",
											"line": 40,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 1301,
											"name": "name",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1302,
											"name": "cb",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1303,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"sources": [
														{
															"fileName": "src/filter/dist/mjs/index.d.ts",
															"line": 40,
															"character": 27
														}
													],
													"signatures": [
														{
															"id": 1304,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {},
															"sources": [
																{
																	"fileName": "src/filter/dist/mjs/index.d.ts",
																	"line": 40,
																	"character": 27
																}
															],
															"parameters": [
																{
																	"id": 1305,
																	"name": "t",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"target": 565,
																		"typeArguments": [
																			{
																				"type": "reference",
																				"target": 161,
																				"name": "BuiltPlugins",
																				"package": "@tapjs/test-built"
																			},
																			{
																				"type": "reference",
																				"target": 19,
																				"name": "TestOpts",
																				"package": "@tapjs/test-built"
																			}
																		],
																		"name": "Test",
																		"package": "@tapjs/test-built"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../core/src/test-base.ts",
											"qualifiedName": "PromiseWithSubtest"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": 565,
												"typeArguments": [
													{
														"type": "reference",
														"target": 161,
														"name": "BuiltPlugins",
														"package": "@tapjs/test-built"
													},
													{
														"type": "reference",
														"target": 19,
														"name": "TestOpts",
														"package": "@tapjs/test-built"
													}
												],
												"name": "Test",
												"package": "@tapjs/test-built"
											}
										],
										"name": "PromiseWithSubtest",
										"package": "@tapjs/core"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.only"
									}
								},
								{
									"id": 1306,
									"name": "only",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"sources": [
										{
											"fileName": "src/filter/dist/mjs/index.d.ts",
											"line": 41,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 1307,
											"name": "extra",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 19,
												"name": "TestOpts",
												"package": "@tapjs/test-built"
											}
										},
										{
											"id": 1308,
											"name": "cb",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1309,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"sources": [
														{
															"fileName": "src/filter/dist/mjs/index.d.ts",
															"line": 41,
															"character": 30
														}
													],
													"signatures": [
														{
															"id": 1310,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {},
															"sources": [
																{
																	"fileName": "src/filter/dist/mjs/index.d.ts",
																	"line": 41,
																	"character": 30
																}
															],
															"parameters": [
																{
																	"id": 1311,
																	"name": "t",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"target": 565,
																		"typeArguments": [
																			{
																				"type": "reference",
																				"target": 161,
																				"name": "BuiltPlugins",
																				"package": "@tapjs/test-built"
																			},
																			{
																				"type": "reference",
																				"target": 19,
																				"name": "TestOpts",
																				"package": "@tapjs/test-built"
																			}
																		],
																		"name": "Test",
																		"package": "@tapjs/test-built"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../core/src/test-base.ts",
											"qualifiedName": "PromiseWithSubtest"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": 565,
												"typeArguments": [
													{
														"type": "reference",
														"target": 161,
														"name": "BuiltPlugins",
														"package": "@tapjs/test-built"
													},
													{
														"type": "reference",
														"target": 19,
														"name": "TestOpts",
														"package": "@tapjs/test-built"
													}
												],
												"name": "Test",
												"package": "@tapjs/test-built"
											}
										],
										"name": "PromiseWithSubtest",
										"package": "@tapjs/core"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.only"
									}
								},
								{
									"id": 1312,
									"name": "only",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"sources": [
										{
											"fileName": "src/filter/dist/mjs/index.d.ts",
											"line": 42,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 1313,
											"name": "cb",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1314,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"sources": [
														{
															"fileName": "src/filter/dist/mjs/index.d.ts",
															"line": 42,
															"character": 13
														}
													],
													"signatures": [
														{
															"id": 1315,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {},
															"sources": [
																{
																	"fileName": "src/filter/dist/mjs/index.d.ts",
																	"line": 42,
																	"character": 13
																}
															],
															"parameters": [
																{
																	"id": 1316,
																	"name": "t",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"target": 565,
																		"typeArguments": [
																			{
																				"type": "reference",
																				"target": 161,
																				"name": "BuiltPlugins",
																				"package": "@tapjs/test-built"
																			},
																			{
																				"type": "reference",
																				"target": 19,
																				"name": "TestOpts",
																				"package": "@tapjs/test-built"
																			}
																		],
																		"name": "Test",
																		"package": "@tapjs/test-built"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../core/src/test-base.ts",
											"qualifiedName": "PromiseWithSubtest"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": 565,
												"typeArguments": [
													{
														"type": "reference",
														"target": 161,
														"name": "BuiltPlugins",
														"package": "@tapjs/test-built"
													},
													{
														"type": "reference",
														"target": 19,
														"name": "TestOpts",
														"package": "@tapjs/test-built"
													}
												],
												"name": "Test",
												"package": "@tapjs/test-built"
											}
										],
										"name": "PromiseWithSubtest",
										"package": "@tapjs/core"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.only"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.only"
							}
						},
						{
							"id": 768,
							"name": "pass",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/core/dist/mjs/test-base.d.ts",
									"line": 224,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/test-base.d.ts#L224"
								}
							],
							"signatures": [
								{
									"id": 769,
									"name": "pass",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A passing (ok) Test Point."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/core/dist/mjs/test-base.d.ts",
											"line": 224,
											"character": 4,
											"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/test-base.d.ts#L224"
										}
									],
									"parameters": [
										{
											"id": 770,
											"name": "__namedParameters",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../core/src/index.ts",
													"qualifiedName": "MessageExtra"
												},
												"name": "MessageExtra",
												"package": "@tapjs/core"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.pass"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.pass"
							}
						},
						{
							"id": 895,
							"name": "passing",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/core/dist/mjs/base.d.ts",
									"line": 395,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/base.d.ts#L395"
								}
							],
							"signatures": [
								{
									"id": 896,
									"name": "passing",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "returns true if the test has not as yet encountered any failures"
											}
										]
									},
									"sources": [
										{
											"fileName": "src/core/dist/mjs/base.d.ts",
											"line": 395,
											"character": 4,
											"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/base.d.ts#L395"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.passing"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.passing"
							}
						},
						{
							"id": 925,
							"name": "pause",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
									"line": 375,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 926,
									"name": "pause",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Pause the stream"
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
											"line": 375,
											"character": 4
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.pause"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.pause"
							}
						},
						{
							"id": 933,
							"name": "pipe",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
									"line": 398,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 934,
									"name": "pipe",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Pipe all data emitted by this stream into the destination provided.\n\nTriggers the flow of data."
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
											"line": 398,
											"character": 4
										}
									],
									"typeParameter": [
										{
											"id": 935,
											"name": "W",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/minipass/src/index.ts",
													"qualifiedName": "Minipass.Writable"
												},
												"name": "Writable",
												"package": "minipass",
												"qualifiedName": "Minipass.Writable"
											}
										}
									],
									"parameters": [
										{
											"id": 936,
											"name": "dest",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"target": -1,
												"name": "W",
												"refersToTypeParameter": true
											}
										},
										{
											"id": 937,
											"name": "opts",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/minipass/src/index.ts",
													"qualifiedName": "PipeOptions"
												},
												"name": "PipeOptions",
												"package": "minipass"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": -1,
										"name": "W",
										"refersToTypeParameter": true
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.pipe"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.pipe"
							}
						},
						{
							"id": 628,
							"name": "plan",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
									"line": 191,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L191"
								}
							],
							"signatures": [
								{
									"id": 629,
									"name": "plan",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"sources": [
										{
											"fileName": "src/test/test-built/dist/mjs/index.d.ts",
											"line": 191,
											"character": 4,
											"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L191"
										}
									],
									"parameters": [
										{
											"id": 630,
											"name": "n",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 631,
											"name": "comment",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"overwrites": {
										"type": "reference",
										"target": -1,
										"name": "TTest.plan"
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"target": -1,
								"name": "TTest.plan"
							}
						},
						{
							"id": 638,
							"name": "pluginLoaded",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
									"line": 235,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L235"
								}
							],
							"signatures": [
								{
									"id": 639,
									"name": "pluginLoaded",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Return true if the specified plugin is loaded. Asserts that the\ntest object in question implements the return value of the plugin."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/test/test-built/dist/mjs/index.d.ts",
											"line": 235,
											"character": 4,
											"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L235"
										}
									],
									"typeParameter": [
										{
											"id": 640,
											"name": "T",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "unknown"
											},
											"default": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"parameters": [
										{
											"id": 641,
											"name": "plugin",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 642,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"sources": [
														{
															"fileName": "src/test/test-built/dist/mjs/index.d.ts",
															"line": 235,
															"character": 46,
															"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L235"
														}
													],
													"signatures": [
														{
															"id": 643,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {},
															"sources": [
																{
																	"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																	"line": 235,
																	"character": 46,
																	"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L235"
																}
															],
															"parameters": [
																{
																	"id": 644,
																	"name": "t",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																},
																{
																	"id": 645,
																	"name": "opts",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {
																		"isOptional": true
																	},
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																}
															],
															"type": {
																"type": "reference",
																"target": -1,
																"name": "T",
																"refersToTypeParameter": true
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "predicate",
										"name": "this",
										"asserts": false,
										"targetType": {
											"type": "intersection",
											"types": [
												{
													"type": "reference",
													"target": {
														"sourceFileName": "../core/src/test-base.ts",
														"qualifiedName": "TestBase"
													},
													"name": "TestBase",
													"package": "@tapjs/core"
												},
												{
													"type": "reference",
													"target": -1,
													"name": "T",
													"refersToTypeParameter": true
												}
											]
										}
									}
								}
							]
						},
						{
							"id": 762,
							"name": "pragma",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/core/dist/mjs/test-base.d.ts",
									"line": 208,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/test-base.d.ts#L208"
								}
							],
							"signatures": [
								{
									"id": 763,
									"name": "pragma",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Set TAP pragma configs to affect the behavior of the parser.\nOnly "
											},
											{
												"kind": "code",
												"text": "`strict`"
											},
											{
												"kind": "text",
												"text": " is supported by the parser."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/core/dist/mjs/test-base.d.ts",
											"line": 208,
											"character": 4,
											"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/test-base.d.ts#L208"
										}
									],
									"parameters": [
										{
											"id": 764,
											"name": "set",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 765,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"sources": [
														{
															"fileName": "src/core/dist/mjs/test-base.d.ts",
															"line": 208,
															"character": 16,
															"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/test-base.d.ts#L208"
														}
													],
													"indexSignature": {
														"id": 766,
														"name": "__index",
														"variant": "signature",
														"kind": 8192,
														"flags": {},
														"sources": [
															{
																"fileName": "src/core/dist/mjs/test-base.d.ts",
																"line": 209,
																"character": 8,
																"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/test-base.d.ts#L209"
															}
														],
														"parameters": [
															{
																"id": 767,
																"name": "k",
																"variant": "param",
																"kind": 32768,
																"flags": {},
																"type": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														],
														"type": {
															"type": "intrinsic",
															"name": "boolean"
														}
													}
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.pragma"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.pragma"
							}
						},
						{
							"id": 1064,
							"name": "prependListener",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 679,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 1065,
									"name": "prependListener",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Adds the "
											},
											{
												"kind": "code",
												"text": "`listener`"
											},
											{
												"kind": "text",
												"text": " function to the _beginning_ of the listeners array for the\nevent named "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": ". No checks are made to see if the "
											},
											{
												"kind": "code",
												"text": "`listener`"
											},
											{
												"kind": "text",
												"text": " has\nalready been added. Multiple calls passing the same combination of "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": "and "
											},
											{
												"kind": "code",
												"text": "`listener`"
											},
											{
												"kind": "text",
												"text": " will result in the "
											},
											{
												"kind": "code",
												"text": "`listener`"
											},
											{
												"kind": "text",
												"text": " being added, and called, multiple\ntimes.\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nserver.prependListener('connection', (stream) => {\n  console.log('someone connected!');\n});\n```"
											},
											{
												"kind": "text",
												"text": "\n\nReturns a reference to the "
											},
											{
												"kind": "code",
												"text": "`EventEmitter`"
											},
											{
												"kind": "text",
												"text": ", so that calls can be chained."
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v6.0.0"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@types/node/events.d.ts",
											"line": 679,
											"character": 16
										}
									],
									"parameters": [
										{
											"id": 1066,
											"name": "eventName",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The name of the event."
													}
												]
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										},
										{
											"id": 1067,
											"name": "listener",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The callback function"
													}
												]
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1068,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/@types/node/events.d.ts",
															"line": 679,
															"character": 70
														}
													],
													"signatures": [
														{
															"id": 1069,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "node_modules/@types/node/events.d.ts",
																	"line": 679,
																	"character": 70
																}
															],
															"parameters": [
																{
																	"id": 1070,
																	"name": "args",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {
																		"isExternal": true,
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"target": 565,
										"typeArguments": [
											{
												"type": "reference",
												"target": -1,
												"name": "Ext",
												"refersToTypeParameter": true
											},
											{
												"type": "reference",
												"target": -1,
												"name": "Opts",
												"refersToTypeParameter": true
											}
										],
										"name": "Test",
										"package": "@tapjs/test-built"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.prependListener"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.prependListener"
							}
						},
						{
							"id": 1071,
							"name": "prependOnceListener",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 695,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 1072,
									"name": "prependOnceListener",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Adds a **one-time**"
											},
											{
												"kind": "code",
												"text": "`listener`"
											},
											{
												"kind": "text",
												"text": " function for the event named "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": " to the _beginning_ of the listeners array. The next time "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": " is triggered, this\nlistener is removed, and then invoked.\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nserver.prependOnceListener('connection', (stream) => {\n  console.log('Ah, we have our first user!');\n});\n```"
											},
											{
												"kind": "text",
												"text": "\n\nReturns a reference to the "
											},
											{
												"kind": "code",
												"text": "`EventEmitter`"
											},
											{
												"kind": "text",
												"text": ", so that calls can be chained."
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v6.0.0"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@types/node/events.d.ts",
											"line": 695,
											"character": 16
										}
									],
									"parameters": [
										{
											"id": 1073,
											"name": "eventName",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The name of the event."
													}
												]
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										},
										{
											"id": 1074,
											"name": "listener",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The callback function"
													}
												]
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1075,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/@types/node/events.d.ts",
															"line": 695,
															"character": 74
														}
													],
													"signatures": [
														{
															"id": 1076,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "node_modules/@types/node/events.d.ts",
																	"line": 695,
																	"character": 74
																}
															],
															"parameters": [
																{
																	"id": 1077,
																	"name": "args",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {
																		"isExternal": true,
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"target": 565,
										"typeArguments": [
											{
												"type": "reference",
												"target": -1,
												"name": "Ext",
												"refersToTypeParameter": true
											},
											{
												"type": "reference",
												"target": -1,
												"name": "Opts",
												"refersToTypeParameter": true
											}
										],
										"name": "Test",
										"package": "@tapjs/test-built"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.prependOnceListener"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.prependOnceListener"
							}
						},
						{
							"id": 986,
							"name": "promise",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
									"line": 502,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 987,
									"name": "promise",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Return a void Promise that resolves once the stream ends."
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
											"line": 502,
											"character": 4
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.promise"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.promise"
							}
						},
						{
							"id": 1057,
							"name": "rawListeners",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 611,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 1058,
									"name": "rawListeners",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Returns a copy of the array of listeners for the event named "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": ",\nincluding any wrappers (such as those created by "
											},
											{
												"kind": "code",
												"text": "`.once()`"
											},
											{
												"kind": "text",
												"text": ").\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nimport { EventEmitter } from 'node:events';\nconst emitter = new EventEmitter();\nemitter.once('log', () => console.log('log once'));\n\n// Returns a new Array with a function `onceWrapper` which has a property\n// `listener` which contains the original listener bound above\nconst listeners = emitter.rawListeners('log');\nconst logFnWrapper = listeners[0];\n\n// Logs \"log once\" to the console and does not unbind the `once` event\nlogFnWrapper.listener();\n\n// Logs \"log once\" to the console and removes the listener\nlogFnWrapper();\n\nemitter.on('log', () => console.log('log persistently'));\n// Will return a new Array with a single function bound by `.on()` above\nconst newListeners = emitter.rawListeners('log');\n\n// Logs \"log persistently\" twice\nnewListeners[0]();\nemitter.emit('log');\n```"
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v9.4.0"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@types/node/events.d.ts",
											"line": 611,
											"character": 16
										}
									],
									"parameters": [
										{
											"id": 1059,
											"name": "eventName",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": {
												"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
												"qualifiedName": "Function"
											},
											"name": "Function",
											"package": "typescript"
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.rawListeners"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.rawListeners"
							}
						},
						{
							"id": 920,
							"name": "read",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
									"line": 351,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 921,
									"name": "read",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Low-level explicit read method.\n\nIn objectMode, the argument is ignored, and one item is returned if\navailable.\n\n"
											},
											{
												"kind": "code",
												"text": "`n`"
											},
											{
												"kind": "text",
												"text": " is the number of bytes (or in the case of encoding streams,\ncharacters) to consume. If "
											},
											{
												"kind": "code",
												"text": "`n`"
											},
											{
												"kind": "text",
												"text": " is not provided, then the entire buffer\nis returned, or "
											},
											{
												"kind": "code",
												"text": "`null`"
											},
											{
												"kind": "text",
												"text": " is returned if no data is available.\n\nIf "
											},
											{
												"kind": "code",
												"text": "`n`"
											},
											{
												"kind": "text",
												"text": " is greater that the amount of data in the internal buffer,\nthen "
											},
											{
												"kind": "code",
												"text": "`null`"
											},
											{
												"kind": "text",
												"text": " is returned."
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
											"line": 351,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 922,
											"name": "n",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": null
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.read"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.read"
							}
						},
						{
							"id": 1251,
							"name": "rejects",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/asserts/dist/mjs/index.d.ts",
									"line": 187,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1252,
									"name": "rejects",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "resolves to the error object rejected if it rejects as expected,\n'false' if it does not, or 'true' if it fails to reject but is marked\nas skip/todo."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/asserts/dist/mjs/index.d.ts",
											"line": 187,
											"character": 4
										}
									],
									"typeParameter": [
										{
											"id": 1253,
											"name": "T",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "unknown"
											},
											"default": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"parameters": [
										{
											"id": 1254,
											"name": "fnOrPromise",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reflection",
														"declaration": {
															"id": 1255,
															"name": "__type",
															"variant": "declaration",
															"kind": 65536,
															"flags": {},
															"sources": [
																{
																	"fileName": "src/asserts/dist/mjs/index.d.ts",
																	"line": 187,
																	"character": 47
																}
															],
															"signatures": [
																{
																	"id": 1256,
																	"name": "__type",
																	"variant": "signature",
																	"kind": 4096,
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "src/asserts/dist/mjs/index.d.ts",
																			"line": 187,
																			"character": 47
																		}
																	],
																	"type": {
																		"type": "reference",
																		"target": {
																			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
																			"qualifiedName": "Promise"
																		},
																		"typeArguments": [
																			{
																				"type": "reference",
																				"target": -1,
																				"name": "T",
																				"refersToTypeParameter": true
																			}
																		],
																		"name": "Promise",
																		"package": "typescript"
																	}
																}
															]
														}
													},
													{
														"type": "reference",
														"target": {
															"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
															"qualifiedName": "Promise"
														},
														"typeArguments": [
															{
																"type": "reference",
																"target": -1,
																"name": "T",
																"refersToTypeParameter": true
															}
														],
														"name": "Promise",
														"package": "typescript"
													}
												]
											}
										},
										{
											"id": 1257,
											"name": "__namedParameters",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../asserts/src/index.ts",
													"qualifiedName": "ThrowsArgs"
												},
												"name": "ThrowsArgs",
												"package": "@tapjs/asserts"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "boolean"
													},
													{
														"type": "reference",
														"target": {
															"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
															"qualifiedName": "Error"
														},
														"name": "Error",
														"package": "typescript"
													}
												]
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.rejects"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.rejects"
							}
						},
						{
							"id": 974,
							"name": "removeAllListeners",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
									"line": 451,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 975,
									"name": "removeAllListeners",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Mostly identical to "
											},
											{
												"kind": "code",
												"text": "`EventEmitter.removeAllListeners`"
											},
											{
												"kind": "text",
												"text": "\n\nIf all 'data' event handlers are removed, and they were the last consumer\n(ie, there are no pipe destinations), then the flow of data will stop\nuntil there is another consumer or "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "Minipass#resume"
											},
											{
												"kind": "text",
												"text": " is explicitly\ncalled."
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
											"line": 451,
											"character": 4
										}
									],
									"typeParameter": [
										{
											"id": 976,
											"name": "Event",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"target": {
														"sourceFileName": "../core/src/test-base.ts",
														"qualifiedName": "TestBaseEvents"
													},
													"name": "TestBaseEvents",
													"package": "@tapjs/core"
												}
											}
										}
									],
									"parameters": [
										{
											"id": 977,
											"name": "ev",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"target": -1,
												"name": "Event",
												"refersToTypeParameter": true
											}
										}
									],
									"type": {
										"type": "reference",
										"target": 565,
										"typeArguments": [
											{
												"type": "reference",
												"target": -1,
												"name": "Ext",
												"refersToTypeParameter": true
											},
											{
												"type": "reference",
												"target": -1,
												"name": "Opts",
												"refersToTypeParameter": true
											}
										],
										"name": "Test",
										"package": "@tapjs/test-built"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.removeAllListeners"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.removeAllListeners"
							}
						},
						{
							"id": 958,
							"name": "removeListener",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
									"line": 433,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 959,
									"name": "removeListener",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Alias for "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "Minipass#off"
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
											"line": 433,
											"character": 4
										}
									],
									"typeParameter": [
										{
											"id": 960,
											"name": "Event",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"target": {
														"sourceFileName": "../core/src/test-base.ts",
														"qualifiedName": "TestBaseEvents"
													},
													"name": "TestBaseEvents",
													"package": "@tapjs/core"
												}
											}
										}
									],
									"parameters": [
										{
											"id": 961,
											"name": "ev",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"target": -1,
												"name": "Event",
												"refersToTypeParameter": true
											}
										},
										{
											"id": 962,
											"name": "handler",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 963,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {
														"isExternal": true
													},
													"sources": [
														{
															"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
															"line": 433,
															"character": 67
														}
													],
													"signatures": [
														{
															"id": 964,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {
																"isExternal": true
															},
															"sources": [
																{
																	"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
																	"line": 433,
																	"character": 67
																}
															],
															"parameters": [
																{
																	"id": 965,
																	"name": "args",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {
																		"isExternal": true,
																		"isRest": true
																	},
																	"type": {
																		"type": "indexedAccess",
																		"indexType": {
																			"type": "reference",
																			"target": -1,
																			"name": "Event",
																			"refersToTypeParameter": true
																		},
																		"objectType": {
																			"type": "reference",
																			"target": {
																				"sourceFileName": "../core/src/test-base.ts",
																				"qualifiedName": "TestBaseEvents"
																			},
																			"name": "TestBaseEvents",
																			"package": "@tapjs/core"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"target": 565,
										"typeArguments": [
											{
												"type": "reference",
												"target": -1,
												"name": "Ext",
												"refersToTypeParameter": true
											},
											{
												"type": "reference",
												"target": -1,
												"name": "Opts",
												"refersToTypeParameter": true
											}
										],
										"name": "Test",
										"package": "@tapjs/test-built"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.removeListener"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.removeListener"
							}
						},
						{
							"id": 1265,
							"name": "resolveMatch",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/asserts/dist/mjs/index.d.ts",
									"line": 201,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1266,
									"name": "resolveMatch",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Test the resolved promise result with "
											},
											{
												"kind": "code",
												"text": "`t.match()`"
											},
											{
												"kind": "text",
												"text": "\n\nResolves to true if it passes, false if the promise rejects or the match\nfails, or the rejection error value if the promise rejects but the\nassertion passes by being marked todo/skip."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/asserts/dist/mjs/index.d.ts",
											"line": 201,
											"character": 4
										}
									],
									"typeParameter": [
										{
											"id": 1267,
											"name": "T",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "unknown"
											},
											"default": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"parameters": [
										{
											"id": 1268,
											"name": "fnOrPromise",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"target": {
															"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
															"qualifiedName": "Promise"
														},
														"typeArguments": [
															{
																"type": "reference",
																"target": -1,
																"name": "T",
																"refersToTypeParameter": true
															}
														],
														"name": "Promise",
														"package": "typescript"
													},
													{
														"type": "reflection",
														"declaration": {
															"id": 1269,
															"name": "__type",
															"variant": "declaration",
															"kind": 65536,
															"flags": {},
															"sources": [
																{
																	"fileName": "src/asserts/dist/mjs/index.d.ts",
																	"line": 201,
																	"character": 65
																}
															],
															"signatures": [
																{
																	"id": 1270,
																	"name": "__type",
																	"variant": "signature",
																	"kind": 4096,
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "src/asserts/dist/mjs/index.d.ts",
																			"line": 201,
																			"character": 65
																		}
																	],
																	"type": {
																		"type": "reference",
																		"target": {
																			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
																			"qualifiedName": "Promise"
																		},
																		"typeArguments": [
																			{
																				"type": "reference",
																				"target": -1,
																				"name": "T",
																				"refersToTypeParameter": true
																			}
																		],
																		"name": "Promise",
																		"package": "typescript"
																	}
																}
															]
														}
													}
												]
											}
										},
										{
											"id": 1271,
											"name": "wanted",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 1272,
											"name": "__namedParameters",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../core/src/index.ts",
													"qualifiedName": "MessageExtra"
												},
												"name": "MessageExtra",
												"package": "@tapjs/core"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.resolveMatch"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.resolveMatch"
							}
						},
						{
							"id": 1435,
							"name": "resolveMatchSnapshot",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/snapshot/dist/mjs/index.d.ts",
									"line": 65,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1436,
									"name": "resolveMatchSnapshot",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"sources": [
										{
											"fileName": "src/snapshot/dist/mjs/index.d.ts",
											"line": 65,
											"character": 4
										}
									],
									"typeParameter": [
										{
											"id": 1437,
											"name": "T",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "unknown"
											},
											"default": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"parameters": [
										{
											"id": 1438,
											"name": "fnOrPromise",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"target": {
															"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
															"qualifiedName": "Promise"
														},
														"typeArguments": [
															{
																"type": "reference",
																"target": -1,
																"name": "T",
																"refersToTypeParameter": true
															}
														],
														"name": "Promise",
														"package": "typescript"
													},
													{
														"type": "reflection",
														"declaration": {
															"id": 1439,
															"name": "__type",
															"variant": "declaration",
															"kind": 65536,
															"flags": {},
															"sources": [
																{
																	"fileName": "src/snapshot/dist/mjs/index.d.ts",
																	"line": 65,
																	"character": 73
																}
															],
															"signatures": [
																{
																	"id": 1440,
																	"name": "__type",
																	"variant": "signature",
																	"kind": 4096,
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "src/snapshot/dist/mjs/index.d.ts",
																			"line": 65,
																			"character": 73
																		}
																	],
																	"type": {
																		"type": "reference",
																		"target": {
																			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
																			"qualifiedName": "Promise"
																		},
																		"typeArguments": [
																			{
																				"type": "reference",
																				"target": -1,
																				"name": "T",
																				"refersToTypeParameter": true
																			}
																		],
																		"name": "Promise",
																		"package": "typescript"
																	}
																}
															]
														}
													}
												]
											}
										},
										{
											"id": 1441,
											"name": "__namedParameters",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../core/src/index.ts",
													"qualifiedName": "MessageExtra"
												},
												"name": "MessageExtra",
												"package": "@tapjs/core"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.resolveMatchSnapshot"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.resolveMatchSnapshot"
							}
						},
						{
							"id": 1258,
							"name": "resolves",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/asserts/dist/mjs/index.d.ts",
									"line": 193,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1259,
									"name": "resolves",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Resolves to 'true' if the promise resolves successfully, 'false' if\nit rejects and fails, or the rejection error if it rejects but the\nfailure is accepted by by being marked todo or skip"
											}
										]
									},
									"sources": [
										{
											"fileName": "src/asserts/dist/mjs/index.d.ts",
											"line": 193,
											"character": 4
										}
									],
									"typeParameter": [
										{
											"id": 1260,
											"name": "T",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "unknown"
											},
											"default": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"parameters": [
										{
											"id": 1261,
											"name": "fnOrPromise",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"target": {
															"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
															"qualifiedName": "Promise"
														},
														"typeArguments": [
															{
																"type": "reference",
																"target": -1,
																"name": "T",
																"refersToTypeParameter": true
															}
														],
														"name": "Promise",
														"package": "typescript"
													},
													{
														"type": "reflection",
														"declaration": {
															"id": 1262,
															"name": "__type",
															"variant": "declaration",
															"kind": 65536,
															"flags": {},
															"sources": [
																{
																	"fileName": "src/asserts/dist/mjs/index.d.ts",
																	"line": 193,
																	"character": 61
																}
															],
															"signatures": [
																{
																	"id": 1263,
																	"name": "__type",
																	"variant": "signature",
																	"kind": 4096,
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "src/asserts/dist/mjs/index.d.ts",
																			"line": 193,
																			"character": 61
																		}
																	],
																	"type": {
																		"type": "reference",
																		"target": {
																			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
																			"qualifiedName": "Promise"
																		},
																		"typeArguments": [
																			{
																				"type": "reference",
																				"target": -1,
																				"name": "T",
																				"refersToTypeParameter": true
																			}
																		],
																		"name": "Promise",
																		"package": "typescript"
																	}
																}
															]
														}
													}
												]
											}
										},
										{
											"id": 1264,
											"name": "__namedParameters",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../core/src/index.ts",
													"qualifiedName": "MessageExtra"
												},
												"name": "MessageExtra",
												"package": "@tapjs/core"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "boolean"
													},
													{
														"type": "reference",
														"target": {
															"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
															"qualifiedName": "Error"
														},
														"name": "Error",
														"package": "typescript"
													}
												]
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.resolves"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.resolves"
							}
						},
						{
							"id": 923,
							"name": "resume",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
									"line": 371,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 924,
									"name": "resume",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Resume the stream if it is currently in a paused state\n\nIf called when there are no pipe destinations or "
											},
											{
												"kind": "code",
												"text": "`data`"
											},
											{
												"kind": "text",
												"text": " event listeners,\nthis will place the stream in a \"discarded\" state, where all data will\nbe thrown away. The discarded state is removed if a pipe destination or\ndata handler is added, if pause() is called, or if any synchronous or\nasynchronous iteration is started."
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
											"line": 371,
											"character": 4
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.resume"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.resume"
							}
						},
						{
							"id": 869,
							"name": "runMain",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/core/dist/mjs/base.d.ts",
									"line": 318,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/base.d.ts#L318"
								}
							],
							"signatures": [
								{
									"id": 870,
									"name": "runMain",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Run the "
											},
											{
												"kind": "code",
												"text": "`main`"
											},
											{
												"kind": "text",
												"text": " test function. Called by "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "TestBase",
												"target": {
													"sourceFileName": "../core/src/test-base.ts",
													"qualifiedName": "TestBase"
												},
												"tsLinkText": ""
											},
											{
												"kind": "text",
												"text": " when\nstarting a subtest. Initializes the TapWrap hook"
											}
										],
										"modifierTags": [
											"@internal"
										]
									},
									"sources": [
										{
											"fileName": "src/core/dist/mjs/base.d.ts",
											"line": 318,
											"character": 4,
											"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/base.d.ts#L318"
										}
									],
									"parameters": [
										{
											"id": 871,
											"name": "cb",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 872,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"sources": [
														{
															"fileName": "src/core/dist/mjs/base.d.ts",
															"line": 318,
															"character": 16,
															"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/base.d.ts#L318"
														}
													],
													"signatures": [
														{
															"id": 873,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {},
															"sources": [
																{
																	"fileName": "src/core/dist/mjs/base.d.ts",
																	"line": 318,
																	"character": 16,
																	"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/base.d.ts#L318"
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.runMain"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.runMain"
							}
						},
						{
							"id": 1123,
							"name": "same",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/asserts/dist/mjs/index.d.ts",
									"line": 61,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1124,
									"name": "same",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Verify that the value is loosely equivalent to the supplied pattern"
											}
										]
									},
									"sources": [
										{
											"fileName": "src/asserts/dist/mjs/index.d.ts",
											"line": 61,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 1125,
											"name": "found",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 1126,
											"name": "wanted",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 1127,
											"name": "__namedParameters",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../core/src/index.ts",
													"qualifiedName": "MessageExtra"
												},
												"name": "MessageExtra",
												"package": "@tapjs/core"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.same"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.same"
							}
						},
						{
							"id": 905,
							"name": "setEncoding",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
									"line": 287,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 906,
									"name": "setEncoding",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [],
										"blockTags": [
											{
												"tag": "@deprecated",
												"content": [
													{
														"kind": "text",
														"text": "- Encoding may only be set at instantiation time"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
											"line": 287,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 907,
											"name": "_enc",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/minipass/src/index.ts",
													"qualifiedName": "Minipass.Encoding"
												},
												"name": "Encoding",
												"package": "minipass",
												"qualifiedName": "Minipass.Encoding"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.setEncoding"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.setEncoding"
							}
						},
						{
							"id": 1049,
							"name": "setMaxListeners",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 561,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 1050,
									"name": "setMaxListeners",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "By default "
											},
											{
												"kind": "code",
												"text": "`EventEmitter`"
											},
											{
												"kind": "text",
												"text": "s will print a warning if more than "
											},
											{
												"kind": "code",
												"text": "`10`"
											},
											{
												"kind": "text",
												"text": " listeners are\nadded for a particular event. This is a useful default that helps finding\nmemory leaks. The "
											},
											{
												"kind": "code",
												"text": "`emitter.setMaxListeners()`"
											},
											{
												"kind": "text",
												"text": " method allows the limit to be\nmodified for this specific "
											},
											{
												"kind": "code",
												"text": "`EventEmitter`"
											},
											{
												"kind": "text",
												"text": " instance. The value can be set to"
											},
											{
												"kind": "code",
												"text": "`Infinity`"
											},
											{
												"kind": "text",
												"text": " (or "
											},
											{
												"kind": "code",
												"text": "`0`"
											},
											{
												"kind": "text",
												"text": ") to indicate an unlimited number of listeners.\n\nReturns a reference to the "
											},
											{
												"kind": "code",
												"text": "`EventEmitter`"
											},
											{
												"kind": "text",
												"text": ", so that calls can be chained."
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v0.3.5"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@types/node/events.d.ts",
											"line": 561,
											"character": 16
										}
									],
									"parameters": [
										{
											"id": 1051,
											"name": "n",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": 565,
										"typeArguments": [
											{
												"type": "reference",
												"target": -1,
												"name": "Ext",
												"refersToTypeParameter": true
											},
											{
												"type": "reference",
												"target": -1,
												"name": "Opts",
												"refersToTypeParameter": true
											}
										],
										"name": "Test",
										"package": "@tapjs/test-built"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.setMaxListeners"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.setMaxListeners"
							}
						},
						{
							"id": 866,
							"name": "setTimeout",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/core/dist/mjs/base.d.ts",
									"line": 300,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/base.d.ts#L300"
								}
							],
							"signatures": [
								{
									"id": 867,
									"name": "setTimeout",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Set the amount of time in milliseconds before this test is considered\na timeout. The time is counted from right now, so for example, repeatedly\ncalling "
											},
											{
												"kind": "code",
												"text": "`t.setTimeout(100)`"
											},
											{
												"kind": "text",
												"text": " can keep it going indefinitely, as long as\nyou call it more often than every 100ms.\n\nCalling "
											},
											{
												"kind": "code",
												"text": "`setTimeout(0)`"
											},
											{
												"kind": "text",
												"text": " will remove the timer and allow the test to run\nindefinitely."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/core/dist/mjs/base.d.ts",
											"line": 300,
											"character": 4,
											"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/base.d.ts#L300"
										}
									],
									"parameters": [
										{
											"id": 868,
											"name": "n",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.setTimeout"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.setTimeout"
							}
						},
						{
							"id": 831,
							"name": "shouldSkipChild",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/core/dist/mjs/test-base.d.ts",
									"line": 321,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/test-base.d.ts#L321"
								}
							],
							"signatures": [
								{
									"id": 832,
									"name": "shouldSkipChild",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Return true if the child test represented by the options object\nshould be skipped.  Extended by the "
											},
											{
												"kind": "code",
												"text": "`@tapjs/filter`"
											},
											{
												"kind": "text",
												"text": " plugin."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/core/dist/mjs/test-base.d.ts",
											"line": 321,
											"character": 4,
											"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/test-base.d.ts#L321"
										}
									],
									"typeParameter": [
										{
											"id": 833,
											"name": "O",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../core/src/base.ts",
													"qualifiedName": "BaseOpts"
												},
												"name": "BaseOpts",
												"package": "@tapjs/core"
											}
										}
									],
									"parameters": [
										{
											"id": 834,
											"name": "extra",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"target": {
															"sourceFileName": "../core/src/test-base.ts",
															"qualifiedName": "TestBaseOpts"
														},
														"name": "TestBaseOpts",
														"package": "@tapjs/core"
													},
													{
														"type": "reference",
														"target": {
															"sourceFileName": "../core/src/base.ts",
															"qualifiedName": "BaseOpts"
														},
														"name": "BaseOpts",
														"package": "@tapjs/core"
													},
													{
														"type": "reference",
														"target": -1,
														"name": "O",
														"refersToTypeParameter": true
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.shouldSkipChild"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.shouldSkipChild"
							}
						},
						{
							"id": 698,
							"name": "skip",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
									"line": 257,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L257"
								},
								{
									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
									"line": 258,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L258"
								},
								{
									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
									"line": 259,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L259"
								},
								{
									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
									"line": 260,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L260"
								}
							],
							"signatures": [
								{
									"id": 699,
									"name": "skip",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Create a subtest which is marked as "
											},
											{
												"kind": "code",
												"text": "`skip`"
											}
										]
									},
									"sources": [
										{
											"fileName": "src/test/test-built/dist/mjs/index.d.ts",
											"line": 257,
											"character": 4,
											"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L257"
										}
									],
									"parameters": [
										{
											"id": 700,
											"name": "name",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 701,
											"name": "extra",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": -1,
												"name": "Opts",
												"refersToTypeParameter": true
											}
										},
										{
											"id": 702,
											"name": "cb",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 703,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"sources": [
														{
															"fileName": "src/test/test-built/dist/mjs/index.d.ts",
															"line": 257,
															"character": 40,
															"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L257"
														}
													],
													"signatures": [
														{
															"id": 704,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {},
															"sources": [
																{
																	"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																	"line": 257,
																	"character": 40,
																	"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L257"
																}
															],
															"parameters": [
																{
																	"id": 705,
																	"name": "t",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {},
																	"type": {
																		"type": "intersection",
																		"types": [
																			{
																				"type": "reference",
																				"target": 565,
																				"typeArguments": [
																					{
																						"type": "reference",
																						"target": -1,
																						"name": "Ext",
																						"refersToTypeParameter": true
																					},
																					{
																						"type": "reference",
																						"target": -1,
																						"name": "Opts",
																						"refersToTypeParameter": true
																					}
																				],
																				"name": "Test",
																				"package": "@tapjs/test-built"
																			},
																			{
																				"type": "reference",
																				"target": -1,
																				"name": "Ext",
																				"refersToTypeParameter": true
																			}
																		]
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../core/src/test-base.ts",
											"qualifiedName": "PromiseWithSubtest"
										},
										"typeArguments": [
											{
												"type": "intersection",
												"types": [
													{
														"type": "reference",
														"target": 565,
														"typeArguments": [
															{
																"type": "reference",
																"target": -1,
																"name": "Ext",
																"refersToTypeParameter": true
															},
															{
																"type": "reference",
																"target": -1,
																"name": "Opts",
																"refersToTypeParameter": true
															}
														],
														"name": "Test",
														"package": "@tapjs/test-built"
													},
													{
														"type": "reference",
														"target": -1,
														"name": "Ext",
														"refersToTypeParameter": true
													}
												]
											}
										],
										"name": "PromiseWithSubtest",
										"package": "@tapjs/core"
									}
								},
								{
									"id": 706,
									"name": "skip",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"sources": [
										{
											"fileName": "src/test/test-built/dist/mjs/index.d.ts",
											"line": 258,
											"character": 4,
											"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L258"
										}
									],
									"parameters": [
										{
											"id": 707,
											"name": "name",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 708,
											"name": "cb",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 709,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"sources": [
														{
															"fileName": "src/test/test-built/dist/mjs/index.d.ts",
															"line": 258,
															"character": 27,
															"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L258"
														}
													],
													"signatures": [
														{
															"id": 710,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {},
															"sources": [
																{
																	"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																	"line": 258,
																	"character": 27,
																	"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L258"
																}
															],
															"parameters": [
																{
																	"id": 711,
																	"name": "t",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {},
																	"type": {
																		"type": "intersection",
																		"types": [
																			{
																				"type": "reference",
																				"target": 565,
																				"typeArguments": [
																					{
																						"type": "reference",
																						"target": -1,
																						"name": "Ext",
																						"refersToTypeParameter": true
																					},
																					{
																						"type": "reference",
																						"target": -1,
																						"name": "Opts",
																						"refersToTypeParameter": true
																					}
																				],
																				"name": "Test",
																				"package": "@tapjs/test-built"
																			},
																			{
																				"type": "reference",
																				"target": -1,
																				"name": "Ext",
																				"refersToTypeParameter": true
																			}
																		]
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../core/src/test-base.ts",
											"qualifiedName": "PromiseWithSubtest"
										},
										"typeArguments": [
											{
												"type": "intersection",
												"types": [
													{
														"type": "reference",
														"target": 565,
														"typeArguments": [
															{
																"type": "reference",
																"target": -1,
																"name": "Ext",
																"refersToTypeParameter": true
															},
															{
																"type": "reference",
																"target": -1,
																"name": "Opts",
																"refersToTypeParameter": true
															}
														],
														"name": "Test",
														"package": "@tapjs/test-built"
													},
													{
														"type": "reference",
														"target": -1,
														"name": "Ext",
														"refersToTypeParameter": true
													}
												]
											}
										],
										"name": "PromiseWithSubtest",
										"package": "@tapjs/core"
									}
								},
								{
									"id": 712,
									"name": "skip",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"sources": [
										{
											"fileName": "src/test/test-built/dist/mjs/index.d.ts",
											"line": 259,
											"character": 4,
											"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L259"
										}
									],
									"parameters": [
										{
											"id": 713,
											"name": "extra",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": -1,
												"name": "Opts",
												"refersToTypeParameter": true
											}
										},
										{
											"id": 714,
											"name": "cb",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 715,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"sources": [
														{
															"fileName": "src/test/test-built/dist/mjs/index.d.ts",
															"line": 259,
															"character": 26,
															"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L259"
														}
													],
													"signatures": [
														{
															"id": 716,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {},
															"sources": [
																{
																	"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																	"line": 259,
																	"character": 26,
																	"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L259"
																}
															],
															"parameters": [
																{
																	"id": 717,
																	"name": "t",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {},
																	"type": {
																		"type": "intersection",
																		"types": [
																			{
																				"type": "reference",
																				"target": 565,
																				"typeArguments": [
																					{
																						"type": "reference",
																						"target": -1,
																						"name": "Ext",
																						"refersToTypeParameter": true
																					},
																					{
																						"type": "reference",
																						"target": -1,
																						"name": "Opts",
																						"refersToTypeParameter": true
																					}
																				],
																				"name": "Test",
																				"package": "@tapjs/test-built"
																			},
																			{
																				"type": "reference",
																				"target": -1,
																				"name": "Ext",
																				"refersToTypeParameter": true
																			}
																		]
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../core/src/test-base.ts",
											"qualifiedName": "PromiseWithSubtest"
										},
										"typeArguments": [
											{
												"type": "intersection",
												"types": [
													{
														"type": "reference",
														"target": 565,
														"typeArguments": [
															{
																"type": "reference",
																"target": -1,
																"name": "Ext",
																"refersToTypeParameter": true
															},
															{
																"type": "reference",
																"target": -1,
																"name": "Opts",
																"refersToTypeParameter": true
															}
														],
														"name": "Test",
														"package": "@tapjs/test-built"
													},
													{
														"type": "reference",
														"target": -1,
														"name": "Ext",
														"refersToTypeParameter": true
													}
												]
											}
										],
										"name": "PromiseWithSubtest",
										"package": "@tapjs/core"
									}
								},
								{
									"id": 718,
									"name": "skip",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"sources": [
										{
											"fileName": "src/test/test-built/dist/mjs/index.d.ts",
											"line": 260,
											"character": 4,
											"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L260"
										}
									],
									"parameters": [
										{
											"id": 719,
											"name": "cb",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 720,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"sources": [
														{
															"fileName": "src/test/test-built/dist/mjs/index.d.ts",
															"line": 260,
															"character": 13,
															"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L260"
														}
													],
													"signatures": [
														{
															"id": 721,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {},
															"sources": [
																{
																	"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																	"line": 260,
																	"character": 13,
																	"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L260"
																}
															],
															"parameters": [
																{
																	"id": 722,
																	"name": "t",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {},
																	"type": {
																		"type": "intersection",
																		"types": [
																			{
																				"type": "reference",
																				"target": 565,
																				"typeArguments": [
																					{
																						"type": "reference",
																						"target": -1,
																						"name": "Ext",
																						"refersToTypeParameter": true
																					},
																					{
																						"type": "reference",
																						"target": -1,
																						"name": "Opts",
																						"refersToTypeParameter": true
																					}
																				],
																				"name": "Test",
																				"package": "@tapjs/test-built"
																			},
																			{
																				"type": "reference",
																				"target": -1,
																				"name": "Ext",
																				"refersToTypeParameter": true
																			}
																		]
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../core/src/test-base.ts",
											"qualifiedName": "PromiseWithSubtest"
										},
										"typeArguments": [
											{
												"type": "intersection",
												"types": [
													{
														"type": "reference",
														"target": 565,
														"typeArguments": [
															{
																"type": "reference",
																"target": -1,
																"name": "Ext",
																"refersToTypeParameter": true
															},
															{
																"type": "reference",
																"target": -1,
																"name": "Opts",
																"refersToTypeParameter": true
															}
														],
														"name": "Test",
														"package": "@tapjs/test-built"
													},
													{
														"type": "reference",
														"target": -1,
														"name": "Ext",
														"refersToTypeParameter": true
													}
												]
											}
										],
										"name": "PromiseWithSubtest",
										"package": "@tapjs/core"
									}
								}
							]
						},
						{
							"id": 1443,
							"name": "spawn",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/spawn/dist/mjs/index.d.ts",
									"line": 19,
									"character": 4
								},
								{
									"fileName": "src/spawn/dist/mjs/index.d.ts",
									"line": 20,
									"character": 4
								},
								{
									"fileName": "src/spawn/dist/mjs/index.d.ts",
									"line": 21,
									"character": 4
								},
								{
									"fileName": "src/spawn/dist/mjs/index.d.ts",
									"line": 22,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1444,
									"name": "spawn",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"sources": [
										{
											"fileName": "src/spawn/dist/mjs/index.d.ts",
											"line": 19,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 1445,
											"name": "cmd",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../spawn/src/index.ts",
											"qualifiedName": "PromiseWithSpawn"
										},
										"name": "PromiseWithSpawn",
										"package": "@tapjs/spawn"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.spawn"
									}
								},
								{
									"id": 1446,
									"name": "spawn",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"sources": [
										{
											"fileName": "src/spawn/dist/mjs/index.d.ts",
											"line": 20,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 1447,
											"name": "cmd",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1448,
											"name": "options",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../spawn/src/index.ts",
													"qualifiedName": "SpawnOpts"
												},
												"name": "SpawnOpts",
												"package": "@tapjs/spawn"
											}
										},
										{
											"id": 1449,
											"name": "name",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../spawn/src/index.ts",
											"qualifiedName": "PromiseWithSpawn"
										},
										"name": "PromiseWithSpawn",
										"package": "@tapjs/spawn"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.spawn"
									}
								},
								{
									"id": 1450,
									"name": "spawn",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"sources": [
										{
											"fileName": "src/spawn/dist/mjs/index.d.ts",
											"line": 21,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 1451,
											"name": "cmd",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1452,
											"name": "args",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										},
										{
											"id": 1453,
											"name": "name",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../spawn/src/index.ts",
											"qualifiedName": "PromiseWithSpawn"
										},
										"name": "PromiseWithSpawn",
										"package": "@tapjs/spawn"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.spawn"
									}
								},
								{
									"id": 1454,
									"name": "spawn",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"sources": [
										{
											"fileName": "src/spawn/dist/mjs/index.d.ts",
											"line": 22,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 1455,
											"name": "cmd",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1456,
											"name": "args",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										},
										{
											"id": 1457,
											"name": "options",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../spawn/src/index.ts",
													"qualifiedName": "SpawnOpts"
												},
												"name": "SpawnOpts",
												"package": "@tapjs/spawn"
											}
										},
										{
											"id": 1458,
											"name": "name",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../spawn/src/index.ts",
											"qualifiedName": "PromiseWithSpawn"
										},
										"name": "PromiseWithSpawn",
										"package": "@tapjs/spawn"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.spawn"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.spawn"
							}
						},
						{
							"id": 1460,
							"name": "stdin",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/stdin/dist/mjs/index.d.ts",
									"line": 6,
									"character": 4
								},
								{
									"fileName": "src/stdin/dist/mjs/index.d.ts",
									"line": 7,
									"character": 4
								},
								{
									"fileName": "src/stdin/dist/mjs/index.d.ts",
									"line": 8,
									"character": 4
								},
								{
									"fileName": "src/stdin/dist/mjs/index.d.ts",
									"line": 9,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1461,
									"name": "stdin",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"sources": [
										{
											"fileName": "src/stdin/dist/mjs/index.d.ts",
											"line": 6,
											"character": 4
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../stdin/src/index.ts",
											"qualifiedName": "PromiseWithStdin"
										},
										"name": "PromiseWithStdin",
										"package": "@tapjs/stdin"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.stdin"
									}
								},
								{
									"id": 1462,
									"name": "stdin",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"sources": [
										{
											"fileName": "src/stdin/dist/mjs/index.d.ts",
											"line": 7,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 1463,
											"name": "name",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../stdin/src/index.ts",
											"qualifiedName": "PromiseWithStdin"
										},
										"name": "PromiseWithStdin",
										"package": "@tapjs/stdin"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.stdin"
									}
								},
								{
									"id": 1464,
									"name": "stdin",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"sources": [
										{
											"fileName": "src/stdin/dist/mjs/index.d.ts",
											"line": 8,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 1465,
											"name": "name",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1466,
											"name": "extra",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../core/src/stdin.ts",
													"qualifiedName": "StdinOpts"
												},
												"name": "StdinOpts",
												"package": "@tapjs/core"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../stdin/src/index.ts",
											"qualifiedName": "PromiseWithStdin"
										},
										"name": "PromiseWithStdin",
										"package": "@tapjs/stdin"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.stdin"
									}
								},
								{
									"id": 1467,
									"name": "stdin",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"sources": [
										{
											"fileName": "src/stdin/dist/mjs/index.d.ts",
											"line": 9,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 1468,
											"name": "extra",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../core/src/stdin.ts",
													"qualifiedName": "StdinOpts"
												},
												"name": "StdinOpts",
												"package": "@tapjs/core"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../stdin/src/index.ts",
											"qualifiedName": "PromiseWithStdin"
										},
										"name": "PromiseWithStdin",
										"package": "@tapjs/stdin"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.stdin"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.stdin"
							}
						},
						{
							"id": 801,
							"name": "stdinOnly",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/core/dist/mjs/test-base.d.ts",
									"line": 281,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/test-base.d.ts#L281"
								}
							],
							"signatures": [
								{
									"id": 802,
									"name": "stdinOnly",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Parse stdin as the only tap stream (ie, not as a child test)\nIf used, then no other subtests or assertions are allowed."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/core/dist/mjs/test-base.d.ts",
											"line": 281,
											"character": 4,
											"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/test-base.d.ts#L281"
										}
									],
									"typeParameter": [
										{
											"id": 803,
											"name": "T",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../core/src/base.ts",
													"qualifiedName": "BaseOpts"
												},
												"name": "BaseOpts",
												"package": "@tapjs/core"
											}
										}
									],
									"parameters": [
										{
											"id": 804,
											"name": "extra",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intersection",
												"types": [
													{
														"type": "reference",
														"target": -1,
														"name": "T",
														"refersToTypeParameter": true
													},
													{
														"type": "reflection",
														"declaration": {
															"id": 805,
															"name": "__type",
															"variant": "declaration",
															"kind": 65536,
															"flags": {},
															"children": [
																{
																	"id": 806,
																	"name": "tapStream",
																	"variant": "declaration",
																	"kind": 1024,
																	"flags": {
																		"isOptional": true
																	},
																	"sources": [
																		{
																			"fileName": "src/core/dist/mjs/test-base.d.ts",
																			"line": 282,
																			"character": 8,
																			"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/test-base.d.ts#L282"
																		}
																	],
																	"type": {
																		"type": "union",
																		"types": [
																			{
																				"type": "reference",
																				"target": {
																					"sourceFileName": "../../node_modules/@types/node/stream.d.ts",
																					"qualifiedName": "internal.Readable"
																				},
																				"name": "Readable",
																				"package": "@types/node",
																				"qualifiedName": "internal.Readable"
																			},
																			{
																				"type": "reference",
																				"target": {
																					"sourceFileName": "../../node_modules/minipass/src/index.ts",
																					"qualifiedName": "Minipass"
																				},
																				"typeArguments": [
																					{
																						"type": "union",
																						"types": [
																							{
																								"type": "intrinsic",
																								"name": "string"
																							},
																							{
																								"type": "reference",
																								"target": {
																									"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
																									"qualifiedName": "__global.Buffer"
																								},
																								"name": "Buffer",
																								"package": "@types/node",
																								"qualifiedName": "__global.Buffer"
																							}
																						]
																					},
																					{
																						"type": "reference",
																						"target": {
																							"sourceFileName": "../../node_modules/minipass/src/index.ts",
																							"qualifiedName": "Minipass.ContiguousData"
																						},
																						"name": "ContiguousData",
																						"package": "minipass",
																						"qualifiedName": "Minipass.ContiguousData"
																					},
																					{
																						"type": "reference",
																						"target": {
																							"sourceFileName": "../../node_modules/minipass/src/index.ts",
																							"qualifiedName": "Minipass.Events"
																						},
																						"typeArguments": [
																							{
																								"type": "union",
																								"types": [
																									{
																										"type": "intrinsic",
																										"name": "string"
																									},
																									{
																										"type": "reference",
																										"target": {
																											"sourceFileName": "../../node_modules/@types/node/buffer.d.ts",
																											"qualifiedName": "__global.Buffer"
																										},
																										"name": "Buffer",
																										"package": "@types/node",
																										"qualifiedName": "__global.Buffer"
																									}
																								]
																							}
																						],
																						"name": "Events",
																						"package": "minipass",
																						"qualifiedName": "Minipass.Events"
																					}
																				],
																				"name": "Minipass",
																				"package": "minipass"
																			}
																		]
																	}
																}
															],
															"groups": [
																{
																	"title": "Properties",
																	"children": [
																		806
																	]
																}
															],
															"sources": [
																{
																	"fileName": "src/core/dist/mjs/test-base.d.ts",
																	"line": 281,
																	"character": 46,
																	"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/test-base.d.ts#L281"
																}
															]
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.stdinOnly"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.stdinOnly"
							}
						},
						{
							"id": 1139,
							"name": "strictNotSame",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/asserts/dist/mjs/index.d.ts",
									"line": 74,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1140,
									"name": "strictNotSame",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Verify that the value is not strictly equivalent to the supplied\npattern object"
											}
										]
									},
									"sources": [
										{
											"fileName": "src/asserts/dist/mjs/index.d.ts",
											"line": 74,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 1141,
											"name": "found",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 1142,
											"name": "doNotWant",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 1143,
											"name": "__namedParameters",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../core/src/index.ts",
													"qualifiedName": "MessageExtra"
												},
												"name": "MessageExtra",
												"package": "@tapjs/core"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.strictNotSame"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.strictNotSame"
							}
						},
						{
							"id": 1133,
							"name": "strictSame",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/asserts/dist/mjs/index.d.ts",
									"line": 69,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1134,
									"name": "strictSame",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Verify that the value is strictly equivalent to the supplied pattern"
											}
										]
									},
									"sources": [
										{
											"fileName": "src/asserts/dist/mjs/index.d.ts",
											"line": 69,
											"character": 4
										}
									],
									"typeParameter": [
										{
											"id": 1135,
											"name": "T",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "unknown"
											}
										}
									],
									"parameters": [
										{
											"id": 1136,
											"name": "found",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 1137,
											"name": "wanted",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": -1,
												"name": "T",
												"refersToTypeParameter": true
											}
										},
										{
											"id": 1138,
											"name": "__namedParameters",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../core/src/index.ts",
													"qualifiedName": "MessageExtra"
												},
												"name": "MessageExtra",
												"package": "@tapjs/core"
											}
										}
									],
									"type": {
										"type": "predicate",
										"name": "found",
										"asserts": false,
										"targetType": {
											"type": "reference",
											"target": -1,
											"name": "T",
											"refersToTypeParameter": true
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.strictSame"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.strictSame"
							}
						},
						{
							"id": 807,
							"name": "sub",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/core/dist/mjs/test-base.d.ts",
									"line": 292,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/test-base.d.ts#L292"
								}
							],
							"signatures": [
								{
									"id": 808,
									"name": "sub",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Mount a subtest, using this Test object as a harness.\nExposed so that it can be used by some builtin plugins, but perhaps\nthe least convenient way imaginable to create subtests. Just use\n"
											},
											{
												"kind": "code",
												"text": "`t.test()`"
											},
											{
												"kind": "text",
												"text": " to do that, it's much easier."
											}
										],
										"modifierTags": [
											"@internal"
										]
									},
									"sources": [
										{
											"fileName": "src/core/dist/mjs/test-base.d.ts",
											"line": 292,
											"character": 4,
											"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/test-base.d.ts#L292"
										}
									],
									"typeParameter": [
										{
											"id": 809,
											"name": "T",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../core/src/base.ts",
													"qualifiedName": "Base"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": {
															"sourceFileName": "../core/src/base.ts",
															"qualifiedName": "TapBaseEvents"
														},
														"name": "TapBaseEvents",
														"package": "@tapjs/core"
													},
													{
														"type": "reference",
														"target": -1,
														"name": "T",
														"refersToTypeParameter": true
													}
												],
												"name": "Base",
												"package": "@tapjs/core"
											}
										},
										{
											"id": 810,
											"name": "O",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../core/src/base.ts",
													"qualifiedName": "BaseOpts"
												},
												"name": "BaseOpts",
												"package": "@tapjs/core"
											}
										}
									],
									"parameters": [
										{
											"id": 811,
											"name": "Class",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 812,
													"name": "__type",
													"variant": "declaration",
													"kind": 512,
													"flags": {},
													"sources": [
														{
															"fileName": "src/core/dist/mjs/test-base.d.ts",
															"line": 292,
															"character": 51,
															"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/test-base.d.ts#L292"
														}
													],
													"signatures": [
														{
															"id": 813,
															"name": "new Class",
															"variant": "signature",
															"kind": 16384,
															"flags": {},
															"sources": [
																{
																	"fileName": "src/core/dist/mjs/test-base.d.ts",
																	"line": 293,
																	"character": 8,
																	"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/test-base.d.ts#L293"
																}
															],
															"parameters": [
																{
																	"id": 814,
																	"name": "options",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"target": -1,
																		"name": "O",
																		"refersToTypeParameter": true
																	}
																}
															],
															"type": {
																"type": "reference",
																"target": -1,
																"name": "T",
																"refersToTypeParameter": true
															}
														}
													]
												}
											}
										},
										{
											"id": 815,
											"name": "extra",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "reference",
														"target": {
															"sourceFileName": "../core/src/test-base.ts",
															"qualifiedName": "TestBaseOpts"
														},
														"name": "TestBaseOpts",
														"package": "@tapjs/core"
													},
													{
														"type": "reference",
														"target": -1,
														"name": "O",
														"refersToTypeParameter": true
													}
												]
											}
										},
										{
											"id": 816,
											"name": "caller",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 817,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"sources": [
														{
															"fileName": "src/core/dist/mjs/test-base.d.ts",
															"line": 294,
															"character": 52,
															"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/test-base.d.ts#L294"
														}
													],
													"signatures": [
														{
															"id": 818,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {},
															"sources": [
																{
																	"fileName": "src/core/dist/mjs/test-base.d.ts",
																	"line": 294,
																	"character": 52,
																	"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/test-base.d.ts#L294"
																}
															],
															"parameters": [
																{
																	"id": 819,
																	"name": "a",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "unknown"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../core/src/test-base.ts",
											"qualifiedName": "PromiseWithSubtest"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": -1,
												"name": "T",
												"refersToTypeParameter": true
											}
										],
										"name": "PromiseWithSubtest",
										"package": "@tapjs/core"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.sub"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.sub"
							}
						},
						{
							"id": 1081,
							"name": "teardown",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/after/dist/mjs/index.d.ts",
									"line": 17,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/after/dist/mjs/index.d.ts#L17"
								}
							],
							"signatures": [
								{
									"id": 1082,
									"name": "teardown",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Alias for "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "After#after"
											}
										]
									},
									"sources": [
										{
											"fileName": "src/after/dist/mjs/index.d.ts",
											"line": 17,
											"character": 4,
											"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/after/dist/mjs/index.d.ts#L17"
										}
									],
									"parameters": [
										{
											"id": 1083,
											"name": "fn",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 1084,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"sources": [
														{
															"fileName": "src/after/dist/mjs/index.d.ts",
															"line": 17,
															"character": 17,
															"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/after/dist/mjs/index.d.ts#L17"
														}
													],
													"signatures": [
														{
															"id": 1085,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {},
															"sources": [
																{
																	"fileName": "src/after/dist/mjs/index.d.ts",
																	"line": 17,
																	"character": 17,
																	"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/after/dist/mjs/index.d.ts#L17"
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.teardown"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.teardown"
							}
						},
						{
							"id": 648,
							"name": "test",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
									"line": 243,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L243"
								},
								{
									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
									"line": 244,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L244"
								},
								{
									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
									"line": 245,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L245"
								},
								{
									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
									"line": 246,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L246"
								}
							],
							"signatures": [
								{
									"id": 649,
									"name": "test",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Create a subtest"
											}
										]
									},
									"sources": [
										{
											"fileName": "src/test/test-built/dist/mjs/index.d.ts",
											"line": 243,
											"character": 4,
											"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L243"
										}
									],
									"parameters": [
										{
											"id": 650,
											"name": "name",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 651,
											"name": "extra",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": -1,
												"name": "Opts",
												"refersToTypeParameter": true
											}
										},
										{
											"id": 652,
											"name": "cb",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 653,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"sources": [
														{
															"fileName": "src/test/test-built/dist/mjs/index.d.ts",
															"line": 243,
															"character": 40,
															"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L243"
														}
													],
													"signatures": [
														{
															"id": 654,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {},
															"sources": [
																{
																	"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																	"line": 243,
																	"character": 40,
																	"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L243"
																}
															],
															"parameters": [
																{
																	"id": 655,
																	"name": "t",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {},
																	"type": {
																		"type": "intersection",
																		"types": [
																			{
																				"type": "reference",
																				"target": 565,
																				"typeArguments": [
																					{
																						"type": "reference",
																						"target": -1,
																						"name": "Ext",
																						"refersToTypeParameter": true
																					},
																					{
																						"type": "reference",
																						"target": -1,
																						"name": "Opts",
																						"refersToTypeParameter": true
																					}
																				],
																				"name": "Test",
																				"package": "@tapjs/test-built"
																			},
																			{
																				"type": "reference",
																				"target": -1,
																				"name": "Ext",
																				"refersToTypeParameter": true
																			}
																		]
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../core/src/test-base.ts",
											"qualifiedName": "PromiseWithSubtest"
										},
										"typeArguments": [
											{
												"type": "intersection",
												"types": [
													{
														"type": "reference",
														"target": 565,
														"typeArguments": [
															{
																"type": "reference",
																"target": -1,
																"name": "Ext",
																"refersToTypeParameter": true
															},
															{
																"type": "reference",
																"target": -1,
																"name": "Opts",
																"refersToTypeParameter": true
															}
														],
														"name": "Test",
														"package": "@tapjs/test-built"
													},
													{
														"type": "reference",
														"target": -1,
														"name": "Ext",
														"refersToTypeParameter": true
													}
												]
											}
										],
										"name": "PromiseWithSubtest",
										"package": "@tapjs/core"
									}
								},
								{
									"id": 656,
									"name": "test",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"sources": [
										{
											"fileName": "src/test/test-built/dist/mjs/index.d.ts",
											"line": 244,
											"character": 4,
											"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L244"
										}
									],
									"parameters": [
										{
											"id": 657,
											"name": "name",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 658,
											"name": "cb",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 659,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"sources": [
														{
															"fileName": "src/test/test-built/dist/mjs/index.d.ts",
															"line": 244,
															"character": 27,
															"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L244"
														}
													],
													"signatures": [
														{
															"id": 660,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {},
															"sources": [
																{
																	"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																	"line": 244,
																	"character": 27,
																	"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L244"
																}
															],
															"parameters": [
																{
																	"id": 661,
																	"name": "t",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {},
																	"type": {
																		"type": "intersection",
																		"types": [
																			{
																				"type": "reference",
																				"target": 565,
																				"typeArguments": [
																					{
																						"type": "reference",
																						"target": -1,
																						"name": "Ext",
																						"refersToTypeParameter": true
																					},
																					{
																						"type": "reference",
																						"target": -1,
																						"name": "Opts",
																						"refersToTypeParameter": true
																					}
																				],
																				"name": "Test",
																				"package": "@tapjs/test-built"
																			},
																			{
																				"type": "reference",
																				"target": -1,
																				"name": "Ext",
																				"refersToTypeParameter": true
																			}
																		]
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../core/src/test-base.ts",
											"qualifiedName": "PromiseWithSubtest"
										},
										"typeArguments": [
											{
												"type": "intersection",
												"types": [
													{
														"type": "reference",
														"target": 565,
														"typeArguments": [
															{
																"type": "reference",
																"target": -1,
																"name": "Ext",
																"refersToTypeParameter": true
															},
															{
																"type": "reference",
																"target": -1,
																"name": "Opts",
																"refersToTypeParameter": true
															}
														],
														"name": "Test",
														"package": "@tapjs/test-built"
													},
													{
														"type": "reference",
														"target": -1,
														"name": "Ext",
														"refersToTypeParameter": true
													}
												]
											}
										],
										"name": "PromiseWithSubtest",
										"package": "@tapjs/core"
									}
								},
								{
									"id": 662,
									"name": "test",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"sources": [
										{
											"fileName": "src/test/test-built/dist/mjs/index.d.ts",
											"line": 245,
											"character": 4,
											"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L245"
										}
									],
									"parameters": [
										{
											"id": 663,
											"name": "extra",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": -1,
												"name": "Opts",
												"refersToTypeParameter": true
											}
										},
										{
											"id": 664,
											"name": "cb",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 665,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"sources": [
														{
															"fileName": "src/test/test-built/dist/mjs/index.d.ts",
															"line": 245,
															"character": 26,
															"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L245"
														}
													],
													"signatures": [
														{
															"id": 666,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {},
															"sources": [
																{
																	"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																	"line": 245,
																	"character": 26,
																	"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L245"
																}
															],
															"parameters": [
																{
																	"id": 667,
																	"name": "t",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {},
																	"type": {
																		"type": "intersection",
																		"types": [
																			{
																				"type": "reference",
																				"target": 565,
																				"typeArguments": [
																					{
																						"type": "reference",
																						"target": -1,
																						"name": "Ext",
																						"refersToTypeParameter": true
																					},
																					{
																						"type": "reference",
																						"target": -1,
																						"name": "Opts",
																						"refersToTypeParameter": true
																					}
																				],
																				"name": "Test",
																				"package": "@tapjs/test-built"
																			},
																			{
																				"type": "reference",
																				"target": -1,
																				"name": "Ext",
																				"refersToTypeParameter": true
																			}
																		]
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../core/src/test-base.ts",
											"qualifiedName": "PromiseWithSubtest"
										},
										"typeArguments": [
											{
												"type": "intersection",
												"types": [
													{
														"type": "reference",
														"target": 565,
														"typeArguments": [
															{
																"type": "reference",
																"target": -1,
																"name": "Ext",
																"refersToTypeParameter": true
															},
															{
																"type": "reference",
																"target": -1,
																"name": "Opts",
																"refersToTypeParameter": true
															}
														],
														"name": "Test",
														"package": "@tapjs/test-built"
													},
													{
														"type": "reference",
														"target": -1,
														"name": "Ext",
														"refersToTypeParameter": true
													}
												]
											}
										],
										"name": "PromiseWithSubtest",
										"package": "@tapjs/core"
									}
								},
								{
									"id": 668,
									"name": "test",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"sources": [
										{
											"fileName": "src/test/test-built/dist/mjs/index.d.ts",
											"line": 246,
											"character": 4,
											"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L246"
										}
									],
									"parameters": [
										{
											"id": 669,
											"name": "cb",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 670,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"sources": [
														{
															"fileName": "src/test/test-built/dist/mjs/index.d.ts",
															"line": 246,
															"character": 13,
															"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L246"
														}
													],
													"signatures": [
														{
															"id": 671,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {},
															"sources": [
																{
																	"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																	"line": 246,
																	"character": 13,
																	"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L246"
																}
															],
															"parameters": [
																{
																	"id": 672,
																	"name": "t",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {},
																	"type": {
																		"type": "intersection",
																		"types": [
																			{
																				"type": "reference",
																				"target": 565,
																				"typeArguments": [
																					{
																						"type": "reference",
																						"target": -1,
																						"name": "Ext",
																						"refersToTypeParameter": true
																					},
																					{
																						"type": "reference",
																						"target": -1,
																						"name": "Opts",
																						"refersToTypeParameter": true
																					}
																				],
																				"name": "Test",
																				"package": "@tapjs/test-built"
																			},
																			{
																				"type": "reference",
																				"target": -1,
																				"name": "Ext",
																				"refersToTypeParameter": true
																			}
																		]
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../core/src/test-base.ts",
											"qualifiedName": "PromiseWithSubtest"
										},
										"typeArguments": [
											{
												"type": "intersection",
												"types": [
													{
														"type": "reference",
														"target": 565,
														"typeArguments": [
															{
																"type": "reference",
																"target": -1,
																"name": "Ext",
																"refersToTypeParameter": true
															},
															{
																"type": "reference",
																"target": -1,
																"name": "Opts",
																"refersToTypeParameter": true
															}
														],
														"name": "Test",
														"package": "@tapjs/test-built"
													},
													{
														"type": "reference",
														"target": -1,
														"name": "Ext",
														"refersToTypeParameter": true
													}
												]
											}
										],
										"name": "PromiseWithSubtest",
										"package": "@tapjs/core"
									}
								}
							]
						},
						{
							"id": 1323,
							"name": "testdir",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/fixture/dist/mjs/index.d.ts",
									"line": 21,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1324,
									"name": "testdir",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"sources": [
										{
											"fileName": "src/fixture/dist/mjs/index.d.ts",
											"line": 21,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 1325,
											"name": "content",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../fixture/src/fixture.ts",
													"qualifiedName": "FixtureDirContent"
												},
												"name": "FixtureDirContent",
												"package": "@tapjs/fixture"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.testdir"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.testdir"
							}
						},
						{
							"id": 820,
							"name": "threw",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/core/dist/mjs/test-base.d.ts",
									"line": 303,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/test-base.d.ts#L303"
								}
							],
							"signatures": [
								{
									"id": 821,
									"name": "threw",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Method called when an unrecoverable error is encountered in a test.\n\nTypically, in tests you would not call this, you'd just actually throw\nan error."
											}
										],
										"modifierTags": [
											"@internal"
										]
									},
									"sources": [
										{
											"fileName": "src/core/dist/mjs/test-base.d.ts",
											"line": 303,
											"character": 4,
											"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/test-base.d.ts#L303"
										}
									],
									"parameters": [
										{
											"id": 822,
											"name": "er",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 823,
											"name": "extra",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../core/src/index.ts",
													"qualifiedName": "Extra"
												},
												"name": "Extra",
												"package": "@tapjs/core"
											}
										},
										{
											"id": 824,
											"name": "proxy",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../core/src/index.ts",
													"qualifiedName": "Extra"
												},
												"name": "Extra",
												"package": "@tapjs/core"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.threw"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.threw"
							}
						},
						{
							"id": 1239,
							"name": "throws",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/asserts/dist/mjs/index.d.ts",
									"line": 175,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1240,
									"name": "throws",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Verify that the function throws an error.\nThrown error is tested against the "
											},
											{
												"kind": "code",
												"text": "`wanted`"
											},
											{
												"kind": "text",
												"text": " param if provided, using\n"
											},
											{
												"kind": "code",
												"text": "`t.match()`"
											},
											{
												"kind": "text",
												"text": ".\n\nReturns false on failure, or the error object thrown on success"
											}
										]
									},
									"sources": [
										{
											"fileName": "src/asserts/dist/mjs/index.d.ts",
											"line": 175,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 1241,
											"name": "fn",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"target": {
															"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
															"qualifiedName": "Function"
														},
														"name": "Function",
														"package": "typescript"
													},
													{
														"type": "reflection",
														"declaration": {
															"id": 1242,
															"name": "__type",
															"variant": "declaration",
															"kind": 65536,
															"flags": {},
															"sources": [
																{
																	"fileName": "src/asserts/dist/mjs/index.d.ts",
																	"line": 175,
																	"character": 27
																}
															],
															"signatures": [
																{
																	"id": 1243,
																	"name": "__type",
																	"variant": "signature",
																	"kind": 4096,
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "src/asserts/dist/mjs/index.d.ts",
																			"line": 175,
																			"character": 27
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																}
															]
														}
													}
												]
											}
										},
										{
											"id": 1244,
											"name": "__namedParameters",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../asserts/src/index.ts",
													"qualifiedName": "ThrowsArgs"
												},
												"name": "ThrowsArgs",
												"package": "@tapjs/asserts"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "boolean"
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "Error"
												},
												"name": "Error",
												"package": "typescript"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.throws"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.throws"
							}
						},
						{
							"id": 757,
							"name": "timeout",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/core/dist/mjs/test-base.d.ts",
									"line": 199,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/test-base.d.ts#L199"
								}
							],
							"signatures": [
								{
									"id": 758,
									"name": "timeout",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Called when the test times out.\nOptions are passed as diagnostics to the threw() method"
											}
										]
									},
									"sources": [
										{
											"fileName": "src/core/dist/mjs/test-base.d.ts",
											"line": 199,
											"character": 4,
											"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/test-base.d.ts#L199"
										}
									],
									"parameters": [
										{
											"id": 759,
											"name": "options",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intersection",
												"types": [
													{
														"type": "reference",
														"target": {
															"sourceFileName": "../core/src/index.ts",
															"qualifiedName": "Extra"
														},
														"name": "Extra",
														"package": "@tapjs/core"
													},
													{
														"type": "reflection",
														"declaration": {
															"id": 760,
															"name": "__type",
															"variant": "declaration",
															"kind": 65536,
															"flags": {},
															"children": [
																{
																	"id": 761,
																	"name": "expired",
																	"variant": "declaration",
																	"kind": 1024,
																	"flags": {
																		"isOptional": true
																	},
																	"sources": [
																		{
																			"fileName": "src/core/dist/mjs/test-base.d.ts",
																			"line": 200,
																			"character": 8,
																			"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/test-base.d.ts#L200"
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"groups": [
																{
																	"title": "Properties",
																	"children": [
																		761
																	]
																}
															],
															"sources": [
																{
																	"fileName": "src/core/dist/mjs/test-base.d.ts",
																	"line": 199,
																	"character": 30,
																	"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/test-base.d.ts#L199"
																}
															]
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.timeout"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.timeout"
							}
						},
						{
							"id": 673,
							"name": "todo",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
									"line": 250,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L250"
								},
								{
									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
									"line": 251,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L251"
								},
								{
									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
									"line": 252,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L252"
								},
								{
									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
									"line": 253,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L253"
								}
							],
							"signatures": [
								{
									"id": 674,
									"name": "todo",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Create a subtest which is marked as "
											},
											{
												"kind": "code",
												"text": "`todo`"
											}
										]
									},
									"sources": [
										{
											"fileName": "src/test/test-built/dist/mjs/index.d.ts",
											"line": 250,
											"character": 4,
											"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L250"
										}
									],
									"parameters": [
										{
											"id": 675,
											"name": "name",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 676,
											"name": "extra",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": -1,
												"name": "Opts",
												"refersToTypeParameter": true
											}
										},
										{
											"id": 677,
											"name": "cb",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 678,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"sources": [
														{
															"fileName": "src/test/test-built/dist/mjs/index.d.ts",
															"line": 250,
															"character": 40,
															"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L250"
														}
													],
													"signatures": [
														{
															"id": 679,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {},
															"sources": [
																{
																	"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																	"line": 250,
																	"character": 40,
																	"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L250"
																}
															],
															"parameters": [
																{
																	"id": 680,
																	"name": "t",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {},
																	"type": {
																		"type": "intersection",
																		"types": [
																			{
																				"type": "reference",
																				"target": 565,
																				"typeArguments": [
																					{
																						"type": "reference",
																						"target": -1,
																						"name": "Ext",
																						"refersToTypeParameter": true
																					},
																					{
																						"type": "reference",
																						"target": -1,
																						"name": "Opts",
																						"refersToTypeParameter": true
																					}
																				],
																				"name": "Test",
																				"package": "@tapjs/test-built"
																			},
																			{
																				"type": "reference",
																				"target": -1,
																				"name": "Ext",
																				"refersToTypeParameter": true
																			}
																		]
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../core/src/test-base.ts",
											"qualifiedName": "PromiseWithSubtest"
										},
										"typeArguments": [
											{
												"type": "intersection",
												"types": [
													{
														"type": "reference",
														"target": 565,
														"typeArguments": [
															{
																"type": "reference",
																"target": -1,
																"name": "Ext",
																"refersToTypeParameter": true
															},
															{
																"type": "reference",
																"target": -1,
																"name": "Opts",
																"refersToTypeParameter": true
															}
														],
														"name": "Test",
														"package": "@tapjs/test-built"
													},
													{
														"type": "reference",
														"target": -1,
														"name": "Ext",
														"refersToTypeParameter": true
													}
												]
											}
										],
										"name": "PromiseWithSubtest",
										"package": "@tapjs/core"
									}
								},
								{
									"id": 681,
									"name": "todo",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"sources": [
										{
											"fileName": "src/test/test-built/dist/mjs/index.d.ts",
											"line": 251,
											"character": 4,
											"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L251"
										}
									],
									"parameters": [
										{
											"id": 682,
											"name": "name",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 683,
											"name": "cb",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 684,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"sources": [
														{
															"fileName": "src/test/test-built/dist/mjs/index.d.ts",
															"line": 251,
															"character": 27,
															"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L251"
														}
													],
													"signatures": [
														{
															"id": 685,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {},
															"sources": [
																{
																	"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																	"line": 251,
																	"character": 27,
																	"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L251"
																}
															],
															"parameters": [
																{
																	"id": 686,
																	"name": "t",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {},
																	"type": {
																		"type": "intersection",
																		"types": [
																			{
																				"type": "reference",
																				"target": 565,
																				"typeArguments": [
																					{
																						"type": "reference",
																						"target": -1,
																						"name": "Ext",
																						"refersToTypeParameter": true
																					},
																					{
																						"type": "reference",
																						"target": -1,
																						"name": "Opts",
																						"refersToTypeParameter": true
																					}
																				],
																				"name": "Test",
																				"package": "@tapjs/test-built"
																			},
																			{
																				"type": "reference",
																				"target": -1,
																				"name": "Ext",
																				"refersToTypeParameter": true
																			}
																		]
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../core/src/test-base.ts",
											"qualifiedName": "PromiseWithSubtest"
										},
										"typeArguments": [
											{
												"type": "intersection",
												"types": [
													{
														"type": "reference",
														"target": 565,
														"typeArguments": [
															{
																"type": "reference",
																"target": -1,
																"name": "Ext",
																"refersToTypeParameter": true
															},
															{
																"type": "reference",
																"target": -1,
																"name": "Opts",
																"refersToTypeParameter": true
															}
														],
														"name": "Test",
														"package": "@tapjs/test-built"
													},
													{
														"type": "reference",
														"target": -1,
														"name": "Ext",
														"refersToTypeParameter": true
													}
												]
											}
										],
										"name": "PromiseWithSubtest",
										"package": "@tapjs/core"
									}
								},
								{
									"id": 687,
									"name": "todo",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"sources": [
										{
											"fileName": "src/test/test-built/dist/mjs/index.d.ts",
											"line": 252,
											"character": 4,
											"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L252"
										}
									],
									"parameters": [
										{
											"id": 688,
											"name": "extra",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": -1,
												"name": "Opts",
												"refersToTypeParameter": true
											}
										},
										{
											"id": 689,
											"name": "cb",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 690,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"sources": [
														{
															"fileName": "src/test/test-built/dist/mjs/index.d.ts",
															"line": 252,
															"character": 26,
															"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L252"
														}
													],
													"signatures": [
														{
															"id": 691,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {},
															"sources": [
																{
																	"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																	"line": 252,
																	"character": 26,
																	"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L252"
																}
															],
															"parameters": [
																{
																	"id": 692,
																	"name": "t",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {},
																	"type": {
																		"type": "intersection",
																		"types": [
																			{
																				"type": "reference",
																				"target": 565,
																				"typeArguments": [
																					{
																						"type": "reference",
																						"target": -1,
																						"name": "Ext",
																						"refersToTypeParameter": true
																					},
																					{
																						"type": "reference",
																						"target": -1,
																						"name": "Opts",
																						"refersToTypeParameter": true
																					}
																				],
																				"name": "Test",
																				"package": "@tapjs/test-built"
																			},
																			{
																				"type": "reference",
																				"target": -1,
																				"name": "Ext",
																				"refersToTypeParameter": true
																			}
																		]
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../core/src/test-base.ts",
											"qualifiedName": "PromiseWithSubtest"
										},
										"typeArguments": [
											{
												"type": "intersection",
												"types": [
													{
														"type": "reference",
														"target": 565,
														"typeArguments": [
															{
																"type": "reference",
																"target": -1,
																"name": "Ext",
																"refersToTypeParameter": true
															},
															{
																"type": "reference",
																"target": -1,
																"name": "Opts",
																"refersToTypeParameter": true
															}
														],
														"name": "Test",
														"package": "@tapjs/test-built"
													},
													{
														"type": "reference",
														"target": -1,
														"name": "Ext",
														"refersToTypeParameter": true
													}
												]
											}
										],
										"name": "PromiseWithSubtest",
										"package": "@tapjs/core"
									}
								},
								{
									"id": 693,
									"name": "todo",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"sources": [
										{
											"fileName": "src/test/test-built/dist/mjs/index.d.ts",
											"line": 253,
											"character": 4,
											"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L253"
										}
									],
									"parameters": [
										{
											"id": 694,
											"name": "cb",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 695,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"sources": [
														{
															"fileName": "src/test/test-built/dist/mjs/index.d.ts",
															"line": 253,
															"character": 13,
															"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L253"
														}
													],
													"signatures": [
														{
															"id": 696,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {},
															"sources": [
																{
																	"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																	"line": 253,
																	"character": 13,
																	"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L253"
																}
															],
															"parameters": [
																{
																	"id": 697,
																	"name": "t",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {},
																	"type": {
																		"type": "intersection",
																		"types": [
																			{
																				"type": "reference",
																				"target": 565,
																				"typeArguments": [
																					{
																						"type": "reference",
																						"target": -1,
																						"name": "Ext",
																						"refersToTypeParameter": true
																					},
																					{
																						"type": "reference",
																						"target": -1,
																						"name": "Opts",
																						"refersToTypeParameter": true
																					}
																				],
																				"name": "Test",
																				"package": "@tapjs/test-built"
																			},
																			{
																				"type": "reference",
																				"target": -1,
																				"name": "Ext",
																				"refersToTypeParameter": true
																			}
																		]
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../core/src/test-base.ts",
											"qualifiedName": "PromiseWithSubtest"
										},
										"typeArguments": [
											{
												"type": "intersection",
												"types": [
													{
														"type": "reference",
														"target": 565,
														"typeArguments": [
															{
																"type": "reference",
																"target": -1,
																"name": "Ext",
																"refersToTypeParameter": true
															},
															{
																"type": "reference",
																"target": -1,
																"name": "Opts",
																"refersToTypeParameter": true
															}
														],
														"name": "Test",
														"package": "@tapjs/test-built"
													},
													{
														"type": "reference",
														"target": -1,
														"name": "Ext",
														"refersToTypeParameter": true
													}
												]
											}
										],
										"name": "PromiseWithSubtest",
										"package": "@tapjs/core"
									}
								}
							]
						},
						{
							"id": 1118,
							"name": "type",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/asserts/dist/mjs/index.d.ts",
									"line": 57,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1119,
									"name": "type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Verify that the value is of the type specified\nType can be either a string, or a constructor.\n\nIf a string, then it can match either the "
											},
											{
												"kind": "code",
												"text": "`typeof`"
											},
											{
												"kind": "text",
												"text": " result\nor 'null' for "
											},
											{
												"kind": "code",
												"text": "`null`"
											},
											{
												"kind": "text",
												"text": " values, or the "
											},
											{
												"kind": "code",
												"text": "`name`"
											},
											{
												"kind": "text",
												"text": " property of the\nobject's constructor."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/asserts/dist/mjs/index.d.ts",
											"line": 57,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 1120,
											"name": "obj",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 1121,
											"name": "klass",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "reference",
														"target": {
															"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
															"qualifiedName": "Function"
														},
														"name": "Function",
														"package": "typescript"
													}
												]
											}
										},
										{
											"id": 1122,
											"name": "__namedParameters",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../core/src/index.ts",
													"qualifiedName": "MessageExtra"
												},
												"name": "MessageExtra",
												"package": "@tapjs/core"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.type"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.type"
							}
						},
						{
							"id": 1399,
							"name": "unmock",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/mock/dist/mjs/index.d.ts",
									"line": 106,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1400,
									"name": "unmock",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Unwind the mocks and free up the memory at the end of the test.\n\nCalled automatically if the "
											},
											{
												"kind": "code",
												"text": "`@tapjs/after`"
											},
											{
												"kind": "text",
												"text": " plugin is not disabled."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/mock/dist/mjs/index.d.ts",
											"line": 106,
											"character": 4
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.unmock"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.unmock"
							}
						},
						{
							"id": 938,
							"name": "unpipe",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
									"line": 407,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 939,
									"name": "unpipe",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Fully unhook a piped destination stream.\n\nIf the destination stream was the only consumer of this stream (ie,\nthere are no other piped destinations or "
											},
											{
												"kind": "code",
												"text": "`'data'`"
											},
											{
												"kind": "text",
												"text": " event listeners)\nthen the flow of data will stop until there is another consumer or\n"
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "Minipass#resume"
											},
											{
												"kind": "text",
												"text": " is explicitly called."
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/minipass/dist/mjs/index.d.ts",
											"line": 407,
											"character": 4
										}
									],
									"typeParameter": [
										{
											"id": 940,
											"name": "W",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/minipass/src/index.ts",
													"qualifiedName": "Minipass.Writable"
												},
												"name": "Writable",
												"package": "minipass",
												"qualifiedName": "Minipass.Writable"
											}
										}
									],
									"parameters": [
										{
											"id": 941,
											"name": "dest",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"target": -1,
												"name": "W",
												"refersToTypeParameter": true
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.unpipe"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.unpipe"
							}
						},
						{
							"id": 784,
							"name": "waitOn",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/core/dist/mjs/test-base.d.ts",
									"line": 260,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/test-base.d.ts#L260"
								}
							],
							"signatures": [
								{
									"id": 785,
									"name": "waitOn",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Await the end of a Promise before proceeding.\nThe supplied callback is called with the Waiter object.\n\nThis is primarily internal, but is used in some plugins, whenever\na promise must be awaited before proceeding. In normal test usage,\nit's usually best to simply use an async test function and "
											},
											{
												"kind": "code",
												"text": "`await`"
											},
											{
												"kind": "text",
												"text": "\npromises as normal."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/core/dist/mjs/test-base.d.ts",
											"line": 260,
											"character": 4,
											"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/test-base.d.ts#L260"
										}
									],
									"parameters": [
										{
											"id": 786,
											"name": "promise",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "Promise"
												},
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "Promise",
												"package": "typescript"
											}
										},
										{
											"id": 787,
											"name": "cb",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 788,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"sources": [
														{
															"fileName": "src/core/dist/mjs/test-base.d.ts",
															"line": 260,
															"character": 46,
															"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/test-base.d.ts#L260"
														}
													],
													"signatures": [
														{
															"id": 789,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {},
															"sources": [
																{
																	"fileName": "src/core/dist/mjs/test-base.d.ts",
																	"line": 260,
																	"character": 46,
																	"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/test-base.d.ts#L260"
																}
															],
															"parameters": [
																{
																	"id": 790,
																	"name": "w",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"target": {
																			"sourceFileName": "../core/src/waiter.ts",
																			"qualifiedName": "Waiter"
																		},
																		"name": "Waiter",
																		"package": "@tapjs/core"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													]
												}
											}
										},
										{
											"id": 791,
											"name": "expectReject",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.waitOn"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.waitOn"
							}
						},
						{
							"id": 1473,
							"name": "worker",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/worker/dist/mjs/index.d.ts",
									"line": 8,
									"character": 4
								},
								{
									"fileName": "src/worker/dist/mjs/index.d.ts",
									"line": 9,
									"character": 4
								},
								{
									"fileName": "src/worker/dist/mjs/index.d.ts",
									"line": 10,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 1474,
									"name": "worker",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"sources": [
										{
											"fileName": "src/worker/dist/mjs/index.d.ts",
											"line": 8,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 1475,
											"name": "filename",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../worker/src/index.ts",
											"qualifiedName": "PromiseWithWorker"
										},
										"name": "PromiseWithWorker",
										"package": "@tapjs/worker"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.worker"
									}
								},
								{
									"id": 1476,
									"name": "worker",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"sources": [
										{
											"fileName": "src/worker/dist/mjs/index.d.ts",
											"line": 9,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 1477,
											"name": "filename",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1478,
											"name": "name",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../worker/src/index.ts",
											"qualifiedName": "PromiseWithWorker"
										},
										"name": "PromiseWithWorker",
										"package": "@tapjs/worker"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.worker"
									}
								},
								{
									"id": 1479,
									"name": "worker",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"sources": [
										{
											"fileName": "src/worker/dist/mjs/index.d.ts",
											"line": 10,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 1480,
											"name": "filename",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 1481,
											"name": "options",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../core/src/worker.ts",
													"qualifiedName": "WorkerOpts"
												},
												"name": "WorkerOpts",
												"package": "@tapjs/core"
											}
										},
										{
											"id": 1482,
											"name": "name",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../worker/src/index.ts",
											"qualifiedName": "PromiseWithWorker"
										},
										"name": "PromiseWithWorker",
										"package": "@tapjs/worker"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.worker"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.worker"
							}
						},
						{
							"id": 878,
							"name": "write",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/core/dist/mjs/base.d.ts",
									"line": 339,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/base.d.ts#L339"
								}
							],
							"signatures": [
								{
									"id": 879,
									"name": "write",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Stream write method.\n\nFor buffered tests, this collects the output in the\n"
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "Base#output"
											},
											{
												"kind": "text",
												"text": "\nfield. Sets "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "Base#printedOutput"
											},
											{
												"kind": "text",
												"text": " to "
											},
											{
												"kind": "code",
												"text": "`true`"
											},
											{
												"kind": "text",
												"text": " when called."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/core/dist/mjs/base.d.ts",
											"line": 339,
											"character": 4,
											"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/core/dist/mjs/base.d.ts#L339"
										}
									],
									"parameters": [
										{
											"id": 880,
											"name": "c",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.write"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.write"
							}
						},
						{
							"id": 608,
							"name": "getEventListeners",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isStatic": true,
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 296,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 609,
									"name": "getEventListeners",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Returns a copy of the array of listeners for the event named "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": ".\n\nFor "
											},
											{
												"kind": "code",
												"text": "`EventEmitter`"
											},
											{
												"kind": "text",
												"text": "s this behaves exactly the same as calling "
											},
											{
												"kind": "code",
												"text": "`.listeners`"
											},
											{
												"kind": "text",
												"text": " on\nthe emitter.\n\nFor "
											},
											{
												"kind": "code",
												"text": "`EventTarget`"
											},
											{
												"kind": "text",
												"text": "s this is the only way to get the event listeners for the\nevent target. This is useful for debugging and diagnostic purposes.\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nimport { getEventListeners, EventEmitter } from 'node:events';\n\n{\n  const ee = new EventEmitter();\n  const listener = () => console.log('Events are fun');\n  ee.on('foo', listener);\n  console.log(getEventListeners(ee, 'foo')); // [ [Function: listener] ]\n}\n{\n  const et = new EventTarget();\n  const listener = () => console.log('Events are fun');\n  et.addEventListener('foo', listener);\n  console.log(getEventListeners(et, 'foo')); // [ [Function: listener] ]\n}\n```"
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v15.2.0, v14.17.0"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@types/node/events.d.ts",
											"line": 296,
											"character": 8
										}
									],
									"parameters": [
										{
											"id": 610,
											"name": "emitter",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"target": {
															"sourceFileName": "../../node_modules/@types/node/events.d.ts",
															"qualifiedName": "__global.NodeJS.EventEmitter"
														},
														"name": "EventEmitter",
														"package": "@types/node",
														"qualifiedName": "__global.NodeJS.EventEmitter"
													},
													{
														"type": "reference",
														"target": {
															"sourceFileName": "../../node_modules/@types/node/events.d.ts",
															"qualifiedName": "_DOMEventTarget"
														},
														"name": "_DOMEventTarget",
														"package": "@types/node"
													}
												]
											}
										},
										{
											"id": 611,
											"name": "name",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": {
												"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
												"qualifiedName": "Function"
											},
											"name": "Function",
											"package": "typescript"
										}
									}
								}
							]
						},
						{
							"id": 604,
							"name": "listenerCount",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isStatic": true,
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 268,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 605,
									"name": "listenerCount",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A class method that returns the number of listeners for the given "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": "registered on the given "
											},
											{
												"kind": "code",
												"text": "`emitter`"
											},
											{
												"kind": "text",
												"text": ".\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nimport { EventEmitter, listenerCount } from 'node:events';\n\nconst myEmitter = new EventEmitter();\nmyEmitter.on('event', () => {});\nmyEmitter.on('event', () => {});\nconsole.log(listenerCount(myEmitter, 'event'));\n// Prints: 2\n```"
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v0.9.12"
													}
												]
											},
											{
												"tag": "@deprecated",
												"content": [
													{
														"kind": "text",
														"text": "Since v3.2.0 - Use "
													},
													{
														"kind": "code",
														"text": "`listenerCount`"
													},
													{
														"kind": "text",
														"text": " instead."
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@types/node/events.d.ts",
											"line": 268,
											"character": 8
										}
									],
									"parameters": [
										{
											"id": 606,
											"name": "emitter",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The emitter to query"
													}
												]
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/@types/node/events.d.ts",
													"qualifiedName": "__global.NodeJS.EventEmitter"
												},
												"name": "EventEmitter",
												"package": "@types/node",
												"qualifiedName": "__global.NodeJS.EventEmitter"
											}
										},
										{
											"id": 607,
											"name": "eventName",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The event name"
													}
												]
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.listenerCount"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.listenerCount"
							}
						},
						{
							"id": 599,
							"name": "on",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isStatic": true,
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 250,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 600,
									"name": "on",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "code",
												"text": "```js\nimport { on, EventEmitter } from 'node:events';\nimport process from 'node:process';\n\nconst ee = new EventEmitter();\n\n// Emit later on\nprocess.nextTick(() => {\n  ee.emit('foo', 'bar');\n  ee.emit('foo', 42);\n});\n\nfor await (const event of on(ee, 'foo')) {\n  // The execution of this inner block is synchronous and it\n  // processes one event at a time (even with await). Do not use\n  // if concurrent execution is required.\n  console.log(event); // prints ['bar'] [42]\n}\n// Unreachable here\n```"
											},
											{
												"kind": "text",
												"text": "\n\nReturns an "
											},
											{
												"kind": "code",
												"text": "`AsyncIterator`"
											},
											{
												"kind": "text",
												"text": " that iterates "
											},
											{
												"kind": "code",
												"text": "`eventName`"
											},
											{
												"kind": "text",
												"text": " events. It will throw\nif the "
											},
											{
												"kind": "code",
												"text": "`EventEmitter`"
											},
											{
												"kind": "text",
												"text": " emits "
											},
											{
												"kind": "code",
												"text": "`'error'`"
											},
											{
												"kind": "text",
												"text": ". It removes all listeners when\nexiting the loop. The "
											},
											{
												"kind": "code",
												"text": "`value`"
											},
											{
												"kind": "text",
												"text": " returned by each iteration is an array\ncomposed of the emitted event arguments.\n\nAn "
											},
											{
												"kind": "code",
												"text": "`AbortSignal`"
											},
											{
												"kind": "text",
												"text": " can be used to cancel waiting on events:\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nimport { on, EventEmitter } from 'node:events';\nimport process from 'node:process';\n\nconst ac = new AbortController();\n\n(async () => {\n  const ee = new EventEmitter();\n\n  // Emit later on\n  process.nextTick(() => {\n    ee.emit('foo', 'bar');\n    ee.emit('foo', 42);\n  });\n\n  for await (const event of on(ee, 'foo', { signal: ac.signal })) {\n    // The execution of this inner block is synchronous and it\n    // processes one event at a time (even with await). Do not use\n    // if concurrent execution is required.\n    console.log(event); // prints ['bar'] [42]\n  }\n  // Unreachable here\n})();\n\nprocess.nextTick(() => ac.abort());\n```"
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v13.6.0, v12.16.0"
													}
												]
											},
											{
												"tag": "@returns",
												"content": [
													{
														"kind": "text",
														"text": "that iterates "
													},
													{
														"kind": "code",
														"text": "`eventName`"
													},
													{
														"kind": "text",
														"text": " events emitted by the "
													},
													{
														"kind": "code",
														"text": "`emitter`"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@types/node/events.d.ts",
											"line": 250,
											"character": 8
										}
									],
									"parameters": [
										{
											"id": 601,
											"name": "emitter",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/@types/node/events.d.ts",
													"qualifiedName": "__global.NodeJS.EventEmitter"
												},
												"name": "EventEmitter",
												"package": "@types/node",
												"qualifiedName": "__global.NodeJS.EventEmitter"
											}
										},
										{
											"id": 602,
											"name": "eventName",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The name of the event being listened for"
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 603,
											"name": "options",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/@types/node/events.d.ts",
													"qualifiedName": "StaticEventEmitterOptions"
												},
												"name": "StaticEventEmitterOptions",
												"package": "@types/node"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es2018.asynciterable.d.ts",
											"qualifiedName": "AsyncIterableIterator"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "AsyncIterableIterator",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.on"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.on"
							}
						},
						{
							"id": 590,
							"name": "once",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isStatic": true,
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 189,
									"character": 15
								},
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 190,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 591,
									"name": "once",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Creates a "
											},
											{
												"kind": "code",
												"text": "`Promise`"
											},
											{
												"kind": "text",
												"text": " that is fulfilled when the "
											},
											{
												"kind": "code",
												"text": "`EventEmitter`"
											},
											{
												"kind": "text",
												"text": " emits the given\nevent or that is rejected if the "
											},
											{
												"kind": "code",
												"text": "`EventEmitter`"
											},
											{
												"kind": "text",
												"text": " emits "
											},
											{
												"kind": "code",
												"text": "`'error'`"
											},
											{
												"kind": "text",
												"text": " while waiting.\nThe "
											},
											{
												"kind": "code",
												"text": "`Promise`"
											},
											{
												"kind": "text",
												"text": " will resolve with an array of all the arguments emitted to the\ngiven event.\n\nThis method is intentionally generic and works with the web platform [EventTarget](https://dom.spec.whatwg.org/#interface-eventtarget) interface, which has no special"
											},
											{
												"kind": "code",
												"text": "`'error'`"
											},
											{
												"kind": "text",
												"text": " event\nsemantics and does not listen to the "
											},
											{
												"kind": "code",
												"text": "`'error'`"
											},
											{
												"kind": "text",
												"text": " event.\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nimport { once, EventEmitter } from 'node:events';\nimport process from 'node:process';\n\nconst ee = new EventEmitter();\n\nprocess.nextTick(() => {\n  ee.emit('myevent', 42);\n});\n\nconst [value] = await once(ee, 'myevent');\nconsole.log(value);\n\nconst err = new Error('kaboom');\nprocess.nextTick(() => {\n  ee.emit('error', err);\n});\n\ntry {\n  await once(ee, 'myevent');\n} catch (err) {\n  console.error('error happened', err);\n}\n```"
											},
											{
												"kind": "text",
												"text": "\n\nThe special handling of the "
											},
											{
												"kind": "code",
												"text": "`'error'`"
											},
											{
												"kind": "text",
												"text": " event is only used when "
											},
											{
												"kind": "code",
												"text": "`events.once()`"
											},
											{
												"kind": "text",
												"text": "is used to wait for another event. If "
											},
											{
												"kind": "code",
												"text": "`events.once()`"
											},
											{
												"kind": "text",
												"text": " is used to wait for the\n'"
											},
											{
												"kind": "code",
												"text": "`error'`"
											},
											{
												"kind": "text",
												"text": " event itself, then it is treated as any other kind of event without\nspecial handling:\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nimport { EventEmitter, once } from 'node:events';\n\nconst ee = new EventEmitter();\n\nonce(ee, 'error')\n  .then(([err]) => console.log('ok', err.message))\n  .catch((err) => console.error('error', err.message));\n\nee.emit('error', new Error('boom'));\n\n// Prints: ok boom\n```"
											},
											{
												"kind": "text",
												"text": "\n\nAn "
											},
											{
												"kind": "code",
												"text": "`AbortSignal`"
											},
											{
												"kind": "text",
												"text": " can be used to cancel waiting for the event:\n\n"
											},
											{
												"kind": "code",
												"text": "```js\nimport { EventEmitter, once } from 'node:events';\n\nconst ee = new EventEmitter();\nconst ac = new AbortController();\n\nasync function foo(emitter, event, signal) {\n  try {\n    await once(emitter, event, { signal });\n    console.log('event emitted!');\n  } catch (error) {\n    if (error.name === 'AbortError') {\n      console.error('Waiting for the event was canceled!');\n    } else {\n      console.error('There was an error', error.message);\n    }\n  }\n}\n\nfoo(ee, 'foo', ac.signal);\nac.abort(); // Abort waiting for the event\nee.emit('foo'); // Prints: Waiting for the event was canceled!\n```"
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v11.13.0, v10.16.0"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@types/node/events.d.ts",
											"line": 189,
											"character": 8
										}
									],
									"parameters": [
										{
											"id": 592,
											"name": "emitter",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/@types/node/events.d.ts",
													"qualifiedName": "_NodeEventTarget"
												},
												"name": "_NodeEventTarget",
												"package": "@types/node"
											}
										},
										{
											"id": 593,
											"name": "eventName",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										},
										{
											"id": 594,
											"name": "options",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/@types/node/events.d.ts",
													"qualifiedName": "StaticEventEmitterOptions"
												},
												"name": "StaticEventEmitterOptions",
												"package": "@types/node"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.once"
									}
								},
								{
									"id": 595,
									"name": "once",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true
									},
									"sources": [
										{
											"fileName": "node_modules/@types/node/events.d.ts",
											"line": 190,
											"character": 8
										}
									],
									"parameters": [
										{
											"id": 596,
											"name": "emitter",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/@types/node/events.d.ts",
													"qualifiedName": "_DOMEventTarget"
												},
												"name": "_DOMEventTarget",
												"package": "@types/node"
											}
										},
										{
											"id": 597,
											"name": "eventName",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 598,
											"name": "options",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/@types/node/events.d.ts",
													"qualifiedName": "StaticEventEmitterOptions"
												},
												"name": "StaticEventEmitterOptions",
												"package": "@types/node"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.once"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.once"
							}
						},
						{
							"id": 612,
							"name": "setMaxListeners",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isStatic": true,
								"isExternal": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/node/events.d.ts",
									"line": 311,
									"character": 15
								}
							],
							"signatures": [
								{
									"id": 613,
									"name": "setMaxListeners",
									"variant": "signature",
									"kind": 4096,
									"flags": {
										"isExternal": true
									},
									"comment": {
										"summary": [
											{
												"kind": "code",
												"text": "```js\nimport { setMaxListeners, EventEmitter } from 'node:events';\n\nconst target = new EventTarget();\nconst emitter = new EventEmitter();\n\nsetMaxListeners(5, target, emitter);\n```"
											}
										],
										"blockTags": [
											{
												"tag": "@since",
												"content": [
													{
														"kind": "text",
														"text": "v15.4.0"
													}
												]
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@types/node/events.d.ts",
											"line": 311,
											"character": 8
										}
									],
									"parameters": [
										{
											"id": 614,
											"name": "n",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "A non-negative number. The maximum number of listeners per "
													},
													{
														"kind": "code",
														"text": "`EventTarget`"
													},
													{
														"kind": "text",
														"text": " event."
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										},
										{
											"id": 615,
											"name": "eventTargets",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isExternal": true,
												"isRest": true
											},
											"type": {
												"type": "array",
												"elementType": {
													"type": "union",
													"types": [
														{
															"type": "reference",
															"target": {
																"sourceFileName": "../../node_modules/@types/node/events.d.ts",
																"qualifiedName": "__global.NodeJS.EventEmitter"
															},
															"name": "EventEmitter",
															"package": "@types/node",
															"qualifiedName": "__global.NodeJS.EventEmitter"
														},
														{
															"type": "reference",
															"target": {
																"sourceFileName": "../../node_modules/@types/node/events.d.ts",
																"qualifiedName": "_DOMEventTarget"
															},
															"name": "_DOMEventTarget",
															"package": "@types/node"
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "TTest.setMaxListeners"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "TTest.setMaxListeners"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"children": [
								620
							]
						},
						{
							"title": "Properties",
							"children": [
								632,
								725,
								835,
								1080,
								1091,
								1098,
								1278,
								1284,
								1291,
								1317,
								1330,
								1365,
								1401,
								1442,
								1459,
								1469,
								1007,
								997,
								1004,
								994,
								1002,
								1008,
								998,
								1005,
								1009,
								1000,
								1003,
								1001,
								996,
								999,
								991,
								995,
								992,
								993,
								1006,
								745,
								746,
								851,
								860,
								859,
								738,
								856,
								857,
								742,
								847,
								843,
								865,
								744,
								729,
								743,
								855,
								838,
								839,
								863,
								837,
								1470,
								734,
								848,
								849,
								853,
								727,
								858,
								726,
								842,
								736,
								854,
								737,
								898,
								836,
								850,
								864,
								861,
								852,
								735,
								728,
								862,
								841,
								840,
								897,
								1402,
								617,
								618,
								619,
								616
							]
						},
						{
							"title": "Accessors",
							"children": [
								723,
								916,
								912,
								899,
								1407,
								1403,
								774,
								927,
								978,
								901,
								929,
								1417,
								792,
								794,
								908,
								749,
								931,
								646,
								876,
								747,
								1427,
								874,
								1326,
								1471,
								566
							]
						},
						{
							"title": "Methods",
							"children": [
								1010,
								1018,
								1021,
								1031,
								1036,
								1034,
								1026,
								1023,
								1029,
								1012,
								1016,
								1038,
								1040,
								942,
								1086,
								1092,
								633,
								1279,
								1285,
								1338,
								1349,
								980,
								984,
								1366,
								988,
								1245,
								890,
								1273,
								626,
								828,
								1107,
								1078,
								1318,
								1052,
								1144,
								1211,
								1225,
								1232,
								1204,
								1218,
								1154,
								1331,
								1060,
								1054,
								796,
								1164,
								1174,
								1184,
								1431,
								1194,
								1378,
								1385,
								1392,
								1113,
								1149,
								1159,
								1169,
								1179,
								1189,
								1199,
								1103,
								1128,
								966,
								1099,
								950,
								886,
								825,
								884,
								1042,
								881,
								888,
								1292,
								895,
								925,
								933,
								628,
								638,
								1064,
								1071,
								986,
								1057,
								920,
								1251,
								974,
								958,
								1265,
								1435,
								1258,
								923,
								869,
								1123,
								905,
								1049,
								866,
								831,
								698,
								1443,
								1460,
								801,
								1139,
								1133,
								807,
								1081,
								648,
								1323,
								820,
								1239,
								673,
								1118,
								1399,
								938,
								784,
								1473,
								878,
								608,
								604,
								599,
								590,
								612
							]
						},
						{
							"title": "TAP generation methods",
							"children": [
								751,
								754,
								771,
								768,
								762,
								757
							]
						}
					],
					"sources": [
						{
							"fileName": "src/test/test-built/dist/mjs/index.d.ts",
							"line": 189,
							"character": 17,
							"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L189"
						},
						{
							"fileName": "src/test/test-built/dist/mjs/index.d.ts",
							"line": 199,
							"character": 21,
							"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L199"
						}
					],
					"typeParameters": [
						{
							"id": 1483,
							"name": "Ext",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": 161,
								"name": "BuiltPlugins",
								"package": "@tapjs/test-built"
							},
							"default": {
								"type": "reference",
								"target": 161,
								"name": "BuiltPlugins",
								"package": "@tapjs/test-built"
							}
						},
						{
							"id": 1484,
							"name": "Opts",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": 19,
								"name": "TestOpts",
								"package": "@tapjs/test-built"
							},
							"default": {
								"type": "reference",
								"target": 19,
								"name": "TestOpts",
								"package": "@tapjs/test-built"
							}
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"target": {
								"sourceFileName": "test-built/src/index.ts",
								"qualifiedName": "TTest"
							},
							"name": "TTest",
							"package": "@tapjs/test-built"
						},
						{
							"type": "reference",
							"target": {
								"sourceFileName": "../core/src/test-base.ts",
								"qualifiedName": "TestBase"
							},
							"name": "TestBase",
							"package": "@tapjs/core"
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"target": {
								"sourceFileName": "test-built/src/index.ts",
								"qualifiedName": "TTest"
							},
							"name": "TTest",
							"package": "@tapjs/test-built"
						}
					]
				},
				{
					"id": 161,
					"name": "BuiltPlugins",
					"variant": "declaration",
					"kind": 256,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Interface that is the assembled result of every loaded plugin."
							}
						]
					},
					"children": [
						{
							"id": 162,
							"name": "#private",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "src/after/dist/mjs/index.d.ts",
									"line": 12,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/after/dist/mjs/index.d.ts#L12"
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "PluginResult.#private"
							}
						},
						{
							"id": 173,
							"name": "#private",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "src/after-each/dist/mjs/index.d.ts",
									"line": 13,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "PluginResult.#private"
							}
						},
						{
							"id": 180,
							"name": "#private",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "src/asserts/dist/mjs/index.d.ts",
									"line": 31,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "PluginResult.#private"
							}
						},
						{
							"id": 360,
							"name": "#private",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "src/before/dist/mjs/index.d.ts",
									"line": 12,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "PluginResult.#private"
							}
						},
						{
							"id": 366,
							"name": "#private",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "src/before-each/dist/mjs/index.d.ts",
									"line": 13,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "PluginResult.#private"
							}
						},
						{
							"id": 373,
							"name": "#private",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "src/filter/dist/mjs/index.d.ts",
									"line": 33,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "PluginResult.#private"
							}
						},
						{
							"id": 399,
							"name": "#private",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "src/fixture/dist/mjs/index.d.ts",
									"line": 18,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "PluginResult.#private"
							}
						},
						{
							"id": 412,
							"name": "#private",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "src/intercept/dist/mjs/index.d.ts",
									"line": 168,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "PluginResult.#private"
							}
						},
						{
							"id": 447,
							"name": "#private",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "src/mock/dist/mjs/index.d.ts",
									"line": 7,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "PluginResult.#private"
							}
						},
						{
							"id": 483,
							"name": "#private",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "src/snapshot/dist/mjs/index.d.ts",
									"line": 53,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "PluginResult.#private"
							}
						},
						{
							"id": 524,
							"name": "#private",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "src/spawn/dist/mjs/index.d.ts",
									"line": 17,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "PluginResult.#private"
							}
						},
						{
							"id": 541,
							"name": "#private",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "src/stdin/dist/mjs/index.d.ts",
									"line": 4,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "PluginResult.#private"
							}
						},
						{
							"id": 551,
							"name": "#private",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "src/worker/dist/mjs/index.d.ts",
									"line": 4,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "PluginResult.#private"
							}
						},
						{
							"id": 552,
							"name": "isMainThread",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "src/worker/dist/mjs/index.d.ts",
									"line": 5,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "PluginResult.isMainThread"
							}
						},
						{
							"id": 484,
							"name": "writeSnapshot",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"sources": [
								{
									"fileName": "src/snapshot/dist/mjs/index.d.ts",
									"line": 54,
									"character": 4
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "PluginResult.writeSnapshot"
							}
						},
						{
							"id": 489,
							"name": "cleanSnapshot",
							"variant": "declaration",
							"kind": 262144,
							"flags": {},
							"sources": [
								{
									"fileName": "src/snapshot/dist/mjs/index.d.ts",
									"line": 58,
									"character": 8
								},
								{
									"fileName": "src/snapshot/dist/mjs/index.d.ts",
									"line": 59,
									"character": 8
								}
							],
							"getSignature": {
								"id": 490,
								"name": "cleanSnapshot",
								"variant": "signature",
								"kind": 524288,
								"flags": {},
								"sources": [
									{
										"fileName": "src/snapshot/dist/mjs/index.d.ts",
										"line": 58,
										"character": 4
									}
								],
								"type": {
									"type": "union",
									"types": [
										{
											"type": "intrinsic",
											"name": "undefined"
										},
										{
											"type": "reflection",
											"declaration": {
												"id": 491,
												"name": "__type",
												"variant": "declaration",
												"kind": 65536,
												"flags": {},
												"sources": [
													{
														"fileName": "src/snapshot/dist/mjs/index.d.ts",
														"line": 49,
														"character": 20
													}
												],
												"signatures": [
													{
														"id": 492,
														"name": "__type",
														"variant": "signature",
														"kind": 4096,
														"flags": {},
														"comment": {
															"summary": [
																{
																	"kind": "text",
																	"text": "Function called on the string snapshot result, can be used to\nremove changeable data, platform-specific stuff, etc."
																}
															]
														},
														"sources": [
															{
																"fileName": "src/snapshot/dist/mjs/index.d.ts",
																"line": 49,
																"character": 20
															}
														],
														"parameters": [
															{
																"id": 493,
																"name": "snapshotData",
																"variant": "param",
																"kind": 32768,
																"flags": {},
																"type": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														],
														"type": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										}
									]
								},
								"inheritedFrom": {
									"type": "reference",
									"target": -1,
									"name": "PluginResult.cleanSnapshot"
								}
							},
							"setSignature": {
								"id": 494,
								"name": "cleanSnapshot",
								"variant": "signature",
								"kind": 1048576,
								"flags": {},
								"sources": [
									{
										"fileName": "src/snapshot/dist/mjs/index.d.ts",
										"line": 59,
										"character": 4
									}
								],
								"parameters": [
									{
										"id": 495,
										"name": "clean",
										"variant": "param",
										"kind": 32768,
										"flags": {},
										"type": {
											"type": "union",
											"types": [
												{
													"type": "intrinsic",
													"name": "undefined"
												},
												{
													"type": "reflection",
													"declaration": {
														"id": 496,
														"name": "__type",
														"variant": "declaration",
														"kind": 65536,
														"flags": {},
														"sources": [
															{
																"fileName": "src/snapshot/dist/mjs/index.d.ts",
																"line": 49,
																"character": 20
															}
														],
														"signatures": [
															{
																"id": 497,
																"name": "__type",
																"variant": "signature",
																"kind": 4096,
																"flags": {},
																"comment": {
																	"summary": [
																		{
																			"kind": "text",
																			"text": "Function called on the string snapshot result, can be used to\nremove changeable data, platform-specific stuff, etc."
																		}
																	]
																},
																"sources": [
																	{
																		"fileName": "src/snapshot/dist/mjs/index.d.ts",
																		"line": 49,
																		"character": 20
																	}
																],
																"parameters": [
																	{
																		"id": 498,
																		"name": "snapshotData",
																		"variant": "param",
																		"kind": 32768,
																		"flags": {},
																		"type": {
																			"type": "intrinsic",
																			"name": "string"
																		}
																	}
																],
																"type": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														]
													}
												}
											]
										}
									}
								],
								"type": {
									"type": "intrinsic",
									"name": "void"
								},
								"inheritedFrom": {
									"type": "reference",
									"target": -1,
									"name": "PluginResult.cleanSnapshot"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "PluginResult.cleanSnapshot"
							}
						},
						{
							"id": 485,
							"name": "compareOptions",
							"variant": "declaration",
							"kind": 262144,
							"flags": {},
							"sources": [
								{
									"fileName": "src/snapshot/dist/mjs/index.d.ts",
									"line": 56,
									"character": 8
								},
								{
									"fileName": "src/snapshot/dist/mjs/index.d.ts",
									"line": 57,
									"character": 8
								}
							],
							"getSignature": {
								"id": 486,
								"name": "compareOptions",
								"variant": "signature",
								"kind": 524288,
								"flags": {},
								"sources": [
									{
										"fileName": "src/snapshot/dist/mjs/index.d.ts",
										"line": 56,
										"character": 4
									}
								],
								"type": {
									"type": "reference",
									"target": {
										"sourceFileName": "../tcompare/src/index.ts",
										"qualifiedName": "CompareOptions"
									},
									"name": "CompareOptions",
									"package": "tcompare"
								},
								"inheritedFrom": {
									"type": "reference",
									"target": -1,
									"name": "PluginResult.compareOptions"
								}
							},
							"setSignature": {
								"id": 487,
								"name": "compareOptions",
								"variant": "signature",
								"kind": 1048576,
								"flags": {},
								"sources": [
									{
										"fileName": "src/snapshot/dist/mjs/index.d.ts",
										"line": 57,
										"character": 4
									}
								],
								"parameters": [
									{
										"id": 488,
										"name": "cmt",
										"variant": "param",
										"kind": 32768,
										"flags": {},
										"type": {
											"type": "reference",
											"target": {
												"sourceFileName": "../tcompare/src/index.ts",
												"qualifiedName": "CompareOptions"
											},
											"name": "CompareOptions",
											"package": "tcompare"
										}
									}
								],
								"type": {
									"type": "intrinsic",
									"name": "void"
								},
								"inheritedFrom": {
									"type": "reference",
									"target": -1,
									"name": "PluginResult.compareOptions"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "PluginResult.compareOptions"
							}
						},
						{
							"id": 499,
							"name": "formatSnapshot",
							"variant": "declaration",
							"kind": 262144,
							"flags": {},
							"sources": [
								{
									"fileName": "src/snapshot/dist/mjs/index.d.ts",
									"line": 60,
									"character": 8
								},
								{
									"fileName": "src/snapshot/dist/mjs/index.d.ts",
									"line": 61,
									"character": 8
								}
							],
							"getSignature": {
								"id": 500,
								"name": "formatSnapshot",
								"variant": "signature",
								"kind": 524288,
								"flags": {},
								"sources": [
									{
										"fileName": "src/snapshot/dist/mjs/index.d.ts",
										"line": 60,
										"character": 4
									}
								],
								"type": {
									"type": "union",
									"types": [
										{
											"type": "intrinsic",
											"name": "undefined"
										},
										{
											"type": "reflection",
											"declaration": {
												"id": 501,
												"name": "__type",
												"variant": "declaration",
												"kind": 65536,
												"flags": {},
												"sources": [
													{
														"fileName": "src/snapshot/dist/mjs/index.d.ts",
														"line": 44,
														"character": 21
													}
												],
												"signatures": [
													{
														"id": 502,
														"name": "__type",
														"variant": "signature",
														"kind": 4096,
														"flags": {},
														"comment": {
															"summary": [
																{
																	"kind": "text",
																	"text": "Function used to serialize snapshotted objects to a string.\nIf a non-string is returned, then the default formatting will\nbe used, so this can also transform the object, if needed."
																}
															]
														},
														"sources": [
															{
																"fileName": "src/snapshot/dist/mjs/index.d.ts",
																"line": 44,
																"character": 21
															}
														],
														"parameters": [
															{
																"id": 503,
																"name": "obj",
																"variant": "param",
																"kind": 32768,
																"flags": {},
																"type": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														],
														"type": {
															"type": "intrinsic",
															"name": "any"
														}
													}
												]
											}
										}
									]
								},
								"inheritedFrom": {
									"type": "reference",
									"target": -1,
									"name": "PluginResult.formatSnapshot"
								}
							},
							"setSignature": {
								"id": 504,
								"name": "formatSnapshot",
								"variant": "signature",
								"kind": 1048576,
								"flags": {},
								"sources": [
									{
										"fileName": "src/snapshot/dist/mjs/index.d.ts",
										"line": 61,
										"character": 4
									}
								],
								"parameters": [
									{
										"id": 505,
										"name": "format",
										"variant": "param",
										"kind": 32768,
										"flags": {},
										"type": {
											"type": "union",
											"types": [
												{
													"type": "intrinsic",
													"name": "undefined"
												},
												{
													"type": "reflection",
													"declaration": {
														"id": 506,
														"name": "__type",
														"variant": "declaration",
														"kind": 65536,
														"flags": {},
														"sources": [
															{
																"fileName": "src/snapshot/dist/mjs/index.d.ts",
																"line": 44,
																"character": 21
															}
														],
														"signatures": [
															{
																"id": 507,
																"name": "__type",
																"variant": "signature",
																"kind": 4096,
																"flags": {},
																"comment": {
																	"summary": [
																		{
																			"kind": "text",
																			"text": "Function used to serialize snapshotted objects to a string.\nIf a non-string is returned, then the default formatting will\nbe used, so this can also transform the object, if needed."
																		}
																	]
																},
																"sources": [
																	{
																		"fileName": "src/snapshot/dist/mjs/index.d.ts",
																		"line": 44,
																		"character": 21
																	}
																],
																"parameters": [
																	{
																		"id": 508,
																		"name": "obj",
																		"variant": "param",
																		"kind": 32768,
																		"flags": {},
																		"type": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																],
																"type": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														]
													}
												}
											]
										}
									}
								],
								"type": {
									"type": "intrinsic",
									"name": "void"
								},
								"inheritedFrom": {
									"type": "reference",
									"target": -1,
									"name": "PluginResult.formatSnapshot"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "PluginResult.formatSnapshot"
							}
						},
						{
							"id": 509,
							"name": "snapshotFile",
							"variant": "declaration",
							"kind": 262144,
							"flags": {},
							"sources": [
								{
									"fileName": "src/snapshot/dist/mjs/index.d.ts",
									"line": 62,
									"character": 8
								},
								{
									"fileName": "src/snapshot/dist/mjs/index.d.ts",
									"line": 63,
									"character": 8
								}
							],
							"getSignature": {
								"id": 510,
								"name": "snapshotFile",
								"variant": "signature",
								"kind": 524288,
								"flags": {},
								"sources": [
									{
										"fileName": "src/snapshot/dist/mjs/index.d.ts",
										"line": 62,
										"character": 4
									}
								],
								"type": {
									"type": "intrinsic",
									"name": "string"
								},
								"inheritedFrom": {
									"type": "reference",
									"target": -1,
									"name": "PluginResult.snapshotFile"
								}
							},
							"setSignature": {
								"id": 511,
								"name": "snapshotFile",
								"variant": "signature",
								"kind": 1048576,
								"flags": {},
								"sources": [
									{
										"fileName": "src/snapshot/dist/mjs/index.d.ts",
										"line": 63,
										"character": 4
									}
								],
								"parameters": [
									{
										"id": 512,
										"name": "f",
										"variant": "param",
										"kind": 32768,
										"flags": {},
										"type": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								],
								"type": {
									"type": "intrinsic",
									"name": "void"
								},
								"inheritedFrom": {
									"type": "reference",
									"target": -1,
									"name": "PluginResult.snapshotFile"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "PluginResult.snapshotFile"
							}
						},
						{
							"id": 408,
							"name": "testdirName",
							"variant": "declaration",
							"kind": 262144,
							"flags": {},
							"sources": [
								{
									"fileName": "src/fixture/dist/mjs/index.d.ts",
									"line": 22,
									"character": 8
								},
								{
									"fileName": "src/fixture/dist/mjs/index.d.ts",
									"line": 23,
									"character": 8
								}
							],
							"getSignature": {
								"id": 409,
								"name": "testdirName",
								"variant": "signature",
								"kind": 524288,
								"flags": {},
								"sources": [
									{
										"fileName": "src/fixture/dist/mjs/index.d.ts",
										"line": 22,
										"character": 4
									}
								],
								"type": {
									"type": "intrinsic",
									"name": "string"
								},
								"inheritedFrom": {
									"type": "reference",
									"target": -1,
									"name": "PluginResult.testdirName"
								}
							},
							"setSignature": {
								"id": 410,
								"name": "testdirName",
								"variant": "signature",
								"kind": 1048576,
								"flags": {},
								"sources": [
									{
										"fileName": "src/fixture/dist/mjs/index.d.ts",
										"line": 23,
										"character": 4
									}
								],
								"parameters": [
									{
										"id": 411,
										"name": "td",
										"variant": "param",
										"kind": 32768,
										"flags": {},
										"type": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								],
								"type": {
									"type": "intrinsic",
									"name": "void"
								},
								"inheritedFrom": {
									"type": "reference",
									"target": -1,
									"name": "PluginResult.testdirName"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "PluginResult.testdirName"
							}
						},
						{
							"id": 553,
							"name": "workerData",
							"variant": "declaration",
							"kind": 262144,
							"flags": {},
							"sources": [
								{
									"fileName": "src/worker/dist/mjs/index.d.ts",
									"line": 7,
									"character": 8
								}
							],
							"getSignature": {
								"id": 554,
								"name": "workerData",
								"variant": "signature",
								"kind": 524288,
								"flags": {},
								"sources": [
									{
										"fileName": "src/worker/dist/mjs/index.d.ts",
										"line": 7,
										"character": 4
									}
								],
								"type": {
									"type": "intrinsic",
									"name": "any"
								},
								"inheritedFrom": {
									"type": "reference",
									"target": -1,
									"name": "PluginResult.workerData"
								}
							},
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "PluginResult.workerData"
							}
						},
						{
							"id": 168,
							"name": "after",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/after/dist/mjs/index.d.ts",
									"line": 22,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/after/dist/mjs/index.d.ts#L22"
								}
							],
							"signatures": [
								{
									"id": 169,
									"name": "after",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Runs the supplied function after the test is completely finished, and\nbefore the next test starts."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/after/dist/mjs/index.d.ts",
											"line": 22,
											"character": 4,
											"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/after/dist/mjs/index.d.ts#L22"
										}
									],
									"parameters": [
										{
											"id": 170,
											"name": "fn",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 171,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"sources": [
														{
															"fileName": "src/after/dist/mjs/index.d.ts",
															"line": 22,
															"character": 14,
															"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/after/dist/mjs/index.d.ts#L22"
														}
													],
													"signatures": [
														{
															"id": 172,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {},
															"sources": [
																{
																	"fileName": "src/after/dist/mjs/index.d.ts",
																	"line": 22,
																	"character": 14,
																	"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/after/dist/mjs/index.d.ts#L22"
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "PluginResult.after"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "PluginResult.after"
							}
						},
						{
							"id": 174,
							"name": "afterEach",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/after-each/dist/mjs/index.d.ts",
									"line": 23,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 175,
									"name": "afterEach",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Run the supplied function after every *child* test, and any of those\nchild tests' children, and so on.\n\nThe test that has just completed is passed in as an argument to the\nfunction. Note that at this point, the test is fully ended, so attempting\nto call assertion methods on it will raise an error."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/after-each/dist/mjs/index.d.ts",
											"line": 23,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 176,
											"name": "fn",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 177,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"sources": [
														{
															"fileName": "src/after-each/dist/mjs/index.d.ts",
															"line": 23,
															"character": 18
														}
													],
													"signatures": [
														{
															"id": 178,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {},
															"sources": [
																{
																	"fileName": "src/after-each/dist/mjs/index.d.ts",
																	"line": 23,
																	"character": 18
																}
															],
															"parameters": [
																{
																	"id": 179,
																	"name": "t",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"target": 565,
																		"typeArguments": [
																			{
																				"type": "reference",
																				"target": 161,
																				"name": "BuiltPlugins",
																				"package": "@tapjs/test-built"
																			},
																			{
																				"type": "reference",
																				"target": 19,
																				"name": "TestOpts",
																				"package": "@tapjs/test-built"
																			}
																		],
																		"name": "Test",
																		"package": "@tapjs/test-built"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "PluginResult.afterEach"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "PluginResult.afterEach"
							}
						},
						{
							"id": 361,
							"name": "before",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/before/dist/mjs/index.d.ts",
									"line": 21,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 362,
									"name": "before",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Just run the supplied function right away, but do not run any\nchild tests until it has completed.\n\nThis is handy when some setup may require asynchronous actions, and\ntests should wait until after it completes."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/before/dist/mjs/index.d.ts",
											"line": 21,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 363,
											"name": "fn",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 364,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"sources": [
														{
															"fileName": "src/before/dist/mjs/index.d.ts",
															"line": 21,
															"character": 15
														}
													],
													"signatures": [
														{
															"id": 365,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {},
															"sources": [
																{
																	"fileName": "src/before/dist/mjs/index.d.ts",
																	"line": 21,
																	"character": 15
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "PluginResult.before"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "PluginResult.before"
							}
						},
						{
							"id": 367,
							"name": "beforeEach",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/before-each/dist/mjs/index.d.ts",
									"line": 24,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 368,
									"name": "beforeEach",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Run the supplied function before any child tests, and all of their\nchildren, and so on.\n\nThe test about to run is an argument to the function. While its test\nmethod has not yet run, it is safe to call test methods on it, but note\nthat this may potentially be confusing if for example you call "
											},
											{
												"kind": "code",
												"text": "`t.plan()`"
											},
											{
												"kind": "text",
												"text": "\nand this conflicts with the "
											},
											{
												"kind": "code",
												"text": "`t.plan()`"
											},
											{
												"kind": "text",
												"text": " called in the test method."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/before-each/dist/mjs/index.d.ts",
											"line": 24,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 369,
											"name": "fn",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 370,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"sources": [
														{
															"fileName": "src/before-each/dist/mjs/index.d.ts",
															"line": 24,
															"character": 19
														}
													],
													"signatures": [
														{
															"id": 371,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {},
															"sources": [
																{
																	"fileName": "src/before-each/dist/mjs/index.d.ts",
																	"line": 24,
																	"character": 19
																}
															],
															"parameters": [
																{
																	"id": 372,
																	"name": "t",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"target": 565,
																		"typeArguments": [
																			{
																				"type": "reference",
																				"target": 161,
																				"name": "BuiltPlugins",
																				"package": "@tapjs/test-built"
																			},
																			{
																				"type": "reference",
																				"target": 19,
																				"name": "TestOpts",
																				"package": "@tapjs/test-built"
																			}
																		],
																		"name": "Test",
																		"package": "@tapjs/test-built"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "PluginResult.beforeEach"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "PluginResult.beforeEach"
							}
						},
						{
							"id": 420,
							"name": "capture",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/intercept/dist/mjs/index.d.ts",
									"line": 195,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 421,
									"name": "capture",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Intercept calls to a method to track the arguments, call site,\nand return/throw status, and replace the implementation.\n\nBy default, the method is set to a no-op. To retain the method behavior,\npass the current value of the method as the third argument.  For example:\n\n"
											},
											{
												"kind": "code",
												"text": "```\nconst results = t.capture(obj, 'foo', obj.foo)\n```"
											},
											{
												"kind": "text",
												"text": "\n\nAutomatically restores at "
											},
											{
												"kind": "code",
												"text": "`t.teardown()`"
											},
											{
												"kind": "text",
												"text": " if the "
											},
											{
												"kind": "code",
												"text": "`@tapjs/after`"
											},
											{
												"kind": "text",
												"text": "\nplugin is not disabled.  Otherwise, it is important to call the\n"
											},
											{
												"kind": "code",
												"text": "`restore()`"
											},
											{
												"kind": "text",
												"text": " method on the returned function when you are done capturing."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/intercept/dist/mjs/index.d.ts",
											"line": 195,
											"character": 4
										}
									],
									"typeParameter": [
										{
											"id": 422,
											"name": "T",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 423,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {}
												}
											}
										},
										{
											"id": 424,
											"name": "M",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										}
									],
									"parameters": [
										{
											"id": 425,
											"name": "obj",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": -1,
												"name": "T",
												"refersToTypeParameter": true
											}
										},
										{
											"id": 426,
											"name": "method",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": -1,
												"name": "M",
												"refersToTypeParameter": true
											}
										},
										{
											"id": 427,
											"name": "impl",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 428,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"sources": [
														{
															"fileName": "src/intercept/dist/mjs/index.d.ts",
															"line": 195,
															"character": 74
														}
													],
													"signatures": [
														{
															"id": 429,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {},
															"sources": [
																{
																	"fileName": "src/intercept/dist/mjs/index.d.ts",
																	"line": 195,
																	"character": 74
																}
															],
															"parameters": [
																{
																	"id": 430,
																	"name": "a",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../intercept/src/index.ts",
											"qualifiedName": "CaptureResultsMethod"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": -1,
												"name": "T",
												"refersToTypeParameter": true
											},
											{
												"type": "reference",
												"target": -1,
												"name": "M",
												"refersToTypeParameter": true
											},
											{
												"type": "indexedAccess",
												"indexType": {
													"type": "reference",
													"target": -1,
													"name": "M",
													"refersToTypeParameter": true
												},
												"objectType": {
													"type": "reference",
													"target": -1,
													"name": "T",
													"refersToTypeParameter": true
												}
											}
										],
										"name": "CaptureResultsMethod",
										"package": "@tapjs/intercept"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "PluginResult.capture"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "PluginResult.capture"
							}
						},
						{
							"id": 431,
							"name": "captureFn",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/intercept/dist/mjs/index.d.ts",
									"line": 204,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 432,
									"name": "captureFn",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Just wrap the function and return it.  Does not have any\nlogic to restore, since it's not actually modifying anything.\nThe results hang off the function as the 'calls' property.\n\nThe added "
											},
											{
												"kind": "code",
												"text": "`fn.args()`"
											},
											{
												"kind": "text",
												"text": " method will return an array of the arguments\npassed to each call since the last time it was inspected."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/intercept/dist/mjs/index.d.ts",
											"line": 204,
											"character": 4
										}
									],
									"typeParameter": [
										{
											"id": 433,
											"name": "F",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 434,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"sources": [
														{
															"fileName": "src/intercept/dist/mjs/index.d.ts",
															"line": 204,
															"character": 24
														}
													],
													"signatures": [
														{
															"id": 435,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {},
															"sources": [
																{
																	"fileName": "src/intercept/dist/mjs/index.d.ts",
																	"line": 204,
																	"character": 24
																}
															],
															"parameters": [
																{
																	"id": 436,
																	"name": "this",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																},
																{
																	"id": 437,
																	"name": "a",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													]
												}
											}
										}
									],
									"parameters": [
										{
											"id": 438,
											"name": "original",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": -1,
												"name": "F",
												"refersToTypeParameter": true
											}
										}
									],
									"type": {
										"type": "intersection",
										"types": [
											{
												"type": "reflection",
												"declaration": {
													"id": 439,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"sources": [
														{
															"fileName": "src/intercept/dist/mjs/index.d.ts",
															"line": 204,
															"character": 72
														}
													],
													"signatures": [
														{
															"id": 440,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {},
															"sources": [
																{
																	"fileName": "src/intercept/dist/mjs/index.d.ts",
																	"line": 204,
																	"character": 72
																}
															],
															"parameters": [
																{
																	"id": 441,
																	"name": "a",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													]
												}
											},
											{
												"type": "reflection",
												"declaration": {
													"id": 442,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"children": [
														{
															"id": 444,
															"name": "args",
															"variant": "declaration",
															"kind": 1024,
															"flags": {},
															"sources": [
																{
																	"fileName": "src/intercept/dist/mjs/index.d.ts",
																	"line": 206,
																	"character": 8
																}
															],
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 445,
																	"name": "__type",
																	"variant": "declaration",
																	"kind": 65536,
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "src/intercept/dist/mjs/index.d.ts",
																			"line": 206,
																			"character": 14
																		}
																	],
																	"signatures": [
																		{
																			"id": 446,
																			"name": "__type",
																			"variant": "signature",
																			"kind": 4096,
																			"flags": {},
																			"sources": [
																				{
																					"fileName": "src/intercept/dist/mjs/index.d.ts",
																					"line": 206,
																					"character": 14
																				}
																			],
																			"type": {
																				"type": "array",
																				"elementType": {
																					"type": "reference",
																					"target": {
																						"sourceFileName": "../intercept/src/index.ts",
																						"qualifiedName": "TupleUnion"
																					},
																					"typeArguments": [
																						{
																							"type": "reference",
																							"target": {
																								"sourceFileName": "../intercept/src/index.ts",
																								"qualifiedName": "FilterUnknown"
																							},
																							"typeArguments": [
																								{
																									"type": "reference",
																									"target": {
																										"sourceFileName": "../intercept/src/index.ts",
																										"qualifiedName": "OverloadParamsTuple"
																									},
																									"typeArguments": [
																										{
																											"type": "reference",
																											"target": -1,
																											"name": "F",
																											"refersToTypeParameter": true
																										}
																									],
																									"name": "OverloadParamsTuple",
																									"package": "@tapjs/intercept"
																								}
																							],
																							"name": "FilterUnknown",
																							"package": "@tapjs/intercept"
																						}
																					],
																					"name": "TupleUnion",
																					"package": "@tapjs/intercept"
																				}
																			}
																		}
																	]
																}
															}
														},
														{
															"id": 443,
															"name": "calls",
															"variant": "declaration",
															"kind": 1024,
															"flags": {},
															"sources": [
																{
																	"fileName": "src/intercept/dist/mjs/index.d.ts",
																	"line": 205,
																	"character": 8
																}
															],
															"type": {
																"type": "array",
																"elementType": {
																	"type": "reference",
																	"target": {
																		"sourceFileName": "../intercept/src/index.ts",
																		"qualifiedName": "CaptureResult"
																	},
																	"typeArguments": [
																		{
																			"type": "reference",
																			"target": -1,
																			"name": "F",
																			"refersToTypeParameter": true
																		}
																	],
																	"name": "CaptureResult",
																	"package": "@tapjs/intercept"
																}
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"children": [
																444,
																443
															]
														}
													],
													"sources": [
														{
															"fileName": "src/intercept/dist/mjs/index.d.ts",
															"line": 204,
															"character": 96
														}
													]
												}
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "PluginResult.captureFn"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "PluginResult.captureFn"
							}
						},
						{
							"id": 448,
							"name": "createMock",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/mock/dist/mjs/index.d.ts",
									"line": 43,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 449,
									"name": "createMock",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Convenience method to create a mock from an existing object by\noverriding some (possibly deeply nested) methods or properties.\n\nExample:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport * as fs from 'node:fs'\nconst mockedThing = t.mockRequire('./module.js', t.createMock(\n  { fs },\n  { fs: { statSync: myMockedStatSync }}\n)\n```"
											},
											{
												"kind": "text",
												"text": "\n\nThis can also appear anywhere in the object hierarchy, which may\nbe more convenient in some cases:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport * as blah from '@long-name/blah-api'\nconst mockedThing = t.mockRequire('./module.js', {\n  fs: t.createMock(fs, { statSync: myMockedStatSync }),\n  child_process: t.createMock(child_process, { spawn: mockSpawn }),\n  '@long-name/blah-api': t.createMock(blah, {\n    some: {\n      nested: {\n        prop: true\n      }\n    }\n  })\n})\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo *remove* a property, set it as undefined in the override."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/mock/dist/mjs/index.d.ts",
											"line": 43,
											"character": 4
										}
									],
									"typeParameter": [
										{
											"id": 450,
											"name": "B",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "any"
														}
													},
													{
														"type": "reflection",
														"declaration": {
															"id": 451,
															"name": "__type",
															"variant": "declaration",
															"kind": 65536,
															"flags": {},
															"sources": [
																{
																	"fileName": "src/mock/dist/mjs/index.d.ts",
																	"line": 43,
																	"character": 25
																}
															],
															"indexSignature": {
																"id": 452,
																"name": "__index",
																"variant": "signature",
																"kind": 8192,
																"flags": {},
																"sources": [
																	{
																		"fileName": "src/mock/dist/mjs/index.d.ts",
																		"line": 44,
																		"character": 8
																	}
																],
																"parameters": [
																	{
																		"id": 453,
																		"name": "k",
																		"variant": "param",
																		"kind": 32768,
																		"flags": {},
																		"type": {
																			"type": "reference",
																			"target": {
																				"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
																				"qualifiedName": "PropertyKey"
																			},
																			"name": "PropertyKey",
																			"package": "typescript"
																		}
																	}
																],
																"type": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													}
												]
											}
										},
										{
											"id": 454,
											"name": "O",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "any"
														}
													},
													{
														"type": "reflection",
														"declaration": {
															"id": 455,
															"name": "__type",
															"variant": "declaration",
															"kind": 65536,
															"flags": {},
															"sources": [
																{
																	"fileName": "src/mock/dist/mjs/index.d.ts",
																	"line": 45,
																	"character": 30
																}
															],
															"indexSignature": {
																"id": 456,
																"name": "__index",
																"variant": "signature",
																"kind": 8192,
																"flags": {},
																"sources": [
																	{
																		"fileName": "src/mock/dist/mjs/index.d.ts",
																		"line": 46,
																		"character": 8
																	}
																],
																"parameters": [
																	{
																		"id": 457,
																		"name": "k",
																		"variant": "param",
																		"kind": 32768,
																		"flags": {},
																		"type": {
																			"type": "intrinsic",
																			"name": "string"
																		}
																	}
																],
																"type": {
																	"type": "intrinsic",
																	"name": "any"
																}
															}
														}
													}
												]
											}
										}
									],
									"parameters": [
										{
											"id": 458,
											"name": "bases",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": -1,
												"name": "B",
												"refersToTypeParameter": true
											}
										},
										{
											"id": 459,
											"name": "overrides",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": -1,
												"name": "O",
												"refersToTypeParameter": true
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../mock/src/index.ts",
											"qualifiedName": "MockedObject"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": -1,
												"name": "B",
												"refersToTypeParameter": true
											},
											{
												"type": "reference",
												"target": -1,
												"name": "O",
												"refersToTypeParameter": true
											}
										],
										"name": "MockedObject",
										"package": "@tapjs/mock"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "PluginResult.createMock"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "PluginResult.createMock"
							}
						},
						{
							"id": 327,
							"name": "doesNotThrow",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/asserts/dist/mjs/index.d.ts",
									"line": 181,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 328,
									"name": "doesNotThrow",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Returns the error object if it throws and that does not fail the test\n(by virtue of being marked skip or todo). Otherwise returns the\npassing status, like other assertions."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/asserts/dist/mjs/index.d.ts",
											"line": 181,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 329,
											"name": "fn",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"target": {
															"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
															"qualifiedName": "Function"
														},
														"name": "Function",
														"package": "typescript"
													},
													{
														"type": "reflection",
														"declaration": {
															"id": 330,
															"name": "__type",
															"variant": "declaration",
															"kind": 65536,
															"flags": {},
															"sources": [
																{
																	"fileName": "src/asserts/dist/mjs/index.d.ts",
																	"line": 181,
																	"character": 33
																}
															],
															"signatures": [
																{
																	"id": 331,
																	"name": "__type",
																	"variant": "signature",
																	"kind": 4096,
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "src/asserts/dist/mjs/index.d.ts",
																			"line": 181,
																			"character": 33
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																}
															]
														}
													}
												]
											}
										},
										{
											"id": 332,
											"name": "__namedParameters",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../core/src/index.ts",
													"qualifiedName": "MessageExtra"
												},
												"name": "MessageExtra",
												"package": "@tapjs/core"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "boolean"
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "Error"
												},
												"name": "Error",
												"package": "typescript"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "PluginResult.doesNotThrow"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "PluginResult.doesNotThrow"
							}
						},
						{
							"id": 355,
							"name": "emits",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/asserts/dist/mjs/index.d.ts",
									"line": 210,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 356,
									"name": "emits",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Asserts that the emitter emits the specified event before the test\nends. Returns a promise that resolves when the event is emitted.\nNote that waiting on the returned promise within a test can deadlock\nthe test, if the event never emits, but the returned promise can be\na handy way to pause a test until an event happens, if you are\nreasonably confident that it will fire."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/asserts/dist/mjs/index.d.ts",
											"line": 210,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 357,
											"name": "emitter",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"target": {
															"sourceFileName": "../../node_modules/@types/node/events.d.ts",
															"qualifiedName": "EventEmitter"
														},
														"name": "EventEmitter",
														"package": "@types/node"
													},
													{
														"type": "reference",
														"target": {
															"sourceFileName": "../../node_modules/typescript/lib/lib.dom.d.ts",
															"qualifiedName": "EventTarget"
														},
														"name": "EventTarget",
														"package": "typescript"
													}
												]
											}
										},
										{
											"id": 358,
											"name": "event",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 359,
											"name": "__namedParameters",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../core/src/index.ts",
													"qualifiedName": "MessageExtra"
												},
												"name": "MessageExtra",
												"package": "@tapjs/core"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "PluginResult.emits"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "PluginResult.emits"
							}
						},
						{
							"id": 189,
							"name": "equal",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/asserts/dist/mjs/index.d.ts",
									"line": 44,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 190,
									"name": "equal",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Verify that the values are equal"
											}
										]
									},
									"sources": [
										{
											"fileName": "src/asserts/dist/mjs/index.d.ts",
											"line": 44,
											"character": 4
										}
									],
									"typeParameter": [
										{
											"id": 191,
											"name": "T",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "unknown"
											}
										}
									],
									"parameters": [
										{
											"id": 192,
											"name": "found",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 193,
											"name": "wanted",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": -1,
												"name": "T",
												"refersToTypeParameter": true
											}
										},
										{
											"id": 194,
											"name": "__namedParameters",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../core/src/index.ts",
													"qualifiedName": "MessageExtra"
												},
												"name": "MessageExtra",
												"package": "@tapjs/core"
											}
										}
									],
									"type": {
										"type": "predicate",
										"name": "found",
										"asserts": false,
										"targetType": {
											"type": "reference",
											"target": -1,
											"name": "T",
											"refersToTypeParameter": true
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "PluginResult.equal"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "PluginResult.equal"
							}
						},
						{
							"id": 400,
							"name": "fixture",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/fixture/dist/mjs/index.d.ts",
									"line": 20,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 401,
									"name": "fixture",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"sources": [
										{
											"fileName": "src/fixture/dist/mjs/index.d.ts",
											"line": 20,
											"character": 4
										}
									],
									"typeParameter": [
										{
											"id": 402,
											"name": "T",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../fixture/src/fixture.ts",
													"qualifiedName": "FixtureType"
												},
												"name": "FixtureType",
												"package": "@tapjs/fixture"
											}
										}
									],
									"parameters": [
										{
											"id": 403,
											"name": "type",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": -1,
												"name": "T",
												"refersToTypeParameter": true
											}
										},
										{
											"id": 404,
											"name": "content",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../fixture/src/fixture.ts",
													"qualifiedName": "FixtureContent"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": -1,
														"name": "T",
														"refersToTypeParameter": true
													}
												],
												"name": "FixtureContent",
												"package": "@tapjs/fixture"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../fixture/src/fixture.ts",
											"qualifiedName": "Fixture"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": -1,
												"name": "T",
												"refersToTypeParameter": true
											}
										],
										"name": "Fixture",
										"package": "@tapjs/fixture"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "PluginResult.fixture"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "PluginResult.fixture"
							}
						},
						{
							"id": 226,
							"name": "has",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/asserts/dist/mjs/index.d.ts",
									"line": 79,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 227,
									"name": "has",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Verify that the object has all of the properties and values in the\npattern, matching loosely."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/asserts/dist/mjs/index.d.ts",
											"line": 79,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 228,
											"name": "found",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 229,
											"name": "wanted",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 230,
											"name": "__namedParameters",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../core/src/index.ts",
													"qualifiedName": "MessageExtra"
												},
												"name": "MessageExtra",
												"package": "@tapjs/core"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "PluginResult.has"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "PluginResult.has"
							}
						},
						{
							"id": 293,
							"name": "hasOwnProp",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/asserts/dist/mjs/index.d.ts",
									"line": 152,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 294,
									"name": "hasOwnProp",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Verify that the object has the wanted property, using\nObject#hasOwnProperty"
											}
										]
									},
									"sources": [
										{
											"fileName": "src/asserts/dist/mjs/index.d.ts",
											"line": 152,
											"character": 4
										}
									],
									"typeParameter": [
										{
											"id": 295,
											"name": "T",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 296,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {}
												}
											}
										}
									],
									"parameters": [
										{
											"id": 297,
											"name": "found",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": -1,
												"name": "T",
												"refersToTypeParameter": true
											}
										},
										{
											"id": 298,
											"name": "wanted",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										},
										{
											"id": 299,
											"name": "__namedParameters",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../core/src/index.ts",
													"qualifiedName": "MessageExtra"
												},
												"name": "MessageExtra",
												"package": "@tapjs/core"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "PluginResult.hasOwnProp"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "PluginResult.hasOwnProp"
							}
						},
						{
							"id": 307,
							"name": "hasOwnProps",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/asserts/dist/mjs/index.d.ts",
									"line": 162,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 308,
									"name": "hasOwnProps",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Verify that the object has all of the properties listed in the\n"
											},
											{
												"kind": "code",
												"text": "`wanted`"
											},
											{
												"kind": "text",
												"text": " list, using Object#hasOwnProperties()"
											}
										]
									},
									"sources": [
										{
											"fileName": "src/asserts/dist/mjs/index.d.ts",
											"line": 162,
											"character": 4
										}
									],
									"typeParameter": [
										{
											"id": 309,
											"name": "T",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 310,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {}
												}
											}
										}
									],
									"parameters": [
										{
											"id": 311,
											"name": "found",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": -1,
												"name": "T",
												"refersToTypeParameter": true
											}
										},
										{
											"id": 312,
											"name": "wanted",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/typescript/lib/lib.es2015.iterable.d.ts",
													"qualifiedName": "Iterable"
												},
												"typeArguments": [
													{
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "intrinsic",
																"name": "number"
															},
															{
																"type": "intrinsic",
																"name": "symbol"
															}
														]
													}
												],
												"name": "Iterable",
												"package": "typescript"
											}
										},
										{
											"id": 313,
											"name": "__namedParameters",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../core/src/index.ts",
													"qualifiedName": "MessageExtra"
												},
												"name": "MessageExtra",
												"package": "@tapjs/core"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "PluginResult.hasOwnProps"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "PluginResult.hasOwnProps"
							}
						},
						{
							"id": 314,
							"name": "hasOwnPropsOnly",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/asserts/dist/mjs/index.d.ts",
									"line": 167,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 315,
									"name": "hasOwnPropsOnly",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Verify that the object has all of the properties listed in the\n"
											},
											{
												"kind": "code",
												"text": "`wanted`"
											},
											{
												"kind": "text",
												"text": " list, using Object#hasOwnProperties(), and no others"
											}
										]
									},
									"sources": [
										{
											"fileName": "src/asserts/dist/mjs/index.d.ts",
											"line": 167,
											"character": 4
										}
									],
									"typeParameter": [
										{
											"id": 316,
											"name": "T",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 317,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {}
												}
											}
										}
									],
									"parameters": [
										{
											"id": 318,
											"name": "found",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": -1,
												"name": "T",
												"refersToTypeParameter": true
											}
										},
										{
											"id": 319,
											"name": "wanted",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/typescript/lib/lib.es2015.iterable.d.ts",
													"qualifiedName": "Iterable"
												},
												"typeArguments": [
													{
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "intrinsic",
																"name": "number"
															},
															{
																"type": "intrinsic",
																"name": "symbol"
															}
														]
													}
												],
												"name": "Iterable",
												"package": "typescript"
											}
										},
										{
											"id": 320,
											"name": "__namedParameters",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../core/src/index.ts",
													"qualifiedName": "MessageExtra"
												},
												"name": "MessageExtra",
												"package": "@tapjs/core"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "PluginResult.hasOwnPropsOnly"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "PluginResult.hasOwnPropsOnly"
							}
						},
						{
							"id": 286,
							"name": "hasProp",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/asserts/dist/mjs/index.d.ts",
									"line": 147,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 287,
									"name": "hasProp",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Verify that the object has the wanted property, anywhere in its\nprototype chain."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/asserts/dist/mjs/index.d.ts",
											"line": 147,
											"character": 4
										}
									],
									"typeParameter": [
										{
											"id": 288,
											"name": "T",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 289,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {}
												}
											}
										}
									],
									"parameters": [
										{
											"id": 290,
											"name": "found",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": -1,
												"name": "T",
												"refersToTypeParameter": true
											}
										},
										{
											"id": 291,
											"name": "wanted",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										},
										{
											"id": 292,
											"name": "__namedParameters",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../core/src/index.ts",
													"qualifiedName": "MessageExtra"
												},
												"name": "MessageExtra",
												"package": "@tapjs/core"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "PluginResult.hasProp"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "PluginResult.hasProp"
							}
						},
						{
							"id": 300,
							"name": "hasProps",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/asserts/dist/mjs/index.d.ts",
									"line": 157,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 301,
									"name": "hasProps",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Verify that the object has all of the properties in the "
											},
											{
												"kind": "code",
												"text": "`wanted`"
											},
											{
												"kind": "text",
												"text": "\nlist, anywhere in its prototype chain."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/asserts/dist/mjs/index.d.ts",
											"line": 157,
											"character": 4
										}
									],
									"typeParameter": [
										{
											"id": 302,
											"name": "T",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 303,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {}
												}
											}
										}
									],
									"parameters": [
										{
											"id": 304,
											"name": "found",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": -1,
												"name": "T",
												"refersToTypeParameter": true
											}
										},
										{
											"id": 305,
											"name": "wanted",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/typescript/lib/lib.es2015.iterable.d.ts",
													"qualifiedName": "Iterable"
												},
												"typeArguments": [
													{
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "intrinsic",
																"name": "number"
															},
															{
																"type": "intrinsic",
																"name": "symbol"
															}
														]
													}
												],
												"name": "Iterable",
												"package": "typescript"
											}
										},
										{
											"id": 306,
											"name": "__namedParameters",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../core/src/index.ts",
													"qualifiedName": "MessageExtra"
												},
												"name": "MessageExtra",
												"package": "@tapjs/core"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "PluginResult.hasProps"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "PluginResult.hasProps"
							}
						},
						{
							"id": 236,
							"name": "hasStrict",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/asserts/dist/mjs/index.d.ts",
									"line": 89,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 237,
									"name": "hasStrict",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Verify that the value has all of the properties and values in the\npattern, matching strictly."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/asserts/dist/mjs/index.d.ts",
											"line": 89,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 238,
											"name": "found",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 239,
											"name": "wanted",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 240,
											"name": "__namedParameters",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../core/src/index.ts",
													"qualifiedName": "MessageExtra"
												},
												"name": "MessageExtra",
												"package": "@tapjs/core"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "PluginResult.hasStrict"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "PluginResult.hasStrict"
							}
						},
						{
							"id": 413,
							"name": "intercept",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/intercept/dist/mjs/index.d.ts",
									"line": 179,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 414,
									"name": "intercept",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Intercept and track object property sets and gets.\n\nIf a PropertyDescriptor is set, then it will be used as the replacement\nvalue. Otherwise, the original descriptor will be used.\n\nIf the "
											},
											{
												"kind": "code",
												"text": "`strictMode`"
											},
											{
												"kind": "text",
												"text": " param is set, then attempts to write to read-only\nproperties will throw an error."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/intercept/dist/mjs/index.d.ts",
											"line": 179,
											"character": 4
										}
									],
									"typeParameter": [
										{
											"id": 415,
											"name": "T",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "object"
											}
										}
									],
									"parameters": [
										{
											"id": 416,
											"name": "obj",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": -1,
												"name": "T",
												"refersToTypeParameter": true
											}
										},
										{
											"id": 417,
											"name": "prop",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"target": -1,
													"name": "T",
													"refersToTypeParameter": true
												}
											}
										},
										{
											"id": 418,
											"name": "desc",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "PropertyDescriptor"
												},
												"name": "PropertyDescriptor",
												"package": "typescript"
											}
										},
										{
											"id": 419,
											"name": "strictMode",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../intercept/src/index.ts",
											"qualifiedName": "InterceptResultsMethod"
										},
										"name": "InterceptResultsMethod",
										"package": "@tapjs/intercept"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "PluginResult.intercept"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "PluginResult.intercept"
							}
						},
						{
							"id": 246,
							"name": "match",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/asserts/dist/mjs/index.d.ts",
									"line": 101,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 247,
									"name": "match",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Verify that the value matches the pattern provided"
											}
										]
									},
									"sources": [
										{
											"fileName": "src/asserts/dist/mjs/index.d.ts",
											"line": 101,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 248,
											"name": "found",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 249,
											"name": "wanted",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 250,
											"name": "__namedParameters",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../core/src/index.ts",
													"qualifiedName": "MessageExtra"
												},
												"name": "MessageExtra",
												"package": "@tapjs/core"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "PluginResult.match"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "PluginResult.match"
							}
						},
						{
							"id": 256,
							"name": "matchOnly",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/asserts/dist/mjs/index.d.ts",
									"line": 110,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 257,
									"name": "matchOnly",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Verify that the value matches the pattern provided, with no\nextra properties."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/asserts/dist/mjs/index.d.ts",
											"line": 110,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 258,
											"name": "found",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 259,
											"name": "wanted",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 260,
											"name": "__namedParameters",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../core/src/index.ts",
													"qualifiedName": "MessageExtra"
												},
												"name": "MessageExtra",
												"package": "@tapjs/core"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "PluginResult.matchOnly"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "PluginResult.matchOnly"
							}
						},
						{
							"id": 266,
							"name": "matchOnlyStrict",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/asserts/dist/mjs/index.d.ts",
									"line": 120,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 267,
									"name": "matchOnlyStrict",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Verify that the value matches the pattern provided, with no\nextra properties."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/asserts/dist/mjs/index.d.ts",
											"line": 120,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 268,
											"name": "found",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 269,
											"name": "wanted",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 270,
											"name": "__namedParameters",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../core/src/index.ts",
													"qualifiedName": "MessageExtra"
												},
												"name": "MessageExtra",
												"package": "@tapjs/core"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "PluginResult.matchOnlyStrict"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "PluginResult.matchOnlyStrict"
							}
						},
						{
							"id": 513,
							"name": "matchSnapshot",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/snapshot/dist/mjs/index.d.ts",
									"line": 64,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 514,
									"name": "matchSnapshot",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"sources": [
										{
											"fileName": "src/snapshot/dist/mjs/index.d.ts",
											"line": 64,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 515,
											"name": "found",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 516,
											"name": "__namedParameters",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../core/src/index.ts",
													"qualifiedName": "MessageExtra"
												},
												"name": "MessageExtra",
												"package": "@tapjs/core"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "PluginResult.matchSnapshot"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "PluginResult.matchSnapshot"
							}
						},
						{
							"id": 276,
							"name": "matchStrict",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/asserts/dist/mjs/index.d.ts",
									"line": 137,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 277,
									"name": "matchStrict",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Verify that the value matches the pattern provided, but fail if any\nfields *only* match via type coercion.\n\nFor example,\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nt.matchStrict({ a: 1 }, { a: Number }, 'this passes')\nt.matchStrict({ a: 1 }, { a: '1' }, 'this fails')\n```"
											}
										]
									},
									"sources": [
										{
											"fileName": "src/asserts/dist/mjs/index.d.ts",
											"line": 137,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 278,
											"name": "found",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 279,
											"name": "wanted",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 280,
											"name": "__namedParameters",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../core/src/index.ts",
													"qualifiedName": "MessageExtra"
												},
												"name": "MessageExtra",
												"package": "@tapjs/core"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "PluginResult.matchStrict"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "PluginResult.matchStrict"
							}
						},
						{
							"id": 460,
							"name": "mock",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/mock/dist/mjs/index.d.ts",
									"line": 56,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 461,
									"name": "mock",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Deprecated alias for "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "TapMock#mockRequire"
											},
											{
												"kind": "text",
												"text": "\n\nPrints a warning to stderr the first time it used, otherwise\nidentical."
											}
										],
										"blockTags": [
											{
												"tag": "@deprecated",
												"content": []
											}
										]
									},
									"sources": [
										{
											"fileName": "src/mock/dist/mjs/index.d.ts",
											"line": 56,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 462,
											"name": "module",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 463,
											"name": "mocks",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 464,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"sources": [
														{
															"fileName": "src/mock/dist/mjs/index.d.ts",
															"line": 56,
															"character": 33
														}
													],
													"indexSignature": {
														"id": 465,
														"name": "__index",
														"variant": "signature",
														"kind": 8192,
														"flags": {},
														"sources": [
															{
																"fileName": "src/mock/dist/mjs/index.d.ts",
																"line": 57,
																"character": 8
															}
														],
														"parameters": [
															{
																"id": 466,
																"name": "k",
																"variant": "param",
																"kind": 32768,
																"flags": {},
																"type": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														],
														"type": {
															"type": "intrinsic",
															"name": "any"
														}
													}
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "PluginResult.mock"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "PluginResult.mock"
							}
						},
						{
							"id": 467,
							"name": "mockImport",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/mock/dist/mjs/index.d.ts",
									"line": 79,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 468,
									"name": "mockImport",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Load the supplied module asynchronously using import(),\nreplacing any of the referenced modules with the mocks provided.\n\nWorks with either ESM or CommonJS modules, but as with "
											},
											{
												"kind": "code",
												"text": "`import()`"
											},
											{
												"kind": "text",
												"text": " of\nCommonJS modules, the "
											},
											{
												"kind": "code",
												"text": "`module.exports`"
											},
											{
												"kind": "text",
												"text": " value will be set as the\n"
											},
											{
												"kind": "code",
												"text": "`default`"
											},
											{
												"kind": "text",
												"text": " property on the resolved object, making\n"
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "TapMock#mockRequire"
											},
											{
												"kind": "text",
												"text": " somewhat more intuitive in those cases.\n\nFor type info, cast result to "
											},
											{
												"kind": "code",
												"text": "`as typeof import(...)`"
											},
											{
												"kind": "text",
												"text": ", as\nTypeScript lacks a way to infer imports dynamically.\n\nFor example:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nconst myThing = await t.mockImport('../my-thing.js', {\n  some: { tricky: 'mocks' },\n}) as typeof import('../my-thing.js')\n```"
											}
										]
									},
									"sources": [
										{
											"fileName": "src/mock/dist/mjs/index.d.ts",
											"line": 79,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 469,
											"name": "module",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 470,
											"name": "mocks",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 471,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"sources": [
														{
															"fileName": "src/mock/dist/mjs/index.d.ts",
															"line": 79,
															"character": 39
														}
													],
													"indexSignature": {
														"id": 472,
														"name": "__index",
														"variant": "signature",
														"kind": 8192,
														"flags": {},
														"sources": [
															{
																"fileName": "src/mock/dist/mjs/index.d.ts",
																"line": 80,
																"character": 8
															}
														],
														"parameters": [
															{
																"id": 473,
																"name": "k",
																"variant": "param",
																"kind": 32768,
																"flags": {},
																"type": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														],
														"type": {
															"type": "intrinsic",
															"name": "any"
														}
													}
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "PluginResult.mockImport"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "PluginResult.mockImport"
							}
						},
						{
							"id": 474,
							"name": "mockRequire",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/mock/dist/mjs/index.d.ts",
									"line": 98,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 475,
									"name": "mockRequire",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Load the supplied module synchronously using "
											},
											{
												"kind": "code",
												"text": "`require()`"
											},
											{
												"kind": "text",
												"text": ",\nreplacing any of the referenced modules with the mocks provided.\n\nOnly works with CommonJS modules.\n\nFor type info, cast result to "
											},
											{
												"kind": "code",
												"text": "`as typeof import(...)`"
											},
											{
												"kind": "text",
												"text": ", as\nTypeScript lacks a way to infer imports dynamically.\n\nFor example:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nconst myThing = t.mockRequire('../my-thing.js', {\n  some: { tricky: 'mocks' },\n}) as typeof import('../my-thing.js')"
											}
										]
									},
									"sources": [
										{
											"fileName": "src/mock/dist/mjs/index.d.ts",
											"line": 98,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 476,
											"name": "module",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 477,
											"name": "mocks",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 478,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"sources": [
														{
															"fileName": "src/mock/dist/mjs/index.d.ts",
															"line": 98,
															"character": 40
														}
													],
													"indexSignature": {
														"id": 479,
														"name": "__index",
														"variant": "signature",
														"kind": 8192,
														"flags": {},
														"sources": [
															{
																"fileName": "src/mock/dist/mjs/index.d.ts",
																"line": 99,
																"character": 8
															}
														],
														"parameters": [
															{
																"id": 480,
																"name": "k",
																"variant": "param",
																"kind": 32768,
																"flags": {},
																"type": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														],
														"type": {
															"type": "intrinsic",
															"name": "any"
														}
													}
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "PluginResult.mockRequire"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "PluginResult.mockRequire"
							}
						},
						{
							"id": 195,
							"name": "not",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/asserts/dist/mjs/index.d.ts",
									"line": 48,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 196,
									"name": "not",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Verify that the values are not equal"
											}
										]
									},
									"sources": [
										{
											"fileName": "src/asserts/dist/mjs/index.d.ts",
											"line": 48,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 197,
											"name": "found",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 198,
											"name": "doNotWant",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 199,
											"name": "__namedParameters",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../core/src/index.ts",
													"qualifiedName": "MessageExtra"
												},
												"name": "MessageExtra",
												"package": "@tapjs/core"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "PluginResult.not"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "PluginResult.not"
							}
						},
						{
							"id": 231,
							"name": "notHas",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/asserts/dist/mjs/index.d.ts",
									"line": 84,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 232,
									"name": "notHas",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Verify that the object does NOT have all of the properties and values\nin the pattern, matching loosely."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/asserts/dist/mjs/index.d.ts",
											"line": 84,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 233,
											"name": "found",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 234,
											"name": "doNotWant",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 235,
											"name": "__namedParameters",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../core/src/index.ts",
													"qualifiedName": "MessageExtra"
												},
												"name": "MessageExtra",
												"package": "@tapjs/core"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "PluginResult.notHas"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "PluginResult.notHas"
							}
						},
						{
							"id": 241,
							"name": "notHasStrict",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/asserts/dist/mjs/index.d.ts",
									"line": 97,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 242,
									"name": "notHasStrict",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Verify that the value does NOT contain all of the properties and\nvalues in the test pattern, comparing strictly.\n\nNote that this will pass if the value has *some* of the listed properties,\nor if they do not match the same type."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/asserts/dist/mjs/index.d.ts",
											"line": 97,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 243,
											"name": "found",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 244,
											"name": "doNotWant",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 245,
											"name": "__namedParameters",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../core/src/index.ts",
													"qualifiedName": "MessageExtra"
												},
												"name": "MessageExtra",
												"package": "@tapjs/core"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "PluginResult.notHasStrict"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "PluginResult.notHasStrict"
							}
						},
						{
							"id": 251,
							"name": "notMatch",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/asserts/dist/mjs/index.d.ts",
									"line": 105,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 252,
									"name": "notMatch",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Verify that the value does NOT match the pattern provided."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/asserts/dist/mjs/index.d.ts",
											"line": 105,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 253,
											"name": "found",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 254,
											"name": "doNotWant",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 255,
											"name": "__namedParameters",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../core/src/index.ts",
													"qualifiedName": "MessageExtra"
												},
												"name": "MessageExtra",
												"package": "@tapjs/core"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "PluginResult.notMatch"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "PluginResult.notMatch"
							}
						},
						{
							"id": 261,
							"name": "notMatchOnly",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/asserts/dist/mjs/index.d.ts",
									"line": 115,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 262,
									"name": "notMatchOnly",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Verify that the value does not match the pattern provided, with no\nextra properties. Ie, it might either not match, or have extra props."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/asserts/dist/mjs/index.d.ts",
											"line": 115,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 263,
											"name": "found",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 264,
											"name": "doNotWant",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 265,
											"name": "__namedParameters",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../core/src/index.ts",
													"qualifiedName": "MessageExtra"
												},
												"name": "MessageExtra",
												"package": "@tapjs/core"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "PluginResult.notMatchOnly"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "PluginResult.notMatchOnly"
							}
						},
						{
							"id": 271,
							"name": "notMatchOnlyStrict",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/asserts/dist/mjs/index.d.ts",
									"line": 125,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 272,
									"name": "notMatchOnlyStrict",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Verify that the value does not match the pattern provided, with no\nextra properties. Ie, it might either not match, or have extra props."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/asserts/dist/mjs/index.d.ts",
											"line": 125,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 273,
											"name": "found",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 274,
											"name": "doNotWant",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 275,
											"name": "__namedParameters",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../core/src/index.ts",
													"qualifiedName": "MessageExtra"
												},
												"name": "MessageExtra",
												"package": "@tapjs/core"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "PluginResult.notMatchOnlyStrict"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "PluginResult.notMatchOnlyStrict"
							}
						},
						{
							"id": 281,
							"name": "notMatchStrict",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/asserts/dist/mjs/index.d.ts",
									"line": 142,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 282,
									"name": "notMatchStrict",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Verify that the value does not match the pattern provided, without\ntype coercion."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/asserts/dist/mjs/index.d.ts",
											"line": 142,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 283,
											"name": "found",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 284,
											"name": "doNotWant",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 285,
											"name": "__namedParameters",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../core/src/index.ts",
													"qualifiedName": "MessageExtra"
												},
												"name": "MessageExtra",
												"package": "@tapjs/core"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "PluginResult.notMatchStrict"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "PluginResult.notMatchStrict"
							}
						},
						{
							"id": 185,
							"name": "notOk",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/asserts/dist/mjs/index.d.ts",
									"line": 40,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 186,
									"name": "notOk",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Verify that the value is not truthy"
											}
										]
									},
									"sources": [
										{
											"fileName": "src/asserts/dist/mjs/index.d.ts",
											"line": 40,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 187,
											"name": "obj",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 188,
											"name": "__namedParameters",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../core/src/index.ts",
													"qualifiedName": "MessageExtra"
												},
												"name": "MessageExtra",
												"package": "@tapjs/core"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "PluginResult.notOk"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "PluginResult.notOk"
							}
						},
						{
							"id": 210,
							"name": "notSame",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/asserts/dist/mjs/index.d.ts",
									"line": 65,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 211,
									"name": "notSame",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Verify that the value is not loosely equivalent to the supplied pattern"
											}
										]
									},
									"sources": [
										{
											"fileName": "src/asserts/dist/mjs/index.d.ts",
											"line": 65,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 212,
											"name": "found",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 213,
											"name": "doNotWant",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 214,
											"name": "__namedParameters",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../core/src/index.ts",
													"qualifiedName": "MessageExtra"
												},
												"name": "MessageExtra",
												"package": "@tapjs/core"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "PluginResult.notSame"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "PluginResult.notSame"
							}
						},
						{
							"id": 181,
							"name": "ok",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/asserts/dist/mjs/index.d.ts",
									"line": 36,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 182,
									"name": "ok",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Verify that the value is truthy"
											}
										]
									},
									"sources": [
										{
											"fileName": "src/asserts/dist/mjs/index.d.ts",
											"line": 36,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 183,
											"name": "obj",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 184,
											"name": "__namedParameters",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../core/src/index.ts",
													"qualifiedName": "MessageExtra"
												},
												"name": "MessageExtra",
												"package": "@tapjs/core"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "PluginResult.ok"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "PluginResult.ok"
							}
						},
						{
							"id": 374,
							"name": "only",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/filter/dist/mjs/index.d.ts",
									"line": 39,
									"character": 4
								},
								{
									"fileName": "src/filter/dist/mjs/index.d.ts",
									"line": 40,
									"character": 4
								},
								{
									"fileName": "src/filter/dist/mjs/index.d.ts",
									"line": 41,
									"character": 4
								},
								{
									"fileName": "src/filter/dist/mjs/index.d.ts",
									"line": 42,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 375,
									"name": "only",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Run a child test that will run when the "
											},
											{
												"kind": "code",
												"text": "`--only`"
											},
											{
												"kind": "text",
												"text": " config is set,\nor "
											},
											{
												"kind": "code",
												"text": "`{ runOnly: true }`"
											},
											{
												"kind": "text",
												"text": " is set in the parent test options."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/filter/dist/mjs/index.d.ts",
											"line": 39,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 376,
											"name": "name",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 377,
											"name": "extra",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 19,
												"name": "TestOpts",
												"package": "@tapjs/test-built"
											}
										},
										{
											"id": 378,
											"name": "cb",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 379,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"sources": [
														{
															"fileName": "src/filter/dist/mjs/index.d.ts",
															"line": 39,
															"character": 44
														}
													],
													"signatures": [
														{
															"id": 380,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {},
															"sources": [
																{
																	"fileName": "src/filter/dist/mjs/index.d.ts",
																	"line": 39,
																	"character": 44
																}
															],
															"parameters": [
																{
																	"id": 381,
																	"name": "t",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"target": 565,
																		"typeArguments": [
																			{
																				"type": "reference",
																				"target": 161,
																				"name": "BuiltPlugins",
																				"package": "@tapjs/test-built"
																			},
																			{
																				"type": "reference",
																				"target": 19,
																				"name": "TestOpts",
																				"package": "@tapjs/test-built"
																			}
																		],
																		"name": "Test",
																		"package": "@tapjs/test-built"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../core/src/test-base.ts",
											"qualifiedName": "PromiseWithSubtest"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": 565,
												"typeArguments": [
													{
														"type": "reference",
														"target": 161,
														"name": "BuiltPlugins",
														"package": "@tapjs/test-built"
													},
													{
														"type": "reference",
														"target": 19,
														"name": "TestOpts",
														"package": "@tapjs/test-built"
													}
												],
												"name": "Test",
												"package": "@tapjs/test-built"
											}
										],
										"name": "PromiseWithSubtest",
										"package": "@tapjs/core"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "PluginResult.only"
									}
								},
								{
									"id": 382,
									"name": "only",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"sources": [
										{
											"fileName": "src/filter/dist/mjs/index.d.ts",
											"line": 40,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 383,
											"name": "name",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 384,
											"name": "cb",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 385,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"sources": [
														{
															"fileName": "src/filter/dist/mjs/index.d.ts",
															"line": 40,
															"character": 27
														}
													],
													"signatures": [
														{
															"id": 386,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {},
															"sources": [
																{
																	"fileName": "src/filter/dist/mjs/index.d.ts",
																	"line": 40,
																	"character": 27
																}
															],
															"parameters": [
																{
																	"id": 387,
																	"name": "t",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"target": 565,
																		"typeArguments": [
																			{
																				"type": "reference",
																				"target": 161,
																				"name": "BuiltPlugins",
																				"package": "@tapjs/test-built"
																			},
																			{
																				"type": "reference",
																				"target": 19,
																				"name": "TestOpts",
																				"package": "@tapjs/test-built"
																			}
																		],
																		"name": "Test",
																		"package": "@tapjs/test-built"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../core/src/test-base.ts",
											"qualifiedName": "PromiseWithSubtest"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": 565,
												"typeArguments": [
													{
														"type": "reference",
														"target": 161,
														"name": "BuiltPlugins",
														"package": "@tapjs/test-built"
													},
													{
														"type": "reference",
														"target": 19,
														"name": "TestOpts",
														"package": "@tapjs/test-built"
													}
												],
												"name": "Test",
												"package": "@tapjs/test-built"
											}
										],
										"name": "PromiseWithSubtest",
										"package": "@tapjs/core"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "PluginResult.only"
									}
								},
								{
									"id": 388,
									"name": "only",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"sources": [
										{
											"fileName": "src/filter/dist/mjs/index.d.ts",
											"line": 41,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 389,
											"name": "extra",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 19,
												"name": "TestOpts",
												"package": "@tapjs/test-built"
											}
										},
										{
											"id": 390,
											"name": "cb",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 391,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"sources": [
														{
															"fileName": "src/filter/dist/mjs/index.d.ts",
															"line": 41,
															"character": 30
														}
													],
													"signatures": [
														{
															"id": 392,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {},
															"sources": [
																{
																	"fileName": "src/filter/dist/mjs/index.d.ts",
																	"line": 41,
																	"character": 30
																}
															],
															"parameters": [
																{
																	"id": 393,
																	"name": "t",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"target": 565,
																		"typeArguments": [
																			{
																				"type": "reference",
																				"target": 161,
																				"name": "BuiltPlugins",
																				"package": "@tapjs/test-built"
																			},
																			{
																				"type": "reference",
																				"target": 19,
																				"name": "TestOpts",
																				"package": "@tapjs/test-built"
																			}
																		],
																		"name": "Test",
																		"package": "@tapjs/test-built"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../core/src/test-base.ts",
											"qualifiedName": "PromiseWithSubtest"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": 565,
												"typeArguments": [
													{
														"type": "reference",
														"target": 161,
														"name": "BuiltPlugins",
														"package": "@tapjs/test-built"
													},
													{
														"type": "reference",
														"target": 19,
														"name": "TestOpts",
														"package": "@tapjs/test-built"
													}
												],
												"name": "Test",
												"package": "@tapjs/test-built"
											}
										],
										"name": "PromiseWithSubtest",
										"package": "@tapjs/core"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "PluginResult.only"
									}
								},
								{
									"id": 394,
									"name": "only",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"sources": [
										{
											"fileName": "src/filter/dist/mjs/index.d.ts",
											"line": 42,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 395,
											"name": "cb",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 396,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"sources": [
														{
															"fileName": "src/filter/dist/mjs/index.d.ts",
															"line": 42,
															"character": 13
														}
													],
													"signatures": [
														{
															"id": 397,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {},
															"sources": [
																{
																	"fileName": "src/filter/dist/mjs/index.d.ts",
																	"line": 42,
																	"character": 13
																}
															],
															"parameters": [
																{
																	"id": 398,
																	"name": "t",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"target": 565,
																		"typeArguments": [
																			{
																				"type": "reference",
																				"target": 161,
																				"name": "BuiltPlugins",
																				"package": "@tapjs/test-built"
																			},
																			{
																				"type": "reference",
																				"target": 19,
																				"name": "TestOpts",
																				"package": "@tapjs/test-built"
																			}
																		],
																		"name": "Test",
																		"package": "@tapjs/test-built"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../core/src/test-base.ts",
											"qualifiedName": "PromiseWithSubtest"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": 565,
												"typeArguments": [
													{
														"type": "reference",
														"target": 161,
														"name": "BuiltPlugins",
														"package": "@tapjs/test-built"
													},
													{
														"type": "reference",
														"target": 19,
														"name": "TestOpts",
														"package": "@tapjs/test-built"
													}
												],
												"name": "Test",
												"package": "@tapjs/test-built"
											}
										],
										"name": "PromiseWithSubtest",
										"package": "@tapjs/core"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "PluginResult.only"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "PluginResult.only"
							}
						},
						{
							"id": 333,
							"name": "rejects",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/asserts/dist/mjs/index.d.ts",
									"line": 187,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 334,
									"name": "rejects",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "resolves to the error object rejected if it rejects as expected,\n'false' if it does not, or 'true' if it fails to reject but is marked\nas skip/todo."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/asserts/dist/mjs/index.d.ts",
											"line": 187,
											"character": 4
										}
									],
									"typeParameter": [
										{
											"id": 335,
											"name": "T",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "unknown"
											},
											"default": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"parameters": [
										{
											"id": 336,
											"name": "fnOrPromise",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reflection",
														"declaration": {
															"id": 337,
															"name": "__type",
															"variant": "declaration",
															"kind": 65536,
															"flags": {},
															"sources": [
																{
																	"fileName": "src/asserts/dist/mjs/index.d.ts",
																	"line": 187,
																	"character": 47
																}
															],
															"signatures": [
																{
																	"id": 338,
																	"name": "__type",
																	"variant": "signature",
																	"kind": 4096,
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "src/asserts/dist/mjs/index.d.ts",
																			"line": 187,
																			"character": 47
																		}
																	],
																	"type": {
																		"type": "reference",
																		"target": {
																			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
																			"qualifiedName": "Promise"
																		},
																		"typeArguments": [
																			{
																				"type": "reference",
																				"target": -1,
																				"name": "T",
																				"refersToTypeParameter": true
																			}
																		],
																		"name": "Promise",
																		"package": "typescript"
																	}
																}
															]
														}
													},
													{
														"type": "reference",
														"target": {
															"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
															"qualifiedName": "Promise"
														},
														"typeArguments": [
															{
																"type": "reference",
																"target": -1,
																"name": "T",
																"refersToTypeParameter": true
															}
														],
														"name": "Promise",
														"package": "typescript"
													}
												]
											}
										},
										{
											"id": 339,
											"name": "__namedParameters",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../asserts/src/index.ts",
													"qualifiedName": "ThrowsArgs"
												},
												"name": "ThrowsArgs",
												"package": "@tapjs/asserts"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "boolean"
													},
													{
														"type": "reference",
														"target": {
															"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
															"qualifiedName": "Error"
														},
														"name": "Error",
														"package": "typescript"
													}
												]
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "PluginResult.rejects"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "PluginResult.rejects"
							}
						},
						{
							"id": 347,
							"name": "resolveMatch",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/asserts/dist/mjs/index.d.ts",
									"line": 201,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 348,
									"name": "resolveMatch",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Test the resolved promise result with "
											},
											{
												"kind": "code",
												"text": "`t.match()`"
											},
											{
												"kind": "text",
												"text": "\n\nResolves to true if it passes, false if the promise rejects or the match\nfails, or the rejection error value if the promise rejects but the\nassertion passes by being marked todo/skip."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/asserts/dist/mjs/index.d.ts",
											"line": 201,
											"character": 4
										}
									],
									"typeParameter": [
										{
											"id": 349,
											"name": "T",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "unknown"
											},
											"default": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"parameters": [
										{
											"id": 350,
											"name": "fnOrPromise",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"target": {
															"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
															"qualifiedName": "Promise"
														},
														"typeArguments": [
															{
																"type": "reference",
																"target": -1,
																"name": "T",
																"refersToTypeParameter": true
															}
														],
														"name": "Promise",
														"package": "typescript"
													},
													{
														"type": "reflection",
														"declaration": {
															"id": 351,
															"name": "__type",
															"variant": "declaration",
															"kind": 65536,
															"flags": {},
															"sources": [
																{
																	"fileName": "src/asserts/dist/mjs/index.d.ts",
																	"line": 201,
																	"character": 65
																}
															],
															"signatures": [
																{
																	"id": 352,
																	"name": "__type",
																	"variant": "signature",
																	"kind": 4096,
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "src/asserts/dist/mjs/index.d.ts",
																			"line": 201,
																			"character": 65
																		}
																	],
																	"type": {
																		"type": "reference",
																		"target": {
																			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
																			"qualifiedName": "Promise"
																		},
																		"typeArguments": [
																			{
																				"type": "reference",
																				"target": -1,
																				"name": "T",
																				"refersToTypeParameter": true
																			}
																		],
																		"name": "Promise",
																		"package": "typescript"
																	}
																}
															]
														}
													}
												]
											}
										},
										{
											"id": 353,
											"name": "wanted",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 354,
											"name": "__namedParameters",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../core/src/index.ts",
													"qualifiedName": "MessageExtra"
												},
												"name": "MessageExtra",
												"package": "@tapjs/core"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "PluginResult.resolveMatch"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "PluginResult.resolveMatch"
							}
						},
						{
							"id": 517,
							"name": "resolveMatchSnapshot",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/snapshot/dist/mjs/index.d.ts",
									"line": 65,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 518,
									"name": "resolveMatchSnapshot",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"sources": [
										{
											"fileName": "src/snapshot/dist/mjs/index.d.ts",
											"line": 65,
											"character": 4
										}
									],
									"typeParameter": [
										{
											"id": 519,
											"name": "T",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "unknown"
											},
											"default": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"parameters": [
										{
											"id": 520,
											"name": "fnOrPromise",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"target": {
															"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
															"qualifiedName": "Promise"
														},
														"typeArguments": [
															{
																"type": "reference",
																"target": -1,
																"name": "T",
																"refersToTypeParameter": true
															}
														],
														"name": "Promise",
														"package": "typescript"
													},
													{
														"type": "reflection",
														"declaration": {
															"id": 521,
															"name": "__type",
															"variant": "declaration",
															"kind": 65536,
															"flags": {},
															"sources": [
																{
																	"fileName": "src/snapshot/dist/mjs/index.d.ts",
																	"line": 65,
																	"character": 73
																}
															],
															"signatures": [
																{
																	"id": 522,
																	"name": "__type",
																	"variant": "signature",
																	"kind": 4096,
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "src/snapshot/dist/mjs/index.d.ts",
																			"line": 65,
																			"character": 73
																		}
																	],
																	"type": {
																		"type": "reference",
																		"target": {
																			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
																			"qualifiedName": "Promise"
																		},
																		"typeArguments": [
																			{
																				"type": "reference",
																				"target": -1,
																				"name": "T",
																				"refersToTypeParameter": true
																			}
																		],
																		"name": "Promise",
																		"package": "typescript"
																	}
																}
															]
														}
													}
												]
											}
										},
										{
											"id": 523,
											"name": "__namedParameters",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../core/src/index.ts",
													"qualifiedName": "MessageExtra"
												},
												"name": "MessageExtra",
												"package": "@tapjs/core"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "boolean"
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "PluginResult.resolveMatchSnapshot"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "PluginResult.resolveMatchSnapshot"
							}
						},
						{
							"id": 340,
							"name": "resolves",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/asserts/dist/mjs/index.d.ts",
									"line": 193,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 341,
									"name": "resolves",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Resolves to 'true' if the promise resolves successfully, 'false' if\nit rejects and fails, or the rejection error if it rejects but the\nfailure is accepted by by being marked todo or skip"
											}
										]
									},
									"sources": [
										{
											"fileName": "src/asserts/dist/mjs/index.d.ts",
											"line": 193,
											"character": 4
										}
									],
									"typeParameter": [
										{
											"id": 342,
											"name": "T",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "unknown"
											},
											"default": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"parameters": [
										{
											"id": 343,
											"name": "fnOrPromise",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"target": {
															"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
															"qualifiedName": "Promise"
														},
														"typeArguments": [
															{
																"type": "reference",
																"target": -1,
																"name": "T",
																"refersToTypeParameter": true
															}
														],
														"name": "Promise",
														"package": "typescript"
													},
													{
														"type": "reflection",
														"declaration": {
															"id": 344,
															"name": "__type",
															"variant": "declaration",
															"kind": 65536,
															"flags": {},
															"sources": [
																{
																	"fileName": "src/asserts/dist/mjs/index.d.ts",
																	"line": 193,
																	"character": 61
																}
															],
															"signatures": [
																{
																	"id": 345,
																	"name": "__type",
																	"variant": "signature",
																	"kind": 4096,
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "src/asserts/dist/mjs/index.d.ts",
																			"line": 193,
																			"character": 61
																		}
																	],
																	"type": {
																		"type": "reference",
																		"target": {
																			"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
																			"qualifiedName": "Promise"
																		},
																		"typeArguments": [
																			{
																				"type": "reference",
																				"target": -1,
																				"name": "T",
																				"refersToTypeParameter": true
																			}
																		],
																		"name": "Promise",
																		"package": "typescript"
																	}
																}
															]
														}
													}
												]
											}
										},
										{
											"id": 346,
											"name": "__namedParameters",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../core/src/index.ts",
													"qualifiedName": "MessageExtra"
												},
												"name": "MessageExtra",
												"package": "@tapjs/core"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Promise"
										},
										"typeArguments": [
											{
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "boolean"
													},
													{
														"type": "reference",
														"target": {
															"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
															"qualifiedName": "Error"
														},
														"name": "Error",
														"package": "typescript"
													}
												]
											}
										],
										"name": "Promise",
										"package": "typescript"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "PluginResult.resolves"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "PluginResult.resolves"
							}
						},
						{
							"id": 205,
							"name": "same",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/asserts/dist/mjs/index.d.ts",
									"line": 61,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 206,
									"name": "same",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Verify that the value is loosely equivalent to the supplied pattern"
											}
										]
									},
									"sources": [
										{
											"fileName": "src/asserts/dist/mjs/index.d.ts",
											"line": 61,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 207,
											"name": "found",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 208,
											"name": "wanted",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 209,
											"name": "__namedParameters",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../core/src/index.ts",
													"qualifiedName": "MessageExtra"
												},
												"name": "MessageExtra",
												"package": "@tapjs/core"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "PluginResult.same"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "PluginResult.same"
							}
						},
						{
							"id": 525,
							"name": "spawn",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/spawn/dist/mjs/index.d.ts",
									"line": 19,
									"character": 4
								},
								{
									"fileName": "src/spawn/dist/mjs/index.d.ts",
									"line": 20,
									"character": 4
								},
								{
									"fileName": "src/spawn/dist/mjs/index.d.ts",
									"line": 21,
									"character": 4
								},
								{
									"fileName": "src/spawn/dist/mjs/index.d.ts",
									"line": 22,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 526,
									"name": "spawn",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"sources": [
										{
											"fileName": "src/spawn/dist/mjs/index.d.ts",
											"line": 19,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 527,
											"name": "cmd",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../spawn/src/index.ts",
											"qualifiedName": "PromiseWithSpawn"
										},
										"name": "PromiseWithSpawn",
										"package": "@tapjs/spawn"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "PluginResult.spawn"
									}
								},
								{
									"id": 528,
									"name": "spawn",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"sources": [
										{
											"fileName": "src/spawn/dist/mjs/index.d.ts",
											"line": 20,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 529,
											"name": "cmd",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 530,
											"name": "options",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../spawn/src/index.ts",
													"qualifiedName": "SpawnOpts"
												},
												"name": "SpawnOpts",
												"package": "@tapjs/spawn"
											}
										},
										{
											"id": 531,
											"name": "name",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../spawn/src/index.ts",
											"qualifiedName": "PromiseWithSpawn"
										},
										"name": "PromiseWithSpawn",
										"package": "@tapjs/spawn"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "PluginResult.spawn"
									}
								},
								{
									"id": 532,
									"name": "spawn",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"sources": [
										{
											"fileName": "src/spawn/dist/mjs/index.d.ts",
											"line": 21,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 533,
											"name": "cmd",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 534,
											"name": "args",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										},
										{
											"id": 535,
											"name": "name",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../spawn/src/index.ts",
											"qualifiedName": "PromiseWithSpawn"
										},
										"name": "PromiseWithSpawn",
										"package": "@tapjs/spawn"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "PluginResult.spawn"
									}
								},
								{
									"id": 536,
									"name": "spawn",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"sources": [
										{
											"fileName": "src/spawn/dist/mjs/index.d.ts",
											"line": 22,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 537,
											"name": "cmd",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 538,
											"name": "args",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										},
										{
											"id": 539,
											"name": "options",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../spawn/src/index.ts",
													"qualifiedName": "SpawnOpts"
												},
												"name": "SpawnOpts",
												"package": "@tapjs/spawn"
											}
										},
										{
											"id": 540,
											"name": "name",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../spawn/src/index.ts",
											"qualifiedName": "PromiseWithSpawn"
										},
										"name": "PromiseWithSpawn",
										"package": "@tapjs/spawn"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "PluginResult.spawn"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "PluginResult.spawn"
							}
						},
						{
							"id": 542,
							"name": "stdin",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/stdin/dist/mjs/index.d.ts",
									"line": 6,
									"character": 4
								},
								{
									"fileName": "src/stdin/dist/mjs/index.d.ts",
									"line": 7,
									"character": 4
								},
								{
									"fileName": "src/stdin/dist/mjs/index.d.ts",
									"line": 8,
									"character": 4
								},
								{
									"fileName": "src/stdin/dist/mjs/index.d.ts",
									"line": 9,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 543,
									"name": "stdin",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"sources": [
										{
											"fileName": "src/stdin/dist/mjs/index.d.ts",
											"line": 6,
											"character": 4
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../stdin/src/index.ts",
											"qualifiedName": "PromiseWithStdin"
										},
										"name": "PromiseWithStdin",
										"package": "@tapjs/stdin"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "PluginResult.stdin"
									}
								},
								{
									"id": 544,
									"name": "stdin",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"sources": [
										{
											"fileName": "src/stdin/dist/mjs/index.d.ts",
											"line": 7,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 545,
											"name": "name",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../stdin/src/index.ts",
											"qualifiedName": "PromiseWithStdin"
										},
										"name": "PromiseWithStdin",
										"package": "@tapjs/stdin"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "PluginResult.stdin"
									}
								},
								{
									"id": 546,
									"name": "stdin",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"sources": [
										{
											"fileName": "src/stdin/dist/mjs/index.d.ts",
											"line": 8,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 547,
											"name": "name",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 548,
											"name": "extra",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../core/src/stdin.ts",
													"qualifiedName": "StdinOpts"
												},
												"name": "StdinOpts",
												"package": "@tapjs/core"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../stdin/src/index.ts",
											"qualifiedName": "PromiseWithStdin"
										},
										"name": "PromiseWithStdin",
										"package": "@tapjs/stdin"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "PluginResult.stdin"
									}
								},
								{
									"id": 549,
									"name": "stdin",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"sources": [
										{
											"fileName": "src/stdin/dist/mjs/index.d.ts",
											"line": 9,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 550,
											"name": "extra",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../core/src/stdin.ts",
													"qualifiedName": "StdinOpts"
												},
												"name": "StdinOpts",
												"package": "@tapjs/core"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../stdin/src/index.ts",
											"qualifiedName": "PromiseWithStdin"
										},
										"name": "PromiseWithStdin",
										"package": "@tapjs/stdin"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "PluginResult.stdin"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "PluginResult.stdin"
							}
						},
						{
							"id": 221,
							"name": "strictNotSame",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/asserts/dist/mjs/index.d.ts",
									"line": 74,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 222,
									"name": "strictNotSame",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Verify that the value is not strictly equivalent to the supplied\npattern object"
											}
										]
									},
									"sources": [
										{
											"fileName": "src/asserts/dist/mjs/index.d.ts",
											"line": 74,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 223,
											"name": "found",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 224,
											"name": "doNotWant",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 225,
											"name": "__namedParameters",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../core/src/index.ts",
													"qualifiedName": "MessageExtra"
												},
												"name": "MessageExtra",
												"package": "@tapjs/core"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "PluginResult.strictNotSame"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "PluginResult.strictNotSame"
							}
						},
						{
							"id": 215,
							"name": "strictSame",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/asserts/dist/mjs/index.d.ts",
									"line": 69,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 216,
									"name": "strictSame",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Verify that the value is strictly equivalent to the supplied pattern"
											}
										]
									},
									"sources": [
										{
											"fileName": "src/asserts/dist/mjs/index.d.ts",
											"line": 69,
											"character": 4
										}
									],
									"typeParameter": [
										{
											"id": 217,
											"name": "T",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "unknown"
											}
										}
									],
									"parameters": [
										{
											"id": 218,
											"name": "found",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 219,
											"name": "wanted",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": -1,
												"name": "T",
												"refersToTypeParameter": true
											}
										},
										{
											"id": 220,
											"name": "__namedParameters",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../core/src/index.ts",
													"qualifiedName": "MessageExtra"
												},
												"name": "MessageExtra",
												"package": "@tapjs/core"
											}
										}
									],
									"type": {
										"type": "predicate",
										"name": "found",
										"asserts": false,
										"targetType": {
											"type": "reference",
											"target": -1,
											"name": "T",
											"refersToTypeParameter": true
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "PluginResult.strictSame"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "PluginResult.strictSame"
							}
						},
						{
							"id": 163,
							"name": "teardown",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/after/dist/mjs/index.d.ts",
									"line": 17,
									"character": 4,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/after/dist/mjs/index.d.ts#L17"
								}
							],
							"signatures": [
								{
									"id": 164,
									"name": "teardown",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Alias for "
											},
											{
												"kind": "inline-tag",
												"tag": "@link",
												"text": "After#after"
											}
										]
									},
									"sources": [
										{
											"fileName": "src/after/dist/mjs/index.d.ts",
											"line": 17,
											"character": 4,
											"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/after/dist/mjs/index.d.ts#L17"
										}
									],
									"parameters": [
										{
											"id": 165,
											"name": "fn",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 166,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"sources": [
														{
															"fileName": "src/after/dist/mjs/index.d.ts",
															"line": 17,
															"character": 17,
															"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/after/dist/mjs/index.d.ts#L17"
														}
													],
													"signatures": [
														{
															"id": 167,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {},
															"sources": [
																{
																	"fileName": "src/after/dist/mjs/index.d.ts",
																	"line": 17,
																	"character": 17,
																	"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/after/dist/mjs/index.d.ts#L17"
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "PluginResult.teardown"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "PluginResult.teardown"
							}
						},
						{
							"id": 405,
							"name": "testdir",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/fixture/dist/mjs/index.d.ts",
									"line": 21,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 406,
									"name": "testdir",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"sources": [
										{
											"fileName": "src/fixture/dist/mjs/index.d.ts",
											"line": 21,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 407,
											"name": "content",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../fixture/src/fixture.ts",
													"qualifiedName": "FixtureDirContent"
												},
												"name": "FixtureDirContent",
												"package": "@tapjs/fixture"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "PluginResult.testdir"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "PluginResult.testdir"
							}
						},
						{
							"id": 321,
							"name": "throws",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/asserts/dist/mjs/index.d.ts",
									"line": 175,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 322,
									"name": "throws",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Verify that the function throws an error.\nThrown error is tested against the "
											},
											{
												"kind": "code",
												"text": "`wanted`"
											},
											{
												"kind": "text",
												"text": " param if provided, using\n"
											},
											{
												"kind": "code",
												"text": "`t.match()`"
											},
											{
												"kind": "text",
												"text": ".\n\nReturns false on failure, or the error object thrown on success"
											}
										]
									},
									"sources": [
										{
											"fileName": "src/asserts/dist/mjs/index.d.ts",
											"line": 175,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 323,
											"name": "fn",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"target": {
															"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
															"qualifiedName": "Function"
														},
														"name": "Function",
														"package": "typescript"
													},
													{
														"type": "reflection",
														"declaration": {
															"id": 324,
															"name": "__type",
															"variant": "declaration",
															"kind": 65536,
															"flags": {},
															"sources": [
																{
																	"fileName": "src/asserts/dist/mjs/index.d.ts",
																	"line": 175,
																	"character": 27
																}
															],
															"signatures": [
																{
																	"id": 325,
																	"name": "__type",
																	"variant": "signature",
																	"kind": 4096,
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "src/asserts/dist/mjs/index.d.ts",
																			"line": 175,
																			"character": 27
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																}
															]
														}
													}
												]
											}
										},
										{
											"id": 326,
											"name": "__namedParameters",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../asserts/src/index.ts",
													"qualifiedName": "ThrowsArgs"
												},
												"name": "ThrowsArgs",
												"package": "@tapjs/asserts"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "boolean"
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "Error"
												},
												"name": "Error",
												"package": "typescript"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "PluginResult.throws"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "PluginResult.throws"
							}
						},
						{
							"id": 200,
							"name": "type",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/asserts/dist/mjs/index.d.ts",
									"line": 57,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 201,
									"name": "type",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Verify that the value is of the type specified\nType can be either a string, or a constructor.\n\nIf a string, then it can match either the "
											},
											{
												"kind": "code",
												"text": "`typeof`"
											},
											{
												"kind": "text",
												"text": " result\nor 'null' for "
											},
											{
												"kind": "code",
												"text": "`null`"
											},
											{
												"kind": "text",
												"text": " values, or the "
											},
											{
												"kind": "code",
												"text": "`name`"
											},
											{
												"kind": "text",
												"text": " property of the\nobject's constructor."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/asserts/dist/mjs/index.d.ts",
											"line": 57,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 202,
											"name": "obj",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										},
										{
											"id": 203,
											"name": "klass",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "reference",
														"target": {
															"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
															"qualifiedName": "Function"
														},
														"name": "Function",
														"package": "typescript"
													}
												]
											}
										},
										{
											"id": 204,
											"name": "__namedParameters",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../core/src/index.ts",
													"qualifiedName": "MessageExtra"
												},
												"name": "MessageExtra",
												"package": "@tapjs/core"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "PluginResult.type"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "PluginResult.type"
							}
						},
						{
							"id": 481,
							"name": "unmock",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/mock/dist/mjs/index.d.ts",
									"line": 106,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 482,
									"name": "unmock",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Unwind the mocks and free up the memory at the end of the test.\n\nCalled automatically if the "
											},
											{
												"kind": "code",
												"text": "`@tapjs/after`"
											},
											{
												"kind": "text",
												"text": " plugin is not disabled."
											}
										]
									},
									"sources": [
										{
											"fileName": "src/mock/dist/mjs/index.d.ts",
											"line": 106,
											"character": 4
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "PluginResult.unmock"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "PluginResult.unmock"
							}
						},
						{
							"id": 555,
							"name": "worker",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"sources": [
								{
									"fileName": "src/worker/dist/mjs/index.d.ts",
									"line": 8,
									"character": 4
								},
								{
									"fileName": "src/worker/dist/mjs/index.d.ts",
									"line": 9,
									"character": 4
								},
								{
									"fileName": "src/worker/dist/mjs/index.d.ts",
									"line": 10,
									"character": 4
								}
							],
							"signatures": [
								{
									"id": 556,
									"name": "worker",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"sources": [
										{
											"fileName": "src/worker/dist/mjs/index.d.ts",
											"line": 8,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 557,
											"name": "filename",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../worker/src/index.ts",
											"qualifiedName": "PromiseWithWorker"
										},
										"name": "PromiseWithWorker",
										"package": "@tapjs/worker"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "PluginResult.worker"
									}
								},
								{
									"id": 558,
									"name": "worker",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"sources": [
										{
											"fileName": "src/worker/dist/mjs/index.d.ts",
											"line": 9,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 559,
											"name": "filename",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 560,
											"name": "name",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../worker/src/index.ts",
											"qualifiedName": "PromiseWithWorker"
										},
										"name": "PromiseWithWorker",
										"package": "@tapjs/worker"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "PluginResult.worker"
									}
								},
								{
									"id": 561,
									"name": "worker",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"sources": [
										{
											"fileName": "src/worker/dist/mjs/index.d.ts",
											"line": 10,
											"character": 4
										}
									],
									"parameters": [
										{
											"id": 562,
											"name": "filename",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 563,
											"name": "options",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../core/src/worker.ts",
													"qualifiedName": "WorkerOpts"
												},
												"name": "WorkerOpts",
												"package": "@tapjs/core"
											}
										},
										{
											"id": 564,
											"name": "name",
											"variant": "param",
											"kind": 32768,
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../worker/src/index.ts",
											"qualifiedName": "PromiseWithWorker"
										},
										"name": "PromiseWithWorker",
										"package": "@tapjs/worker"
									},
									"inheritedFrom": {
										"type": "reference",
										"target": -1,
										"name": "PluginResult.worker"
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"target": -1,
								"name": "PluginResult.worker"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"children": [
								162,
								173,
								180,
								360,
								366,
								373,
								399,
								412,
								447,
								483,
								524,
								541,
								551,
								552,
								484
							]
						},
						{
							"title": "Accessors",
							"children": [
								489,
								485,
								499,
								509,
								408,
								553
							]
						},
						{
							"title": "Methods",
							"children": [
								168,
								174,
								361,
								367,
								420,
								431,
								448,
								327,
								355,
								189,
								400,
								226,
								293,
								307,
								314,
								286,
								300,
								236,
								413,
								246,
								256,
								266,
								513,
								276,
								460,
								467,
								474,
								195,
								231,
								241,
								251,
								261,
								271,
								281,
								185,
								210,
								181,
								374,
								333,
								347,
								517,
								340,
								205,
								525,
								542,
								221,
								215,
								163,
								405,
								321,
								200,
								481,
								555
							]
						}
					],
					"sources": [
						{
							"fileName": "src/test/test-built/dist/mjs/index.d.ts",
							"line": 178,
							"character": 17,
							"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L178"
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"target": {
								"sourceFileName": "test-built/src/index.ts",
								"qualifiedName": "PluginResult"
							},
							"typeArguments": [
								{
									"type": "reference",
									"target": {
										"sourceFileName": "test-built/src/index.ts",
										"qualifiedName": "PluginSet"
									},
									"name": "PluginSet",
									"package": "@tapjs/test-built"
								}
							],
							"name": "PluginResult",
							"package": "@tapjs/test-built"
						}
					]
				},
				{
					"id": 4,
					"name": "PluginOpts",
					"variant": "declaration",
					"kind": 4194304,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The union of the second parameters of all loaded plugin methods"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/test/test-built/dist/mjs/index.d.ts",
							"line": 28,
							"character": 12,
							"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L28"
						}
					],
					"typeParameters": [
						{
							"id": 14,
							"name": "P",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "array",
								"elementType": {
									"type": "reflection",
									"declaration": {
										"id": 15,
										"name": "__type",
										"variant": "declaration",
										"kind": 65536,
										"flags": {},
										"sources": [
											{
												"fileName": "src/test/test-built/dist/mjs/index.d.ts",
												"line": 28,
												"character": 34,
												"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L28"
											}
										],
										"signatures": [
											{
												"id": 16,
												"name": "__type",
												"variant": "signature",
												"kind": 4096,
												"flags": {},
												"parameters": [
													{
														"id": 17,
														"name": "t",
														"variant": "param",
														"kind": 32768,
														"flags": {},
														"type": {
															"type": "reference",
															"target": {
																"sourceFileName": "../core/src/test-base.ts",
																"qualifiedName": "TestBase"
															},
															"name": "TestBase",
															"package": "@tapjs/core"
														}
													},
													{
														"id": 18,
														"name": "opts",
														"variant": "param",
														"kind": 32768,
														"flags": {},
														"type": {
															"type": "intrinsic",
															"name": "any"
														}
													}
												],
												"type": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										]
									}
								}
							}
						}
					],
					"type": {
						"type": "conditional",
						"checkType": {
							"type": "reference",
							"target": -1,
							"name": "P",
							"refersToTypeParameter": true
						},
						"extendsType": {
							"type": "tuple",
							"elements": [
								{
									"type": "inferred",
									"name": "H",
									"constraint": {
										"type": "reflection",
										"declaration": {
											"id": 5,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"sources": [
												{
													"fileName": "src/test/test-built/dist/mjs/index.d.ts",
													"line": 29,
													"character": 20,
													"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L29"
												}
											],
											"signatures": [
												{
													"id": 6,
													"name": "__type",
													"variant": "signature",
													"kind": 4096,
													"flags": {},
													"parameters": [
														{
															"id": 7,
															"name": "t",
															"variant": "param",
															"kind": 32768,
															"flags": {},
															"type": {
																"type": "reference",
																"target": {
																	"sourceFileName": "../core/src/test-base.ts",
																	"qualifiedName": "TestBase"
																},
																"name": "TestBase",
																"package": "@tapjs/core"
															}
														},
														{
															"id": 8,
															"name": "opts",
															"variant": "param",
															"kind": 32768,
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											]
										}
									}
								},
								{
									"type": "rest",
									"elementType": {
										"type": "inferred",
										"name": "T",
										"constraint": {
											"type": "array",
											"elementType": {
												"type": "reflection",
												"declaration": {
													"id": 9,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"sources": [
														{
															"fileName": "src/test/test-built/dist/mjs/index.d.ts",
															"line": 30,
															"character": 24,
															"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L30"
														}
													],
													"signatures": [
														{
															"id": 10,
															"name": "__type",
															"variant": "signature",
															"kind": 4096,
															"flags": {},
															"parameters": [
																{
																	"id": 11,
																	"name": "t",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"target": {
																			"sourceFileName": "../core/src/test-base.ts",
																			"qualifiedName": "TestBase"
																		},
																		"name": "TestBase",
																		"package": "@tapjs/core"
																	}
																},
																{
																	"id": 12,
																	"name": "opts",
																	"variant": "param",
																	"kind": 32768,
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "any"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													]
												}
											}
										}
									}
								}
							]
						},
						"trueType": {
							"type": "intersection",
							"types": [
								{
									"type": "reference",
									"target": {
										"sourceFileName": "test-built/src/index.ts",
										"qualifiedName": "SecondParam"
									},
									"typeArguments": [
										{
											"type": "reference",
											"target": {
												"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
												"qualifiedName": "Parameters"
											},
											"typeArguments": [
												{
													"type": "reference",
													"target": -1,
													"name": "H",
													"refersToTypeParameter": true
												}
											],
											"name": "Parameters",
											"package": "typescript"
										}
									],
									"name": "SecondParam",
									"package": "@tapjs/test-built"
								},
								{
									"type": "reference",
									"target": 4,
									"typeArguments": [
										{
											"type": "reference",
											"target": -1,
											"name": "T",
											"refersToTypeParameter": true
										}
									],
									"name": "PluginOpts",
									"package": "@tapjs/test-built"
								}
							]
						},
						"falseType": {
							"type": "reflection",
							"declaration": {
								"id": 13,
								"name": "__type",
								"variant": "declaration",
								"kind": 65536,
								"flags": {},
								"sources": [
									{
										"fileName": "src/test/test-built/dist/mjs/index.d.ts",
										"line": 31,
										"character": 49,
										"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L31"
									}
								]
							}
						}
					}
				},
				{
					"id": 19,
					"name": "TestOpts",
					"variant": "declaration",
					"kind": 4194304,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Options that may be provided to "
							},
							{
								"kind": "code",
								"text": "`t.test()`"
							},
							{
								"kind": "text",
								"text": ". Extends "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "Extra"
							},
							{
								"kind": "text",
								"text": ",\n"
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "BaseOpts"
							},
							{
								"kind": "text",
								"text": ", "
							},
							{
								"kind": "inline-tag",
								"tag": "@link",
								"text": "TestBaseOpts",
								"target": {
									"sourceFileName": "../core/src/test-base.ts",
									"qualifiedName": "TestBaseOpts"
								},
								"tsLinkText": ""
							},
							{
								"kind": "text",
								"text": ", and the second\nargument to all plugin methods currently in use."
							}
						]
					},
					"sources": [
						{
							"fileName": "src/test/test-built/dist/mjs/index.d.ts",
							"line": 37,
							"character": 12,
							"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L37"
						}
					],
					"type": {
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../core/src/test-base.ts",
									"qualifiedName": "TestBaseOpts"
								},
								"name": "TestBaseOpts",
								"package": "@tapjs/core"
							},
							{
								"type": "reference",
								"target": 4,
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "test-built/src/index.ts",
											"qualifiedName": "PluginSet"
										},
										"name": "PluginSet",
										"package": "@tapjs/test-built"
									}
								],
								"name": "PluginOpts",
								"package": "@tapjs/test-built"
							}
						]
					}
				},
				{
					"id": 159,
					"name": "loaders",
					"variant": "declaration",
					"kind": 32,
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/test/test-built/dist/mjs/index.d.ts",
							"line": 169,
							"character": 21,
							"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L169"
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				},
				{
					"id": 160,
					"name": "signature",
					"variant": "declaration",
					"kind": 32,
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/test/test-built/dist/mjs/index.d.ts",
							"line": 170,
							"character": 21,
							"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L170"
						}
					],
					"type": {
						"type": "literal",
						"value": "@tapjs/after\n@tapjs/after-each\n@tapjs/asserts\n@tapjs/before\n@tapjs/before-each\n@tapjs/filter\n@tapjs/fixture\n@tapjs/intercept\n@tapjs/mock\n@tapjs/snapshot\n@tapjs/spawn\n@tapjs/stdin\n@tapjs/typescript\n@tapjs/worker"
					},
					"defaultValue": "\"@tapjs/after\\n@tapjs/after-each\\n@tapjs/asserts\\n@tapjs/before\\n@tapjs/before-each\\n@tapjs/filter\\n@tapjs/fixture\\n@tapjs/intercept\\n@tapjs/mock\\n@tapjs/snapshot\\n@tapjs/spawn\\n@tapjs/stdin\\n@tapjs/typescript\\n@tapjs/worker\""
				},
				{
					"id": 20,
					"name": "config",
					"variant": "declaration",
					"kind": 64,
					"flags": {},
					"sources": [
						{
							"fileName": "src/test/test-built/dist/mjs/index.d.ts",
							"line": 54,
							"character": 21,
							"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L54"
						}
					],
					"signatures": [
						{
							"id": 21,
							"name": "config",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"sources": [
								{
									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
									"line": 54,
									"character": 29,
									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L54"
								}
							],
							"typeParameter": [
								{
									"id": 22,
									"name": "C",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/jackspeak/src/index.ts",
											"qualifiedName": "ConfigSet"
										},
										"name": "ConfigSet",
										"package": "jackspeak"
									}
								}
							],
							"parameters": [
								{
									"id": 23,
									"name": "jack",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/jackspeak/src/index.ts",
											"qualifiedName": "Jack"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": -1,
												"name": "C",
												"refersToTypeParameter": true
											}
										],
										"name": "Jack",
										"package": "jackspeak"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/jackspeak/src/index.ts",
									"qualifiedName": "Jack"
								},
								"typeArguments": [
									{
										"type": "intersection",
										"types": [
											{
												"type": "reference",
												"target": -1,
												"name": "C",
												"refersToTypeParameter": true
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/jackspeak/src/index.ts",
													"qualifiedName": "ConfigSetFromMetaSet"
												},
												"typeArguments": [
													{
														"type": "literal",
														"value": "boolean"
													},
													{
														"type": "literal",
														"value": false
													},
													{
														"type": "reflection",
														"declaration": {
															"id": 24,
															"name": "__type",
															"variant": "declaration",
															"kind": 65536,
															"flags": {},
															"children": [
																{
																	"id": 25,
																	"name": "only",
																	"variant": "declaration",
																	"kind": 1024,
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																			"line": 55,
																			"character": 4,
																			"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L55"
																		}
																	],
																	"type": {
																		"type": "intersection",
																		"types": [
																			{
																				"type": "reflection",
																				"declaration": {
																					"id": 26,
																					"name": "__type",
																					"variant": "declaration",
																					"kind": 65536,
																					"flags": {},
																					"children": [
																						{
																							"id": 29,
																							"name": "description",
																							"variant": "declaration",
																							"kind": 1024,
																							"flags": {},
																							"sources": [
																								{
																									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																									"line": 58,
																									"character": 8,
																									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L58"
																								}
																							],
																							"type": {
																								"type": "intrinsic",
																								"name": "string"
																							}
																						},
																						{
																							"id": 28,
																							"name": "short",
																							"variant": "declaration",
																							"kind": 1024,
																							"flags": {},
																							"sources": [
																								{
																									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																									"line": 57,
																									"character": 8,
																									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L57"
																								}
																							],
																							"type": {
																								"type": "intrinsic",
																								"name": "string"
																							}
																						},
																						{
																							"id": 27,
																							"name": "type",
																							"variant": "declaration",
																							"kind": 1024,
																							"flags": {},
																							"sources": [
																								{
																									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																									"line": 56,
																									"character": 8,
																									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L56"
																								}
																							],
																							"type": {
																								"type": "intrinsic",
																								"name": "string"
																							}
																						}
																					],
																					"groups": [
																						{
																							"title": "Properties",
																							"children": [
																								29,
																								28,
																								27
																							]
																						}
																					],
																					"sources": [
																						{
																							"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																							"line": 55,
																							"character": 10,
																							"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L55"
																						}
																					]
																				}
																			},
																			{
																				"type": "reflection",
																				"declaration": {
																					"id": 30,
																					"name": "__type",
																					"variant": "declaration",
																					"kind": 65536,
																					"flags": {},
																					"children": [
																						{
																							"id": 33,
																							"name": "default",
																							"variant": "declaration",
																							"kind": 1024,
																							"flags": {
																								"isOptional": true
																							},
																							"sources": [
																								{
																									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																									"line": 62,
																									"character": 8,
																									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L62"
																								}
																							],
																							"type": {
																								"type": "intrinsic",
																								"name": "boolean"
																							}
																						},
																						{
																							"id": 34,
																							"name": "description",
																							"variant": "declaration",
																							"kind": 1024,
																							"flags": {
																								"isOptional": true
																							},
																							"sources": [
																								{
																									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																									"line": 63,
																									"character": 8,
																									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L63"
																								}
																							],
																							"type": {
																								"type": "intrinsic",
																								"name": "string"
																							}
																						},
																						{
																							"id": 35,
																							"name": "hint",
																							"variant": "declaration",
																							"kind": 1024,
																							"flags": {
																								"isOptional": true
																							},
																							"sources": [
																								{
																									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																									"line": 64,
																									"character": 8,
																									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L64"
																								}
																							],
																							"type": {
																								"type": "intrinsic",
																								"name": "undefined"
																							}
																						},
																						{
																							"id": 32,
																							"name": "short",
																							"variant": "declaration",
																							"kind": 1024,
																							"flags": {
																								"isOptional": true
																							},
																							"sources": [
																								{
																									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																									"line": 61,
																									"character": 8,
																									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L61"
																								}
																							],
																							"type": {
																								"type": "intrinsic",
																								"name": "string"
																							}
																						},
																						{
																							"id": 31,
																							"name": "type",
																							"variant": "declaration",
																							"kind": 1024,
																							"flags": {},
																							"sources": [
																								{
																									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																									"line": 60,
																									"character": 8,
																									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L60"
																								}
																							],
																							"type": {
																								"type": "literal",
																								"value": "boolean"
																							}
																						},
																						{
																							"id": 36,
																							"name": "validate",
																							"variant": "declaration",
																							"kind": 1024,
																							"flags": {
																								"isOptional": true
																							},
																							"sources": [
																								{
																									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																									"line": 65,
																									"character": 8,
																									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L65"
																								}
																							],
																							"type": {
																								"type": "reflection",
																								"declaration": {
																									"id": 37,
																									"name": "__type",
																									"variant": "declaration",
																									"kind": 65536,
																									"flags": {},
																									"sources": [
																										{
																											"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																											"line": 65,
																											"character": 20,
																											"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L65"
																										}
																									],
																									"signatures": [
																										{
																											"id": 38,
																											"name": "__type",
																											"variant": "signature",
																											"kind": 4096,
																											"flags": {},
																											"sources": [
																												{
																													"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																													"line": 65,
																													"character": 20,
																													"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L65"
																												}
																											],
																											"parameters": [
																												{
																													"id": 39,
																													"name": "v",
																													"variant": "param",
																													"kind": 32768,
																													"flags": {},
																													"type": {
																														"type": "intrinsic",
																														"name": "any"
																													}
																												}
																											],
																											"type": {
																												"type": "predicate",
																												"name": "v",
																												"asserts": false,
																												"targetType": {
																													"type": "intrinsic",
																													"name": "boolean"
																												}
																											}
																										}
																									]
																								}
																							}
																						}
																					],
																					"groups": [
																						{
																							"title": "Properties",
																							"children": [
																								33,
																								34,
																								35,
																								32,
																								31,
																								36
																							]
																						}
																					],
																					"sources": [
																						{
																							"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																							"line": 59,
																							"character": 8,
																							"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L59"
																						}
																					]
																				}
																			},
																			{
																				"type": "reflection",
																				"declaration": {
																					"id": 40,
																					"name": "__type",
																					"variant": "declaration",
																					"kind": 65536,
																					"flags": {},
																					"children": [
																						{
																							"id": 42,
																							"name": "delim",
																							"variant": "declaration",
																							"kind": 1024,
																							"flags": {
																								"isOptional": true
																							},
																							"sources": [
																								{
																									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																									"line": 68,
																									"character": 8,
																									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L68"
																								}
																							],
																							"type": {
																								"type": "intrinsic",
																								"name": "undefined"
																							}
																						},
																						{
																							"id": 41,
																							"name": "multiple",
																							"variant": "declaration",
																							"kind": 1024,
																							"flags": {
																								"isOptional": true
																							},
																							"sources": [
																								{
																									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																									"line": 67,
																									"character": 8,
																									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L67"
																								}
																							],
																							"type": {
																								"type": "literal",
																								"value": false
																							}
																						}
																					],
																					"groups": [
																						{
																							"title": "Properties",
																							"children": [
																								42,
																								41
																							]
																						}
																					],
																					"sources": [
																						{
																							"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																							"line": 66,
																							"character": 8,
																							"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L66"
																						}
																					]
																				}
																			}
																		]
																	}
																}
															],
															"groups": [
																{
																	"title": "Properties",
																	"children": [
																		25
																	]
																}
															],
															"sources": [
																{
																	"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																	"line": 54,
																	"character": 137,
																	"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L54"
																}
															]
														}
													}
												],
												"name": "ConfigSetFromMetaSet",
												"package": "jackspeak"
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/jackspeak/src/index.ts",
													"qualifiedName": "ConfigSetFromMetaSet"
												},
												"typeArguments": [
													{
														"type": "literal",
														"value": "string"
													},
													{
														"type": "literal",
														"value": true
													},
													{
														"type": "reflection",
														"declaration": {
															"id": 43,
															"name": "__type",
															"variant": "declaration",
															"kind": 65536,
															"flags": {},
															"children": [
																{
																	"id": 44,
																	"name": "grep",
																	"variant": "declaration",
																	"kind": 1024,
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																			"line": 71,
																			"character": 4,
																			"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L71"
																		}
																	],
																	"type": {
																		"type": "intersection",
																		"types": [
																			{
																				"type": "reflection",
																				"declaration": {
																					"id": 45,
																					"name": "__type",
																					"variant": "declaration",
																					"kind": 65536,
																					"flags": {},
																					"children": [
																						{
																							"id": 50,
																							"name": "description",
																							"variant": "declaration",
																							"kind": 1024,
																							"flags": {},
																							"sources": [
																								{
																									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																									"line": 76,
																									"character": 8,
																									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L76"
																								}
																							],
																							"type": {
																								"type": "intrinsic",
																								"name": "string"
																							}
																						},
																						{
																							"id": 48,
																							"name": "hint",
																							"variant": "declaration",
																							"kind": 1024,
																							"flags": {},
																							"sources": [
																								{
																									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																									"line": 74,
																									"character": 8,
																									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L74"
																								}
																							],
																							"type": {
																								"type": "intrinsic",
																								"name": "string"
																							}
																						},
																						{
																							"id": 47,
																							"name": "multiple",
																							"variant": "declaration",
																							"kind": 1024,
																							"flags": {},
																							"sources": [
																								{
																									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																									"line": 73,
																									"character": 8,
																									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L73"
																								}
																							],
																							"type": {
																								"type": "intrinsic",
																								"name": "boolean"
																							}
																						},
																						{
																							"id": 49,
																							"name": "short",
																							"variant": "declaration",
																							"kind": 1024,
																							"flags": {},
																							"sources": [
																								{
																									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																									"line": 75,
																									"character": 8,
																									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L75"
																								}
																							],
																							"type": {
																								"type": "intrinsic",
																								"name": "string"
																							}
																						},
																						{
																							"id": 46,
																							"name": "type",
																							"variant": "declaration",
																							"kind": 1024,
																							"flags": {},
																							"sources": [
																								{
																									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																									"line": 72,
																									"character": 8,
																									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L72"
																								}
																							],
																							"type": {
																								"type": "intrinsic",
																								"name": "string"
																							}
																						}
																					],
																					"groups": [
																						{
																							"title": "Properties",
																							"children": [
																								50,
																								48,
																								47,
																								49,
																								46
																							]
																						}
																					],
																					"sources": [
																						{
																							"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																							"line": 71,
																							"character": 10,
																							"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L71"
																						}
																					]
																				}
																			},
																			{
																				"type": "reflection",
																				"declaration": {
																					"id": 51,
																					"name": "__type",
																					"variant": "declaration",
																					"kind": 65536,
																					"flags": {},
																					"children": [
																						{
																							"id": 54,
																							"name": "default",
																							"variant": "declaration",
																							"kind": 1024,
																							"flags": {
																								"isOptional": true
																							},
																							"sources": [
																								{
																									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																									"line": 80,
																									"character": 8,
																									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L80"
																								}
																							],
																							"type": {
																								"type": "array",
																								"elementType": {
																									"type": "intrinsic",
																									"name": "string"
																								}
																							}
																						},
																						{
																							"id": 55,
																							"name": "description",
																							"variant": "declaration",
																							"kind": 1024,
																							"flags": {
																								"isOptional": true
																							},
																							"sources": [
																								{
																									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																									"line": 81,
																									"character": 8,
																									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L81"
																								}
																							],
																							"type": {
																								"type": "intrinsic",
																								"name": "string"
																							}
																						},
																						{
																							"id": 56,
																							"name": "hint",
																							"variant": "declaration",
																							"kind": 1024,
																							"flags": {
																								"isOptional": true
																							},
																							"sources": [
																								{
																									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																									"line": 82,
																									"character": 8,
																									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L82"
																								}
																							],
																							"type": {
																								"type": "intrinsic",
																								"name": "string"
																							}
																						},
																						{
																							"id": 53,
																							"name": "short",
																							"variant": "declaration",
																							"kind": 1024,
																							"flags": {
																								"isOptional": true
																							},
																							"sources": [
																								{
																									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																									"line": 79,
																									"character": 8,
																									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L79"
																								}
																							],
																							"type": {
																								"type": "intrinsic",
																								"name": "string"
																							}
																						},
																						{
																							"id": 52,
																							"name": "type",
																							"variant": "declaration",
																							"kind": 1024,
																							"flags": {},
																							"sources": [
																								{
																									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																									"line": 78,
																									"character": 8,
																									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L78"
																								}
																							],
																							"type": {
																								"type": "literal",
																								"value": "string"
																							}
																						},
																						{
																							"id": 57,
																							"name": "validate",
																							"variant": "declaration",
																							"kind": 1024,
																							"flags": {
																								"isOptional": true
																							},
																							"sources": [
																								{
																									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																									"line": 83,
																									"character": 8,
																									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L83"
																								}
																							],
																							"type": {
																								"type": "reflection",
																								"declaration": {
																									"id": 58,
																									"name": "__type",
																									"variant": "declaration",
																									"kind": 65536,
																									"flags": {},
																									"sources": [
																										{
																											"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																											"line": 83,
																											"character": 20,
																											"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L83"
																										}
																									],
																									"signatures": [
																										{
																											"id": 59,
																											"name": "__type",
																											"variant": "signature",
																											"kind": 4096,
																											"flags": {},
																											"sources": [
																												{
																													"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																													"line": 83,
																													"character": 20,
																													"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L83"
																												}
																											],
																											"parameters": [
																												{
																													"id": 60,
																													"name": "v",
																													"variant": "param",
																													"kind": 32768,
																													"flags": {},
																													"type": {
																														"type": "intrinsic",
																														"name": "any"
																													}
																												}
																											],
																											"type": {
																												"type": "predicate",
																												"name": "v",
																												"asserts": false,
																												"targetType": {
																													"type": "array",
																													"elementType": {
																														"type": "intrinsic",
																														"name": "string"
																													}
																												}
																											}
																										}
																									]
																								}
																							}
																						}
																					],
																					"groups": [
																						{
																							"title": "Properties",
																							"children": [
																								54,
																								55,
																								56,
																								53,
																								52,
																								57
																							]
																						}
																					],
																					"sources": [
																						{
																							"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																							"line": 77,
																							"character": 8,
																							"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L77"
																						}
																					]
																				}
																			},
																			{
																				"type": "reflection",
																				"declaration": {
																					"id": 61,
																					"name": "__type",
																					"variant": "declaration",
																					"kind": 65536,
																					"flags": {},
																					"children": [
																						{
																							"id": 63,
																							"name": "delim",
																							"variant": "declaration",
																							"kind": 1024,
																							"flags": {
																								"isOptional": true
																							},
																							"sources": [
																								{
																									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																									"line": 86,
																									"character": 8,
																									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L86"
																								}
																							],
																							"type": {
																								"type": "intrinsic",
																								"name": "string"
																							}
																						},
																						{
																							"id": 62,
																							"name": "multiple",
																							"variant": "declaration",
																							"kind": 1024,
																							"flags": {},
																							"sources": [
																								{
																									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																									"line": 85,
																									"character": 8,
																									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L85"
																								}
																							],
																							"type": {
																								"type": "literal",
																								"value": true
																							}
																						}
																					],
																					"groups": [
																						{
																							"title": "Properties",
																							"children": [
																								63,
																								62
																							]
																						}
																					],
																					"sources": [
																						{
																							"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																							"line": 84,
																							"character": 8,
																							"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L84"
																						}
																					]
																				}
																			}
																		]
																	}
																}
															],
															"groups": [
																{
																	"title": "Properties",
																	"children": [
																		44
																	]
																}
															],
															"sources": [
																{
																	"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																	"line": 70,
																	"character": 62,
																	"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L70"
																}
															]
														}
													}
												],
												"name": "ConfigSetFromMetaSet",
												"package": "jackspeak"
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/jackspeak/src/index.ts",
													"qualifiedName": "ConfigSetFromMetaSet"
												},
												"typeArguments": [
													{
														"type": "literal",
														"value": "boolean"
													},
													{
														"type": "literal",
														"value": false
													},
													{
														"type": "reflection",
														"declaration": {
															"id": 64,
															"name": "__type",
															"variant": "declaration",
															"kind": 65536,
															"flags": {},
															"children": [
																{
																	"id": 65,
																	"name": "invert",
																	"variant": "declaration",
																	"kind": 1024,
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																			"line": 89,
																			"character": 4,
																			"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L89"
																		}
																	],
																	"type": {
																		"type": "intersection",
																		"types": [
																			{
																				"type": "reflection",
																				"declaration": {
																					"id": 66,
																					"name": "__type",
																					"variant": "declaration",
																					"kind": 65536,
																					"flags": {},
																					"children": [
																						{
																							"id": 69,
																							"name": "description",
																							"variant": "declaration",
																							"kind": 1024,
																							"flags": {},
																							"sources": [
																								{
																									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																									"line": 92,
																									"character": 8,
																									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L92"
																								}
																							],
																							"type": {
																								"type": "intrinsic",
																								"name": "string"
																							}
																						},
																						{
																							"id": 68,
																							"name": "short",
																							"variant": "declaration",
																							"kind": 1024,
																							"flags": {},
																							"sources": [
																								{
																									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																									"line": 91,
																									"character": 8,
																									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L91"
																								}
																							],
																							"type": {
																								"type": "intrinsic",
																								"name": "string"
																							}
																						},
																						{
																							"id": 67,
																							"name": "type",
																							"variant": "declaration",
																							"kind": 1024,
																							"flags": {},
																							"sources": [
																								{
																									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																									"line": 90,
																									"character": 8,
																									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L90"
																								}
																							],
																							"type": {
																								"type": "intrinsic",
																								"name": "string"
																							}
																						}
																					],
																					"groups": [
																						{
																							"title": "Properties",
																							"children": [
																								69,
																								68,
																								67
																							]
																						}
																					],
																					"sources": [
																						{
																							"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																							"line": 89,
																							"character": 12,
																							"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L89"
																						}
																					]
																				}
																			},
																			{
																				"type": "reflection",
																				"declaration": {
																					"id": 70,
																					"name": "__type",
																					"variant": "declaration",
																					"kind": 65536,
																					"flags": {},
																					"children": [
																						{
																							"id": 73,
																							"name": "default",
																							"variant": "declaration",
																							"kind": 1024,
																							"flags": {
																								"isOptional": true
																							},
																							"sources": [
																								{
																									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																									"line": 96,
																									"character": 8,
																									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L96"
																								}
																							],
																							"type": {
																								"type": "intrinsic",
																								"name": "boolean"
																							}
																						},
																						{
																							"id": 74,
																							"name": "description",
																							"variant": "declaration",
																							"kind": 1024,
																							"flags": {
																								"isOptional": true
																							},
																							"sources": [
																								{
																									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																									"line": 97,
																									"character": 8,
																									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L97"
																								}
																							],
																							"type": {
																								"type": "intrinsic",
																								"name": "string"
																							}
																						},
																						{
																							"id": 75,
																							"name": "hint",
																							"variant": "declaration",
																							"kind": 1024,
																							"flags": {
																								"isOptional": true
																							},
																							"sources": [
																								{
																									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																									"line": 98,
																									"character": 8,
																									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L98"
																								}
																							],
																							"type": {
																								"type": "intrinsic",
																								"name": "undefined"
																							}
																						},
																						{
																							"id": 72,
																							"name": "short",
																							"variant": "declaration",
																							"kind": 1024,
																							"flags": {
																								"isOptional": true
																							},
																							"sources": [
																								{
																									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																									"line": 95,
																									"character": 8,
																									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L95"
																								}
																							],
																							"type": {
																								"type": "intrinsic",
																								"name": "string"
																							}
																						},
																						{
																							"id": 71,
																							"name": "type",
																							"variant": "declaration",
																							"kind": 1024,
																							"flags": {},
																							"sources": [
																								{
																									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																									"line": 94,
																									"character": 8,
																									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L94"
																								}
																							],
																							"type": {
																								"type": "literal",
																								"value": "boolean"
																							}
																						},
																						{
																							"id": 76,
																							"name": "validate",
																							"variant": "declaration",
																							"kind": 1024,
																							"flags": {
																								"isOptional": true
																							},
																							"sources": [
																								{
																									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																									"line": 99,
																									"character": 8,
																									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L99"
																								}
																							],
																							"type": {
																								"type": "reflection",
																								"declaration": {
																									"id": 77,
																									"name": "__type",
																									"variant": "declaration",
																									"kind": 65536,
																									"flags": {},
																									"sources": [
																										{
																											"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																											"line": 99,
																											"character": 20,
																											"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L99"
																										}
																									],
																									"signatures": [
																										{
																											"id": 78,
																											"name": "__type",
																											"variant": "signature",
																											"kind": 4096,
																											"flags": {},
																											"sources": [
																												{
																													"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																													"line": 99,
																													"character": 20,
																													"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L99"
																												}
																											],
																											"parameters": [
																												{
																													"id": 79,
																													"name": "v",
																													"variant": "param",
																													"kind": 32768,
																													"flags": {},
																													"type": {
																														"type": "intrinsic",
																														"name": "any"
																													}
																												}
																											],
																											"type": {
																												"type": "predicate",
																												"name": "v",
																												"asserts": false,
																												"targetType": {
																													"type": "intrinsic",
																													"name": "boolean"
																												}
																											}
																										}
																									]
																								}
																							}
																						}
																					],
																					"groups": [
																						{
																							"title": "Properties",
																							"children": [
																								73,
																								74,
																								75,
																								72,
																								71,
																								76
																							]
																						}
																					],
																					"sources": [
																						{
																							"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																							"line": 93,
																							"character": 8,
																							"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L93"
																						}
																					]
																				}
																			},
																			{
																				"type": "reflection",
																				"declaration": {
																					"id": 80,
																					"name": "__type",
																					"variant": "declaration",
																					"kind": 65536,
																					"flags": {},
																					"children": [
																						{
																							"id": 82,
																							"name": "delim",
																							"variant": "declaration",
																							"kind": 1024,
																							"flags": {
																								"isOptional": true
																							},
																							"sources": [
																								{
																									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																									"line": 102,
																									"character": 8,
																									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L102"
																								}
																							],
																							"type": {
																								"type": "intrinsic",
																								"name": "undefined"
																							}
																						},
																						{
																							"id": 81,
																							"name": "multiple",
																							"variant": "declaration",
																							"kind": 1024,
																							"flags": {
																								"isOptional": true
																							},
																							"sources": [
																								{
																									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																									"line": 101,
																									"character": 8,
																									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L101"
																								}
																							],
																							"type": {
																								"type": "literal",
																								"value": false
																							}
																						}
																					],
																					"groups": [
																						{
																							"title": "Properties",
																							"children": [
																								82,
																								81
																							]
																						}
																					],
																					"sources": [
																						{
																							"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																							"line": 100,
																							"character": 8,
																							"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L100"
																						}
																					]
																				}
																			}
																		]
																	}
																}
															],
															"groups": [
																{
																	"title": "Properties",
																	"children": [
																		65
																	]
																}
															],
															"sources": [
																{
																	"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																	"line": 88,
																	"character": 64,
																	"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L88"
																}
															]
														}
													}
												],
												"name": "ConfigSetFromMetaSet",
												"package": "jackspeak"
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/jackspeak/src/index.ts",
													"qualifiedName": "ConfigSetFromMetaSet"
												},
												"typeArguments": [
													{
														"type": "literal",
														"value": "boolean"
													},
													{
														"type": "literal",
														"value": false
													},
													{
														"type": "reflection",
														"declaration": {
															"id": 83,
															"name": "__type",
															"variant": "declaration",
															"kind": 65536,
															"flags": {},
															"children": [
																{
																	"id": 84,
																	"name": "no-invert",
																	"variant": "declaration",
																	"kind": 1024,
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																			"line": 105,
																			"character": 4,
																			"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L105"
																		}
																	],
																	"type": {
																		"type": "intersection",
																		"types": [
																			{
																				"type": "reflection",
																				"declaration": {
																					"id": 85,
																					"name": "__type",
																					"variant": "declaration",
																					"kind": 65536,
																					"flags": {},
																					"children": [
																						{
																							"id": 88,
																							"name": "description",
																							"variant": "declaration",
																							"kind": 1024,
																							"flags": {},
																							"sources": [
																								{
																									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																									"line": 108,
																									"character": 8,
																									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L108"
																								}
																							],
																							"type": {
																								"type": "intrinsic",
																								"name": "string"
																							}
																						},
																						{
																							"id": 87,
																							"name": "short",
																							"variant": "declaration",
																							"kind": 1024,
																							"flags": {},
																							"sources": [
																								{
																									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																									"line": 107,
																									"character": 8,
																									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L107"
																								}
																							],
																							"type": {
																								"type": "intrinsic",
																								"name": "string"
																							}
																						},
																						{
																							"id": 86,
																							"name": "type",
																							"variant": "declaration",
																							"kind": 1024,
																							"flags": {},
																							"sources": [
																								{
																									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																									"line": 106,
																									"character": 8,
																									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L106"
																								}
																							],
																							"type": {
																								"type": "intrinsic",
																								"name": "string"
																							}
																						}
																					],
																					"groups": [
																						{
																							"title": "Properties",
																							"children": [
																								88,
																								87,
																								86
																							]
																						}
																					],
																					"sources": [
																						{
																							"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																							"line": 105,
																							"character": 17,
																							"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L105"
																						}
																					]
																				}
																			},
																			{
																				"type": "reflection",
																				"declaration": {
																					"id": 89,
																					"name": "__type",
																					"variant": "declaration",
																					"kind": 65536,
																					"flags": {},
																					"children": [
																						{
																							"id": 92,
																							"name": "default",
																							"variant": "declaration",
																							"kind": 1024,
																							"flags": {
																								"isOptional": true
																							},
																							"sources": [
																								{
																									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																									"line": 112,
																									"character": 8,
																									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L112"
																								}
																							],
																							"type": {
																								"type": "intrinsic",
																								"name": "boolean"
																							}
																						},
																						{
																							"id": 93,
																							"name": "description",
																							"variant": "declaration",
																							"kind": 1024,
																							"flags": {
																								"isOptional": true
																							},
																							"sources": [
																								{
																									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																									"line": 113,
																									"character": 8,
																									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L113"
																								}
																							],
																							"type": {
																								"type": "intrinsic",
																								"name": "string"
																							}
																						},
																						{
																							"id": 94,
																							"name": "hint",
																							"variant": "declaration",
																							"kind": 1024,
																							"flags": {
																								"isOptional": true
																							},
																							"sources": [
																								{
																									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																									"line": 114,
																									"character": 8,
																									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L114"
																								}
																							],
																							"type": {
																								"type": "intrinsic",
																								"name": "undefined"
																							}
																						},
																						{
																							"id": 91,
																							"name": "short",
																							"variant": "declaration",
																							"kind": 1024,
																							"flags": {
																								"isOptional": true
																							},
																							"sources": [
																								{
																									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																									"line": 111,
																									"character": 8,
																									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L111"
																								}
																							],
																							"type": {
																								"type": "intrinsic",
																								"name": "string"
																							}
																						},
																						{
																							"id": 90,
																							"name": "type",
																							"variant": "declaration",
																							"kind": 1024,
																							"flags": {},
																							"sources": [
																								{
																									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																									"line": 110,
																									"character": 8,
																									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L110"
																								}
																							],
																							"type": {
																								"type": "literal",
																								"value": "boolean"
																							}
																						},
																						{
																							"id": 95,
																							"name": "validate",
																							"variant": "declaration",
																							"kind": 1024,
																							"flags": {
																								"isOptional": true
																							},
																							"sources": [
																								{
																									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																									"line": 115,
																									"character": 8,
																									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L115"
																								}
																							],
																							"type": {
																								"type": "reflection",
																								"declaration": {
																									"id": 96,
																									"name": "__type",
																									"variant": "declaration",
																									"kind": 65536,
																									"flags": {},
																									"sources": [
																										{
																											"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																											"line": 115,
																											"character": 20,
																											"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L115"
																										}
																									],
																									"signatures": [
																										{
																											"id": 97,
																											"name": "__type",
																											"variant": "signature",
																											"kind": 4096,
																											"flags": {},
																											"sources": [
																												{
																													"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																													"line": 115,
																													"character": 20,
																													"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L115"
																												}
																											],
																											"parameters": [
																												{
																													"id": 98,
																													"name": "v",
																													"variant": "param",
																													"kind": 32768,
																													"flags": {},
																													"type": {
																														"type": "intrinsic",
																														"name": "any"
																													}
																												}
																											],
																											"type": {
																												"type": "predicate",
																												"name": "v",
																												"asserts": false,
																												"targetType": {
																													"type": "intrinsic",
																													"name": "boolean"
																												}
																											}
																										}
																									]
																								}
																							}
																						}
																					],
																					"groups": [
																						{
																							"title": "Properties",
																							"children": [
																								92,
																								93,
																								94,
																								91,
																								90,
																								95
																							]
																						}
																					],
																					"sources": [
																						{
																							"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																							"line": 109,
																							"character": 8,
																							"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L109"
																						}
																					]
																				}
																			},
																			{
																				"type": "reflection",
																				"declaration": {
																					"id": 99,
																					"name": "__type",
																					"variant": "declaration",
																					"kind": 65536,
																					"flags": {},
																					"children": [
																						{
																							"id": 101,
																							"name": "delim",
																							"variant": "declaration",
																							"kind": 1024,
																							"flags": {
																								"isOptional": true
																							},
																							"sources": [
																								{
																									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																									"line": 118,
																									"character": 8,
																									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L118"
																								}
																							],
																							"type": {
																								"type": "intrinsic",
																								"name": "undefined"
																							}
																						},
																						{
																							"id": 100,
																							"name": "multiple",
																							"variant": "declaration",
																							"kind": 1024,
																							"flags": {
																								"isOptional": true
																							},
																							"sources": [
																								{
																									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																									"line": 117,
																									"character": 8,
																									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L117"
																								}
																							],
																							"type": {
																								"type": "literal",
																								"value": false
																							}
																						}
																					],
																					"groups": [
																						{
																							"title": "Properties",
																							"children": [
																								101,
																								100
																							]
																						}
																					],
																					"sources": [
																						{
																							"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																							"line": 116,
																							"character": 8,
																							"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L116"
																						}
																					]
																				}
																			}
																		]
																	}
																}
															],
															"groups": [
																{
																	"title": "Properties",
																	"children": [
																		84
																	]
																}
															],
															"sources": [
																{
																	"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																	"line": 104,
																	"character": 64,
																	"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L104"
																}
															]
														}
													}
												],
												"name": "ConfigSetFromMetaSet",
												"package": "jackspeak"
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/jackspeak/src/index.ts",
													"qualifiedName": "ConfigSetFromMetaSet"
												},
												"typeArguments": [
													{
														"type": "literal",
														"value": "boolean"
													},
													{
														"type": "literal",
														"value": false
													},
													{
														"type": "reflection",
														"declaration": {
															"id": 102,
															"name": "__type",
															"variant": "declaration",
															"kind": 65536,
															"flags": {},
															"children": [
																{
																	"id": 103,
																	"name": "save-fixture",
																	"variant": "declaration",
																	"kind": 1024,
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																			"line": 121,
																			"character": 4,
																			"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L121"
																		}
																	],
																	"type": {
																		"type": "intersection",
																		"types": [
																			{
																				"type": "reflection",
																				"declaration": {
																					"id": 104,
																					"name": "__type",
																					"variant": "declaration",
																					"kind": 65536,
																					"flags": {},
																					"children": [
																						{
																							"id": 107,
																							"name": "description",
																							"variant": "declaration",
																							"kind": 1024,
																							"flags": {},
																							"sources": [
																								{
																									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																									"line": 124,
																									"character": 8,
																									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L124"
																								}
																							],
																							"type": {
																								"type": "intrinsic",
																								"name": "string"
																							}
																						},
																						{
																							"id": 106,
																							"name": "short",
																							"variant": "declaration",
																							"kind": 1024,
																							"flags": {},
																							"sources": [
																								{
																									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																									"line": 123,
																									"character": 8,
																									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L123"
																								}
																							],
																							"type": {
																								"type": "intrinsic",
																								"name": "string"
																							}
																						},
																						{
																							"id": 105,
																							"name": "type",
																							"variant": "declaration",
																							"kind": 1024,
																							"flags": {},
																							"sources": [
																								{
																									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																									"line": 122,
																									"character": 8,
																									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L122"
																								}
																							],
																							"type": {
																								"type": "intrinsic",
																								"name": "string"
																							}
																						}
																					],
																					"groups": [
																						{
																							"title": "Properties",
																							"children": [
																								107,
																								106,
																								105
																							]
																						}
																					],
																					"sources": [
																						{
																							"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																							"line": 121,
																							"character": 20,
																							"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L121"
																						}
																					]
																				}
																			},
																			{
																				"type": "reflection",
																				"declaration": {
																					"id": 108,
																					"name": "__type",
																					"variant": "declaration",
																					"kind": 65536,
																					"flags": {},
																					"children": [
																						{
																							"id": 111,
																							"name": "default",
																							"variant": "declaration",
																							"kind": 1024,
																							"flags": {
																								"isOptional": true
																							},
																							"sources": [
																								{
																									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																									"line": 128,
																									"character": 8,
																									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L128"
																								}
																							],
																							"type": {
																								"type": "intrinsic",
																								"name": "boolean"
																							}
																						},
																						{
																							"id": 112,
																							"name": "description",
																							"variant": "declaration",
																							"kind": 1024,
																							"flags": {
																								"isOptional": true
																							},
																							"sources": [
																								{
																									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																									"line": 129,
																									"character": 8,
																									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L129"
																								}
																							],
																							"type": {
																								"type": "intrinsic",
																								"name": "string"
																							}
																						},
																						{
																							"id": 113,
																							"name": "hint",
																							"variant": "declaration",
																							"kind": 1024,
																							"flags": {
																								"isOptional": true
																							},
																							"sources": [
																								{
																									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																									"line": 130,
																									"character": 8,
																									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L130"
																								}
																							],
																							"type": {
																								"type": "intrinsic",
																								"name": "undefined"
																							}
																						},
																						{
																							"id": 110,
																							"name": "short",
																							"variant": "declaration",
																							"kind": 1024,
																							"flags": {
																								"isOptional": true
																							},
																							"sources": [
																								{
																									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																									"line": 127,
																									"character": 8,
																									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L127"
																								}
																							],
																							"type": {
																								"type": "intrinsic",
																								"name": "string"
																							}
																						},
																						{
																							"id": 109,
																							"name": "type",
																							"variant": "declaration",
																							"kind": 1024,
																							"flags": {},
																							"sources": [
																								{
																									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																									"line": 126,
																									"character": 8,
																									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L126"
																								}
																							],
																							"type": {
																								"type": "literal",
																								"value": "boolean"
																							}
																						},
																						{
																							"id": 114,
																							"name": "validate",
																							"variant": "declaration",
																							"kind": 1024,
																							"flags": {
																								"isOptional": true
																							},
																							"sources": [
																								{
																									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																									"line": 131,
																									"character": 8,
																									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L131"
																								}
																							],
																							"type": {
																								"type": "reflection",
																								"declaration": {
																									"id": 115,
																									"name": "__type",
																									"variant": "declaration",
																									"kind": 65536,
																									"flags": {},
																									"sources": [
																										{
																											"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																											"line": 131,
																											"character": 20,
																											"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L131"
																										}
																									],
																									"signatures": [
																										{
																											"id": 116,
																											"name": "__type",
																											"variant": "signature",
																											"kind": 4096,
																											"flags": {},
																											"sources": [
																												{
																													"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																													"line": 131,
																													"character": 20,
																													"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L131"
																												}
																											],
																											"parameters": [
																												{
																													"id": 117,
																													"name": "v",
																													"variant": "param",
																													"kind": 32768,
																													"flags": {},
																													"type": {
																														"type": "intrinsic",
																														"name": "any"
																													}
																												}
																											],
																											"type": {
																												"type": "predicate",
																												"name": "v",
																												"asserts": false,
																												"targetType": {
																													"type": "intrinsic",
																													"name": "boolean"
																												}
																											}
																										}
																									]
																								}
																							}
																						}
																					],
																					"groups": [
																						{
																							"title": "Properties",
																							"children": [
																								111,
																								112,
																								113,
																								110,
																								109,
																								114
																							]
																						}
																					],
																					"sources": [
																						{
																							"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																							"line": 125,
																							"character": 8,
																							"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L125"
																						}
																					]
																				}
																			},
																			{
																				"type": "reflection",
																				"declaration": {
																					"id": 118,
																					"name": "__type",
																					"variant": "declaration",
																					"kind": 65536,
																					"flags": {},
																					"children": [
																						{
																							"id": 120,
																							"name": "delim",
																							"variant": "declaration",
																							"kind": 1024,
																							"flags": {
																								"isOptional": true
																							},
																							"sources": [
																								{
																									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																									"line": 134,
																									"character": 8,
																									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L134"
																								}
																							],
																							"type": {
																								"type": "intrinsic",
																								"name": "undefined"
																							}
																						},
																						{
																							"id": 119,
																							"name": "multiple",
																							"variant": "declaration",
																							"kind": 1024,
																							"flags": {
																								"isOptional": true
																							},
																							"sources": [
																								{
																									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																									"line": 133,
																									"character": 8,
																									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L133"
																								}
																							],
																							"type": {
																								"type": "literal",
																								"value": false
																							}
																						}
																					],
																					"groups": [
																						{
																							"title": "Properties",
																							"children": [
																								120,
																								119
																							]
																						}
																					],
																					"sources": [
																						{
																							"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																							"line": 132,
																							"character": 8,
																							"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L132"
																						}
																					]
																				}
																			}
																		]
																	}
																}
															],
															"groups": [
																{
																	"title": "Properties",
																	"children": [
																		103
																	]
																}
															],
															"sources": [
																{
																	"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																	"line": 120,
																	"character": 64,
																	"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L120"
																}
															]
														}
													}
												],
												"name": "ConfigSetFromMetaSet",
												"package": "jackspeak"
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/jackspeak/src/index.ts",
													"qualifiedName": "ConfigSetFromMetaSet"
												},
												"typeArguments": [
													{
														"type": "literal",
														"value": "boolean"
													},
													{
														"type": "literal",
														"value": false
													},
													{
														"type": "reflection",
														"declaration": {
															"id": 121,
															"name": "__type",
															"variant": "declaration",
															"kind": 65536,
															"flags": {},
															"children": [
																{
																	"id": 122,
																	"name": "snapshot",
																	"variant": "declaration",
																	"kind": 1024,
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																			"line": 137,
																			"character": 4,
																			"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L137"
																		}
																	],
																	"type": {
																		"type": "intersection",
																		"types": [
																			{
																				"type": "reflection",
																				"declaration": {
																					"id": 123,
																					"name": "__type",
																					"variant": "declaration",
																					"kind": 65536,
																					"flags": {},
																					"children": [
																						{
																							"id": 126,
																							"name": "description",
																							"variant": "declaration",
																							"kind": 1024,
																							"flags": {},
																							"sources": [
																								{
																									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																									"line": 140,
																									"character": 8,
																									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L140"
																								}
																							],
																							"type": {
																								"type": "intrinsic",
																								"name": "string"
																							}
																						},
																						{
																							"id": 125,
																							"name": "short",
																							"variant": "declaration",
																							"kind": 1024,
																							"flags": {},
																							"sources": [
																								{
																									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																									"line": 139,
																									"character": 8,
																									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L139"
																								}
																							],
																							"type": {
																								"type": "intrinsic",
																								"name": "string"
																							}
																						},
																						{
																							"id": 124,
																							"name": "type",
																							"variant": "declaration",
																							"kind": 1024,
																							"flags": {},
																							"sources": [
																								{
																									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																									"line": 138,
																									"character": 8,
																									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L138"
																								}
																							],
																							"type": {
																								"type": "intrinsic",
																								"name": "string"
																							}
																						}
																					],
																					"groups": [
																						{
																							"title": "Properties",
																							"children": [
																								126,
																								125,
																								124
																							]
																						}
																					],
																					"sources": [
																						{
																							"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																							"line": 137,
																							"character": 14,
																							"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L137"
																						}
																					]
																				}
																			},
																			{
																				"type": "reflection",
																				"declaration": {
																					"id": 127,
																					"name": "__type",
																					"variant": "declaration",
																					"kind": 65536,
																					"flags": {},
																					"children": [
																						{
																							"id": 130,
																							"name": "default",
																							"variant": "declaration",
																							"kind": 1024,
																							"flags": {
																								"isOptional": true
																							},
																							"sources": [
																								{
																									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																									"line": 144,
																									"character": 8,
																									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L144"
																								}
																							],
																							"type": {
																								"type": "intrinsic",
																								"name": "boolean"
																							}
																						},
																						{
																							"id": 131,
																							"name": "description",
																							"variant": "declaration",
																							"kind": 1024,
																							"flags": {
																								"isOptional": true
																							},
																							"sources": [
																								{
																									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																									"line": 145,
																									"character": 8,
																									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L145"
																								}
																							],
																							"type": {
																								"type": "intrinsic",
																								"name": "string"
																							}
																						},
																						{
																							"id": 132,
																							"name": "hint",
																							"variant": "declaration",
																							"kind": 1024,
																							"flags": {
																								"isOptional": true
																							},
																							"sources": [
																								{
																									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																									"line": 146,
																									"character": 8,
																									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L146"
																								}
																							],
																							"type": {
																								"type": "intrinsic",
																								"name": "undefined"
																							}
																						},
																						{
																							"id": 129,
																							"name": "short",
																							"variant": "declaration",
																							"kind": 1024,
																							"flags": {
																								"isOptional": true
																							},
																							"sources": [
																								{
																									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																									"line": 143,
																									"character": 8,
																									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L143"
																								}
																							],
																							"type": {
																								"type": "intrinsic",
																								"name": "string"
																							}
																						},
																						{
																							"id": 128,
																							"name": "type",
																							"variant": "declaration",
																							"kind": 1024,
																							"flags": {},
																							"sources": [
																								{
																									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																									"line": 142,
																									"character": 8,
																									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L142"
																								}
																							],
																							"type": {
																								"type": "literal",
																								"value": "boolean"
																							}
																						},
																						{
																							"id": 133,
																							"name": "validate",
																							"variant": "declaration",
																							"kind": 1024,
																							"flags": {
																								"isOptional": true
																							},
																							"sources": [
																								{
																									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																									"line": 147,
																									"character": 8,
																									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L147"
																								}
																							],
																							"type": {
																								"type": "reflection",
																								"declaration": {
																									"id": 134,
																									"name": "__type",
																									"variant": "declaration",
																									"kind": 65536,
																									"flags": {},
																									"sources": [
																										{
																											"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																											"line": 147,
																											"character": 20,
																											"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L147"
																										}
																									],
																									"signatures": [
																										{
																											"id": 135,
																											"name": "__type",
																											"variant": "signature",
																											"kind": 4096,
																											"flags": {},
																											"sources": [
																												{
																													"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																													"line": 147,
																													"character": 20,
																													"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L147"
																												}
																											],
																											"parameters": [
																												{
																													"id": 136,
																													"name": "v",
																													"variant": "param",
																													"kind": 32768,
																													"flags": {},
																													"type": {
																														"type": "intrinsic",
																														"name": "any"
																													}
																												}
																											],
																											"type": {
																												"type": "predicate",
																												"name": "v",
																												"asserts": false,
																												"targetType": {
																													"type": "intrinsic",
																													"name": "boolean"
																												}
																											}
																										}
																									]
																								}
																							}
																						}
																					],
																					"groups": [
																						{
																							"title": "Properties",
																							"children": [
																								130,
																								131,
																								132,
																								129,
																								128,
																								133
																							]
																						}
																					],
																					"sources": [
																						{
																							"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																							"line": 141,
																							"character": 8,
																							"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L141"
																						}
																					]
																				}
																			},
																			{
																				"type": "reflection",
																				"declaration": {
																					"id": 137,
																					"name": "__type",
																					"variant": "declaration",
																					"kind": 65536,
																					"flags": {},
																					"children": [
																						{
																							"id": 139,
																							"name": "delim",
																							"variant": "declaration",
																							"kind": 1024,
																							"flags": {
																								"isOptional": true
																							},
																							"sources": [
																								{
																									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																									"line": 150,
																									"character": 8,
																									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L150"
																								}
																							],
																							"type": {
																								"type": "intrinsic",
																								"name": "undefined"
																							}
																						},
																						{
																							"id": 138,
																							"name": "multiple",
																							"variant": "declaration",
																							"kind": 1024,
																							"flags": {
																								"isOptional": true
																							},
																							"sources": [
																								{
																									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																									"line": 149,
																									"character": 8,
																									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L149"
																								}
																							],
																							"type": {
																								"type": "literal",
																								"value": false
																							}
																						}
																					],
																					"groups": [
																						{
																							"title": "Properties",
																							"children": [
																								139,
																								138
																							]
																						}
																					],
																					"sources": [
																						{
																							"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																							"line": 148,
																							"character": 8,
																							"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L148"
																						}
																					]
																				}
																			}
																		]
																	}
																}
															],
															"groups": [
																{
																	"title": "Properties",
																	"children": [
																		122
																	]
																}
															],
															"sources": [
																{
																	"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																	"line": 136,
																	"character": 64,
																	"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L136"
																}
															]
														}
													}
												],
												"name": "ConfigSetFromMetaSet",
												"package": "jackspeak"
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/jackspeak/src/index.ts",
													"qualifiedName": "ConfigSetFromMetaSet"
												},
												"typeArguments": [
													{
														"type": "literal",
														"value": "boolean"
													},
													{
														"type": "literal",
														"value": false
													},
													{
														"type": "reflection",
														"declaration": {
															"id": 140,
															"name": "__type",
															"variant": "declaration",
															"kind": 65536,
															"flags": {},
															"children": [
																{
																	"id": 141,
																	"name": "typecheck",
																	"variant": "declaration",
																	"kind": 1024,
																	"flags": {},
																	"sources": [
																		{
																			"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																			"line": 153,
																			"character": 4,
																			"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L153"
																		}
																	],
																	"type": {
																		"type": "intersection",
																		"types": [
																			{
																				"type": "reflection",
																				"declaration": {
																					"id": 142,
																					"name": "__type",
																					"variant": "declaration",
																					"kind": 65536,
																					"flags": {},
																					"children": [
																						{
																							"id": 144,
																							"name": "default",
																							"variant": "declaration",
																							"kind": 1024,
																							"flags": {},
																							"sources": [
																								{
																									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																									"line": 155,
																									"character": 8,
																									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L155"
																								}
																							],
																							"type": {
																								"type": "intrinsic",
																								"name": "boolean"
																							}
																						},
																						{
																							"id": 145,
																							"name": "description",
																							"variant": "declaration",
																							"kind": 1024,
																							"flags": {},
																							"sources": [
																								{
																									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																									"line": 156,
																									"character": 8,
																									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L156"
																								}
																							],
																							"type": {
																								"type": "intrinsic",
																								"name": "string"
																							}
																						},
																						{
																							"id": 143,
																							"name": "type",
																							"variant": "declaration",
																							"kind": 1024,
																							"flags": {},
																							"sources": [
																								{
																									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																									"line": 154,
																									"character": 8,
																									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L154"
																								}
																							],
																							"type": {
																								"type": "intrinsic",
																								"name": "string"
																							}
																						}
																					],
																					"groups": [
																						{
																							"title": "Properties",
																							"children": [
																								144,
																								145,
																								143
																							]
																						}
																					],
																					"sources": [
																						{
																							"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																							"line": 153,
																							"character": 15,
																							"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L153"
																						}
																					]
																				}
																			},
																			{
																				"type": "reflection",
																				"declaration": {
																					"id": 146,
																					"name": "__type",
																					"variant": "declaration",
																					"kind": 65536,
																					"flags": {},
																					"children": [
																						{
																							"id": 149,
																							"name": "default",
																							"variant": "declaration",
																							"kind": 1024,
																							"flags": {
																								"isOptional": true
																							},
																							"sources": [
																								{
																									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																									"line": 160,
																									"character": 8,
																									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L160"
																								}
																							],
																							"type": {
																								"type": "intrinsic",
																								"name": "boolean"
																							}
																						},
																						{
																							"id": 150,
																							"name": "description",
																							"variant": "declaration",
																							"kind": 1024,
																							"flags": {
																								"isOptional": true
																							},
																							"sources": [
																								{
																									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																									"line": 161,
																									"character": 8,
																									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L161"
																								}
																							],
																							"type": {
																								"type": "intrinsic",
																								"name": "string"
																							}
																						},
																						{
																							"id": 151,
																							"name": "hint",
																							"variant": "declaration",
																							"kind": 1024,
																							"flags": {
																								"isOptional": true
																							},
																							"sources": [
																								{
																									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																									"line": 162,
																									"character": 8,
																									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L162"
																								}
																							],
																							"type": {
																								"type": "intrinsic",
																								"name": "undefined"
																							}
																						},
																						{
																							"id": 148,
																							"name": "short",
																							"variant": "declaration",
																							"kind": 1024,
																							"flags": {
																								"isOptional": true
																							},
																							"sources": [
																								{
																									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																									"line": 159,
																									"character": 8,
																									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L159"
																								}
																							],
																							"type": {
																								"type": "intrinsic",
																								"name": "string"
																							}
																						},
																						{
																							"id": 147,
																							"name": "type",
																							"variant": "declaration",
																							"kind": 1024,
																							"flags": {},
																							"sources": [
																								{
																									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																									"line": 158,
																									"character": 8,
																									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L158"
																								}
																							],
																							"type": {
																								"type": "literal",
																								"value": "boolean"
																							}
																						},
																						{
																							"id": 152,
																							"name": "validate",
																							"variant": "declaration",
																							"kind": 1024,
																							"flags": {
																								"isOptional": true
																							},
																							"sources": [
																								{
																									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																									"line": 163,
																									"character": 8,
																									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L163"
																								}
																							],
																							"type": {
																								"type": "reflection",
																								"declaration": {
																									"id": 153,
																									"name": "__type",
																									"variant": "declaration",
																									"kind": 65536,
																									"flags": {},
																									"sources": [
																										{
																											"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																											"line": 163,
																											"character": 20,
																											"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L163"
																										}
																									],
																									"signatures": [
																										{
																											"id": 154,
																											"name": "__type",
																											"variant": "signature",
																											"kind": 4096,
																											"flags": {},
																											"sources": [
																												{
																													"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																													"line": 163,
																													"character": 20,
																													"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L163"
																												}
																											],
																											"parameters": [
																												{
																													"id": 155,
																													"name": "v",
																													"variant": "param",
																													"kind": 32768,
																													"flags": {},
																													"type": {
																														"type": "intrinsic",
																														"name": "any"
																													}
																												}
																											],
																											"type": {
																												"type": "predicate",
																												"name": "v",
																												"asserts": false,
																												"targetType": {
																													"type": "intrinsic",
																													"name": "boolean"
																												}
																											}
																										}
																									]
																								}
																							}
																						}
																					],
																					"groups": [
																						{
																							"title": "Properties",
																							"children": [
																								149,
																								150,
																								151,
																								148,
																								147,
																								152
																							]
																						}
																					],
																					"sources": [
																						{
																							"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																							"line": 157,
																							"character": 8,
																							"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L157"
																						}
																					]
																				}
																			},
																			{
																				"type": "reflection",
																				"declaration": {
																					"id": 156,
																					"name": "__type",
																					"variant": "declaration",
																					"kind": 65536,
																					"flags": {},
																					"children": [
																						{
																							"id": 158,
																							"name": "delim",
																							"variant": "declaration",
																							"kind": 1024,
																							"flags": {
																								"isOptional": true
																							},
																							"sources": [
																								{
																									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																									"line": 166,
																									"character": 8,
																									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L166"
																								}
																							],
																							"type": {
																								"type": "intrinsic",
																								"name": "undefined"
																							}
																						},
																						{
																							"id": 157,
																							"name": "multiple",
																							"variant": "declaration",
																							"kind": 1024,
																							"flags": {
																								"isOptional": true
																							},
																							"sources": [
																								{
																									"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																									"line": 165,
																									"character": 8,
																									"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L165"
																								}
																							],
																							"type": {
																								"type": "literal",
																								"value": false
																							}
																						}
																					],
																					"groups": [
																						{
																							"title": "Properties",
																							"children": [
																								158,
																								157
																							]
																						}
																					],
																					"sources": [
																						{
																							"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																							"line": 164,
																							"character": 8,
																							"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L164"
																						}
																					]
																				}
																			}
																		]
																	}
																}
															],
															"groups": [
																{
																	"title": "Properties",
																	"children": [
																		141
																	]
																}
															],
															"sources": [
																{
																	"fileName": "src/test/test-built/dist/mjs/index.d.ts",
																	"line": 152,
																	"character": 64,
																	"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/test-built/dist/mjs/index.d.ts#L152"
																}
															]
														}
													}
												],
												"name": "ConfigSetFromMetaSet",
												"package": "jackspeak"
											}
										]
									}
								],
								"name": "Jack",
								"package": "jackspeak"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "References",
					"children": [
						1485
					]
				},
				{
					"title": "Classes",
					"children": [
						565
					]
				},
				{
					"title": "Interfaces",
					"children": [
						161
					]
				},
				{
					"title": "Type Aliases",
					"children": [
						4,
						19
					]
				},
				{
					"title": "Variables",
					"children": [
						159,
						160
					]
				},
				{
					"title": "Functions",
					"children": [
						20
					]
				}
			],
			"sources": [
				{
					"fileName": "src/test/src/index.ts",
					"line": 1,
					"character": 0,
					"url": "https://github.com/tapjs/tapjs/blob/e5b4a096/src/test/src/index.ts#L1"
				}
			]
		}
	],
	"groups": [
		{
			"title": "Modules",
			"children": [
				1,
				3
			]
		}
	],
	"packageName": "@tapjs/test",
	"packageVersion": "0.0.0-11",
	"readme": [
		{
			"kind": "text",
			"text": "# "
		},
		{
			"kind": "code",
			"text": "`@tapjs/test`"
		},
		{
			"kind": "text",
			"text": "\n\nThe plugin-ified "
		},
		{
			"kind": "code",
			"text": "`Test`"
		},
		{
			"kind": "text",
			"text": " class in node-tap."
		}
	],
	"symbolIdMap": {
		"1": {
			"sourceFileName": "src/default-plugins.ts",
			"qualifiedName": ""
		},
		"2": {
			"sourceFileName": "src/default-plugins.ts",
			"qualifiedName": "defaultPlugins"
		},
		"3": {
			"sourceFileName": "src/index.ts",
			"qualifiedName": ""
		},
		"4": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "PluginOpts"
		},
		"5": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type"
		},
		"6": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type"
		},
		"7": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "t"
		},
		"8": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "opts"
		},
		"9": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type"
		},
		"10": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type"
		},
		"11": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "t"
		},
		"12": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "opts"
		},
		"13": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type"
		},
		"14": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "P"
		},
		"15": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type"
		},
		"16": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type"
		},
		"17": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "t"
		},
		"18": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "opts"
		},
		"19": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "TestOpts"
		},
		"20": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "config"
		},
		"21": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "config"
		},
		"22": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "C"
		},
		"23": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "jack"
		},
		"24": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type"
		},
		"25": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type.only"
		},
		"26": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type"
		},
		"27": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type.type"
		},
		"28": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type.short"
		},
		"29": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type.description"
		},
		"30": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type"
		},
		"31": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type.type"
		},
		"32": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type.short"
		},
		"33": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type.default"
		},
		"34": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type.description"
		},
		"35": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type.hint"
		},
		"36": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type.validate"
		},
		"37": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type"
		},
		"38": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type"
		},
		"39": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "v"
		},
		"40": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type"
		},
		"41": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type.multiple"
		},
		"42": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type.delim"
		},
		"43": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type"
		},
		"44": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type.grep"
		},
		"45": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type"
		},
		"46": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type.type"
		},
		"47": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type.multiple"
		},
		"48": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type.hint"
		},
		"49": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type.short"
		},
		"50": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type.description"
		},
		"51": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type"
		},
		"52": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type.type"
		},
		"53": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type.short"
		},
		"54": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type.default"
		},
		"55": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type.description"
		},
		"56": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type.hint"
		},
		"57": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type.validate"
		},
		"58": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type"
		},
		"59": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type"
		},
		"60": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "v"
		},
		"61": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type"
		},
		"62": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type.multiple"
		},
		"63": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type.delim"
		},
		"64": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type"
		},
		"65": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type.invert"
		},
		"66": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type"
		},
		"67": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type.type"
		},
		"68": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type.short"
		},
		"69": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type.description"
		},
		"70": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type"
		},
		"71": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type.type"
		},
		"72": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type.short"
		},
		"73": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type.default"
		},
		"74": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type.description"
		},
		"75": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type.hint"
		},
		"76": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type.validate"
		},
		"77": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type"
		},
		"78": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type"
		},
		"79": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "v"
		},
		"80": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type"
		},
		"81": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type.multiple"
		},
		"82": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type.delim"
		},
		"83": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type"
		},
		"84": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type.no-invert"
		},
		"85": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type"
		},
		"86": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type.type"
		},
		"87": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type.short"
		},
		"88": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type.description"
		},
		"89": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type"
		},
		"90": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type.type"
		},
		"91": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type.short"
		},
		"92": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type.default"
		},
		"93": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type.description"
		},
		"94": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type.hint"
		},
		"95": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type.validate"
		},
		"96": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type"
		},
		"97": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type"
		},
		"98": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "v"
		},
		"99": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type"
		},
		"100": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type.multiple"
		},
		"101": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type.delim"
		},
		"102": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type"
		},
		"103": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type.save-fixture"
		},
		"104": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type"
		},
		"105": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type.type"
		},
		"106": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type.short"
		},
		"107": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type.description"
		},
		"108": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type"
		},
		"109": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type.type"
		},
		"110": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type.short"
		},
		"111": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type.default"
		},
		"112": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type.description"
		},
		"113": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type.hint"
		},
		"114": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type.validate"
		},
		"115": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type"
		},
		"116": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type"
		},
		"117": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "v"
		},
		"118": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type"
		},
		"119": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type.multiple"
		},
		"120": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type.delim"
		},
		"121": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type"
		},
		"122": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type.snapshot"
		},
		"123": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type"
		},
		"124": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type.type"
		},
		"125": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type.short"
		},
		"126": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type.description"
		},
		"127": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type"
		},
		"128": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type.type"
		},
		"129": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type.short"
		},
		"130": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type.default"
		},
		"131": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type.description"
		},
		"132": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type.hint"
		},
		"133": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type.validate"
		},
		"134": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type"
		},
		"135": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type"
		},
		"136": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "v"
		},
		"137": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type"
		},
		"138": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type.multiple"
		},
		"139": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type.delim"
		},
		"140": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type"
		},
		"141": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type.typecheck"
		},
		"142": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type"
		},
		"143": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type.type"
		},
		"144": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type.default"
		},
		"145": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type.description"
		},
		"146": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type"
		},
		"147": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type.type"
		},
		"148": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type.short"
		},
		"149": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type.default"
		},
		"150": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type.description"
		},
		"151": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type.hint"
		},
		"152": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type.validate"
		},
		"153": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type"
		},
		"154": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type"
		},
		"155": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "v"
		},
		"156": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type"
		},
		"157": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type.multiple"
		},
		"158": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type.delim"
		},
		"159": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "loaders"
		},
		"160": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "signature"
		},
		"161": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "BuiltPlugins"
		},
		"162": {
			"sourceFileName": "../after/src/index.ts",
			"qualifiedName": "After.#private"
		},
		"163": {
			"sourceFileName": "../after/src/index.ts",
			"qualifiedName": "After.teardown"
		},
		"164": {
			"sourceFileName": "../after/src/index.ts",
			"qualifiedName": "After.teardown"
		},
		"165": {
			"sourceFileName": "../after/src/index.ts",
			"qualifiedName": "fn"
		},
		"166": {
			"sourceFileName": "../after/src/index.ts",
			"qualifiedName": "__type"
		},
		"167": {
			"sourceFileName": "../after/src/index.ts",
			"qualifiedName": "__type"
		},
		"168": {
			"sourceFileName": "../after/src/index.ts",
			"qualifiedName": "After.after"
		},
		"169": {
			"sourceFileName": "../after/src/index.ts",
			"qualifiedName": "After.after"
		},
		"170": {
			"sourceFileName": "../after/src/index.ts",
			"qualifiedName": "fn"
		},
		"171": {
			"sourceFileName": "../after/src/index.ts",
			"qualifiedName": "__type"
		},
		"172": {
			"sourceFileName": "../after/src/index.ts",
			"qualifiedName": "__type"
		},
		"173": {
			"sourceFileName": "../after-each/src/index.ts",
			"qualifiedName": "AfterEach.#private"
		},
		"174": {
			"sourceFileName": "../after-each/src/index.ts",
			"qualifiedName": "AfterEach.afterEach"
		},
		"175": {
			"sourceFileName": "../after-each/src/index.ts",
			"qualifiedName": "AfterEach.afterEach"
		},
		"176": {
			"sourceFileName": "../after-each/src/index.ts",
			"qualifiedName": "fn"
		},
		"177": {
			"sourceFileName": "../after-each/src/index.ts",
			"qualifiedName": "__type"
		},
		"178": {
			"sourceFileName": "../after-each/src/index.ts",
			"qualifiedName": "__type"
		},
		"179": {
			"sourceFileName": "../after-each/src/index.ts",
			"qualifiedName": "t"
		},
		"180": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.#private"
		},
		"181": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.ok"
		},
		"182": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.ok"
		},
		"183": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "obj"
		},
		"184": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "__1"
		},
		"185": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.notOk"
		},
		"186": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.notOk"
		},
		"187": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "obj"
		},
		"188": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "__1"
		},
		"189": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.equal"
		},
		"190": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.equal"
		},
		"191": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "T"
		},
		"192": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "found"
		},
		"193": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "wanted"
		},
		"194": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "__2"
		},
		"195": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.not"
		},
		"196": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.not"
		},
		"197": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "found"
		},
		"198": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "doNotWant"
		},
		"199": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "__2"
		},
		"200": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.type"
		},
		"201": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.type"
		},
		"202": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "obj"
		},
		"203": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "klass"
		},
		"204": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "__2"
		},
		"205": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.same"
		},
		"206": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.same"
		},
		"207": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "found"
		},
		"208": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "wanted"
		},
		"209": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "__2"
		},
		"210": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.notSame"
		},
		"211": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.notSame"
		},
		"212": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "found"
		},
		"213": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "doNotWant"
		},
		"214": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "__2"
		},
		"215": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.strictSame"
		},
		"216": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.strictSame"
		},
		"217": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "T"
		},
		"218": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "found"
		},
		"219": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "wanted"
		},
		"220": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "__2"
		},
		"221": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.strictNotSame"
		},
		"222": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.strictNotSame"
		},
		"223": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "found"
		},
		"224": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "doNotWant"
		},
		"225": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "__2"
		},
		"226": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.has"
		},
		"227": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.has"
		},
		"228": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "found"
		},
		"229": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "wanted"
		},
		"230": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "__2"
		},
		"231": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.notHas"
		},
		"232": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.notHas"
		},
		"233": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "found"
		},
		"234": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "doNotWant"
		},
		"235": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "__2"
		},
		"236": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.hasStrict"
		},
		"237": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.hasStrict"
		},
		"238": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "found"
		},
		"239": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "wanted"
		},
		"240": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "__2"
		},
		"241": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.notHasStrict"
		},
		"242": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.notHasStrict"
		},
		"243": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "found"
		},
		"244": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "doNotWant"
		},
		"245": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "__2"
		},
		"246": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.match"
		},
		"247": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.match"
		},
		"248": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "found"
		},
		"249": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "wanted"
		},
		"250": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "__2"
		},
		"251": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.notMatch"
		},
		"252": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.notMatch"
		},
		"253": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "found"
		},
		"254": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "doNotWant"
		},
		"255": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "__2"
		},
		"256": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.matchOnly"
		},
		"257": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.matchOnly"
		},
		"258": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "found"
		},
		"259": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "wanted"
		},
		"260": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "__2"
		},
		"261": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.notMatchOnly"
		},
		"262": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.notMatchOnly"
		},
		"263": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "found"
		},
		"264": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "doNotWant"
		},
		"265": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "__2"
		},
		"266": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.matchOnlyStrict"
		},
		"267": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.matchOnlyStrict"
		},
		"268": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "found"
		},
		"269": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "wanted"
		},
		"270": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "__2"
		},
		"271": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.notMatchOnlyStrict"
		},
		"272": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.notMatchOnlyStrict"
		},
		"273": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "found"
		},
		"274": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "doNotWant"
		},
		"275": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "__2"
		},
		"276": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.matchStrict"
		},
		"277": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.matchStrict"
		},
		"278": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "found"
		},
		"279": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "wanted"
		},
		"280": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "__2"
		},
		"281": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.notMatchStrict"
		},
		"282": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.notMatchStrict"
		},
		"283": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "found"
		},
		"284": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "doNotWant"
		},
		"285": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "__2"
		},
		"286": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.hasProp"
		},
		"287": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.hasProp"
		},
		"288": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "T"
		},
		"289": {
			"sourceFileName": "\u0000",
			"qualifiedName": "__type"
		},
		"290": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "found"
		},
		"291": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "wanted"
		},
		"292": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "__2"
		},
		"293": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.hasOwnProp"
		},
		"294": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.hasOwnProp"
		},
		"295": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "T"
		},
		"296": {
			"sourceFileName": "\u0000",
			"qualifiedName": "__type"
		},
		"297": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "found"
		},
		"298": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "wanted"
		},
		"299": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "__2"
		},
		"300": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.hasProps"
		},
		"301": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.hasProps"
		},
		"302": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "T"
		},
		"303": {
			"sourceFileName": "\u0000",
			"qualifiedName": "__type"
		},
		"304": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "found"
		},
		"305": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "wanted"
		},
		"306": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "__2"
		},
		"307": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.hasOwnProps"
		},
		"308": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.hasOwnProps"
		},
		"309": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "T"
		},
		"310": {
			"sourceFileName": "\u0000",
			"qualifiedName": "__type"
		},
		"311": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "found"
		},
		"312": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "wanted"
		},
		"313": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "__2"
		},
		"314": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.hasOwnPropsOnly"
		},
		"315": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.hasOwnPropsOnly"
		},
		"316": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "T"
		},
		"317": {
			"sourceFileName": "\u0000",
			"qualifiedName": "__type"
		},
		"318": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "found"
		},
		"319": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "wanted"
		},
		"320": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "__2"
		},
		"321": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.throws"
		},
		"322": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.throws"
		},
		"323": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "fn"
		},
		"324": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "__type"
		},
		"325": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "__type"
		},
		"326": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "__1"
		},
		"327": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.doesNotThrow"
		},
		"328": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.doesNotThrow"
		},
		"329": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "fn"
		},
		"330": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "__type"
		},
		"331": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "__type"
		},
		"332": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "__1"
		},
		"333": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.rejects"
		},
		"334": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.rejects"
		},
		"335": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "T"
		},
		"336": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "fnOrPromise"
		},
		"337": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "__type"
		},
		"338": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "__type"
		},
		"339": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "__1"
		},
		"340": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.resolves"
		},
		"341": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.resolves"
		},
		"342": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "T"
		},
		"343": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "fnOrPromise"
		},
		"344": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "__type"
		},
		"345": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "__type"
		},
		"346": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "__1"
		},
		"347": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.resolveMatch"
		},
		"348": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.resolveMatch"
		},
		"349": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "T"
		},
		"350": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "fnOrPromise"
		},
		"351": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "__type"
		},
		"352": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "__type"
		},
		"353": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "wanted"
		},
		"354": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "__2"
		},
		"355": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.emits"
		},
		"356": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.emits"
		},
		"357": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "emitter"
		},
		"358": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "event"
		},
		"359": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "__2"
		},
		"360": {
			"sourceFileName": "../before/src/index.ts",
			"qualifiedName": "Before.#private"
		},
		"361": {
			"sourceFileName": "../before/src/index.ts",
			"qualifiedName": "Before.before"
		},
		"362": {
			"sourceFileName": "../before/src/index.ts",
			"qualifiedName": "Before.before"
		},
		"363": {
			"sourceFileName": "../before/src/index.ts",
			"qualifiedName": "fn"
		},
		"364": {
			"sourceFileName": "../before/src/index.ts",
			"qualifiedName": "__type"
		},
		"365": {
			"sourceFileName": "../before/src/index.ts",
			"qualifiedName": "__type"
		},
		"366": {
			"sourceFileName": "../before-each/src/index.ts",
			"qualifiedName": "BeforeEach.#private"
		},
		"367": {
			"sourceFileName": "../before-each/src/index.ts",
			"qualifiedName": "BeforeEach.beforeEach"
		},
		"368": {
			"sourceFileName": "../before-each/src/index.ts",
			"qualifiedName": "BeforeEach.beforeEach"
		},
		"369": {
			"sourceFileName": "../before-each/src/index.ts",
			"qualifiedName": "fn"
		},
		"370": {
			"sourceFileName": "../before-each/src/index.ts",
			"qualifiedName": "__type"
		},
		"371": {
			"sourceFileName": "../before-each/src/index.ts",
			"qualifiedName": "__type"
		},
		"372": {
			"sourceFileName": "../before-each/src/index.ts",
			"qualifiedName": "t"
		},
		"373": {
			"sourceFileName": "../filter/src/index.ts",
			"qualifiedName": "Filter.#private"
		},
		"374": {
			"sourceFileName": "../filter/src/index.ts",
			"qualifiedName": "Filter.only"
		},
		"375": {
			"sourceFileName": "../filter/src/index.ts",
			"qualifiedName": "Filter.only"
		},
		"376": {
			"sourceFileName": "../filter/src/index.ts",
			"qualifiedName": "name"
		},
		"377": {
			"sourceFileName": "../filter/src/index.ts",
			"qualifiedName": "extra"
		},
		"378": {
			"sourceFileName": "../filter/src/index.ts",
			"qualifiedName": "cb"
		},
		"379": {
			"sourceFileName": "../filter/src/index.ts",
			"qualifiedName": "__type"
		},
		"380": {
			"sourceFileName": "../filter/src/index.ts",
			"qualifiedName": "__type"
		},
		"381": {
			"sourceFileName": "../filter/src/index.ts",
			"qualifiedName": "t"
		},
		"382": {
			"sourceFileName": "../filter/src/index.ts",
			"qualifiedName": "Filter.only"
		},
		"383": {
			"sourceFileName": "../filter/src/index.ts",
			"qualifiedName": "name"
		},
		"384": {
			"sourceFileName": "../filter/src/index.ts",
			"qualifiedName": "cb"
		},
		"385": {
			"sourceFileName": "../filter/src/index.ts",
			"qualifiedName": "__type"
		},
		"386": {
			"sourceFileName": "../filter/src/index.ts",
			"qualifiedName": "__type"
		},
		"387": {
			"sourceFileName": "../filter/src/index.ts",
			"qualifiedName": "t"
		},
		"388": {
			"sourceFileName": "../filter/src/index.ts",
			"qualifiedName": "Filter.only"
		},
		"389": {
			"sourceFileName": "../filter/src/index.ts",
			"qualifiedName": "extra"
		},
		"390": {
			"sourceFileName": "../filter/src/index.ts",
			"qualifiedName": "cb"
		},
		"391": {
			"sourceFileName": "../filter/src/index.ts",
			"qualifiedName": "__type"
		},
		"392": {
			"sourceFileName": "../filter/src/index.ts",
			"qualifiedName": "__type"
		},
		"393": {
			"sourceFileName": "../filter/src/index.ts",
			"qualifiedName": "t"
		},
		"394": {
			"sourceFileName": "../filter/src/index.ts",
			"qualifiedName": "Filter.only"
		},
		"395": {
			"sourceFileName": "../filter/src/index.ts",
			"qualifiedName": "cb"
		},
		"396": {
			"sourceFileName": "../filter/src/index.ts",
			"qualifiedName": "__type"
		},
		"397": {
			"sourceFileName": "../filter/src/index.ts",
			"qualifiedName": "__type"
		},
		"398": {
			"sourceFileName": "../filter/src/index.ts",
			"qualifiedName": "t"
		},
		"399": {
			"sourceFileName": "../fixture/src/index.ts",
			"qualifiedName": "TestFixtures.#private"
		},
		"400": {
			"sourceFileName": "../fixture/src/index.ts",
			"qualifiedName": "TestFixtures.fixture"
		},
		"401": {
			"sourceFileName": "../fixture/src/index.ts",
			"qualifiedName": "TestFixtures.fixture"
		},
		"402": {
			"sourceFileName": "../fixture/src/index.ts",
			"qualifiedName": "T"
		},
		"403": {
			"sourceFileName": "../fixture/src/index.ts",
			"qualifiedName": "type"
		},
		"404": {
			"sourceFileName": "../fixture/src/index.ts",
			"qualifiedName": "content"
		},
		"405": {
			"sourceFileName": "../fixture/src/index.ts",
			"qualifiedName": "TestFixtures.testdir"
		},
		"406": {
			"sourceFileName": "../fixture/src/index.ts",
			"qualifiedName": "TestFixtures.testdir"
		},
		"407": {
			"sourceFileName": "../fixture/src/index.ts",
			"qualifiedName": "content"
		},
		"408": {
			"sourceFileName": "../fixture/src/index.ts",
			"qualifiedName": "TestFixtures.testdirName"
		},
		"409": {
			"sourceFileName": "../fixture/src/index.ts",
			"qualifiedName": "TestFixtures.testdirName"
		},
		"410": {
			"sourceFileName": "../fixture/src/index.ts",
			"qualifiedName": "TestFixtures.testdirName"
		},
		"411": {
			"sourceFileName": "../fixture/src/index.ts",
			"qualifiedName": "td"
		},
		"412": {
			"sourceFileName": "../intercept/src/index.ts",
			"qualifiedName": "Interceptor.#private"
		},
		"413": {
			"sourceFileName": "../intercept/src/index.ts",
			"qualifiedName": "Interceptor.intercept"
		},
		"414": {
			"sourceFileName": "../intercept/src/index.ts",
			"qualifiedName": "Interceptor.intercept"
		},
		"415": {
			"sourceFileName": "../intercept/src/index.ts",
			"qualifiedName": "T"
		},
		"416": {
			"sourceFileName": "../intercept/src/index.ts",
			"qualifiedName": "obj"
		},
		"417": {
			"sourceFileName": "../intercept/src/index.ts",
			"qualifiedName": "prop"
		},
		"418": {
			"sourceFileName": "../intercept/src/index.ts",
			"qualifiedName": "desc"
		},
		"419": {
			"sourceFileName": "../intercept/src/index.ts",
			"qualifiedName": "strictMode"
		},
		"420": {
			"sourceFileName": "../intercept/src/index.ts",
			"qualifiedName": "Interceptor.capture"
		},
		"421": {
			"sourceFileName": "../intercept/src/index.ts",
			"qualifiedName": "Interceptor.capture"
		},
		"422": {
			"sourceFileName": "../intercept/src/index.ts",
			"qualifiedName": "T"
		},
		"423": {
			"sourceFileName": "\u0000",
			"qualifiedName": "__type"
		},
		"424": {
			"sourceFileName": "../intercept/src/index.ts",
			"qualifiedName": "M"
		},
		"425": {
			"sourceFileName": "../intercept/src/index.ts",
			"qualifiedName": "obj"
		},
		"426": {
			"sourceFileName": "../intercept/src/index.ts",
			"qualifiedName": "method"
		},
		"427": {
			"sourceFileName": "../intercept/src/index.ts",
			"qualifiedName": "impl"
		},
		"428": {
			"sourceFileName": "../intercept/src/index.ts",
			"qualifiedName": "__type"
		},
		"429": {
			"sourceFileName": "../intercept/src/index.ts",
			"qualifiedName": "__type"
		},
		"430": {
			"sourceFileName": "../intercept/src/index.ts",
			"qualifiedName": "a"
		},
		"431": {
			"sourceFileName": "../intercept/src/index.ts",
			"qualifiedName": "Interceptor.captureFn"
		},
		"432": {
			"sourceFileName": "../intercept/src/index.ts",
			"qualifiedName": "Interceptor.captureFn"
		},
		"433": {
			"sourceFileName": "../intercept/src/index.ts",
			"qualifiedName": "F"
		},
		"434": {
			"sourceFileName": "../intercept/src/index.ts",
			"qualifiedName": "__type"
		},
		"435": {
			"sourceFileName": "../intercept/src/index.ts",
			"qualifiedName": "__type"
		},
		"436": {
			"sourceFileName": "../intercept/src/index.ts",
			"qualifiedName": "this"
		},
		"437": {
			"sourceFileName": "../intercept/src/index.ts",
			"qualifiedName": "a"
		},
		"438": {
			"sourceFileName": "../intercept/src/index.ts",
			"qualifiedName": "original"
		},
		"439": {
			"sourceFileName": "../intercept/src/index.ts",
			"qualifiedName": "__type"
		},
		"440": {
			"sourceFileName": "../intercept/src/index.ts",
			"qualifiedName": "__type"
		},
		"441": {
			"sourceFileName": "../intercept/src/index.ts",
			"qualifiedName": "a"
		},
		"442": {
			"sourceFileName": "../intercept/src/index.ts",
			"qualifiedName": "__type"
		},
		"443": {
			"sourceFileName": "../intercept/src/index.ts",
			"qualifiedName": "__type.calls"
		},
		"444": {
			"sourceFileName": "../intercept/src/index.ts",
			"qualifiedName": "__type.args"
		},
		"445": {
			"sourceFileName": "../intercept/src/index.ts",
			"qualifiedName": "__type"
		},
		"446": {
			"sourceFileName": "../intercept/src/index.ts",
			"qualifiedName": "__type"
		},
		"447": {
			"sourceFileName": "../mock/src/index.ts",
			"qualifiedName": "TapMock.#private"
		},
		"448": {
			"sourceFileName": "../mock/src/index.ts",
			"qualifiedName": "TapMock.createMock"
		},
		"449": {
			"sourceFileName": "../mock/src/index.ts",
			"qualifiedName": "TapMock.createMock"
		},
		"450": {
			"sourceFileName": "../mock/src/index.ts",
			"qualifiedName": "B"
		},
		"451": {
			"sourceFileName": "../mock/src/index.ts",
			"qualifiedName": "__type"
		},
		"452": {
			"sourceFileName": "../mock/src/index.ts",
			"qualifiedName": "__type.__index"
		},
		"454": {
			"sourceFileName": "../mock/src/index.ts",
			"qualifiedName": "O"
		},
		"455": {
			"sourceFileName": "../mock/src/index.ts",
			"qualifiedName": "__type"
		},
		"456": {
			"sourceFileName": "../mock/src/index.ts",
			"qualifiedName": "__type.__index"
		},
		"458": {
			"sourceFileName": "../mock/src/index.ts",
			"qualifiedName": "bases"
		},
		"459": {
			"sourceFileName": "../mock/src/index.ts",
			"qualifiedName": "overrides"
		},
		"460": {
			"sourceFileName": "../mock/src/index.ts",
			"qualifiedName": "TapMock.mock"
		},
		"461": {
			"sourceFileName": "../mock/src/index.ts",
			"qualifiedName": "TapMock.mock"
		},
		"462": {
			"sourceFileName": "../mock/src/index.ts",
			"qualifiedName": "module"
		},
		"463": {
			"sourceFileName": "../mock/src/index.ts",
			"qualifiedName": "mocks"
		},
		"464": {
			"sourceFileName": "../mock/src/index.ts",
			"qualifiedName": "__type"
		},
		"465": {
			"sourceFileName": "../mock/src/index.ts",
			"qualifiedName": "__type.__index"
		},
		"467": {
			"sourceFileName": "../mock/src/index.ts",
			"qualifiedName": "TapMock.mockImport"
		},
		"468": {
			"sourceFileName": "../mock/src/index.ts",
			"qualifiedName": "TapMock.mockImport"
		},
		"469": {
			"sourceFileName": "../mock/src/index.ts",
			"qualifiedName": "module"
		},
		"470": {
			"sourceFileName": "../mock/src/index.ts",
			"qualifiedName": "mocks"
		},
		"471": {
			"sourceFileName": "../mock/src/index.ts",
			"qualifiedName": "__type"
		},
		"472": {
			"sourceFileName": "../mock/src/index.ts",
			"qualifiedName": "__type.__index"
		},
		"474": {
			"sourceFileName": "../mock/src/index.ts",
			"qualifiedName": "TapMock.mockRequire"
		},
		"475": {
			"sourceFileName": "../mock/src/index.ts",
			"qualifiedName": "TapMock.mockRequire"
		},
		"476": {
			"sourceFileName": "../mock/src/index.ts",
			"qualifiedName": "module"
		},
		"477": {
			"sourceFileName": "../mock/src/index.ts",
			"qualifiedName": "mocks"
		},
		"478": {
			"sourceFileName": "../mock/src/index.ts",
			"qualifiedName": "__type"
		},
		"479": {
			"sourceFileName": "../mock/src/index.ts",
			"qualifiedName": "__type.__index"
		},
		"481": {
			"sourceFileName": "../mock/src/index.ts",
			"qualifiedName": "TapMock.unmock"
		},
		"482": {
			"sourceFileName": "../mock/src/index.ts",
			"qualifiedName": "TapMock.unmock"
		},
		"483": {
			"sourceFileName": "../snapshot/src/index.ts",
			"qualifiedName": "SnapshotPlugin.#private"
		},
		"484": {
			"sourceFileName": "../snapshot/src/index.ts",
			"qualifiedName": "SnapshotPlugin.writeSnapshot"
		},
		"485": {
			"sourceFileName": "../snapshot/src/index.ts",
			"qualifiedName": "SnapshotPlugin.compareOptions"
		},
		"486": {
			"sourceFileName": "../snapshot/src/index.ts",
			"qualifiedName": "SnapshotPlugin.compareOptions"
		},
		"487": {
			"sourceFileName": "../snapshot/src/index.ts",
			"qualifiedName": "SnapshotPlugin.compareOptions"
		},
		"488": {
			"sourceFileName": "../snapshot/src/index.ts",
			"qualifiedName": "cmt"
		},
		"489": {
			"sourceFileName": "../snapshot/src/index.ts",
			"qualifiedName": "SnapshotPlugin.cleanSnapshot"
		},
		"490": {
			"sourceFileName": "../snapshot/src/index.ts",
			"qualifiedName": "SnapshotPlugin.cleanSnapshot"
		},
		"491": {
			"sourceFileName": "../snapshot/src/index.ts",
			"qualifiedName": "__type"
		},
		"492": {
			"sourceFileName": "../snapshot/src/index.ts",
			"qualifiedName": "__type"
		},
		"493": {
			"sourceFileName": "../snapshot/src/index.ts",
			"qualifiedName": "snapshotData"
		},
		"494": {
			"sourceFileName": "../snapshot/src/index.ts",
			"qualifiedName": "SnapshotPlugin.cleanSnapshot"
		},
		"495": {
			"sourceFileName": "../snapshot/src/index.ts",
			"qualifiedName": "clean"
		},
		"496": {
			"sourceFileName": "../snapshot/src/index.ts",
			"qualifiedName": "__type"
		},
		"497": {
			"sourceFileName": "../snapshot/src/index.ts",
			"qualifiedName": "__type"
		},
		"498": {
			"sourceFileName": "../snapshot/src/index.ts",
			"qualifiedName": "snapshotData"
		},
		"499": {
			"sourceFileName": "../snapshot/src/index.ts",
			"qualifiedName": "SnapshotPlugin.formatSnapshot"
		},
		"500": {
			"sourceFileName": "../snapshot/src/index.ts",
			"qualifiedName": "SnapshotPlugin.formatSnapshot"
		},
		"501": {
			"sourceFileName": "../snapshot/src/index.ts",
			"qualifiedName": "__type"
		},
		"502": {
			"sourceFileName": "../snapshot/src/index.ts",
			"qualifiedName": "__type"
		},
		"503": {
			"sourceFileName": "../snapshot/src/index.ts",
			"qualifiedName": "obj"
		},
		"504": {
			"sourceFileName": "../snapshot/src/index.ts",
			"qualifiedName": "SnapshotPlugin.formatSnapshot"
		},
		"505": {
			"sourceFileName": "../snapshot/src/index.ts",
			"qualifiedName": "format"
		},
		"506": {
			"sourceFileName": "../snapshot/src/index.ts",
			"qualifiedName": "__type"
		},
		"507": {
			"sourceFileName": "../snapshot/src/index.ts",
			"qualifiedName": "__type"
		},
		"508": {
			"sourceFileName": "../snapshot/src/index.ts",
			"qualifiedName": "obj"
		},
		"509": {
			"sourceFileName": "../snapshot/src/index.ts",
			"qualifiedName": "SnapshotPlugin.snapshotFile"
		},
		"510": {
			"sourceFileName": "../snapshot/src/index.ts",
			"qualifiedName": "SnapshotPlugin.snapshotFile"
		},
		"511": {
			"sourceFileName": "../snapshot/src/index.ts",
			"qualifiedName": "SnapshotPlugin.snapshotFile"
		},
		"512": {
			"sourceFileName": "../snapshot/src/index.ts",
			"qualifiedName": "f"
		},
		"513": {
			"sourceFileName": "../snapshot/src/index.ts",
			"qualifiedName": "SnapshotPlugin.matchSnapshot"
		},
		"514": {
			"sourceFileName": "../snapshot/src/index.ts",
			"qualifiedName": "SnapshotPlugin.matchSnapshot"
		},
		"515": {
			"sourceFileName": "../snapshot/src/index.ts",
			"qualifiedName": "found"
		},
		"516": {
			"sourceFileName": "../snapshot/src/index.ts",
			"qualifiedName": "__1"
		},
		"517": {
			"sourceFileName": "../snapshot/src/index.ts",
			"qualifiedName": "SnapshotPlugin.resolveMatchSnapshot"
		},
		"518": {
			"sourceFileName": "../snapshot/src/index.ts",
			"qualifiedName": "SnapshotPlugin.resolveMatchSnapshot"
		},
		"519": {
			"sourceFileName": "../snapshot/src/index.ts",
			"qualifiedName": "T"
		},
		"520": {
			"sourceFileName": "../snapshot/src/index.ts",
			"qualifiedName": "fnOrPromise"
		},
		"521": {
			"sourceFileName": "../snapshot/src/index.ts",
			"qualifiedName": "__type"
		},
		"522": {
			"sourceFileName": "../snapshot/src/index.ts",
			"qualifiedName": "__type"
		},
		"523": {
			"sourceFileName": "../snapshot/src/index.ts",
			"qualifiedName": "__1"
		},
		"524": {
			"sourceFileName": "../spawn/src/index.ts",
			"qualifiedName": "SpawnPlugin.#private"
		},
		"525": {
			"sourceFileName": "../spawn/src/index.ts",
			"qualifiedName": "SpawnPlugin.spawn"
		},
		"526": {
			"sourceFileName": "../spawn/src/index.ts",
			"qualifiedName": "SpawnPlugin.spawn"
		},
		"527": {
			"sourceFileName": "../spawn/src/index.ts",
			"qualifiedName": "cmd"
		},
		"528": {
			"sourceFileName": "../spawn/src/index.ts",
			"qualifiedName": "SpawnPlugin.spawn"
		},
		"529": {
			"sourceFileName": "../spawn/src/index.ts",
			"qualifiedName": "cmd"
		},
		"530": {
			"sourceFileName": "../spawn/src/index.ts",
			"qualifiedName": "options"
		},
		"531": {
			"sourceFileName": "../spawn/src/index.ts",
			"qualifiedName": "name"
		},
		"532": {
			"sourceFileName": "../spawn/src/index.ts",
			"qualifiedName": "SpawnPlugin.spawn"
		},
		"533": {
			"sourceFileName": "../spawn/src/index.ts",
			"qualifiedName": "cmd"
		},
		"534": {
			"sourceFileName": "../spawn/src/index.ts",
			"qualifiedName": "args"
		},
		"535": {
			"sourceFileName": "../spawn/src/index.ts",
			"qualifiedName": "name"
		},
		"536": {
			"sourceFileName": "../spawn/src/index.ts",
			"qualifiedName": "SpawnPlugin.spawn"
		},
		"537": {
			"sourceFileName": "../spawn/src/index.ts",
			"qualifiedName": "cmd"
		},
		"538": {
			"sourceFileName": "../spawn/src/index.ts",
			"qualifiedName": "args"
		},
		"539": {
			"sourceFileName": "../spawn/src/index.ts",
			"qualifiedName": "options"
		},
		"540": {
			"sourceFileName": "../spawn/src/index.ts",
			"qualifiedName": "name"
		},
		"541": {
			"sourceFileName": "../stdin/src/index.ts",
			"qualifiedName": "StdinPlugin.#private"
		},
		"542": {
			"sourceFileName": "../stdin/src/index.ts",
			"qualifiedName": "StdinPlugin.stdin"
		},
		"543": {
			"sourceFileName": "../stdin/src/index.ts",
			"qualifiedName": "StdinPlugin.stdin"
		},
		"544": {
			"sourceFileName": "../stdin/src/index.ts",
			"qualifiedName": "StdinPlugin.stdin"
		},
		"545": {
			"sourceFileName": "../stdin/src/index.ts",
			"qualifiedName": "name"
		},
		"546": {
			"sourceFileName": "../stdin/src/index.ts",
			"qualifiedName": "StdinPlugin.stdin"
		},
		"547": {
			"sourceFileName": "../stdin/src/index.ts",
			"qualifiedName": "name"
		},
		"548": {
			"sourceFileName": "../stdin/src/index.ts",
			"qualifiedName": "extra"
		},
		"549": {
			"sourceFileName": "../stdin/src/index.ts",
			"qualifiedName": "StdinPlugin.stdin"
		},
		"550": {
			"sourceFileName": "../stdin/src/index.ts",
			"qualifiedName": "extra"
		},
		"551": {
			"sourceFileName": "../worker/src/index.ts",
			"qualifiedName": "WorkerPlugin.#private"
		},
		"552": {
			"sourceFileName": "../worker/src/index.ts",
			"qualifiedName": "WorkerPlugin.isMainThread"
		},
		"553": {
			"sourceFileName": "../worker/src/index.ts",
			"qualifiedName": "WorkerPlugin.workerData"
		},
		"554": {
			"sourceFileName": "../worker/src/index.ts",
			"qualifiedName": "WorkerPlugin.workerData"
		},
		"555": {
			"sourceFileName": "../worker/src/index.ts",
			"qualifiedName": "WorkerPlugin.worker"
		},
		"556": {
			"sourceFileName": "../worker/src/index.ts",
			"qualifiedName": "WorkerPlugin.worker"
		},
		"557": {
			"sourceFileName": "../worker/src/index.ts",
			"qualifiedName": "filename"
		},
		"558": {
			"sourceFileName": "../worker/src/index.ts",
			"qualifiedName": "WorkerPlugin.worker"
		},
		"559": {
			"sourceFileName": "../worker/src/index.ts",
			"qualifiedName": "filename"
		},
		"560": {
			"sourceFileName": "../worker/src/index.ts",
			"qualifiedName": "name"
		},
		"561": {
			"sourceFileName": "../worker/src/index.ts",
			"qualifiedName": "WorkerPlugin.worker"
		},
		"562": {
			"sourceFileName": "../worker/src/index.ts",
			"qualifiedName": "filename"
		},
		"563": {
			"sourceFileName": "../worker/src/index.ts",
			"qualifiedName": "options"
		},
		"564": {
			"sourceFileName": "../worker/src/index.ts",
			"qualifiedName": "name"
		},
		"565": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "Test"
		},
		"566": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.isStream"
		},
		"567": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.isStream"
		},
		"568": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "__type"
		},
		"569": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "__type"
		},
		"570": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "s"
		},
		"571": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "__type"
		},
		"572": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "__type.fd"
		},
		"573": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "__type"
		},
		"574": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "__type.pause"
		},
		"575": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "__type.pause"
		},
		"576": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "__type.resume"
		},
		"577": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "__type.resume"
		},
		"578": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "__type.pipe"
		},
		"579": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "__type.pipe"
		},
		"580": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "destArgs"
		},
		"581": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "__type"
		},
		"582": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "__type.fd"
		},
		"583": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "__type"
		},
		"584": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "__type.end"
		},
		"585": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "__type.end"
		},
		"586": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "__type.write"
		},
		"587": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "__type.write"
		},
		"588": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "chunk"
		},
		"589": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "args"
		},
		"590": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.once"
		},
		"591": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.once"
		},
		"592": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "emitter"
		},
		"593": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"594": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "options"
		},
		"595": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.once"
		},
		"596": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "emitter"
		},
		"597": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"598": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "options"
		},
		"599": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.on"
		},
		"600": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.on"
		},
		"601": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "emitter"
		},
		"602": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"603": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "options"
		},
		"604": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.listenerCount"
		},
		"605": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.listenerCount"
		},
		"606": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "emitter"
		},
		"607": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"608": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.getEventListeners"
		},
		"609": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.getEventListeners"
		},
		"610": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "emitter"
		},
		"611": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "name"
		},
		"612": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.setMaxListeners"
		},
		"613": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.setMaxListeners"
		},
		"614": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "n"
		},
		"615": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventTargets"
		},
		"616": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.errorMonitor"
		},
		"617": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.captureRejectionSymbol"
		},
		"618": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.captureRejections"
		},
		"619": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "EventEmitter.defaultMaxListeners"
		},
		"620": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "Test.__constructor"
		},
		"621": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "Test"
		},
		"622": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "Test.Ext"
		},
		"623": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "Test.Opts"
		},
		"624": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "opts"
		},
		"625": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__INTERNAL"
		},
		"626": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "Test.end"
		},
		"627": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "Test.end"
		},
		"628": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "Test.plan"
		},
		"629": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "Test.plan"
		},
		"630": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "n"
		},
		"631": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "comment"
		},
		"632": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "Test.#private"
		},
		"633": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "Test.applyPlugin"
		},
		"634": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "Test.applyPlugin"
		},
		"635": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "B"
		},
		"636": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "O"
		},
		"637": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "plugin"
		},
		"638": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "Test.pluginLoaded"
		},
		"639": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "Test.pluginLoaded"
		},
		"640": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "T"
		},
		"641": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "plugin"
		},
		"642": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type"
		},
		"643": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type"
		},
		"644": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "t"
		},
		"645": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "opts"
		},
		"646": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "Test.plugins"
		},
		"647": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "Test.plugins"
		},
		"648": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "Test.test"
		},
		"649": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "Test.test"
		},
		"650": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "name"
		},
		"651": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "extra"
		},
		"652": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "cb"
		},
		"653": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type"
		},
		"654": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type"
		},
		"655": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "t"
		},
		"656": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "Test.test"
		},
		"657": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "name"
		},
		"658": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "cb"
		},
		"659": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type"
		},
		"660": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type"
		},
		"661": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "t"
		},
		"662": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "Test.test"
		},
		"663": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "extra"
		},
		"664": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "cb"
		},
		"665": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type"
		},
		"666": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type"
		},
		"667": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "t"
		},
		"668": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "Test.test"
		},
		"669": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "cb"
		},
		"670": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type"
		},
		"671": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type"
		},
		"672": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "t"
		},
		"673": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "Test.todo"
		},
		"674": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "Test.todo"
		},
		"675": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "name"
		},
		"676": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "extra"
		},
		"677": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "cb"
		},
		"678": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type"
		},
		"679": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type"
		},
		"680": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "t"
		},
		"681": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "Test.todo"
		},
		"682": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "name"
		},
		"683": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "cb"
		},
		"684": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type"
		},
		"685": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type"
		},
		"686": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "t"
		},
		"687": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "Test.todo"
		},
		"688": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "extra"
		},
		"689": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "cb"
		},
		"690": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type"
		},
		"691": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type"
		},
		"692": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "t"
		},
		"693": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "Test.todo"
		},
		"694": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "cb"
		},
		"695": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type"
		},
		"696": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type"
		},
		"697": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "t"
		},
		"698": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "Test.skip"
		},
		"699": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "Test.skip"
		},
		"700": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "name"
		},
		"701": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "extra"
		},
		"702": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "cb"
		},
		"703": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type"
		},
		"704": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type"
		},
		"705": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "t"
		},
		"706": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "Test.skip"
		},
		"707": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "name"
		},
		"708": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "cb"
		},
		"709": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type"
		},
		"710": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type"
		},
		"711": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "t"
		},
		"712": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "Test.skip"
		},
		"713": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "extra"
		},
		"714": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "cb"
		},
		"715": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type"
		},
		"716": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type"
		},
		"717": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "t"
		},
		"718": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "Test.skip"
		},
		"719": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "cb"
		},
		"720": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type"
		},
		"721": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "__type"
		},
		"722": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "t"
		},
		"723": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "Test.[toStringTag]"
		},
		"724": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "Test.[toStringTag]"
		},
		"725": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "TestBase.#private"
		},
		"726": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "TestBase.parent"
		},
		"727": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "TestBase.options"
		},
		"728": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "TestBase.t"
		},
		"729": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "TestBase.donePromise"
		},
		"730": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "__type"
		},
		"731": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "__type.tapAbortPromise"
		},
		"732": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "__type"
		},
		"733": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "__type"
		},
		"734": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "TestBase.jobs"
		},
		"735": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "TestBase.subtests"
		},
		"736": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "TestBase.pool"
		},
		"737": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "TestBase.queue"
		},
		"738": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "TestBase.cb"
		},
		"739": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "__type"
		},
		"740": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "__type"
		},
		"741": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "args"
		},
		"742": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "TestBase.count"
		},
		"743": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "TestBase.ended"
		},
		"744": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "TestBase.diagnostic"
		},
		"745": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "TestBase.activeSubtests"
		},
		"746": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "TestBase.assertTotals"
		},
		"747": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "TestBase.printedResult"
		},
		"748": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "TestBase.printedResult"
		},
		"749": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "TestBase.occupied"
		},
		"750": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "TestBase.occupied"
		},
		"751": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "TestBase.bailout"
		},
		"752": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "TestBase.bailout"
		},
		"753": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "message"
		},
		"754": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "TestBase.comment"
		},
		"755": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "TestBase.comment"
		},
		"756": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "args"
		},
		"757": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "TestBase.timeout"
		},
		"758": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "TestBase.timeout"
		},
		"759": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "options"
		},
		"760": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "__type"
		},
		"761": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "__type.expired"
		},
		"762": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "TestBase.pragma"
		},
		"763": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "TestBase.pragma"
		},
		"764": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "set"
		},
		"765": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "__type"
		},
		"766": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "__type.__index"
		},
		"768": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "TestBase.pass"
		},
		"769": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "TestBase.pass"
		},
		"770": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "__0"
		},
		"771": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "TestBase.fail"
		},
		"772": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "TestBase.fail"
		},
		"773": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "__0"
		},
		"774": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "TestBase.currentAssert"
		},
		"775": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "TestBase.currentAssert"
		},
		"776": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "__type"
		},
		"777": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "__type"
		},
		"778": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "a"
		},
		"779": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "TestBase.currentAssert"
		},
		"780": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "fn"
		},
		"781": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "__type"
		},
		"782": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "__type"
		},
		"783": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "a"
		},
		"784": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "TestBase.waitOn"
		},
		"785": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "TestBase.waitOn"
		},
		"786": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "promise"
		},
		"787": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "cb"
		},
		"788": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "__type"
		},
		"789": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "__type"
		},
		"790": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "w"
		},
		"791": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "expectReject"
		},
		"792": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "TestBase.fullname"
		},
		"793": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "TestBase.fullname"
		},
		"794": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "TestBase.idle"
		},
		"795": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "TestBase.idle"
		},
		"796": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "TestBase.main"
		},
		"797": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "TestBase.main"
		},
		"798": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "cb"
		},
		"799": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "__type"
		},
		"800": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "__type"
		},
		"801": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "TestBase.stdinOnly"
		},
		"802": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "TestBase.stdinOnly"
		},
		"803": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "T"
		},
		"804": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "extra"
		},
		"805": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "__type"
		},
		"806": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "__type.tapStream"
		},
		"807": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "TestBase.sub"
		},
		"808": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "TestBase.sub"
		},
		"809": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "T"
		},
		"810": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "O"
		},
		"811": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "Class"
		},
		"812": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "__type"
		},
		"813": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "__type"
		},
		"814": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "options"
		},
		"815": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "extra"
		},
		"816": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "caller"
		},
		"817": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "__type"
		},
		"818": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "__type"
		},
		"819": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "a"
		},
		"820": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "TestBase.threw"
		},
		"821": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "TestBase.threw"
		},
		"822": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "er"
		},
		"823": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "extra"
		},
		"824": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "proxy"
		},
		"825": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "TestBase.onbail"
		},
		"826": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "TestBase.onbail"
		},
		"827": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "message"
		},
		"828": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "TestBase.endAll"
		},
		"829": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "TestBase.endAll"
		},
		"830": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "sub"
		},
		"831": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "TestBase.shouldSkipChild"
		},
		"832": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "TestBase.shouldSkipChild"
		},
		"833": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "O"
		},
		"834": {
			"sourceFileName": "../core/src/test-base.ts",
			"qualifiedName": "extra"
		},
		"835": {
			"sourceFileName": "../core/src/base.ts",
			"qualifiedName": "Base.#private"
		},
		"836": {
			"sourceFileName": "../core/src/base.ts",
			"qualifiedName": "Base.readyToProcess"
		},
		"837": {
			"sourceFileName": "../core/src/base.ts",
			"qualifiedName": "Base.indent"
		},
		"838": {
			"sourceFileName": "../core/src/base.ts",
			"qualifiedName": "Base.hook"
		},
		"839": {
			"sourceFileName": "../core/src/base.ts",
			"qualifiedName": "Base.hookDomain"
		},
		"840": {
			"sourceFileName": "../core/src/base.ts",
			"qualifiedName": "Base.timer"
		},
		"841": {
			"sourceFileName": "../core/src/base.ts",
			"qualifiedName": "Base.timedOut"
		},
		"842": {
			"sourceFileName": "../core/src/base.ts",
			"qualifiedName": "Base.parser"
		},
		"843": {
			"sourceFileName": "../core/src/base.ts",
			"qualifiedName": "Base.debug"
		},
		"844": {
			"sourceFileName": "../core/src/base.ts",
			"qualifiedName": "__type"
		},
		"845": {
			"sourceFileName": "../core/src/base.ts",
			"qualifiedName": "__type"
		},
		"846": {
			"sourceFileName": "../core/src/base.ts",
			"qualifiedName": "args"
		},
		"847": {
			"sourceFileName": "../core/src/base.ts",
			"qualifiedName": "Base.counts"
		},
		"848": {
			"sourceFileName": "../core/src/base.ts",
			"qualifiedName": "Base.lists"
		},
		"849": {
			"sourceFileName": "../core/src/base.ts",
			"qualifiedName": "Base.name"
		},
		"850": {
			"sourceFileName": "../core/src/base.ts",
			"qualifiedName": "Base.results"
		},
		"851": {
			"sourceFileName": "../core/src/base.ts",
			"qualifiedName": "Base.bail"
		},
		"852": {
			"sourceFileName": "../core/src/base.ts",
			"qualifiedName": "Base.strict"
		},
		"853": {
			"sourceFileName": "../core/src/base.ts",
			"qualifiedName": "Base.omitVersion"
		},
		"854": {
			"sourceFileName": "../core/src/base.ts",
			"qualifiedName": "Base.preserveWhitespace"
		},
		"855": {
			"sourceFileName": "../core/src/base.ts",
			"qualifiedName": "Base.errors"
		},
		"856": {
			"sourceFileName": "../core/src/base.ts",
			"qualifiedName": "Base.childId"
		},
		"857": {
			"sourceFileName": "../core/src/base.ts",
			"qualifiedName": "Base.context"
		},
		"858": {
			"sourceFileName": "../core/src/base.ts",
			"qualifiedName": "Base.output"
		},
		"859": {
			"sourceFileName": "../core/src/base.ts",
			"qualifiedName": "Base.buffered"
		},
		"860": {
			"sourceFileName": "../core/src/base.ts",
			"qualifiedName": "Base.bailedOut"
		},
		"861": {
			"sourceFileName": "../core/src/base.ts",
			"qualifiedName": "Base.start"
		},
		"862": {
			"sourceFileName": "../core/src/base.ts",
			"qualifiedName": "Base.time"
		},
		"863": {
			"sourceFileName": "../core/src/base.ts",
			"qualifiedName": "Base.hrtime"
		},
		"864": {
			"sourceFileName": "../core/src/base.ts",
			"qualifiedName": "Base.silent"
		},
		"865": {
			"sourceFileName": "../core/src/base.ts",
			"qualifiedName": "Base.deferred"
		},
		"866": {
			"sourceFileName": "../core/src/base.ts",
			"qualifiedName": "Base.setTimeout"
		},
		"867": {
			"sourceFileName": "../core/src/base.ts",
			"qualifiedName": "Base.setTimeout"
		},
		"868": {
			"sourceFileName": "../core/src/base.ts",
			"qualifiedName": "n"
		},
		"869": {
			"sourceFileName": "../core/src/base.ts",
			"qualifiedName": "Base.runMain"
		},
		"870": {
			"sourceFileName": "../core/src/base.ts",
			"qualifiedName": "Base.runMain"
		},
		"871": {
			"sourceFileName": "../core/src/base.ts",
			"qualifiedName": "cb"
		},
		"872": {
			"sourceFileName": "../core/src/base.ts",
			"qualifiedName": "__type"
		},
		"873": {
			"sourceFileName": "../core/src/base.ts",
			"qualifiedName": "__type"
		},
		"874": {
			"sourceFileName": "../core/src/base.ts",
			"qualifiedName": "Base.started"
		},
		"875": {
			"sourceFileName": "../core/src/base.ts",
			"qualifiedName": "Base.started"
		},
		"876": {
			"sourceFileName": "../core/src/base.ts",
			"qualifiedName": "Base.printedOutput"
		},
		"877": {
			"sourceFileName": "../core/src/base.ts",
			"qualifiedName": "Base.printedOutput"
		},
		"878": {
			"sourceFileName": "../core/src/base.ts",
			"qualifiedName": "Base.write"
		},
		"879": {
			"sourceFileName": "../core/src/base.ts",
			"qualifiedName": "Base.write"
		},
		"880": {
			"sourceFileName": "../core/src/base.ts",
			"qualifiedName": "c"
		},
		"881": {
			"sourceFileName": "../core/src/base.ts",
			"qualifiedName": "Base.oncomplete"
		},
		"882": {
			"sourceFileName": "../core/src/base.ts",
			"qualifiedName": "Base.oncomplete"
		},
		"883": {
			"sourceFileName": "../core/src/base.ts",
			"qualifiedName": "results"
		},
		"884": {
			"sourceFileName": "../core/src/base.ts",
			"qualifiedName": "Base.onbeforeend"
		},
		"885": {
			"sourceFileName": "../core/src/base.ts",
			"qualifiedName": "Base.onbeforeend"
		},
		"886": {
			"sourceFileName": "../core/src/base.ts",
			"qualifiedName": "Base.onEOF"
		},
		"887": {
			"sourceFileName": "../core/src/base.ts",
			"qualifiedName": "Base.onEOF"
		},
		"888": {
			"sourceFileName": "../core/src/base.ts",
			"qualifiedName": "Base.ondone"
		},
		"889": {
			"sourceFileName": "../core/src/base.ts",
			"qualifiedName": "Base.ondone"
		},
		"890": {
			"sourceFileName": "../core/src/base.ts",
			"qualifiedName": "Base.emit"
		},
		"891": {
			"sourceFileName": "../core/src/base.ts",
			"qualifiedName": "Base.emit"
		},
		"892": {
			"sourceFileName": "../core/src/base.ts",
			"qualifiedName": "Event"
		},
		"893": {
			"sourceFileName": "../core/src/base.ts",
			"qualifiedName": "ev"
		},
		"894": {
			"sourceFileName": "../core/src/base.ts",
			"qualifiedName": "data"
		},
		"895": {
			"sourceFileName": "../core/src/base.ts",
			"qualifiedName": "Base.passing"
		},
		"896": {
			"sourceFileName": "../core/src/base.ts",
			"qualifiedName": "Base.passing"
		},
		"897": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.writable"
		},
		"898": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.readable"
		},
		"899": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.bufferLength"
		},
		"900": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.bufferLength"
		},
		"901": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.encoding"
		},
		"902": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.encoding"
		},
		"903": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.encoding"
		},
		"904": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "_enc"
		},
		"905": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.setEncoding"
		},
		"906": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.setEncoding"
		},
		"907": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "_enc"
		},
		"908": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.objectMode"
		},
		"909": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.objectMode"
		},
		"910": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.objectMode"
		},
		"911": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "_om"
		},
		"912": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.async"
		},
		"913": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.async"
		},
		"914": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.async"
		},
		"915": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "a"
		},
		"916": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.aborted"
		},
		"917": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.aborted"
		},
		"918": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.aborted"
		},
		"919": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "_"
		},
		"920": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.read"
		},
		"921": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.read"
		},
		"922": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "n"
		},
		"923": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.resume"
		},
		"924": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.resume"
		},
		"925": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.pause"
		},
		"926": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.pause"
		},
		"927": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.destroyed"
		},
		"928": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.destroyed"
		},
		"929": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.flowing"
		},
		"930": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.flowing"
		},
		"931": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.paused"
		},
		"932": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.paused"
		},
		"933": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.pipe"
		},
		"934": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.pipe"
		},
		"935": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "W"
		},
		"936": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "dest"
		},
		"937": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "opts"
		},
		"938": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.unpipe"
		},
		"939": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.unpipe"
		},
		"940": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "W"
		},
		"941": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "dest"
		},
		"942": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.addListener"
		},
		"943": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.addListener"
		},
		"944": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Event"
		},
		"945": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "ev"
		},
		"946": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "handler"
		},
		"947": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "__type"
		},
		"948": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "__type"
		},
		"949": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "args"
		},
		"950": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.on"
		},
		"951": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.on"
		},
		"952": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Event"
		},
		"953": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "ev"
		},
		"954": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "handler"
		},
		"955": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "__type"
		},
		"956": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "__type"
		},
		"957": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "args"
		},
		"958": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.removeListener"
		},
		"959": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.removeListener"
		},
		"960": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Event"
		},
		"961": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "ev"
		},
		"962": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "handler"
		},
		"963": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "__type"
		},
		"964": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "__type"
		},
		"965": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "args"
		},
		"966": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.off"
		},
		"967": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.off"
		},
		"968": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Event"
		},
		"969": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "ev"
		},
		"970": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "handler"
		},
		"971": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "__type"
		},
		"972": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "__type"
		},
		"973": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "args"
		},
		"974": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.removeAllListeners"
		},
		"975": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.removeAllListeners"
		},
		"976": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Event"
		},
		"977": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "ev"
		},
		"978": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.emittedEnd"
		},
		"979": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.emittedEnd"
		},
		"980": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.collect"
		},
		"981": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.collect"
		},
		"982": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "__type"
		},
		"983": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "__type.dataLength"
		},
		"984": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.concat"
		},
		"985": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.concat"
		},
		"986": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.promise"
		},
		"987": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.promise"
		},
		"988": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.destroy"
		},
		"989": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.destroy"
		},
		"990": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "er"
		},
		"991": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.[FLOWING]"
		},
		"992": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.[PAUSED]"
		},
		"993": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.[PIPES]"
		},
		"994": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.[BUFFER]"
		},
		"995": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.[OBJECTMODE]"
		},
		"996": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.[ENCODING]"
		},
		"997": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.[ASYNC]"
		},
		"998": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.[DECODER]"
		},
		"999": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.[EOF]"
		},
		"1000": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.[EMITTED_END]"
		},
		"1001": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.[EMITTING_END]"
		},
		"1002": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.[CLOSED]"
		},
		"1003": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.[EMITTED_ERROR]"
		},
		"1004": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.[BUFFERLENGTH]"
		},
		"1005": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.[DESTROYED]"
		},
		"1006": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.[SIGNAL]"
		},
		"1007": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.[ABORTED]"
		},
		"1008": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.[DATALISTENERS]"
		},
		"1009": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.[DISCARDED]"
		},
		"1010": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.[ABORT]"
		},
		"1011": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.[ABORT]"
		},
		"1012": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.[READ]"
		},
		"1013": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.[READ]"
		},
		"1014": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "n"
		},
		"1015": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "chunk"
		},
		"1016": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.[RESUME]"
		},
		"1017": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.[RESUME]"
		},
		"1018": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.[BUFFERPUSH]"
		},
		"1019": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.[BUFFERPUSH]"
		},
		"1020": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "chunk"
		},
		"1021": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.[BUFFERSHIFT]"
		},
		"1022": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.[BUFFERSHIFT]"
		},
		"1023": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.[FLUSH]"
		},
		"1024": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.[FLUSH]"
		},
		"1025": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "noDrain"
		},
		"1026": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.[FLUSHCHUNK]"
		},
		"1027": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.[FLUSHCHUNK]"
		},
		"1028": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "chunk"
		},
		"1029": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.[MAYBE_EMIT_END]"
		},
		"1030": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.[MAYBE_EMIT_END]"
		},
		"1031": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.[EMITDATA]"
		},
		"1032": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.[EMITDATA]"
		},
		"1033": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "data"
		},
		"1034": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.[EMITEND]"
		},
		"1035": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.[EMITEND]"
		},
		"1036": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.[EMITEND2]"
		},
		"1037": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.[EMITEND2]"
		},
		"1038": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.[asyncIterator]"
		},
		"1039": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.[asyncIterator]"
		},
		"1040": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.[iterator]"
		},
		"1041": {
			"sourceFileName": "../../node_modules/minipass/src/index.ts",
			"qualifiedName": "Minipass.[iterator]"
		},
		"1042": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.once"
		},
		"1043": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.once"
		},
		"1044": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"1045": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "listener"
		},
		"1046": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"1047": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"1048": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"1049": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.setMaxListeners"
		},
		"1050": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.setMaxListeners"
		},
		"1051": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "n"
		},
		"1052": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.getMaxListeners"
		},
		"1053": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.getMaxListeners"
		},
		"1054": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.listeners"
		},
		"1055": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.listeners"
		},
		"1056": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"1057": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.rawListeners"
		},
		"1058": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.rawListeners"
		},
		"1059": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"1060": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.listenerCount"
		},
		"1061": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.listenerCount"
		},
		"1062": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"1063": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "listener"
		},
		"1064": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.prependListener"
		},
		"1065": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.prependListener"
		},
		"1066": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"1067": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "listener"
		},
		"1068": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"1069": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"1070": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"1071": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.prependOnceListener"
		},
		"1072": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.prependOnceListener"
		},
		"1073": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "eventName"
		},
		"1074": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "listener"
		},
		"1075": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"1076": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__type"
		},
		"1077": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "args"
		},
		"1078": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.eventNames"
		},
		"1079": {
			"sourceFileName": "../../node_modules/@types/node/events.d.ts",
			"qualifiedName": "__global.NodeJS.EventEmitter.eventNames"
		},
		"1080": {
			"sourceFileName": "../after/src/index.ts",
			"qualifiedName": "After.#private"
		},
		"1081": {
			"sourceFileName": "../after/src/index.ts",
			"qualifiedName": "After.teardown"
		},
		"1082": {
			"sourceFileName": "../after/src/index.ts",
			"qualifiedName": "After.teardown"
		},
		"1083": {
			"sourceFileName": "../after/src/index.ts",
			"qualifiedName": "fn"
		},
		"1084": {
			"sourceFileName": "../after/src/index.ts",
			"qualifiedName": "__type"
		},
		"1085": {
			"sourceFileName": "../after/src/index.ts",
			"qualifiedName": "__type"
		},
		"1086": {
			"sourceFileName": "../after/src/index.ts",
			"qualifiedName": "After.after"
		},
		"1087": {
			"sourceFileName": "../after/src/index.ts",
			"qualifiedName": "After.after"
		},
		"1088": {
			"sourceFileName": "../after/src/index.ts",
			"qualifiedName": "fn"
		},
		"1089": {
			"sourceFileName": "../after/src/index.ts",
			"qualifiedName": "__type"
		},
		"1090": {
			"sourceFileName": "../after/src/index.ts",
			"qualifiedName": "__type"
		},
		"1091": {
			"sourceFileName": "../after-each/src/index.ts",
			"qualifiedName": "AfterEach.#private"
		},
		"1092": {
			"sourceFileName": "../after-each/src/index.ts",
			"qualifiedName": "AfterEach.afterEach"
		},
		"1093": {
			"sourceFileName": "../after-each/src/index.ts",
			"qualifiedName": "AfterEach.afterEach"
		},
		"1094": {
			"sourceFileName": "../after-each/src/index.ts",
			"qualifiedName": "fn"
		},
		"1095": {
			"sourceFileName": "../after-each/src/index.ts",
			"qualifiedName": "__type"
		},
		"1096": {
			"sourceFileName": "../after-each/src/index.ts",
			"qualifiedName": "__type"
		},
		"1097": {
			"sourceFileName": "../after-each/src/index.ts",
			"qualifiedName": "t"
		},
		"1098": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.#private"
		},
		"1099": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.ok"
		},
		"1100": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.ok"
		},
		"1101": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "obj"
		},
		"1102": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "__1"
		},
		"1103": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.notOk"
		},
		"1104": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.notOk"
		},
		"1105": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "obj"
		},
		"1106": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "__1"
		},
		"1107": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.equal"
		},
		"1108": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.equal"
		},
		"1109": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "T"
		},
		"1110": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "found"
		},
		"1111": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "wanted"
		},
		"1112": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "__2"
		},
		"1113": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.not"
		},
		"1114": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.not"
		},
		"1115": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "found"
		},
		"1116": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "doNotWant"
		},
		"1117": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "__2"
		},
		"1118": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.type"
		},
		"1119": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.type"
		},
		"1120": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "obj"
		},
		"1121": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "klass"
		},
		"1122": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "__2"
		},
		"1123": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.same"
		},
		"1124": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.same"
		},
		"1125": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "found"
		},
		"1126": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "wanted"
		},
		"1127": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "__2"
		},
		"1128": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.notSame"
		},
		"1129": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.notSame"
		},
		"1130": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "found"
		},
		"1131": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "doNotWant"
		},
		"1132": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "__2"
		},
		"1133": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.strictSame"
		},
		"1134": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.strictSame"
		},
		"1135": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "T"
		},
		"1136": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "found"
		},
		"1137": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "wanted"
		},
		"1138": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "__2"
		},
		"1139": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.strictNotSame"
		},
		"1140": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.strictNotSame"
		},
		"1141": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "found"
		},
		"1142": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "doNotWant"
		},
		"1143": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "__2"
		},
		"1144": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.has"
		},
		"1145": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.has"
		},
		"1146": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "found"
		},
		"1147": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "wanted"
		},
		"1148": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "__2"
		},
		"1149": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.notHas"
		},
		"1150": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.notHas"
		},
		"1151": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "found"
		},
		"1152": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "doNotWant"
		},
		"1153": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "__2"
		},
		"1154": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.hasStrict"
		},
		"1155": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.hasStrict"
		},
		"1156": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "found"
		},
		"1157": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "wanted"
		},
		"1158": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "__2"
		},
		"1159": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.notHasStrict"
		},
		"1160": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.notHasStrict"
		},
		"1161": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "found"
		},
		"1162": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "doNotWant"
		},
		"1163": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "__2"
		},
		"1164": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.match"
		},
		"1165": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.match"
		},
		"1166": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "found"
		},
		"1167": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "wanted"
		},
		"1168": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "__2"
		},
		"1169": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.notMatch"
		},
		"1170": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.notMatch"
		},
		"1171": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "found"
		},
		"1172": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "doNotWant"
		},
		"1173": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "__2"
		},
		"1174": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.matchOnly"
		},
		"1175": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.matchOnly"
		},
		"1176": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "found"
		},
		"1177": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "wanted"
		},
		"1178": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "__2"
		},
		"1179": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.notMatchOnly"
		},
		"1180": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.notMatchOnly"
		},
		"1181": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "found"
		},
		"1182": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "doNotWant"
		},
		"1183": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "__2"
		},
		"1184": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.matchOnlyStrict"
		},
		"1185": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.matchOnlyStrict"
		},
		"1186": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "found"
		},
		"1187": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "wanted"
		},
		"1188": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "__2"
		},
		"1189": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.notMatchOnlyStrict"
		},
		"1190": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.notMatchOnlyStrict"
		},
		"1191": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "found"
		},
		"1192": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "doNotWant"
		},
		"1193": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "__2"
		},
		"1194": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.matchStrict"
		},
		"1195": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.matchStrict"
		},
		"1196": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "found"
		},
		"1197": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "wanted"
		},
		"1198": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "__2"
		},
		"1199": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.notMatchStrict"
		},
		"1200": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.notMatchStrict"
		},
		"1201": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "found"
		},
		"1202": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "doNotWant"
		},
		"1203": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "__2"
		},
		"1204": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.hasProp"
		},
		"1205": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.hasProp"
		},
		"1206": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "T"
		},
		"1207": {
			"sourceFileName": "\u0000",
			"qualifiedName": "__type"
		},
		"1208": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "found"
		},
		"1209": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "wanted"
		},
		"1210": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "__2"
		},
		"1211": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.hasOwnProp"
		},
		"1212": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.hasOwnProp"
		},
		"1213": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "T"
		},
		"1214": {
			"sourceFileName": "\u0000",
			"qualifiedName": "__type"
		},
		"1215": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "found"
		},
		"1216": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "wanted"
		},
		"1217": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "__2"
		},
		"1218": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.hasProps"
		},
		"1219": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.hasProps"
		},
		"1220": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "T"
		},
		"1221": {
			"sourceFileName": "\u0000",
			"qualifiedName": "__type"
		},
		"1222": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "found"
		},
		"1223": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "wanted"
		},
		"1224": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "__2"
		},
		"1225": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.hasOwnProps"
		},
		"1226": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.hasOwnProps"
		},
		"1227": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "T"
		},
		"1228": {
			"sourceFileName": "\u0000",
			"qualifiedName": "__type"
		},
		"1229": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "found"
		},
		"1230": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "wanted"
		},
		"1231": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "__2"
		},
		"1232": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.hasOwnPropsOnly"
		},
		"1233": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.hasOwnPropsOnly"
		},
		"1234": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "T"
		},
		"1235": {
			"sourceFileName": "\u0000",
			"qualifiedName": "__type"
		},
		"1236": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "found"
		},
		"1237": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "wanted"
		},
		"1238": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "__2"
		},
		"1239": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.throws"
		},
		"1240": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.throws"
		},
		"1241": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "fn"
		},
		"1242": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "__type"
		},
		"1243": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "__type"
		},
		"1244": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "__1"
		},
		"1245": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.doesNotThrow"
		},
		"1246": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.doesNotThrow"
		},
		"1247": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "fn"
		},
		"1248": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "__type"
		},
		"1249": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "__type"
		},
		"1250": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "__1"
		},
		"1251": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.rejects"
		},
		"1252": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.rejects"
		},
		"1253": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "T"
		},
		"1254": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "fnOrPromise"
		},
		"1255": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "__type"
		},
		"1256": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "__type"
		},
		"1257": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "__1"
		},
		"1258": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.resolves"
		},
		"1259": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.resolves"
		},
		"1260": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "T"
		},
		"1261": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "fnOrPromise"
		},
		"1262": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "__type"
		},
		"1263": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "__type"
		},
		"1264": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "__1"
		},
		"1265": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.resolveMatch"
		},
		"1266": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.resolveMatch"
		},
		"1267": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "T"
		},
		"1268": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "fnOrPromise"
		},
		"1269": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "__type"
		},
		"1270": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "__type"
		},
		"1271": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "wanted"
		},
		"1272": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "__2"
		},
		"1273": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.emits"
		},
		"1274": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "Assertions.emits"
		},
		"1275": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "emitter"
		},
		"1276": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "event"
		},
		"1277": {
			"sourceFileName": "../asserts/src/index.ts",
			"qualifiedName": "__2"
		},
		"1278": {
			"sourceFileName": "../before/src/index.ts",
			"qualifiedName": "Before.#private"
		},
		"1279": {
			"sourceFileName": "../before/src/index.ts",
			"qualifiedName": "Before.before"
		},
		"1280": {
			"sourceFileName": "../before/src/index.ts",
			"qualifiedName": "Before.before"
		},
		"1281": {
			"sourceFileName": "../before/src/index.ts",
			"qualifiedName": "fn"
		},
		"1282": {
			"sourceFileName": "../before/src/index.ts",
			"qualifiedName": "__type"
		},
		"1283": {
			"sourceFileName": "../before/src/index.ts",
			"qualifiedName": "__type"
		},
		"1284": {
			"sourceFileName": "../before-each/src/index.ts",
			"qualifiedName": "BeforeEach.#private"
		},
		"1285": {
			"sourceFileName": "../before-each/src/index.ts",
			"qualifiedName": "BeforeEach.beforeEach"
		},
		"1286": {
			"sourceFileName": "../before-each/src/index.ts",
			"qualifiedName": "BeforeEach.beforeEach"
		},
		"1287": {
			"sourceFileName": "../before-each/src/index.ts",
			"qualifiedName": "fn"
		},
		"1288": {
			"sourceFileName": "../before-each/src/index.ts",
			"qualifiedName": "__type"
		},
		"1289": {
			"sourceFileName": "../before-each/src/index.ts",
			"qualifiedName": "__type"
		},
		"1290": {
			"sourceFileName": "../before-each/src/index.ts",
			"qualifiedName": "t"
		},
		"1291": {
			"sourceFileName": "../filter/src/index.ts",
			"qualifiedName": "Filter.#private"
		},
		"1292": {
			"sourceFileName": "../filter/src/index.ts",
			"qualifiedName": "Filter.only"
		},
		"1293": {
			"sourceFileName": "../filter/src/index.ts",
			"qualifiedName": "Filter.only"
		},
		"1294": {
			"sourceFileName": "../filter/src/index.ts",
			"qualifiedName": "name"
		},
		"1295": {
			"sourceFileName": "../filter/src/index.ts",
			"qualifiedName": "extra"
		},
		"1296": {
			"sourceFileName": "../filter/src/index.ts",
			"qualifiedName": "cb"
		},
		"1297": {
			"sourceFileName": "../filter/src/index.ts",
			"qualifiedName": "__type"
		},
		"1298": {
			"sourceFileName": "../filter/src/index.ts",
			"qualifiedName": "__type"
		},
		"1299": {
			"sourceFileName": "../filter/src/index.ts",
			"qualifiedName": "t"
		},
		"1300": {
			"sourceFileName": "../filter/src/index.ts",
			"qualifiedName": "Filter.only"
		},
		"1301": {
			"sourceFileName": "../filter/src/index.ts",
			"qualifiedName": "name"
		},
		"1302": {
			"sourceFileName": "../filter/src/index.ts",
			"qualifiedName": "cb"
		},
		"1303": {
			"sourceFileName": "../filter/src/index.ts",
			"qualifiedName": "__type"
		},
		"1304": {
			"sourceFileName": "../filter/src/index.ts",
			"qualifiedName": "__type"
		},
		"1305": {
			"sourceFileName": "../filter/src/index.ts",
			"qualifiedName": "t"
		},
		"1306": {
			"sourceFileName": "../filter/src/index.ts",
			"qualifiedName": "Filter.only"
		},
		"1307": {
			"sourceFileName": "../filter/src/index.ts",
			"qualifiedName": "extra"
		},
		"1308": {
			"sourceFileName": "../filter/src/index.ts",
			"qualifiedName": "cb"
		},
		"1309": {
			"sourceFileName": "../filter/src/index.ts",
			"qualifiedName": "__type"
		},
		"1310": {
			"sourceFileName": "../filter/src/index.ts",
			"qualifiedName": "__type"
		},
		"1311": {
			"sourceFileName": "../filter/src/index.ts",
			"qualifiedName": "t"
		},
		"1312": {
			"sourceFileName": "../filter/src/index.ts",
			"qualifiedName": "Filter.only"
		},
		"1313": {
			"sourceFileName": "../filter/src/index.ts",
			"qualifiedName": "cb"
		},
		"1314": {
			"sourceFileName": "../filter/src/index.ts",
			"qualifiedName": "__type"
		},
		"1315": {
			"sourceFileName": "../filter/src/index.ts",
			"qualifiedName": "__type"
		},
		"1316": {
			"sourceFileName": "../filter/src/index.ts",
			"qualifiedName": "t"
		},
		"1317": {
			"sourceFileName": "../fixture/src/index.ts",
			"qualifiedName": "TestFixtures.#private"
		},
		"1318": {
			"sourceFileName": "../fixture/src/index.ts",
			"qualifiedName": "TestFixtures.fixture"
		},
		"1319": {
			"sourceFileName": "../fixture/src/index.ts",
			"qualifiedName": "TestFixtures.fixture"
		},
		"1320": {
			"sourceFileName": "../fixture/src/index.ts",
			"qualifiedName": "T"
		},
		"1321": {
			"sourceFileName": "../fixture/src/index.ts",
			"qualifiedName": "type"
		},
		"1322": {
			"sourceFileName": "../fixture/src/index.ts",
			"qualifiedName": "content"
		},
		"1323": {
			"sourceFileName": "../fixture/src/index.ts",
			"qualifiedName": "TestFixtures.testdir"
		},
		"1324": {
			"sourceFileName": "../fixture/src/index.ts",
			"qualifiedName": "TestFixtures.testdir"
		},
		"1325": {
			"sourceFileName": "../fixture/src/index.ts",
			"qualifiedName": "content"
		},
		"1326": {
			"sourceFileName": "../fixture/src/index.ts",
			"qualifiedName": "TestFixtures.testdirName"
		},
		"1327": {
			"sourceFileName": "../fixture/src/index.ts",
			"qualifiedName": "TestFixtures.testdirName"
		},
		"1328": {
			"sourceFileName": "../fixture/src/index.ts",
			"qualifiedName": "TestFixtures.testdirName"
		},
		"1329": {
			"sourceFileName": "../fixture/src/index.ts",
			"qualifiedName": "td"
		},
		"1330": {
			"sourceFileName": "../intercept/src/index.ts",
			"qualifiedName": "Interceptor.#private"
		},
		"1331": {
			"sourceFileName": "../intercept/src/index.ts",
			"qualifiedName": "Interceptor.intercept"
		},
		"1332": {
			"sourceFileName": "../intercept/src/index.ts",
			"qualifiedName": "Interceptor.intercept"
		},
		"1333": {
			"sourceFileName": "../intercept/src/index.ts",
			"qualifiedName": "T"
		},
		"1334": {
			"sourceFileName": "../intercept/src/index.ts",
			"qualifiedName": "obj"
		},
		"1335": {
			"sourceFileName": "../intercept/src/index.ts",
			"qualifiedName": "prop"
		},
		"1336": {
			"sourceFileName": "../intercept/src/index.ts",
			"qualifiedName": "desc"
		},
		"1337": {
			"sourceFileName": "../intercept/src/index.ts",
			"qualifiedName": "strictMode"
		},
		"1338": {
			"sourceFileName": "../intercept/src/index.ts",
			"qualifiedName": "Interceptor.capture"
		},
		"1339": {
			"sourceFileName": "../intercept/src/index.ts",
			"qualifiedName": "Interceptor.capture"
		},
		"1340": {
			"sourceFileName": "../intercept/src/index.ts",
			"qualifiedName": "T"
		},
		"1341": {
			"sourceFileName": "\u0000",
			"qualifiedName": "__type"
		},
		"1342": {
			"sourceFileName": "../intercept/src/index.ts",
			"qualifiedName": "M"
		},
		"1343": {
			"sourceFileName": "../intercept/src/index.ts",
			"qualifiedName": "obj"
		},
		"1344": {
			"sourceFileName": "../intercept/src/index.ts",
			"qualifiedName": "method"
		},
		"1345": {
			"sourceFileName": "../intercept/src/index.ts",
			"qualifiedName": "impl"
		},
		"1346": {
			"sourceFileName": "../intercept/src/index.ts",
			"qualifiedName": "__type"
		},
		"1347": {
			"sourceFileName": "../intercept/src/index.ts",
			"qualifiedName": "__type"
		},
		"1348": {
			"sourceFileName": "../intercept/src/index.ts",
			"qualifiedName": "a"
		},
		"1349": {
			"sourceFileName": "../intercept/src/index.ts",
			"qualifiedName": "Interceptor.captureFn"
		},
		"1350": {
			"sourceFileName": "../intercept/src/index.ts",
			"qualifiedName": "Interceptor.captureFn"
		},
		"1351": {
			"sourceFileName": "../intercept/src/index.ts",
			"qualifiedName": "F"
		},
		"1352": {
			"sourceFileName": "../intercept/src/index.ts",
			"qualifiedName": "__type"
		},
		"1353": {
			"sourceFileName": "../intercept/src/index.ts",
			"qualifiedName": "__type"
		},
		"1354": {
			"sourceFileName": "../intercept/src/index.ts",
			"qualifiedName": "this"
		},
		"1355": {
			"sourceFileName": "../intercept/src/index.ts",
			"qualifiedName": "a"
		},
		"1356": {
			"sourceFileName": "../intercept/src/index.ts",
			"qualifiedName": "original"
		},
		"1357": {
			"sourceFileName": "../intercept/src/index.ts",
			"qualifiedName": "__type"
		},
		"1358": {
			"sourceFileName": "../intercept/src/index.ts",
			"qualifiedName": "__type"
		},
		"1359": {
			"sourceFileName": "../intercept/src/index.ts",
			"qualifiedName": "a"
		},
		"1360": {
			"sourceFileName": "../intercept/src/index.ts",
			"qualifiedName": "__type"
		},
		"1361": {
			"sourceFileName": "../intercept/src/index.ts",
			"qualifiedName": "__type.calls"
		},
		"1362": {
			"sourceFileName": "../intercept/src/index.ts",
			"qualifiedName": "__type.args"
		},
		"1363": {
			"sourceFileName": "../intercept/src/index.ts",
			"qualifiedName": "__type"
		},
		"1364": {
			"sourceFileName": "../intercept/src/index.ts",
			"qualifiedName": "__type"
		},
		"1365": {
			"sourceFileName": "../mock/src/index.ts",
			"qualifiedName": "TapMock.#private"
		},
		"1366": {
			"sourceFileName": "../mock/src/index.ts",
			"qualifiedName": "TapMock.createMock"
		},
		"1367": {
			"sourceFileName": "../mock/src/index.ts",
			"qualifiedName": "TapMock.createMock"
		},
		"1368": {
			"sourceFileName": "../mock/src/index.ts",
			"qualifiedName": "B"
		},
		"1369": {
			"sourceFileName": "../mock/src/index.ts",
			"qualifiedName": "__type"
		},
		"1370": {
			"sourceFileName": "../mock/src/index.ts",
			"qualifiedName": "__type.__index"
		},
		"1372": {
			"sourceFileName": "../mock/src/index.ts",
			"qualifiedName": "O"
		},
		"1373": {
			"sourceFileName": "../mock/src/index.ts",
			"qualifiedName": "__type"
		},
		"1374": {
			"sourceFileName": "../mock/src/index.ts",
			"qualifiedName": "__type.__index"
		},
		"1376": {
			"sourceFileName": "../mock/src/index.ts",
			"qualifiedName": "bases"
		},
		"1377": {
			"sourceFileName": "../mock/src/index.ts",
			"qualifiedName": "overrides"
		},
		"1378": {
			"sourceFileName": "../mock/src/index.ts",
			"qualifiedName": "TapMock.mock"
		},
		"1379": {
			"sourceFileName": "../mock/src/index.ts",
			"qualifiedName": "TapMock.mock"
		},
		"1380": {
			"sourceFileName": "../mock/src/index.ts",
			"qualifiedName": "module"
		},
		"1381": {
			"sourceFileName": "../mock/src/index.ts",
			"qualifiedName": "mocks"
		},
		"1382": {
			"sourceFileName": "../mock/src/index.ts",
			"qualifiedName": "__type"
		},
		"1383": {
			"sourceFileName": "../mock/src/index.ts",
			"qualifiedName": "__type.__index"
		},
		"1385": {
			"sourceFileName": "../mock/src/index.ts",
			"qualifiedName": "TapMock.mockImport"
		},
		"1386": {
			"sourceFileName": "../mock/src/index.ts",
			"qualifiedName": "TapMock.mockImport"
		},
		"1387": {
			"sourceFileName": "../mock/src/index.ts",
			"qualifiedName": "module"
		},
		"1388": {
			"sourceFileName": "../mock/src/index.ts",
			"qualifiedName": "mocks"
		},
		"1389": {
			"sourceFileName": "../mock/src/index.ts",
			"qualifiedName": "__type"
		},
		"1390": {
			"sourceFileName": "../mock/src/index.ts",
			"qualifiedName": "__type.__index"
		},
		"1392": {
			"sourceFileName": "../mock/src/index.ts",
			"qualifiedName": "TapMock.mockRequire"
		},
		"1393": {
			"sourceFileName": "../mock/src/index.ts",
			"qualifiedName": "TapMock.mockRequire"
		},
		"1394": {
			"sourceFileName": "../mock/src/index.ts",
			"qualifiedName": "module"
		},
		"1395": {
			"sourceFileName": "../mock/src/index.ts",
			"qualifiedName": "mocks"
		},
		"1396": {
			"sourceFileName": "../mock/src/index.ts",
			"qualifiedName": "__type"
		},
		"1397": {
			"sourceFileName": "../mock/src/index.ts",
			"qualifiedName": "__type.__index"
		},
		"1399": {
			"sourceFileName": "../mock/src/index.ts",
			"qualifiedName": "TapMock.unmock"
		},
		"1400": {
			"sourceFileName": "../mock/src/index.ts",
			"qualifiedName": "TapMock.unmock"
		},
		"1401": {
			"sourceFileName": "../snapshot/src/index.ts",
			"qualifiedName": "SnapshotPlugin.#private"
		},
		"1402": {
			"sourceFileName": "../snapshot/src/index.ts",
			"qualifiedName": "SnapshotPlugin.writeSnapshot"
		},
		"1403": {
			"sourceFileName": "../snapshot/src/index.ts",
			"qualifiedName": "SnapshotPlugin.compareOptions"
		},
		"1404": {
			"sourceFileName": "../snapshot/src/index.ts",
			"qualifiedName": "SnapshotPlugin.compareOptions"
		},
		"1405": {
			"sourceFileName": "../snapshot/src/index.ts",
			"qualifiedName": "SnapshotPlugin.compareOptions"
		},
		"1406": {
			"sourceFileName": "../snapshot/src/index.ts",
			"qualifiedName": "cmt"
		},
		"1407": {
			"sourceFileName": "../snapshot/src/index.ts",
			"qualifiedName": "SnapshotPlugin.cleanSnapshot"
		},
		"1408": {
			"sourceFileName": "../snapshot/src/index.ts",
			"qualifiedName": "SnapshotPlugin.cleanSnapshot"
		},
		"1409": {
			"sourceFileName": "../snapshot/src/index.ts",
			"qualifiedName": "__type"
		},
		"1410": {
			"sourceFileName": "../snapshot/src/index.ts",
			"qualifiedName": "__type"
		},
		"1411": {
			"sourceFileName": "../snapshot/src/index.ts",
			"qualifiedName": "snapshotData"
		},
		"1412": {
			"sourceFileName": "../snapshot/src/index.ts",
			"qualifiedName": "SnapshotPlugin.cleanSnapshot"
		},
		"1413": {
			"sourceFileName": "../snapshot/src/index.ts",
			"qualifiedName": "clean"
		},
		"1414": {
			"sourceFileName": "../snapshot/src/index.ts",
			"qualifiedName": "__type"
		},
		"1415": {
			"sourceFileName": "../snapshot/src/index.ts",
			"qualifiedName": "__type"
		},
		"1416": {
			"sourceFileName": "../snapshot/src/index.ts",
			"qualifiedName": "snapshotData"
		},
		"1417": {
			"sourceFileName": "../snapshot/src/index.ts",
			"qualifiedName": "SnapshotPlugin.formatSnapshot"
		},
		"1418": {
			"sourceFileName": "../snapshot/src/index.ts",
			"qualifiedName": "SnapshotPlugin.formatSnapshot"
		},
		"1419": {
			"sourceFileName": "../snapshot/src/index.ts",
			"qualifiedName": "__type"
		},
		"1420": {
			"sourceFileName": "../snapshot/src/index.ts",
			"qualifiedName": "__type"
		},
		"1421": {
			"sourceFileName": "../snapshot/src/index.ts",
			"qualifiedName": "obj"
		},
		"1422": {
			"sourceFileName": "../snapshot/src/index.ts",
			"qualifiedName": "SnapshotPlugin.formatSnapshot"
		},
		"1423": {
			"sourceFileName": "../snapshot/src/index.ts",
			"qualifiedName": "format"
		},
		"1424": {
			"sourceFileName": "../snapshot/src/index.ts",
			"qualifiedName": "__type"
		},
		"1425": {
			"sourceFileName": "../snapshot/src/index.ts",
			"qualifiedName": "__type"
		},
		"1426": {
			"sourceFileName": "../snapshot/src/index.ts",
			"qualifiedName": "obj"
		},
		"1427": {
			"sourceFileName": "../snapshot/src/index.ts",
			"qualifiedName": "SnapshotPlugin.snapshotFile"
		},
		"1428": {
			"sourceFileName": "../snapshot/src/index.ts",
			"qualifiedName": "SnapshotPlugin.snapshotFile"
		},
		"1429": {
			"sourceFileName": "../snapshot/src/index.ts",
			"qualifiedName": "SnapshotPlugin.snapshotFile"
		},
		"1430": {
			"sourceFileName": "../snapshot/src/index.ts",
			"qualifiedName": "f"
		},
		"1431": {
			"sourceFileName": "../snapshot/src/index.ts",
			"qualifiedName": "SnapshotPlugin.matchSnapshot"
		},
		"1432": {
			"sourceFileName": "../snapshot/src/index.ts",
			"qualifiedName": "SnapshotPlugin.matchSnapshot"
		},
		"1433": {
			"sourceFileName": "../snapshot/src/index.ts",
			"qualifiedName": "found"
		},
		"1434": {
			"sourceFileName": "../snapshot/src/index.ts",
			"qualifiedName": "__1"
		},
		"1435": {
			"sourceFileName": "../snapshot/src/index.ts",
			"qualifiedName": "SnapshotPlugin.resolveMatchSnapshot"
		},
		"1436": {
			"sourceFileName": "../snapshot/src/index.ts",
			"qualifiedName": "SnapshotPlugin.resolveMatchSnapshot"
		},
		"1437": {
			"sourceFileName": "../snapshot/src/index.ts",
			"qualifiedName": "T"
		},
		"1438": {
			"sourceFileName": "../snapshot/src/index.ts",
			"qualifiedName": "fnOrPromise"
		},
		"1439": {
			"sourceFileName": "../snapshot/src/index.ts",
			"qualifiedName": "__type"
		},
		"1440": {
			"sourceFileName": "../snapshot/src/index.ts",
			"qualifiedName": "__type"
		},
		"1441": {
			"sourceFileName": "../snapshot/src/index.ts",
			"qualifiedName": "__1"
		},
		"1442": {
			"sourceFileName": "../spawn/src/index.ts",
			"qualifiedName": "SpawnPlugin.#private"
		},
		"1443": {
			"sourceFileName": "../spawn/src/index.ts",
			"qualifiedName": "SpawnPlugin.spawn"
		},
		"1444": {
			"sourceFileName": "../spawn/src/index.ts",
			"qualifiedName": "SpawnPlugin.spawn"
		},
		"1445": {
			"sourceFileName": "../spawn/src/index.ts",
			"qualifiedName": "cmd"
		},
		"1446": {
			"sourceFileName": "../spawn/src/index.ts",
			"qualifiedName": "SpawnPlugin.spawn"
		},
		"1447": {
			"sourceFileName": "../spawn/src/index.ts",
			"qualifiedName": "cmd"
		},
		"1448": {
			"sourceFileName": "../spawn/src/index.ts",
			"qualifiedName": "options"
		},
		"1449": {
			"sourceFileName": "../spawn/src/index.ts",
			"qualifiedName": "name"
		},
		"1450": {
			"sourceFileName": "../spawn/src/index.ts",
			"qualifiedName": "SpawnPlugin.spawn"
		},
		"1451": {
			"sourceFileName": "../spawn/src/index.ts",
			"qualifiedName": "cmd"
		},
		"1452": {
			"sourceFileName": "../spawn/src/index.ts",
			"qualifiedName": "args"
		},
		"1453": {
			"sourceFileName": "../spawn/src/index.ts",
			"qualifiedName": "name"
		},
		"1454": {
			"sourceFileName": "../spawn/src/index.ts",
			"qualifiedName": "SpawnPlugin.spawn"
		},
		"1455": {
			"sourceFileName": "../spawn/src/index.ts",
			"qualifiedName": "cmd"
		},
		"1456": {
			"sourceFileName": "../spawn/src/index.ts",
			"qualifiedName": "args"
		},
		"1457": {
			"sourceFileName": "../spawn/src/index.ts",
			"qualifiedName": "options"
		},
		"1458": {
			"sourceFileName": "../spawn/src/index.ts",
			"qualifiedName": "name"
		},
		"1459": {
			"sourceFileName": "../stdin/src/index.ts",
			"qualifiedName": "StdinPlugin.#private"
		},
		"1460": {
			"sourceFileName": "../stdin/src/index.ts",
			"qualifiedName": "StdinPlugin.stdin"
		},
		"1461": {
			"sourceFileName": "../stdin/src/index.ts",
			"qualifiedName": "StdinPlugin.stdin"
		},
		"1462": {
			"sourceFileName": "../stdin/src/index.ts",
			"qualifiedName": "StdinPlugin.stdin"
		},
		"1463": {
			"sourceFileName": "../stdin/src/index.ts",
			"qualifiedName": "name"
		},
		"1464": {
			"sourceFileName": "../stdin/src/index.ts",
			"qualifiedName": "StdinPlugin.stdin"
		},
		"1465": {
			"sourceFileName": "../stdin/src/index.ts",
			"qualifiedName": "name"
		},
		"1466": {
			"sourceFileName": "../stdin/src/index.ts",
			"qualifiedName": "extra"
		},
		"1467": {
			"sourceFileName": "../stdin/src/index.ts",
			"qualifiedName": "StdinPlugin.stdin"
		},
		"1468": {
			"sourceFileName": "../stdin/src/index.ts",
			"qualifiedName": "extra"
		},
		"1469": {
			"sourceFileName": "../worker/src/index.ts",
			"qualifiedName": "WorkerPlugin.#private"
		},
		"1470": {
			"sourceFileName": "../worker/src/index.ts",
			"qualifiedName": "WorkerPlugin.isMainThread"
		},
		"1471": {
			"sourceFileName": "../worker/src/index.ts",
			"qualifiedName": "WorkerPlugin.workerData"
		},
		"1472": {
			"sourceFileName": "../worker/src/index.ts",
			"qualifiedName": "WorkerPlugin.workerData"
		},
		"1473": {
			"sourceFileName": "../worker/src/index.ts",
			"qualifiedName": "WorkerPlugin.worker"
		},
		"1474": {
			"sourceFileName": "../worker/src/index.ts",
			"qualifiedName": "WorkerPlugin.worker"
		},
		"1475": {
			"sourceFileName": "../worker/src/index.ts",
			"qualifiedName": "filename"
		},
		"1476": {
			"sourceFileName": "../worker/src/index.ts",
			"qualifiedName": "WorkerPlugin.worker"
		},
		"1477": {
			"sourceFileName": "../worker/src/index.ts",
			"qualifiedName": "filename"
		},
		"1478": {
			"sourceFileName": "../worker/src/index.ts",
			"qualifiedName": "name"
		},
		"1479": {
			"sourceFileName": "../worker/src/index.ts",
			"qualifiedName": "WorkerPlugin.worker"
		},
		"1480": {
			"sourceFileName": "../worker/src/index.ts",
			"qualifiedName": "filename"
		},
		"1481": {
			"sourceFileName": "../worker/src/index.ts",
			"qualifiedName": "options"
		},
		"1482": {
			"sourceFileName": "../worker/src/index.ts",
			"qualifiedName": "name"
		},
		"1483": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "Test.Ext"
		},
		"1484": {
			"sourceFileName": "test-built/src/index.ts",
			"qualifiedName": "Test.Opts"
		},
		"1485": {
			"sourceFileName": "src/default-plugins.ts",
			"qualifiedName": "defaultPlugins"
		}
	}
}