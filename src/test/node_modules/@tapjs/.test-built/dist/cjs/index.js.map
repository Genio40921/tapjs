{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["// This file is automatically generated, please do not edit\n\nimport {\n  parseTestArgs,\n  TestArgs,\n  TestBase,\n  TestBaseOpts,\n} from '@tapjs/core'\nimport { FinalResults } from 'tap-parser'\n\nconst copyToString = (v: Function) => ({\n  toString: Object.assign(() => v.toString(), {\n    toString: () => 'function toString() { [native code] }',\n  }),\n})\nconst copyFunction = (t: Test, plug: Plug, v: Function) => {\n  const f: (this: Plug, ...args: any) => any = function (\n    ...args: any[]\n  ) {\n    const thisArg = this === t ? plug : this\n    return v.apply(thisArg, args)\n  }\n  const vv = Object.assign(f, copyToString(v))\n  const nameProp = Reflect.getOwnPropertyDescriptor(\n    v,\n    'name'\n  )\n  if (nameProp) {\n    Reflect.defineProperty(f, 'name', nameProp)\n  }\n  return vv\n}\n\nimport _Plugin_stdin from \"@tapjs/core/plugin/stdin\"\nimport _Plugin_spawn from \"@tapjs/core/plugin/spawn\"\nimport _Plugin_before from \"@tapjs/core/plugin/before\"\nimport _Plugin_beforeEach from \"@tapjs/core/plugin/before-each\"\nimport _Plugin_after from \"@tapjs/core/plugin/after\"\nimport _Plugin_afterEach from \"@tapjs/core/plugin/after-each\"\nimport _Plugin_asserts from \"@tapjs/asserts\"\nimport _Plugin_snapshot from \"@tapjs/snapshot\"\nimport _Plugin_fixture from \"@tapjs/fixture\"\nimport _Plugin_mock from \"@tapjs/mock\"\nimport _Plugin_intercept from \"@tapjs/intercept\"\nexport const Plugin_stdin = _Plugin_stdin\nexport const Plugin_spawn = _Plugin_spawn\nexport const Plugin_before = _Plugin_before\nexport const Plugin_beforeEach = _Plugin_beforeEach\nexport const Plugin_after = _Plugin_after\nexport const Plugin_afterEach = _Plugin_afterEach\nexport const Plugin_asserts = _Plugin_asserts\nexport const Plugin_snapshot = _Plugin_snapshot\nexport const Plugin_fixture = _Plugin_fixture\nexport const Plugin_mock = _Plugin_mock\nexport const Plugin_intercept = _Plugin_intercept\n\ntype PI<O extends TestBaseOpts | any = any> =\n  | ((t: TestBase, opts: O) => Plug)\n  | ((t: TestBase) => Plug)\n\nconst plugins: PI[] = [\n  Plugin_stdin,\n  Plugin_spawn,\n  Plugin_before,\n  Plugin_beforeEach,\n  Plugin_after,\n  Plugin_afterEach,\n  Plugin_asserts,\n  Plugin_snapshot,\n  Plugin_fixture,\n  Plugin_mock,\n  Plugin_intercept,\n]\nexport const pluginsLoaded = new Map<string, PI>([\n  ['stdin', Plugin_stdin],\n  ['spawn', Plugin_spawn],\n  ['before', Plugin_before],\n  ['beforeEach', Plugin_beforeEach],\n  ['after', Plugin_after],\n  ['afterEach', Plugin_afterEach],\n  ['asserts', Plugin_asserts],\n  ['snapshot', Plugin_snapshot],\n  ['fixture', Plugin_fixture],\n  ['mock', Plugin_mock],\n  ['intercept', Plugin_intercept],\n])\n\ntype Plug =\n  | TestBase\n  | { t: Test }\n  | ReturnType<typeof Plugin_stdin>\n  | ReturnType<typeof Plugin_spawn>\n  | ReturnType<typeof Plugin_before>\n  | ReturnType<typeof Plugin_beforeEach>\n  | ReturnType<typeof Plugin_after>\n  | ReturnType<typeof Plugin_afterEach>\n  | ReturnType<typeof Plugin_asserts>\n  | ReturnType<typeof Plugin_snapshot>\n  | ReturnType<typeof Plugin_fixture>\n  | ReturnType<typeof Plugin_mock>\n  | ReturnType<typeof Plugin_intercept>\n\ntype PlugKeys =\n  | keyof TestBase\n  | 't'\n  | keyof ReturnType<typeof Plugin_stdin>\n  | keyof ReturnType<typeof Plugin_spawn>\n  | keyof ReturnType<typeof Plugin_before>\n  | keyof ReturnType<typeof Plugin_beforeEach>\n  | keyof ReturnType<typeof Plugin_after>\n  | keyof ReturnType<typeof Plugin_afterEach>\n  | keyof ReturnType<typeof Plugin_asserts>\n  | keyof ReturnType<typeof Plugin_snapshot>\n  | keyof ReturnType<typeof Plugin_fixture>\n  | keyof ReturnType<typeof Plugin_mock>\n  | keyof ReturnType<typeof Plugin_intercept>\n\ntype SecondParam<\n  T extends [any] | [any, any],\n> = T extends [any, any] ? T[1] : unknown\n\nexport type Plugin_stdin_Opts = SecondParam<\n  Parameters<typeof Plugin_stdin>\n>\nexport type Plugin_spawn_Opts = SecondParam<\n  Parameters<typeof Plugin_spawn>\n>\nexport type Plugin_before_Opts = SecondParam<\n  Parameters<typeof Plugin_before>\n>\nexport type Plugin_beforeEach_Opts = SecondParam<\n  Parameters<typeof Plugin_beforeEach>\n>\nexport type Plugin_after_Opts = SecondParam<\n  Parameters<typeof Plugin_after>\n>\nexport type Plugin_afterEach_Opts = SecondParam<\n  Parameters<typeof Plugin_afterEach>\n>\nexport type Plugin_asserts_Opts = SecondParam<\n  Parameters<typeof Plugin_asserts>\n>\nexport type Plugin_snapshot_Opts = SecondParam<\n  Parameters<typeof Plugin_snapshot>\n>\nexport type Plugin_fixture_Opts = SecondParam<\n  Parameters<typeof Plugin_fixture>\n>\nexport type Plugin_mock_Opts = SecondParam<\n  Parameters<typeof Plugin_mock>\n>\nexport type Plugin_intercept_Opts = SecondParam<\n  Parameters<typeof Plugin_intercept>\n>\n\nexport type TestOpts = TestBaseOpts\n  & Plugin_stdin_Opts\n  & Plugin_spawn_Opts\n  & Plugin_before_Opts\n  & Plugin_beforeEach_Opts\n  & Plugin_after_Opts\n  & Plugin_afterEach_Opts\n  & Plugin_asserts_Opts\n  & Plugin_snapshot_Opts\n  & Plugin_fixture_Opts\n  & Plugin_mock_Opts\n  & Plugin_intercept_Opts\n\ntype TTest = TestBase\n  & ReturnType<typeof Plugin_stdin>\n  & ReturnType<typeof Plugin_spawn>\n  & ReturnType<typeof Plugin_before>\n  & ReturnType<typeof Plugin_beforeEach>\n  & ReturnType<typeof Plugin_after>\n  & ReturnType<typeof Plugin_afterEach>\n  & ReturnType<typeof Plugin_asserts>\n  & ReturnType<typeof Plugin_snapshot>\n  & ReturnType<typeof Plugin_fixture>\n  & ReturnType<typeof Plugin_mock>\n  & ReturnType<typeof Plugin_intercept>\n\n\nexport interface Test extends TTest {\n  end(): this\n  test(\n    name: string,\n    extra: { [k: string]: any },\n    cb?: (t: Test) => any\n  ): Promise<FinalResults | null>\n  test(\n    name: string,\n    cb?: (t: Test) => any\n  ): Promise<FinalResults | null>\n  test(\n    extra: { [k: string]: any },\n    cb?: (t: Test) => any\n  ): Promise<FinalResults | null>\n  test(cb?: (t: Test) => any): Promise<FinalResults | null>\n  test(\n    ...args: TestArgs<Test>\n  ): Promise<FinalResults | null>\n\n  todo(\n    name: string,\n    extra: { [k: string]: any },\n    cb?: (t: Test) => any\n  ): Promise<FinalResults | null>\n  todo(\n    name: string,\n    cb?: (t: Test) => any\n  ): Promise<FinalResults | null>\n  todo(\n    extra: { [k: string]: any },\n    cb?: (t: Test) => any\n  ): Promise<FinalResults | null>\n  todo(cb?: (t: Test) => any): Promise<FinalResults | null>\n  todo(\n    ...args: TestArgs<Test>\n  ): Promise<FinalResults | null>\n\n  skip(\n    name: string,\n    extra: { [k: string]: any },\n    cb?: (t: Test) => any\n  ): Promise<FinalResults | null>\n  skip(\n    name: string,\n    cb?: (t: Test) => any\n  ): Promise<FinalResults | null>\n  skip(\n    extra: { [k: string]: any },\n    cb?: (t: Test) => any\n  ): Promise<FinalResults | null>\n  skip(cb?: (t: Test) => any): Promise<FinalResults | null>\n  skip(\n    ...args: TestArgs<Test>\n  ): Promise<FinalResults | null>\n}\n\nconst applyPlugins = (\n  base: Test,\n  ext: Plug[] = [\n    ...plugins.map(p => p(base, base.options)),\n    base,\n  ]\n): Test => {\n  const getCache = new Map<any, any>()\n  // extend the proxy with Object.create, and then set the toStringTag\n  // to 'Test', so we don't get stack frames like `Proxy.<anonymous>`\n  const t = Object.create(\n    new Proxy(base, {\n      has(_, p) {\n        for (const t of ext) {\n          if (Reflect.has(t, p)) return true\n        }\n        return false\n      },\n      ownKeys() {\n        const k: PlugKeys[] = []\n        for (const t of ext) {\n          const keys = Reflect.ownKeys(t) as PlugKeys[]\n          k.push(...keys)\n        }\n        return [...new Set(k)]\n      },\n      getOwnPropertyDescriptor(_, p) {\n        for (const t of ext) {\n          const prop = Reflect.getOwnPropertyDescriptor(\n            t,\n            p\n          )\n          if (prop) return prop\n        }\n        return undefined\n      },\n      set(_, p, v) {\n        // check to see if there's any setters, and if so, set it there\n        // otherwise, just set on the base\n        for (const t of ext) {\n          let o: Object | null = t\n          while (o) {\n            if (\n              Reflect.getOwnPropertyDescriptor(o, p)?.set\n            ) {\n              //@ts-ignore\n              t[p] = v\n              return true\n            }\n            o = Reflect.getPrototypeOf(o)\n          }\n        }\n        //@ts-ignore\n        base[p as keyof TestBase] = v\n        return true\n      },\n      get(_, p) {\n        if (p === 'IS_PLUGGED') return true\n        if (p === Symbol.toStringTag) return 'Test'\n        if (p === 'parent') {\n          return base.parent?.t\n        }\n        // cache get results so t.blah === t.blah\n        // we only cache functions, so that getters aren't memoized\n        // Of course, a getter that returns a function will be broken,\n        // at least when accessed from outside the plugin, but that's\n        // a pretty narrow caveat, and easily documented.\n        if (getCache.has(p)) return getCache.get(p)\n        for (const plug of ext) {\n          if (p in plug) {\n            //@ts-ignore\n            const v = plug[p]\n            // Functions need special handling so that they report\n            // the correct toString and are called on the correct object\n            // Otherwise attempting to access #private props will fail.\n            if (typeof v === 'function') {\n              const vv = copyFunction(t, plug, v)\n              getCache.set(p, vv)\n              return vv\n            } else if (p === 'parent') {\n              return v?.t\n            } else {\n              return v\n            }\n          }\n        }\n      },\n    })\n  )\n  Object.defineProperty(t, Symbol.toStringTag, {\n    value: 'Test',\n  })\n  Object.assign(base, { t })\n  ext.unshift({ t })\n  return t\n}\n\nexport class Test extends TestBase {\n  constructor(opts: TestOpts) {\n    super(opts)\n    return applyPlugins(this)\n  }\n\n  static get plugins() {\n    return pluginsLoaded\n  }\n\n  static pluginLoaded(\n    plugin: (t: TestBase, opts?: any) => any\n  ): boolean {\n    return plugins.includes(plugin)\n  }\n\n  pluginLoaded<T extends any = any>(\n    plugin: (t: TestBase, opts?: any) => T\n  ): this is TestBase & T {\n    return Test.pluginLoaded(plugin)\n  }\n\n  get plugins() {\n    return Test.plugins\n  }\n\n  test(\n    name: string,\n    extra: { [k: string]: any },\n    cb: (t: Test) => any\n  ): Promise<FinalResults | null>\n  test(\n    name: string,\n    cb: (t: Test) => any\n  ): Promise<FinalResults | null>\n  test(\n    extra: { [k: string]: any },\n    cb: (t: Test) => any\n  ): Promise<FinalResults | null>\n  test(cb: (t: Test) => any): Promise<FinalResults | null>\n  test(\n    ...args: TestArgs<Test>\n  ): Promise<FinalResults | null> {\n    const extra = parseTestArgs(...args)\n    return this.sub(Test, extra, this.test)\n  }\n\n  todo(\n    name: string,\n    extra: { [k: string]: any },\n    cb: (t: Test) => any\n  ): Promise<FinalResults | null>\n  todo(\n    name: string,\n    cb: (t: Test) => any\n  ): Promise<FinalResults | null>\n  todo(\n    extra: { [k: string]: any },\n    cb: (t: Test) => any\n  ): Promise<FinalResults | null>\n  todo(cb: (t: Test) => any): Promise<FinalResults | null>\n  todo(\n    ...args: TestArgs<Test>\n  ): Promise<FinalResults | null> {\n    const extra = parseTestArgs(...args)\n    extra.todo = true\n    return this.sub(Test, extra, this.todo)\n  }\n\n  skip(\n    name: string,\n    extra: { [k: string]: any },\n    cb: (t: Test) => any\n  ): Promise<FinalResults | null>\n  skip(\n    name: string,\n    cb: (t: Test) => any\n  ): Promise<FinalResults | null>\n  skip(\n    extra: { [k: string]: any },\n    cb: (t: Test) => any\n  ): Promise<FinalResults | null>\n  skip(cb: (t: Test) => any): Promise<FinalResults | null>\n  skip(\n    ...args: TestArgs<Test>\n  ): Promise<FinalResults | null> {\n    const extra = parseTestArgs(...args)\n    extra.skip = true\n    return this.sub(Test, extra, this.skip)\n  }\n}\n"]}