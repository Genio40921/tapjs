{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["//{{HEADER COMMENT START}}\n// This file is automatically generated, edits will be lost on rebuild\n//{{HEADER COMMENT END}}\n\nimport {\n  parseTestArgs,\n  PromiseWithSubtest,\n  TapPlugin,\n  TestArgs,\n  TestBase,\n  TestBaseOpts,\n} from '@tapjs/core'\n\n//{{PLUGIN IMPORT START}}\nimport * as Plugin_after from \"@tapjs/after\"\nimport * as Plugin_afterEach from \"@tapjs/after-each\"\nimport * as Plugin_asserts from \"@tapjs/asserts\"\nimport * as Plugin_before from \"@tapjs/before\"\nimport * as Plugin_beforeEach from \"@tapjs/before-each\"\nimport * as Plugin_filter from \"@tapjs/filter\"\nimport * as Plugin_fixture from \"@tapjs/fixture\"\nimport * as Plugin_intercept from \"@tapjs/intercept\"\nimport * as Plugin_mock from \"@tapjs/mock\"\nimport * as Plugin_snapshot from \"@tapjs/snapshot\"\nimport * as Plugin_spawn from \"@tapjs/spawn\"\nimport * as Plugin_stdin from \"@tapjs/stdin\"\nimport * as Plugin_typescript from \"@tapjs/typescript\"\n//{{PLUGIN IMPORT END}}\n\nimport type { ConfigSet, Jack } from 'jackspeak'\nimport { isConfigOption } from 'jackspeak'\n\nconst copyToString = (v: Function) => ({\n  toString: Object.assign(() => v.toString(), {\n    toString: () => 'function toString() { [native code] }',\n  }),\n})\nconst copyFunction = (t: Test, plug: Plug, v: Function) => {\n  const f: (this: Plug, ...args: any) => any = function (\n    ...args: any[]\n  ) {\n    const thisArg = this === t ? plug : this\n    const ret = v.apply(thisArg, args)\n    return ret === thisArg ? t : ret\n  }\n  const vv = Object.assign(Object.assign(f, v), copyToString(v))\n  const nameProp = Reflect.getOwnPropertyDescriptor(v, 'name')\n  if (nameProp) {\n    Reflect.defineProperty(f, 'name', nameProp)\n  }\n  return vv\n}\n\ntype PI<O extends TestBaseOpts | any = any> =\n  | ((t: TestBase, opts: O) => Plug)\n  | ((t: TestBase) => Plug)\n\ntype PluginResult<\n  P extends ((t: TestBase, opts: any) => any)[]\n> = P extends [\n  infer H extends (t: TestBase, opts: any) => any,\n  ...infer T extends ((t: TestBase, opts: any) => any)[]\n]\n  ? ReturnType<H> & PluginResult<T>\n  : {}\n\ntype AnyReturnValue<A extends ((...a: any[]) => any)[]> =\n  A extends [\n    infer H extends (...a: any[]) => any,\n    ...infer T extends ((...a: any[]) => any)[]\n  ]\n    ? ReturnType<H> | AnyReturnValue<T>\n    : never\n\ntype Plug =\n  | TestBase\n  | { t: Test<PluginResult<PluginSet>> }\n  | AnyReturnValue<PluginSet>\ntype Plugged = TestBase & {\n  t: Test<PluginResult<PluginSet>>\n} & PluginResult<PluginSet>\ntype PlugKeys = keyof Plugged\n\n// options\ntype SecondParam<T extends [any] | [any, any]> = T extends [\n  any,\n  infer S\n]\n  ? S\n  : unknown\n\nexport type PluginOpts<\n  P extends ((t: TestBase, opts: any) => any)[]\n> = P extends [\n  infer H extends (t: TestBase, opts: any) => any,\n  ...infer T extends ((t: TestBase, opts: any) => any)[]\n]\n  ? SecondParam<Parameters<H>> & PluginOpts<T>\n  : {}\n\nexport type TestOpts = TestBaseOpts & PluginOpts<PluginSet>\n\nlet plugins_: PluginSet\nlet pluginsLoaded_: Map<string, PI>\n\n//{{PLUGINS CODE START}}\n// const plugins = () => {\n//   if (plugins_) return plugins_\n//   return (plugins_ = [])\n// }\n// type PluginSet = (\n//   | TapPlugin<any>\n//   | TapPlugin<any, TestBaseOpts>\n// )[]\n// const pluginsLoaded = () => {\n//   if (pluginsLoaded_) return pluginsLoaded_\n//   return (pluginsLoaded_ = new Map<string, PI>())\n// }\nconst plugins = () => {\n  if (plugins_) return plugins_\n  return (plugins_ = [\n    Plugin_after.plugin,\n    Plugin_afterEach.plugin,\n    Plugin_asserts.plugin,\n    Plugin_before.plugin,\n    Plugin_beforeEach.plugin,\n    Plugin_filter.plugin,\n    Plugin_fixture.plugin,\n    Plugin_intercept.plugin,\n    Plugin_mock.plugin,\n    Plugin_snapshot.plugin,\n    Plugin_spawn.plugin,\n    Plugin_stdin.plugin,\n    Plugin_typescript.plugin,\n  ])\n}\n\nconst pluginsLoaded = () => {\n  if (pluginsLoaded_) return pluginsLoaded_\n  return (pluginsLoaded_ = new Map<string, PI>([\n    ['after', Plugin_after.plugin],\n    ['afterEach', Plugin_afterEach.plugin],\n    ['asserts', Plugin_asserts.plugin],\n    ['before', Plugin_before.plugin],\n    ['beforeEach', Plugin_beforeEach.plugin],\n    ['filter', Plugin_filter.plugin],\n    ['fixture', Plugin_fixture.plugin],\n    ['intercept', Plugin_intercept.plugin],\n    ['mock', Plugin_mock.plugin],\n    ['snapshot', Plugin_snapshot.plugin],\n    ['spawn', Plugin_spawn.plugin],\n    ['stdin', Plugin_stdin.plugin],\n    ['typescript', Plugin_typescript.plugin],\n  ]))\n}\n\ntype PluginSet = [  typeof Plugin_after.plugin,\n  typeof Plugin_afterEach.plugin,\n  typeof Plugin_asserts.plugin,\n  typeof Plugin_before.plugin,\n  typeof Plugin_beforeEach.plugin,\n  typeof Plugin_filter.plugin,\n  typeof Plugin_fixture.plugin,\n  typeof Plugin_intercept.plugin,\n  typeof Plugin_mock.plugin,\n  typeof Plugin_snapshot.plugin,\n  typeof Plugin_spawn.plugin,\n  typeof Plugin_stdin.plugin,\n  typeof Plugin_typescript.plugin,\n]\n//{{PLUGINS CODE END}}\n\n//{{PLUGINS CONFIG START}}\n// // just referenced to keep prettier/tslint happy\n// isConfigOption\n// const c = <T extends ConfigSet>(j: Jack<T>) => j\n// c\nexport const config = <C extends ConfigSet>(jack: Jack<C>) => {\n  const config_Plugin_filter_0 = Plugin_filter.config[\"only\"]\n  if (!isConfigOption(config_Plugin_filter_0, \"boolean\", false)) {\n    throw new Error(\"Invalid config option \\\"only\\\" defined in plugin: @tapjs/filter\")\n  }\n  const config_Plugin_filter_1 = Plugin_filter.config[\"grep\"]\n  if (!isConfigOption(config_Plugin_filter_1, \"string\", true)) {\n    throw new Error(\"Invalid config option \\\"grep\\\" defined in plugin: @tapjs/filter\")\n  }\n  const config_Plugin_filter_2 = Plugin_filter.config[\"invert\"]\n  if (!isConfigOption(config_Plugin_filter_2, \"boolean\", false)) {\n    throw new Error(\"Invalid config option \\\"invert\\\" defined in plugin: @tapjs/filter\")\n  }\n  const config_Plugin_filter_3 = Plugin_filter.config[\"no-invert\"]\n  if (!isConfigOption(config_Plugin_filter_3, \"boolean\", false)) {\n    throw new Error(\"Invalid config option \\\"no-invert\\\" defined in plugin: @tapjs/filter\")\n  }\n  const config_Plugin_fixture_0 = Plugin_fixture.config[\"save-fixture\"]\n  if (!isConfigOption(config_Plugin_fixture_0, \"boolean\", false)) {\n    throw new Error(\"Invalid config option \\\"save-fixture\\\" defined in plugin: @tapjs/fixture\")\n  }\n  const config_Plugin_snapshot_0 = Plugin_snapshot.config[\"snapshot\"]\n  if (!isConfigOption(config_Plugin_snapshot_0, \"boolean\", false)) {\n    throw new Error(\"Invalid config option \\\"snapshot\\\" defined in plugin: @tapjs/snapshot\")\n  }\n  const config_Plugin_typescript_0 = Plugin_typescript.config[\"typecheck\"]\n  if (!isConfigOption(config_Plugin_typescript_0, \"boolean\", false)) {\n    throw new Error(\"Invalid config option \\\"typecheck\\\" defined in plugin: @tapjs/typescript\")\n  }\n  return jack\n    .heading(\"From plugin: @tapjs/filter\")\n    .flag({[\"only\"]: config_Plugin_filter_0})\n    .optList({[\"grep\"]: config_Plugin_filter_1})\n    .flag({[\"invert\"]: config_Plugin_filter_2})\n    .flag({[\"no-invert\"]: config_Plugin_filter_3})\n    .heading(\"From plugin: @tapjs/fixture\")\n    .flag({[\"save-fixture\"]: config_Plugin_fixture_0})\n    .heading(\"From plugin: @tapjs/snapshot\")\n    .flag({[\"snapshot\"]: config_Plugin_snapshot_0})\n    .heading(\"From plugin: @tapjs/typescript\")\n    .flag({[\"typecheck\"]: config_Plugin_typescript_0})\n}\n//{{PLUGINS CONFIG END}}\n\n//{{LOADERS START}}\n// export const loaders = []\nexport const loaders = [\n  \"@tapjs/mock/loader\",\n  \"ts-node/esm\"\n]\n//{{LOADERS END}}\n\n//{{PLUGIN SIGNATURE START}}\n// export const signature = ''\nexport const signature = `@tapjs/after\n@tapjs/after-each\n@tapjs/asserts\n@tapjs/before\n@tapjs/before-each\n@tapjs/filter\n@tapjs/fixture\n@tapjs/intercept\n@tapjs/mock\n@tapjs/snapshot\n@tapjs/spawn\n@tapjs/stdin\n@tapjs/typescript`\n//{{PLUGIN SIGNATURE END}}\n\ntype TTest<P extends PluginSet = PluginSet> = TestBase &\n  PluginResult<P>\n\nexport interface Test<\n  Ext extends PluginResult<PluginSet> = PluginResult<PluginSet>\n> extends TTest {\n  end(implicit?: symbol): this\n  test(\n    name: string,\n    extra: TestOpts,\n    cb?: (t: Test<Ext> & Ext) => any\n  ): PromiseWithSubtest<Test<Ext> & Ext>\n  test(\n    name: string,\n    cb?: (t: Test<Ext> & Ext) => any\n  ): PromiseWithSubtest<Test<Ext>>\n  test(\n    extra: TestOpts,\n    cb?: (t: Test<Ext> & Ext) => any\n  ): PromiseWithSubtest<Test<Ext> & Ext>\n  test(\n    cb?: (t: Test<Ext> & Ext) => any\n  ): PromiseWithSubtest<Test<Ext> & Ext>\n  test(\n    ...args: TestArgs<Test<Ext> & Ext>\n  ): PromiseWithSubtest<Test<Ext> & Ext>\n\n  todo(\n    name: string,\n    extra: TestOpts,\n    cb?: (t: Test<Ext> & Ext) => any\n  ): PromiseWithSubtest<Test<Ext> & Ext>\n  todo(\n    name: string,\n    cb?: (t: Test<Ext> & Ext) => any\n  ): PromiseWithSubtest<Test<Ext> & Ext>\n  todo(\n    extra: TestOpts,\n    cb?: (t: Test<Ext> & Ext) => any\n  ): PromiseWithSubtest<Test<Ext> & Ext>\n  todo(\n    cb?: (t: Test<Ext> & Ext) => any\n  ): PromiseWithSubtest<Test<Ext> & Ext>\n  todo(\n    ...args: TestArgs<Test>\n  ): PromiseWithSubtest<Test<Ext> & Ext>\n\n  skip(\n    name: string,\n    extra: TestOpts,\n    cb?: (t: Test<Ext> & Ext) => any\n  ): PromiseWithSubtest<Test<Ext> & Ext>\n  skip(\n    name: string,\n    cb?: (t: Test<Ext> & Ext) => any\n  ): PromiseWithSubtest<Test<Ext> & Ext>\n  skip(\n    extra: TestOpts,\n    cb?: (t: Test<Ext> & Ext) => any\n  ): PromiseWithSubtest<Test<Ext> & Ext>\n  skip(\n    cb?: (t: Test<Ext> & Ext) => any\n  ): PromiseWithSubtest<Test<Ext> & Ext>\n  skip(\n    ...args: TestArgs<Test>\n  ): PromiseWithSubtest<Test<Ext> & Ext>\n\n  applyPlugin<B extends Object, O extends unknown = unknown>(\n    plugin: TapPlugin<B, O>\n  ): Test<Ext & ReturnType<typeof plugin>> &\n    ReturnType<typeof plugin>\n}\n\nconst applyPlugins = (base: Test): Test => {\n  const ext: Plug[] = plugins()\n    .map(p => p(base, base.options as any))\n    .concat(base)\n  const getCache = new Map<any, any>()\n  // extend the proxy with Object.create, and then set the toStringTag\n  // to 'Test', so we don't get stack frames like `Proxy.<anonymous>`\n  const t = Object.create(\n    new Proxy(base, {\n      has(_, p) {\n        for (const t of ext) {\n          if (Reflect.has(t, p)) return true\n        }\n        return false\n      },\n      ownKeys() {\n        const k: PlugKeys[] = []\n        for (const t of ext) {\n          const keys = Reflect.ownKeys(t) as PlugKeys[]\n          k.push(...keys)\n        }\n        return [...new Set(k)]\n      },\n      getOwnPropertyDescriptor(_, p) {\n        for (const t of ext) {\n          const prop = Reflect.getOwnPropertyDescriptor(t, p)\n          if (prop) return prop\n        }\n        return undefined\n      },\n      set(_, p, v) {\n        // check to see if there's any setters, and if so, set it there\n        // otherwise, just set on the base\n        let didSet = false\n        if (getCache.has(p)) getCache.delete(p)\n        for (const t of ext) {\n          let o: Object | null = t\n          while (o) {\n            // assign to the all plugs that can receive it\n            const prop = Reflect.getOwnPropertyDescriptor(o, p)\n            if (prop) {\n              if (prop.set || prop.writable) {\n                //@ts-ignore\n                t[p] = v\n                didSet = true\n              }\n              break\n            }\n            o = Reflect.getPrototypeOf(o)\n          }\n        }\n        if (!didSet) {\n          // if nothing has that field, assign to the base\n          //@ts-ignore\n          base[p] = v\n        }\n        return true\n      },\n      get(_, p) {\n        if (p === Symbol.toStringTag) return 'Test'\n        if (p === 'parent') {\n          return base.parent?.t\n        }\n        // cache get results so t.blah === t.blah\n        // we only cache functions, so that getters aren't memoized\n        // Of course, a getter that returns a function will be broken,\n        // at least when accessed from outside the plugin, but that's\n        // a pretty narrow caveat, and easily documented.\n        if (getCache.has(p)) return getCache.get(p)\n        for (const plug of ext) {\n          if (p in plug) {\n            //@ts-ignore\n            const v = plug[p]\n            // Functions need special handling so that they report\n            // the correct toString and are called on the correct object\n            // Otherwise attempting to access #private props will fail.\n            if (typeof v === 'function') {\n              const vv = copyFunction(t, plug, v)\n              getCache.set(p, vv)\n              return vv\n            } else if (p === 'parent') {\n              return v?.t\n            } else {\n              return v\n            }\n          }\n        }\n      },\n    })\n  )\n  Object.defineProperty(t, Symbol.toStringTag, {\n    value: 'Test',\n  })\n  Object.assign(base, { t })\n  ext.unshift({ t })\n  return t\n}\n\nexport class Test<\n  Ext extends PluginResult<PluginSet> = PluginResult<PluginSet>\n> extends TestBase {\n  constructor(opts: TestOpts) {\n    super(opts)\n    return applyPlugins(this) as Test<Ext> & Ext\n  }\n\n  applyPlugin<B extends Object, O extends unknown = unknown>(\n    plugin: TapPlugin<B, O>\n  ): Test<Ext & B> & B {\n    if (this.parent) {\n      throw new Error(\n        'Plugins can only be applied at run-time to root test'\n      )\n    }\n    if (this.printedResult) {\n      throw new Error(\n        'Plugins must be applied prior to any tests'\n      )\n    }\n    const ps = plugins()\n\n    // don't add to the list if already present.\n    // tell TS to overlook the dynamic type sins\n    //@ts-ignore\n    if (!ps.includes(plugin)) {\n      //@ts-ignore\n      ps.push(plugin)\n    }\n\n    return applyPlugins(this) as Test<Ext & B> & B\n  }\n\n  static get plugins() {\n    return pluginsLoaded()\n  }\n\n  static pluginLoaded(\n    // TS gets confused if we type this as \"TestBase\" for some reason\n    plugin: (t: any, opts?: any) => any\n  ): boolean {\n    return plugins().includes(plugin)\n  }\n\n  pluginLoaded<T extends any = any>(\n    // TS gets confused if we type this as \"TestBase\" for some reason\n    plugin: (t: any, opts?: any) => T\n  ): this is TestBase & T {\n    return Test.pluginLoaded(plugin)\n  }\n\n  get plugins() {\n    return Test.plugins\n  }\n\n  test(\n    name: string,\n    extra: TestOpts,\n    cb: (t: Test<Ext> & Ext) => any\n  ): PromiseWithSubtest<Test<Ext> & Ext>\n  test(\n    name: string,\n    cb: (t: Test<Ext> & Ext) => any\n  ): PromiseWithSubtest<Test<Ext> & Ext>\n  test(\n    extra: TestOpts,\n    cb: (t: Test<Ext> & Ext) => any\n  ): PromiseWithSubtest<Test<Ext> & Ext>\n  test(\n    cb: (t: Test<Ext> & Ext) => any\n  ): PromiseWithSubtest<Test<Ext> & Ext>\n  test(\n    ...args: TestArgs<Test<Ext> & Ext>\n  ): PromiseWithSubtest<Test<Ext> & Ext> {\n    const extra = parseTestArgs(...args)\n    return this.sub(\n      Test,\n      extra,\n      this.test\n    ) as PromiseWithSubtest<Test<Ext> & Ext>\n  }\n\n  todo(\n    name: string,\n    extra: TestOpts,\n    cb: (t: Test<Ext> & Ext) => any\n  ): PromiseWithSubtest<Test<Ext> & Ext>\n  todo(\n    name: string,\n    cb: (t: Test<Ext> & Ext) => any\n  ): PromiseWithSubtest<Test<Ext> & Ext>\n  todo(\n    extra: TestOpts,\n    cb: (t: Test<Ext> & Ext) => any\n  ): PromiseWithSubtest<Test<Ext> & Ext>\n  todo(\n    cb: (t: Test<Ext> & Ext) => any\n  ): PromiseWithSubtest<Test<Ext> & Ext>\n  todo(\n    ...args: TestArgs<Test<Ext> & Ext>\n  ): PromiseWithSubtest<Test<Ext> & Ext> {\n    const extra = parseTestArgs(...args)\n    extra.todo = true\n    return this.sub(\n      Test,\n      extra,\n      this.todo\n    ) as PromiseWithSubtest<Test<Ext> & Ext>\n  }\n\n  skip(\n    name: string,\n    extra: TestOpts,\n    cb: (t: Test<Ext> & Ext) => any\n  ): PromiseWithSubtest<Test<Ext> & Ext>\n  skip(\n    name: string,\n    cb: (t: Test<Ext> & Ext) => any\n  ): PromiseWithSubtest<Test<Ext> & Ext>\n  skip(\n    extra: TestOpts,\n    cb: (t: Test<Ext> & Ext) => any\n  ): PromiseWithSubtest<Test<Ext> & Ext>\n  skip(\n    cb: (t: Test<Ext> & Ext) => any\n  ): PromiseWithSubtest<Test<Ext> & Ext>\n  skip(\n    ...args: TestArgs<Test<Ext> & Ext>\n  ): PromiseWithSubtest<Test<Ext> & Ext> {\n    const extra = parseTestArgs(...args)\n    extra.skip = true\n    return this.sub(\n      Test,\n      extra,\n      this.skip\n    ) as PromiseWithSubtest<Test<Ext> & Ext>\n  }\n}\n"]}