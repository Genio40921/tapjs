{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["// This file is automatically generated, please do not edit\n\nimport {\n  parseTestArgs,\n  TestArgs,\n  TestBase,\n  TestBaseOpts,\n} from '@tapjs/core'\nimport { FinalResults } from 'tap-parser'\n\nconst copyToString = (v: Function) => ({\n  toString: Object.assign(() => v.toString(), {\n    toString: () => 'function toString() { [native code] }',\n  }),\n})\n\nimport _Plugin_stdin from \"@tapjs/core/plugin/stdin\"\nimport _Plugin_spawn from \"@tapjs/core/plugin/spawn\"\nimport _Plugin_beforeEach from \"@tapjs/core/plugin/before-each\"\nimport _Plugin_afterEach from \"@tapjs/core/plugin/after-each\"\nimport _Plugin_asserts from \"@tapjs/asserts\"\nimport _Plugin_snapshot from \"@tapjs/snapshot\"\nexport const Plugin_stdin = _Plugin_stdin\nexport const Plugin_spawn = _Plugin_spawn\nexport const Plugin_beforeEach = _Plugin_beforeEach\nexport const Plugin_afterEach = _Plugin_afterEach\nexport const Plugin_asserts = _Plugin_asserts\nexport const Plugin_snapshot = _Plugin_snapshot\n\ninterface ClassOf<T> {\n  new (opts: any): T\n}\n\ntype PI<O extends TestBaseOpts | any = any> =\n  | ((t: TestBase, opts: O) => Plug)\n  | ((t: TestBase) => Plug)\n\nconst plugins: PI[] = [\n  Plugin_stdin,\n  Plugin_spawn,\n  Plugin_beforeEach,\n  Plugin_afterEach,\n  Plugin_asserts,\n  Plugin_snapshot,\n]\nexport const pluginsLoaded = new Map<string, PI>([\n  ['stdin', Plugin_stdin],\n  ['spawn', Plugin_spawn],\n  ['beforeEach', Plugin_beforeEach],\n  ['afterEach', Plugin_afterEach],\n  ['asserts', Plugin_asserts],\n  ['snapshot', Plugin_snapshot],\n])\n\ntype Plug =\n  | TestBase\n  | { t: Test }\n  | ReturnType<typeof Plugin_stdin>\n  | ReturnType<typeof Plugin_spawn>\n  | ReturnType<typeof Plugin_beforeEach>\n  | ReturnType<typeof Plugin_afterEach>\n  | ReturnType<typeof Plugin_asserts>\n  | ReturnType<typeof Plugin_snapshot>\n\ntype PlugKeys =\n  | keyof TestBase\n  | 't'\n  | keyof ReturnType<typeof Plugin_stdin>\n  | keyof ReturnType<typeof Plugin_spawn>\n  | keyof ReturnType<typeof Plugin_beforeEach>\n  | keyof ReturnType<typeof Plugin_afterEach>\n  | keyof ReturnType<typeof Plugin_asserts>\n  | keyof ReturnType<typeof Plugin_snapshot>\n\ntype SecondParam<\n  T extends [any] | [any, any],\n> = T extends [any, any] ? T[1] : unknown\n\nexport type Plugin_stdin_Opts = SecondParam<\n  Parameters<typeof Plugin_stdin>\n>\nexport type Plugin_spawn_Opts = SecondParam<\n  Parameters<typeof Plugin_spawn>\n>\nexport type Plugin_beforeEach_Opts = SecondParam<\n  Parameters<typeof Plugin_beforeEach>\n>\nexport type Plugin_afterEach_Opts = SecondParam<\n  Parameters<typeof Plugin_afterEach>\n>\nexport type Plugin_asserts_Opts = SecondParam<\n  Parameters<typeof Plugin_asserts>\n>\nexport type Plugin_snapshot_Opts = SecondParam<\n  Parameters<typeof Plugin_snapshot>\n>\n\nexport type TestOpts = TestBaseOpts\n  & Plugin_stdin_Opts\n  & Plugin_spawn_Opts\n  & Plugin_beforeEach_Opts\n  & Plugin_afterEach_Opts\n  & Plugin_asserts_Opts\n  & Plugin_snapshot_Opts\n\ntype TTest = TestBase\n  & ReturnType<typeof Plugin_stdin>\n  & ReturnType<typeof Plugin_spawn>\n  & ReturnType<typeof Plugin_beforeEach>\n  & ReturnType<typeof Plugin_afterEach>\n  & ReturnType<typeof Plugin_asserts>\n  & ReturnType<typeof Plugin_snapshot>\n\n\nexport interface Test extends TTest {\n  end(): this\n  t: this\n  test(\n    name: string,\n    extra: { [k: string]: any },\n    cb?: (t: Test) => any\n  ): Promise<FinalResults | null>\n  test(\n    name: string,\n    cb?: (t: Test) => any\n  ): Promise<FinalResults | null>\n  test(\n    extra: { [k: string]: any },\n    cb?: (t: Test) => any\n  ): Promise<FinalResults | null>\n  test(cb?: (t: Test) => any): Promise<FinalResults | null>\n  test(\n    ...args: TestArgs<Test>\n  ): Promise<FinalResults | null>\n\n  todo(\n    name: string,\n    extra: { [k: string]: any },\n    cb?: (t: Test) => any\n  ): Promise<FinalResults | null>\n  todo(\n    name: string,\n    cb?: (t: Test) => any\n  ): Promise<FinalResults | null>\n  todo(\n    extra: { [k: string]: any },\n    cb?: (t: Test) => any\n  ): Promise<FinalResults | null>\n  todo(cb?: (t: Test) => any): Promise<FinalResults | null>\n  todo(\n    ...args: TestArgs<Test>\n  ): Promise<FinalResults | null>\n\n  skip(\n    name: string,\n    extra: { [k: string]: any },\n    cb?: (t: Test) => any\n  ): Promise<FinalResults | null>\n  skip(\n    name: string,\n    cb?: (t: Test) => any\n  ): Promise<FinalResults | null>\n  skip(\n    extra: { [k: string]: any },\n    cb?: (t: Test) => any\n  ): Promise<FinalResults | null>\n  skip(cb?: (t: Test) => any): Promise<FinalResults | null>\n  skip(\n    ...args: TestArgs<Test>\n  ): Promise<FinalResults | null>\n}\n\nconst applyPlugins = <T extends Test>(\n  base: T,\n  ext: Plug[] = [\n    ...plugins.map(p => p(base, base.options)),\n    base,\n  ]\n): Test => {\n  const getCache = new Map<any, any>()\n  const t = new Proxy(base, {\n    has(_, p) {\n      for (const t of ext) {\n        if (Reflect.has(t, p)) return true\n      }\n      return false\n    },\n    ownKeys() {\n      const k: PlugKeys[] = []\n      for (const t of ext) {\n        const keys = Reflect.ownKeys(t) as PlugKeys[]\n        k.push(...keys)\n      }\n      return [...new Set(k)]\n    },\n    getOwnPropertyDescriptor(_, p) {\n      for (const t of ext) {\n        const prop = Reflect.getOwnPropertyDescriptor(t, p)\n        if (prop) return prop\n      }\n      return undefined\n    },\n    set(_, p, v) {\n      // check to see if there's any setters, and if so, set it there\n      // otherwise, just set on the base\n      for (const t of ext) {\n        let o: Object | null = t\n        while (o) {\n          if (Reflect.getOwnPropertyDescriptor(o, p)?.set) {\n            //@ts-ignore\n            t[p] = v\n            return true\n          }\n          o = Reflect.getPrototypeOf(o)\n        }\n      }\n      //@ts-ignore\n      base[p as keyof TestBase] = v\n      return true\n    },\n    get(_, p) {\n      // cache get results so t.blah === t.blah\n      // we only cache functions, so that getters aren't memoized\n      // Of course, a getter that returns a function will be broken,\n      // at least when accessed from outside the plugin, but that's\n      // a pretty narrow caveat, and easily documented.\n      if (getCache.has(p)) return getCache.get(p)\n      for (const plug of ext) {\n        if (p in plug) {\n          //@ts-ignore\n          const v = plug[p]\n          // Functions need special handling so that they report\n          // the correct toString and are called on the correct object\n          // Otherwise attempting to access #private props will fail.\n          if (typeof v === 'function') {\n            const f: (this: Plug, ...args: any) => any =\n              function (...args: any[]) {\n                const thisArg = this === t ? plug : this\n                return v.apply(thisArg, args)\n              }\n            const vv = Object.assign(f, copyToString(v))\n            const nameProp =\n              Reflect.getOwnPropertyDescriptor(v, 'name')\n            if (nameProp) {\n              Reflect.defineProperty(f, 'name', nameProp)\n            }\n            getCache.set(p, vv)\n            return vv\n          } else {\n            getCache.set(p, v)\n            return v\n          }\n        }\n      }\n    },\n  })\n  Object.assign(base, { t })\n  ext.unshift({ t })\n  return t\n}\n\nexport class Test extends TestBase {\n  constructor(opts: TestOpts) {\n    super(opts)\n    return applyPlugins(this)\n  }\n\n  static get plugins() {\n    return pluginsLoaded\n  }\n\n  static pluginLoaded(\n    plugin: (t: TestBase, opts?: any) => any\n  ): boolean {\n    return plugins.includes(plugin)\n  }\n\n  test(\n    name: string,\n    extra: { [k: string]: any },\n    cb?: (t: Test) => any\n  ): Promise<FinalResults | null>\n  test(\n    name: string,\n    cb?: (t: Test) => any\n  ): Promise<FinalResults | null>\n  test(\n    extra: { [k: string]: any },\n    cb?: (t: Test) => any\n  ): Promise<FinalResults | null>\n  test(cb?: (t: Test) => any): Promise<FinalResults | null>\n  test(\n    ...args: TestArgs<Test>\n  ): Promise<FinalResults | null> {\n    const extra = parseTestArgs(...args)\n    extra.todo = true\n    const Class = this.constructor as ClassOf<Test>\n    return this.sub(Class, extra, this.test)\n  }\n\n  todo(\n    name: string,\n    extra: { [k: string]: any },\n    cb?: (t: Test) => any\n  ): Promise<FinalResults | null>\n  todo(\n    name: string,\n    cb?: (t: Test) => any\n  ): Promise<FinalResults | null>\n  todo(\n    extra: { [k: string]: any },\n    cb?: (t: Test) => any\n  ): Promise<FinalResults | null>\n  todo(cb?: (t: Test) => any): Promise<FinalResults | null>\n  todo(\n    ...args: TestArgs<Test>\n  ): Promise<FinalResults | null> {\n    const extra = parseTestArgs(...args)\n    extra.todo = true\n    const Class = this.constructor as ClassOf<Test>\n    return this.sub(Class, extra, this.test)\n  }\n\n  skip(\n    name: string,\n    extra: { [k: string]: any },\n    cb?: (t: Test) => any\n  ): Promise<FinalResults | null>\n  skip(\n    name: string,\n    cb?: (t: Test) => any\n  ): Promise<FinalResults | null>\n  skip(\n    extra: { [k: string]: any },\n    cb?: (t: Test) => any\n  ): Promise<FinalResults | null>\n  skip(cb?: (t: Test) => any): Promise<FinalResults | null>\n  skip(\n    ...args: TestArgs<Test>\n  ): Promise<FinalResults | null> {\n    const extra = parseTestArgs(...args)\n    extra.skip = true\n    const Class = this.constructor as ClassOf<Test>\n    return this.sub(Class, extra, this.test)\n  }\n}\n"]}