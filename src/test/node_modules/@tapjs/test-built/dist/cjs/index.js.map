{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["//{{HEADER COMMENT START}}\n// This file is automatically generated, edits will be lost on rebuild\n//{{HEADER COMMENT END}}\n\nimport {\n  parseTestArgs,\n  PromiseWithSubtest,\n  TapPlugin,\n  TestArgs,\n  TestBase,\n  TestBaseOpts,\n} from '@tapjs/core'\n\n//{{PLUGIN IMPORT START}}\nimport * as Plugin_after from \"@tapjs/after\"\nimport * as Plugin_afterEach from \"@tapjs/after-each\"\nimport * as Plugin_asserts from \"@tapjs/asserts\"\nimport * as Plugin_before from \"@tapjs/before\"\nimport * as Plugin_beforeEach from \"@tapjs/before-each\"\nimport * as Plugin_filter from \"@tapjs/filter\"\nimport * as Plugin_fixture from \"@tapjs/fixture\"\nimport * as Plugin_intercept from \"@tapjs/intercept\"\nimport * as Plugin_mock from \"@tapjs/mock\"\nimport * as Plugin_snapshot from \"@tapjs/snapshot\"\nimport * as Plugin_spawn from \"@tapjs/spawn\"\nimport * as Plugin_stdin from \"@tapjs/stdin\"\nimport * as Plugin_typescript from \"@tapjs/typescript\"\nimport * as Plugin_worker from \"@tapjs/worker\"\n//{{PLUGIN IMPORT END}}\n\nimport type { ConfigSet, Jack } from 'jackspeak'\nimport { isConfigOption } from 'jackspeak'\nimport { inspect } from 'node:util'\n\nconst kInspect = Symbol.for('nodejs.util.inspect.custom')\nconst copyInspect = (v: Function) => ({\n  [kInspect]: (...args: any[]) => inspect(v, ...args),\n})\n\nconst copyToString = (v: Function) => ({\n  toString: Object.assign(() => v.toString(), {\n    toString: () => 'function toString() { [native code] }',\n  }),\n})\nconst copyFunction = <\n  Ext extends BuiltPlugins,\n  Opts extends TestOpts\n>(\n  t: Test<Ext, Opts>,\n  plug: Plug<Opts>,\n  v: Function\n) => {\n  const f: (this: Plug<Opts>, ...args: any) => any = function (\n    ...args: any[]\n  ) {\n    const thisArg = this === t ? plug : this\n    const ret = v.apply(thisArg, args)\n    // If a plugin method returns 'this', and it's the plugin,\n    // then we return the extended Test instead.\n    return ret === thisArg && thisArg === plug ? t : ret\n  }\n  const vv = Object.assign(\n    Object.assign(f, v),\n    copyToString(v),\n    copyInspect(v)\n  )\n  const nameProp = Reflect.getOwnPropertyDescriptor(v, 'name')\n  if (nameProp) {\n    Reflect.defineProperty(f, 'name', nameProp)\n  }\n  return vv\n}\n\ntype PluginResult<P extends ((t: TestBase, opts: any) => any)[]> =\n  P extends [\n    infer H extends (t: TestBase, opts: any) => any,\n    ...infer T extends ((t: TestBase, opts: any) => any)[]\n  ]\n    ? ReturnType<H> & PluginResult<T>\n    : {}\n\ntype AnyReturnValue<A extends ((...a: any[]) => any)[]> = A extends [\n  infer H extends (...a: any[]) => any,\n  ...infer T extends ((...a: any[]) => any)[]\n]\n  ? ReturnType<H> | AnyReturnValue<T>\n  : never\n\ntype Plug<Opt extends TestOpts> =\n  | TestBase\n  | {\n      t: Test<BuiltPlugins>\n      pluginLoaded<T extends any = any>(\n        plugin: (t: any, opts?: any) => T\n      ): boolean\n      plugins: TapPlugin<any, Opt>[]\n    }\n  | AnyReturnValue<PluginSet>\ntype Plugged = TestBase & {\n  t: Test<BuiltPlugins>\n} & BuiltPlugins\ntype PlugKeys = keyof Plugged\n\n// options\ntype SecondParam<T extends [any] | [any, any]> = T extends [\n  any,\n  infer S\n]\n  ? S\n  : unknown\n\nexport type PluginOpts<\n  P extends ((t: TestBase, opts: any) => any)[]\n> = P extends [\n  infer H extends (t: TestBase, opts: any) => any,\n  ...infer T extends ((t: TestBase, opts: any) => any)[]\n]\n  ? SecondParam<Parameters<H>> & PluginOpts<T>\n  : {}\n\nexport type TestOpts = TestBaseOpts & PluginOpts<PluginSet>\n\nlet plugins_: PluginSet\n\n//{{PLUGINS CODE START}}\n// const plugins = () => {\n//   if (plugins_) return plugins_\n//   return (plugins_ = [])\n// }\n// type PluginSet = (TapPlugin<any> | TapPlugin<any, TestBaseOpts>)[]\nconst plugins = () => {\n  if (plugins_) return plugins_\n  return (plugins_ = [\n    Plugin_after.plugin,\n    Plugin_afterEach.plugin,\n    Plugin_asserts.plugin,\n    Plugin_before.plugin,\n    Plugin_beforeEach.plugin,\n    Plugin_filter.plugin,\n    Plugin_fixture.plugin,\n    Plugin_intercept.plugin,\n    Plugin_mock.plugin,\n    Plugin_snapshot.plugin,\n    Plugin_spawn.plugin,\n    Plugin_stdin.plugin,\n    Plugin_typescript.plugin,\n    Plugin_worker.plugin,\n  ])\n}\n\ntype PluginSet = [\n  typeof Plugin_after.plugin,\n  typeof Plugin_afterEach.plugin,\n  typeof Plugin_asserts.plugin,\n  typeof Plugin_before.plugin,\n  typeof Plugin_beforeEach.plugin,\n  typeof Plugin_filter.plugin,\n  typeof Plugin_fixture.plugin,\n  typeof Plugin_intercept.plugin,\n  typeof Plugin_mock.plugin,\n  typeof Plugin_snapshot.plugin,\n  typeof Plugin_spawn.plugin,\n  typeof Plugin_stdin.plugin,\n  typeof Plugin_typescript.plugin,\n  typeof Plugin_worker.plugin,\n]\n//{{PLUGINS CODE END}}\n\n//{{PLUGINS CONFIG START}}\n// // just referenced to keep prettier/tslint happy\n// /* c8 ignore start */\n// isConfigOption\n// const c = <T extends ConfigSet>(j: Jack<T>) => j\n// c\n// /* c8 ignore stop */\nexport const config = <C extends ConfigSet>(jack: Jack<C>) => {\n  const config_Plugin_filter_0 = Plugin_filter.config[\"only\"]\n  if (!isConfigOption(config_Plugin_filter_0, \"boolean\", false)) {\n    throw new Error(\"Invalid config option 'only' defined in plugin: '@tapjs/filter'\")\n  }\n  const config_Plugin_filter_1 = Plugin_filter.config[\"grep\"]\n  if (!isConfigOption(config_Plugin_filter_1, \"string\", true)) {\n    throw new Error(\"Invalid config option 'grep' defined in plugin: '@tapjs/filter'\")\n  }\n  const config_Plugin_filter_2 = Plugin_filter.config[\"invert\"]\n  if (!isConfigOption(config_Plugin_filter_2, \"boolean\", false)) {\n    throw new Error(\"Invalid config option 'invert' defined in plugin: '@tapjs/filter'\")\n  }\n  const config_Plugin_filter_3 = Plugin_filter.config[\"no-invert\"]\n  if (!isConfigOption(config_Plugin_filter_3, \"boolean\", false)) {\n    throw new Error(\"Invalid config option 'no-invert' defined in plugin: '@tapjs/filter'\")\n  }\n  const config_Plugin_fixture_0 = Plugin_fixture.config[\"save-fixture\"]\n  if (!isConfigOption(config_Plugin_fixture_0, \"boolean\", false)) {\n    throw new Error(\"Invalid config option 'save-fixture' defined in plugin: '@tapjs/fixture'\")\n  }\n  const config_Plugin_snapshot_0 = Plugin_snapshot.config[\"snapshot\"]\n  if (!isConfigOption(config_Plugin_snapshot_0, \"boolean\", false)) {\n    throw new Error(\"Invalid config option 'snapshot' defined in plugin: '@tapjs/snapshot'\")\n  }\n  const config_Plugin_typescript_0 = Plugin_typescript.config[\"typecheck\"]\n  if (!isConfigOption(config_Plugin_typescript_0, \"boolean\", false)) {\n    throw new Error(\"Invalid config option 'typecheck' defined in plugin: '@tapjs/typescript'\")\n  }\n  return jack\n    .heading(\"From plugin: @tapjs/filter\")\n    .flag({ \"only\": config_Plugin_filter_0 })\n    .optList({ \"grep\": config_Plugin_filter_1 })\n    .flag({ \"invert\": config_Plugin_filter_2 })\n    .flag({ \"no-invert\": config_Plugin_filter_3 })\n    .heading(\"From plugin: @tapjs/fixture\")\n    .flag({ \"save-fixture\": config_Plugin_fixture_0 })\n    .heading(\"From plugin: @tapjs/snapshot\")\n    .flag({ \"snapshot\": config_Plugin_snapshot_0 })\n    .heading(\"From plugin: @tapjs/typescript\")\n    .flag({ \"typecheck\": config_Plugin_typescript_0 })\n}\n//{{PLUGINS CONFIG END}}\n\n//{{LOADERS START}}\n// export const loaders = []\nconst preloaders = new Set<string>([\n  \"ts-node/esm\"\n])\n\nexport const loaders: string[] = [\n  \"@tapjs/mock/loader\",\n  \"ts-node/esm\"\n].sort(\n  (a, b) => preloaders.has(a) ? -1 : preloaders.has(b) ? 1 : 0\n)\n//{{LOADERS END}}\n\n//{{PLUGIN SIGNATURE START}}\n// export const signature = ''\nexport const signature = `@tapjs/after\n@tapjs/after-each\n@tapjs/asserts\n@tapjs/before\n@tapjs/before-each\n@tapjs/filter\n@tapjs/fixture\n@tapjs/intercept\n@tapjs/mock\n@tapjs/snapshot\n@tapjs/spawn\n@tapjs/stdin\n@tapjs/typescript\n@tapjs/worker`\n//{{PLUGIN SIGNATURE END}}\n\ntype TTest<P extends PluginSet = PluginSet> = TestBase &\n  PluginResult<P>\n\n// Condense to interface so the inline doc isn't overwhelming\nexport interface BuiltPlugins extends PluginResult<PluginSet> {}\n\nconst applyPlugins = <\n  Ext extends BuiltPlugins,\n  Opts extends TestOpts\n>(\n  base: Test<Ext, Opts>,\n  plugs: (TapPlugin<any, Opts> | TapPlugin<any>)[] = plugins() as (\n    | TapPlugin<any>\n    | TapPlugin<any, Opts>\n  )[]\n): Test<Ext, Opts> & Ext => {\n  const ext: Plug<Opts>[] = plugs\n    // typecast in case we have *only* option-less plugins.\n    .map(p =>\n      (p as TapPlugin<Plug<Opts>, TestBaseOpts>)(base, base.options)\n    )\n    .concat(base)\n  const getCache = new Map<any, any>()\n  // extend the proxy with Object.create, and then set the toStringTag\n  // to 'Test', so we don't get stack frames like `Proxy.<anonymous>`\n  const t = Object.create(\n    new Proxy(base, {\n      has(_, p) {\n        for (const t of ext) {\n          if (Reflect.has(t, p)) return true\n        }\n        return false\n      },\n      ownKeys() {\n        const k: PlugKeys[] = []\n        for (const t of ext) {\n          const keys = Reflect.ownKeys(t) as PlugKeys[]\n          k.push(...keys)\n        }\n        return [...new Set(k)]\n      },\n      set(_, p, v) {\n        // check to see if there's any setters, and if so, set it there\n        // otherwise, just set on the base\n        let didSet = false\n        if (getCache.has(p)) getCache.delete(p)\n        for (const t of ext) {\n          let o: Object | null = t\n          while (o) {\n            // assign to the all plugs that can receive it\n            const prop = Reflect.getOwnPropertyDescriptor(o, p)\n            if (prop) {\n              if (prop.set || prop.writable) {\n                //@ts-ignore\n                t[p] = v\n                didSet = true\n              }\n              break\n            }\n            o = Reflect.getPrototypeOf(o)\n          }\n        }\n        if (!didSet) {\n          // if nothing has that field, assign to the base\n          //@ts-ignore\n          base[p] = v\n        }\n        return true\n      },\n      get(_, p) {\n        if (p === 'parent') {\n          return base.parent?.t\n        }\n        // cache get results so t.blah === t.blah\n        // we only cache functions, so that getters aren't memoized\n        // Of course, a getter that returns a function will be broken,\n        // at least when accessed from outside the plugin, but that's\n        // a pretty narrow caveat, and easily documented.\n        if (getCache.has(p)) return getCache.get(p)\n        for (const plug of ext) {\n          if (p in plug) {\n            //@ts-ignore\n            const v = plug[p]\n            // Functions need special handling so that they report\n            // the correct toString and are called on the correct object\n            // Otherwise attempting to access #private props will fail.\n            if (typeof v === 'function') {\n              const vv: Function = copyFunction<Ext, Opts>(t, plug, v)\n              getCache.set(p, vv)\n              return vv\n            } else {\n              return v\n            }\n          }\n        }\n      },\n    })\n  )\n  Object.defineProperty(t, Symbol.toStringTag, {\n    value: 'Test',\n  })\n  // assign a reference to the extended Test for use in plugin at run-time\n  Object.assign(base, { t })\n  // put the .t self-ref and plugin inspection on top of the stack\n  ext.unshift({\n    t,\n    get pluginLoaded() {\n      return <T extends any = any>(\n        plugin: (t: any, opts?: any) => T\n      ) => {\n        return plugs.includes(plugin)\n      }\n    },\n    get plugins() {\n      return [...plugs]\n    },\n  })\n  return t\n}\n\nconst kPluginSet = Symbol('@tapjs/test construction plugin set')\nconst kClass = Symbol('@tapjs/test construction class')\ntype PluginExtensionOption<\n  E extends BuiltPlugins = BuiltPlugins,\n  O extends TestOpts = TestOpts\n> = {\n  [kPluginSet]: TapPlugin<any, O>[]\n  [kClass]?: typeof Test<E, O>\n}\n\nexport interface Test<\n  Ext extends BuiltPlugins = BuiltPlugins,\n  Opts extends TestOpts = TestOpts\n> extends TTest {\n  end(): this\n  plan(n: number, comment?: string): void\n}\n\nexport class Test<\n    Ext extends BuiltPlugins = BuiltPlugins,\n    Opts extends TestOpts = TestOpts\n  >\n  extends TestBase\n  implements TTest\n{\n  #Class: typeof Test<Ext, Opts>\n  #pluginSet: TapPlugin<any, Opts>[]\n\n  constructor(\n    opts: Opts,\n    __INTERNAL: PluginExtensionOption<Ext, Opts> = {\n      [kPluginSet]: plugins() as TapPlugin<any, Opts>[],\n      [kClass]: Test,\n    }\n  ) {\n    super(opts)\n    this.#Class = __INTERNAL[kClass] as typeof Test<Ext, Opts>\n    const pluginSet = __INTERNAL[kPluginSet]\n    this.#pluginSet = pluginSet\n    type T = Test<Ext, Opts> & Ext\n    // need to ignore this because it's a ctor that returns a value.\n    /* c8 ignore start */\n    return applyPlugins(this, pluginSet) as T\n  }\n  /* c8 ignore stop */\n\n  /* c8 ignore start */\n  get [Symbol.toStringTag]() {\n    return 'Test'\n  }\n  /* c8 ignore stop */\n\n  applyPlugin<B extends Object, O extends unknown = unknown>(\n    plugin: TapPlugin<B, O>\n  ): Test<Ext & B, Opts & O> & Ext & B {\n    if (this.printedOutput) {\n      throw new Error(\n        'Plugins must be applied prior to any test output'\n      )\n    }\n\n    if (this.#pluginSet.includes(plugin as TapPlugin<B, Opts>)) {\n      throw new Error('Plugin already applied')\n    }\n\n    type ExtExt = Ext & B\n    type ExtOpts = Opts & O\n    const p = plugin as TapPlugin<B, ExtOpts>\n    const pluginSetExtended: TapPlugin<any, ExtOpts>[] = (\n      this.#pluginSet as TapPlugin<any, ExtOpts>[]\n    ).concat([p])\n    const extended = this as unknown as Test<ExtExt, ExtOpts> & ExtExt\n    class TestExtended extends Test<ExtExt, ExtOpts> {\n      constructor(\n        opts: ExtOpts,\n        __INTERNAL: PluginExtensionOption<ExtExt, ExtOpts> = {\n          [kPluginSet]: pluginSetExtended,\n          [kClass]: TestExtended,\n        }\n      ) {\n        super(opts, __INTERNAL)\n      }\n    }\n    extended.#pluginSet = pluginSetExtended\n    extended.#Class = TestExtended\n    return applyPlugins<ExtExt, ExtOpts>(extended, pluginSetExtended)\n  }\n\n  // actually no way to get at this, since we always call applyPlugins in the\n  // Test constructor, so there's always *something* here, but it nevertheless\n  // seems sensible to have some stubs in place. At least, they are relevant\n  // for establishing the typed interface.\n  pluginLoaded<T extends any = any>(\n    plugin: (t: any, opts?: any) => T\n  ): this is TestBase & T {\n    plugin\n    return false\n  }\n  get plugins(): TapPlugin<any, Opts>[] {\n    return []\n  }\n\n  test(\n    name: string,\n    extra: Opts,\n    cb: (t: Test<Ext, Opts> & Ext) => any\n  ): PromiseWithSubtest<Test<Ext, Opts> & Ext>\n  test(\n    name: string,\n    cb: (t: Test<Ext, Opts> & Ext) => any\n  ): PromiseWithSubtest<Test<Ext, Opts> & Ext>\n  test(\n    extra: Opts,\n    cb: (t: Test<Ext, Opts> & Ext) => any\n  ): PromiseWithSubtest<Test<Ext, Opts> & Ext>\n  test(\n    cb: (t: Test<Ext, Opts> & Ext) => any\n  ): PromiseWithSubtest<Test<Ext, Opts> & Ext>\n  test(\n    ...args: TestArgs<Test<Ext, Opts> & Ext, Opts>\n  ): PromiseWithSubtest<Test<Ext, Opts> & Ext> {\n    const extra = parseTestArgs<Test<Ext, Opts> & Ext, Opts>(...args)\n    return this.sub(\n      this.#Class,\n      extra,\n      this.test\n    ) as PromiseWithSubtest<Test<Ext, Opts> & Ext>\n  }\n\n  todo(\n    name: string,\n    extra: Opts,\n    cb: (t: Test<Ext, Opts> & Ext) => any\n  ): PromiseWithSubtest<Test<Ext, Opts> & Ext>\n  todo(\n    name: string,\n    cb: (t: Test<Ext, Opts> & Ext) => any\n  ): PromiseWithSubtest<Test<Ext, Opts> & Ext>\n  todo(\n    extra: Opts,\n    cb: (t: Test<Ext, Opts> & Ext) => any\n  ): PromiseWithSubtest<Test<Ext, Opts> & Ext>\n  todo(\n    cb: (t: Test<Ext, Opts> & Ext) => any\n  ): PromiseWithSubtest<Test<Ext, Opts> & Ext>\n  todo(\n    ...args: TestArgs<Test<Ext, Opts> & Ext, Opts>\n  ): PromiseWithSubtest<Test<Ext, Opts> & Ext> {\n    const extra = parseTestArgs<Test<Ext, Opts> & Ext, Opts>(...args)\n    extra.todo = true\n    return this.sub(\n      this.#Class,\n      extra,\n      this.todo\n    ) as PromiseWithSubtest<Test<Ext, Opts> & Ext>\n  }\n\n  skip(\n    name: string,\n    extra: Opts,\n    cb: (t: Test<Ext, Opts> & Ext) => any\n  ): PromiseWithSubtest<Test<Ext, Opts> & Ext>\n  skip(\n    name: string,\n    cb: (t: Test<Ext, Opts> & Ext) => any\n  ): PromiseWithSubtest<Test<Ext, Opts> & Ext>\n  skip(\n    extra: Opts,\n    cb: (t: Test<Ext, Opts> & Ext) => any\n  ): PromiseWithSubtest<Test<Ext, Opts> & Ext>\n  skip(\n    cb: (t: Test<Ext, Opts> & Ext) => any\n  ): PromiseWithSubtest<Test<Ext, Opts> & Ext>\n  skip(\n    ...args: TestArgs<Test<Ext, Opts> & Ext, Opts>\n  ): PromiseWithSubtest<Test<Ext, Opts> & Ext> {\n    const extra = parseTestArgs<Test<Ext, Opts> & Ext, Opts>(...args)\n    extra.skip = true\n    return this.sub(\n      this.#Class,\n      extra,\n      this.skip\n    ) as PromiseWithSubtest<Test<Ext, Opts> & Ext>\n  }\n}\n"]}