// This file is automatically generated, please do not edit
import { parseTestArgs, TestBase, } from '@tapjs/core';
const copyToString = (v) => ({
    toString: Object.assign(() => v.toString(), {
        toString: () => 'function toString() { [native code] }',
    }),
});
import Plugin_stdin_0 from "@tapjs/core/plugin/stdin.js";
import Plugin_spawn_1 from "@tapjs/core/plugin/spawn.js";
import Plugin_beforeEach_2 from "@tapjs/core/plugin/before-each.js";
import Plugin_afterEach_3 from "@tapjs/core/plugin/after-each.js";
const plugins = [
    Plugin_stdin_0,
    Plugin_spawn_1,
    Plugin_beforeEach_2,
    Plugin_afterEach_3,
];
const applyPlugins = (base) => {
    const ext = [
        ...plugins.map(p => p(base, base.options)),
        base,
    ];
    const getCache = new Map();
    const t = new Proxy(base, {
        has(_, p) {
            for (const t of ext) {
                if (Reflect.has(t, p))
                    return true;
            }
            return false;
        },
        ownKeys() {
            const k = [];
            for (const t of ext) {
                const keys = Reflect.ownKeys(t);
                k.push(...keys);
            }
            return [...new Set(k)];
        },
        getOwnPropertyDescriptor(_, p) {
            for (const t of ext) {
                const prop = Reflect.getOwnPropertyDescriptor(t, p);
                if (prop)
                    return prop;
            }
            return undefined;
        },
        set(_, p, v) {
            // check to see if there's any setters, and if so, set it there
            // otherwise, just set on the base
            for (const t of ext) {
                let o = t;
                while (o) {
                    if (Reflect.getOwnPropertyDescriptor(o, p)?.set) {
                        //@ts-ignore
                        t[p] = v;
                        return true;
                    }
                    o = Reflect.getPrototypeOf(o);
                }
            }
            //@ts-ignore
            base[p] = v;
            return true;
        },
        get(_, p) {
            // cache get results so t.blah === t.blah
            // we only cache functions, so that getters aren't memoized
            // Of course, a getter that returns a function will be broken,
            // at least when accessed from outside the plugin, but that's
            // a pretty narrow caveat, and easily documented.
            if (getCache.has(p))
                return getCache.get(p);
            for (const plug of ext) {
                if (p in plug) {
                    //@ts-ignore
                    const v = plug[p];
                    // Functions need special handling so that they report
                    // the correct toString and are called on the correct object
                    // Otherwise attempting to access #private props will fail.
                    if (typeof v === 'function') {
                        const f = function (...args) {
                            const thisArg = this === t ? plug : this;
                            return v.apply(thisArg, args);
                        };
                        const vv = Object.assign(f, copyToString(v));
                        const nameProp = Reflect.getOwnPropertyDescriptor(v, 'name');
                        if (nameProp) {
                            Reflect.defineProperty(f, 'name', nameProp);
                        }
                        getCache.set(p, vv);
                        return vv;
                    }
                    else {
                        getCache.set(p, v);
                        return v;
                    }
                }
            }
        },
    });
    Object.assign(base, { t });
    ext.unshift({ t });
    return t;
};
export class Test extends TestBase {
    constructor(opts) {
        super(opts);
        return applyPlugins(this);
    }
    test(...args) {
        const extra = parseTestArgs(...args);
        extra.todo = true;
        return this.sub(Test, extra, this.test);
    }
    todo(...args) {
        const extra = parseTestArgs(...args);
        extra.todo = true;
        return this.sub(Test, extra, this.todo);
    }
    skip(...args) {
        const extra = parseTestArgs(...args);
        extra.skip = true;
        return this.sub(Test, extra, this.skip);
    }
}
//# sourceMappingURL=index.js.map