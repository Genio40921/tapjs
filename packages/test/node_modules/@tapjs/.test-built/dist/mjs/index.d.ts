import { TestArgs, TestBase, TestBaseOpts } from '@tapjs/core';
import { FinalResults } from 'tap-parser';
import Plugin_stdin_0 from "@tapjs/core/plugin/stdin.js";
import Plugin_spawn_1 from "@tapjs/core/plugin/spawn.js";
import Plugin_beforeEach_2 from "@tapjs/core/plugin/before-each.js";
import Plugin_afterEach_3 from "@tapjs/core/plugin/after-each.js";
export interface ClassOf<T> {
    new (opts: any): T;
}
type SecondParam<T extends [any] | [any, any], Fallback extends unknown = unknown> = T extends [any, any] ? T[1] : Fallback;
type Plugin_stdin_0_Opts = SecondParam<Parameters<typeof Plugin_stdin_0>, TestBaseOpts>;
type Plugin_spawn_1_Opts = SecondParam<Parameters<typeof Plugin_spawn_1>, TestBaseOpts>;
type Plugin_beforeEach_2_Opts = SecondParam<Parameters<typeof Plugin_beforeEach_2>, TestBaseOpts>;
type Plugin_afterEach_3_Opts = SecondParam<Parameters<typeof Plugin_afterEach_3>, TestBaseOpts>;
type TestOpts = TestBaseOpts & Plugin_stdin_0_Opts & Plugin_spawn_1_Opts & Plugin_beforeEach_2_Opts & Plugin_afterEach_3_Opts;
type TTest = TestBase & ReturnType<typeof Plugin_stdin_0> & ReturnType<typeof Plugin_spawn_1> & ReturnType<typeof Plugin_beforeEach_2> & ReturnType<typeof Plugin_afterEach_3>;
export interface Test extends TTest {
    end(): this;
    t: this;
    test(name: string, extra: {
        [k: string]: any;
    }, cb?: (t: Test) => any): Promise<FinalResults | null>;
    test(name: string, cb?: (t: Test) => any): Promise<FinalResults | null>;
    test(extra: {
        [k: string]: any;
    }, cb?: (t: Test) => any): Promise<FinalResults | null>;
    test(cb?: (t: Test) => any): Promise<FinalResults | null>;
    test(...args: TestArgs<Test>): Promise<FinalResults | null>;
    todo(name: string, extra: {
        [k: string]: any;
    }, cb?: (t: Test) => any): Promise<FinalResults | null>;
    todo(name: string, cb?: (t: Test) => any): Promise<FinalResults | null>;
    todo(extra: {
        [k: string]: any;
    }, cb?: (t: Test) => any): Promise<FinalResults | null>;
    todo(cb?: (t: Test) => any): Promise<FinalResults | null>;
    todo(...args: TestArgs<Test>): Promise<FinalResults | null>;
    skip(name: string, extra: {
        [k: string]: any;
    }, cb?: (t: Test) => any): Promise<FinalResults | null>;
    skip(name: string, cb?: (t: Test) => any): Promise<FinalResults | null>;
    skip(extra: {
        [k: string]: any;
    }, cb?: (t: Test) => any): Promise<FinalResults | null>;
    skip(cb?: (t: Test) => any): Promise<FinalResults | null>;
    skip(...args: TestArgs<Test>): Promise<FinalResults | null>;
}
export declare class Test extends TestBase {
    constructor(opts: TestOpts);
    test(name: string, extra: {
        [k: string]: any;
    }, cb?: (t: Test) => any): Promise<FinalResults | null>;
    test(name: string, cb?: (t: Test) => any): Promise<FinalResults | null>;
    test(extra: {
        [k: string]: any;
    }, cb?: (t: Test) => any): Promise<FinalResults | null>;
    test(cb?: (t: Test) => any): Promise<FinalResults | null>;
    todo(name: string, extra: {
        [k: string]: any;
    }, cb?: (t: Test) => any): Promise<FinalResults | null>;
    todo(name: string, cb?: (t: Test) => any): Promise<FinalResults | null>;
    todo(extra: {
        [k: string]: any;
    }, cb?: (t: Test) => any): Promise<FinalResults | null>;
    todo(cb?: (t: Test) => any): Promise<FinalResults | null>;
    skip(name: string, extra: {
        [k: string]: any;
    }, cb?: (t: Test) => any): Promise<FinalResults | null>;
    skip(name: string, cb?: (t: Test) => any): Promise<FinalResults | null>;
    skip(extra: {
        [k: string]: any;
    }, cb?: (t: Test) => any): Promise<FinalResults | null>;
    skip(cb?: (t: Test) => any): Promise<FinalResults | null>;
}
export {};
//# sourceMappingURL=index.d.ts.map